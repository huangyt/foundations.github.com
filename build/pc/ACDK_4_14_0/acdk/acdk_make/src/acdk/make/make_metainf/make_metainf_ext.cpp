// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../make.h"
#include "../AbstractCppTask.h"
#include "../AbstractTask.h"
#include "../AcdkBinaryTask.h"
#include "../AcdkExeTask.h"
#include "../AcdkLibTask.h"
#include "../AcdkMetainfLibTask.h"
#include "../AcdkProjectTask.h"
#include "../AcdkTestExeTask.h"
#include "../AcdkUnitConfigTask.h"
#include "../ChDir.h"
#include "../CommandLineCompilerTool.h"
#include "../CompileTask.h"
#include "../Config.h"
#include "../CppSourceDependTask.h"
#include "../DirExistsTask.h"
#include "../FileCopyTask.h"
#include "../FileDeleteTask.h"
#include "../FileDependTask.h"
#include "../FileOpTask.h"
#include "../FileSet.h"
#include "../JavaCompileTask.h"
#include "../JobExecuterTask.h"
#include "../JobTask.h"
#include "../LookupFileTask.h"
#include "../make.h"
#include "../MakeProps.h"
#include "../PlattformSelectTask.h"
#include "../ProjectTask.h"
#include "../ScriptExecuteTask.h"
#include "../ShellExecuteTask.h"
#include "../Task.h"
#include "../TaskCfgFile.h"
#include "../TaskInfo.h"
#include "../TaskManager.h"
#include "../TestTask.h"
#include "../ThreadPool.h"
#include "../Tool.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AbstractCppTask_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractCppTask>(length);
}

//static
::acdk::lang::RObject
AbstractCppTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractCppTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractCppTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractCppTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addCompileType_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addCompileType((RString)args[0].getObjectVar());
    else
        This->addCompileType((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addDefine_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addDefine((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->addDefine((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addDefine_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addDefine((RString)args[0].getObjectVar());
    else
        This->addDefine((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addIncludeDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addIncludeDir((RString)args[0].getObjectVar());
    else
        This->addIncludeDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addLib_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addLib((RString)args[0].getObjectVar());
    else
        This->addLib((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addLibraryPath_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addLibraryPath((RString)args[0].getObjectVar());
    else
        This->addLibraryPath((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addModuleConfigTask_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addModuleConfigTask((RString)args[0].getObjectVar());
    else
        This->addModuleConfigTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addSource_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addSource((RString)args[0].getObjectVar());
    else
        This->addSource((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_addSources_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::addSources((RStringArray)args[0].getObjectVar());
    else
        This->addSources((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractCppTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_expandSources_INLRStringArray__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractCppTask::expandSources((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_getCompileCommandLine_INLRProps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractCppTask::getCompileCommandLine((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getCompileCommandLine((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_getHeaderSet_INLRProps__LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractCppTask::getHeaderSet((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getHeaderSet((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_getReleaseTag_INLRProps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractCppTask::getReleaseTag((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getReleaseTag((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_getSourceSet_INLRProps__LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractCppTask::getSourceSet((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getSourceSet((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_getTaskInfo__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractCppTask::getTaskInfo();
    else
        ret = (::acdk::lang::RObject)This->getTaskInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_setBaseDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::setBaseDir((RString)args[0].getObjectVar());
    else
        This->setBaseDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_setObjBaseDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::setObjBaseDir((RString)args[0].getObjectVar());
    else
        This->setObjBaseDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCppTask_method_setupDeps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCppTask::setupDeps((RProps)args[0].getObjectVar());
    else
        This->setupDeps((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractCppTask_fields__defFile_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_defFile, flags);
    else
      This->_defFile = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractCppTask_fields__moduleConfigTasks_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_moduleConfigTasks, flags);
    else
      This->_moduleConfigTasks = (RTaskArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractCppTask_fields__sourceAndHeader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractCppTask* This = dmi_cast<AbstractCppTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sourceAndHeader, flags);
    else
      This->_sourceAndHeader = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractCppTask_fields__defFile = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_defFile", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_fields__defFile_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractCppTask_fields__moduleConfigTasks = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_moduleConfigTasks", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskArray::clazzInfo(),
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_fields__moduleConfigTasks_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractCppTask_fields__sourceAndHeader = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sourceAndHeader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_fields__sourceAndHeader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractCppTask_fields[] = 
{
  &AbstractCppTask_fields__defFile,
  &AbstractCppTask_fields__moduleConfigTasks,
  &AbstractCppTask_fields__sourceAndHeader,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__args[] = 
{
  &AbstractCppTask_methods_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__arg_name,
  &AbstractCppTask_methods_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractCppTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractCppTask::clazzInfo(), // return type
  "_0_AbstractCppTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_k_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addCompileType_INLRString__V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addCompileType_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_addCompileType_INLRString__V_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addCompileType_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addCompileType_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addCompileType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_addCompileType", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addCompileType_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addCompileType_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addCompileType_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addDefine_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addDefine_INLRString_INLRString__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addDefine_INLRString_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_addDefine_INLRString_INLRString__V_arg_key,
  &AbstractCppTask_methods_addDefine_INLRString_INLRString__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addDefine_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addDefine_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addDefine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addDefine", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addDefine_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addDefine_INLRString_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addDefine_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addDefine_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addDefine_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_addDefine_INLRString__V_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addDefine_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addDefine_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addDefine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_addDefine", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addDefine_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addDefine_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addDefine_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addIncludeDir_INLRString__V_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addIncludeDir_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_addIncludeDir_INLRString__V_arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addIncludeDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addIncludeDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addIncludeDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addIncludeDir", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addIncludeDir_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addIncludeDir_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addIncludeDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addLib_INLRString__V_arg_lib = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "lib", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addLib_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_addLib_INLRString__V_arg_lib,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addLib_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addLib_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addLib", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addLib", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addLib_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addLib_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addLib_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addLibraryPath_INLRString__V_arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addLibraryPath_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_addLibraryPath_INLRString__V_arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addLibraryPath_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addLibraryPath_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addLibraryPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_addLibraryPath", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addLibraryPath_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addLibraryPath_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addLibraryPath_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addModuleConfigTask_INLRString__V_arg_taskname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "taskname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addModuleConfigTask_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_addModuleConfigTask_INLRString__V_arg_taskname,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addModuleConfigTask_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addModuleConfigTask_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addModuleConfigTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_addModuleConfigTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addModuleConfigTask_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addModuleConfigTask_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addModuleConfigTask_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addSource_INLRString__V_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addSource_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_addSource_INLRString__V_arg_source,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addSource_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addSource_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addSource", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addSource_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addSource_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addSource_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_addSources_INLRStringArray__V_arg_sources = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sources", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_addSources_INLRStringArray__V_args[] = 
{
  &AbstractCppTask_methods_addSources_INLRStringArray__V_arg_sources,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_addSources_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_addSources_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addSources", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_addSources_INLRStringArray__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_addSources_INLRStringArray__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_addSources_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &AbstractCppTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &AbstractCppTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_execute", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_expandSources_INLRStringArray__LRStringArray__arg_sa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_expandSources_INLRStringArray__LRStringArray__args[] = 
{
  &AbstractCppTask_methods_expandSources_INLRStringArray__LRStringArray__arg_sa,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_expandSources_INLRStringArray__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_expandSources_INLRStringArray__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expandSources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_d_expandSources", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_expandSources_INLRStringArray__LRStringArray__args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_expandSources_INLRStringArray__LRStringArray__exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_expandSources_INLRStringArray__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_getCompileCommandLine_INLRProps__LRString__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_getCompileCommandLine_INLRProps__LRString__args[] = 
{
  &AbstractCppTask_methods_getCompileCommandLine_INLRProps__LRString__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_getCompileCommandLine_INLRProps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_getCompileCommandLine_INLRProps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCompileCommandLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_i_getCompileCommandLine", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_getCompileCommandLine_INLRProps__LRString__args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_getCompileCommandLine_INLRProps__LRString__exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_getCompileCommandLine_INLRProps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_getHeaderSet_INLRProps__LRFileSet__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_getHeaderSet_INLRProps__LRFileSet__args[] = 
{
  &AbstractCppTask_methods_getHeaderSet_INLRProps__LRFileSet__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_getHeaderSet_INLRProps__LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_getHeaderSet_INLRProps__LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(), // return type
  "_a_getHeaderSet", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_getHeaderSet_INLRProps__LRFileSet__args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_getHeaderSet_INLRProps__LRFileSet__exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_getHeaderSet_INLRProps__LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_getReleaseTag_INLRProps__LRString__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_getReleaseTag_INLRProps__LRString__args[] = 
{
  &AbstractCppTask_methods_getReleaseTag_INLRProps__LRString__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_getReleaseTag_INLRProps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_getReleaseTag_INLRProps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReleaseTag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getReleaseTag", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_getReleaseTag_INLRProps__LRString__args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_getReleaseTag_INLRProps__LRString__exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_getReleaseTag_INLRProps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_getSourceSet_INLRProps__LRFileSet__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_getSourceSet_INLRProps__LRFileSet__args[] = 
{
  &AbstractCppTask_methods_getSourceSet_INLRProps__LRFileSet__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_getSourceSet_INLRProps__LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_getSourceSet_INLRProps__LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSourceSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(), // return type
  "_9_getSourceSet", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_getSourceSet_INLRProps__LRFileSet__args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_getSourceSet_INLRProps__LRFileSet__exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_getSourceSet_INLRProps__LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_getTaskInfo__LRTaskInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_getTaskInfo__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_getTaskInfo__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskInfo::clazzInfo(), // return type
  "_1_getTaskInfo", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_getTaskInfo__LRTaskInfo__args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_getTaskInfo__LRTaskInfo__exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_getTaskInfo__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_setBaseDir_INLRString__V_arg_basedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "basedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_setBaseDir_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_setBaseDir_INLRString__V_arg_basedir,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_setBaseDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_setBaseDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBaseDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setBaseDir", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_setBaseDir_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_setBaseDir_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_setBaseDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_setObjBaseDir_INLRString__V_arg_basedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "basedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_setObjBaseDir_INLRString__V_args[] = 
{
  &AbstractCppTask_methods_setObjBaseDir_INLRString__V_arg_basedir,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_setObjBaseDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_setObjBaseDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObjBaseDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setObjBaseDir", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_setObjBaseDir_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_setObjBaseDir_INLRString__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_setObjBaseDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCppTask_methods_setupDeps_INLRProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCppTask_methods_setupDeps_INLRProps__V_args[] = 
{
  &AbstractCppTask_methods_setupDeps_INLRProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask_methods_setupDeps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCppTask_method_setupDeps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setupDeps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setupDeps", // alternative name of method
  -1, // altlabelHashCode
  AbstractCppTask_methods_setupDeps_INLRProps__V_args, // the arguments
  0, //arguments count
  AbstractCppTask_methods_setupDeps_INLRProps__V_exceptions, // the declared exceptions
  AbstractCppTask_MetainfoWrapper::AbstractCppTask_method_setupDeps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractCppTask_methods[] = 
{
  &AbstractCppTask_method_AbstractCppTask_INLRString_INLRString__LRAbstractCppTask_,
  &AbstractCppTask_method_GetClass__L_acdk_lang_RClass_,
  &AbstractCppTask_method_addCompileType_INLRString__V,
  &AbstractCppTask_method_addDefine_INLRString_INLRString__V,
  &AbstractCppTask_method_addDefine_INLRString__V,
  &AbstractCppTask_method_addIncludeDir_INLRString__V,
  &AbstractCppTask_method_addLib_INLRString__V,
  &AbstractCppTask_method_addLibraryPath_INLRString__V,
  &AbstractCppTask_method_addModuleConfigTask_INLRString__V,
  &AbstractCppTask_method_addSource_INLRString__V,
  &AbstractCppTask_method_addSources_INLRStringArray__V,
  &AbstractCppTask_method_execute_INLRString_INLRProps__Z,
  &AbstractCppTask_method_expandSources_INLRStringArray__LRStringArray_,
  &AbstractCppTask_method_getCompileCommandLine_INLRProps__LRString_,
  &AbstractCppTask_method_getHeaderSet_INLRProps__LRFileSet_,
  &AbstractCppTask_method_getReleaseTag_INLRProps__LRString_,
  &AbstractCppTask_method_getSourceSet_INLRProps__LRFileSet_,
  &AbstractCppTask_method_getTaskInfo__LRTaskInfo_,
  &AbstractCppTask_method_setBaseDir_INLRString__V,
  &AbstractCppTask_method_setObjBaseDir_INLRString__V,
  &AbstractCppTask_method_setupDeps_INLRProps__V,
  0
};


struct AbstractCppTask_MetaInfoInitializer
{  AbstractCppTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractCppTask::clazzInfo();
    ci->fields =  _AbstractCppTask_fields;
    ci->methods =  _AbstractCppTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractCppTask_MetaInfoInitializer AbstractCppTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AbstractTask_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractTask>(length);
}

//static
::acdk::lang::RObject
AbstractTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_AbstractTask__LRAbstractTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractTask();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RTaskArray)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_addDependingTask_INLRTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractTask::addDependingTask((RTask)args[0].getObjectVar());
    else
        This->addDependingTask((RTask)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_addSubTask_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractTask::addSubTask((RString)args[0].getObjectVar());
    else
        This->addSubTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_addSubTask_INLRTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractTask::addSubTask((RTask)args[0].getObjectVar());
    else
        This->addSubTask((RTask)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_getChilds__LRTaskArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractTask::getChilds();
    else
        ret = (::acdk::lang::RObject)This->getChilds();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractTask::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_getTaskInfo__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractTask::getTaskInfo();
    else
        ret = (::acdk::lang::RObject)This->getTaskInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_getTaskProps__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractTask::getTaskProps();
    else
        ret = (::acdk::lang::RObject)This->getTaskProps();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_registerTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractTask::registerTask();
    else
        This->registerTask();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_registerTask_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractTask::registerTask((RString)args[0].getObjectVar());
    else
        This->registerTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTask_method_setName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractTask::setName((RString)args[0].getObjectVar());
    else
        This->setName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTask_fields__childs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_childs, flags);
    else
      This->_childs = (RTaskArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTask_fields__description_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_description, flags);
    else
      This->_description = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTask_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTask_fields__targetName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_targetName, flags);
    else
      This->_targetName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTask_fields__taskInfo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_taskInfo, flags);
    else
      This->_taskInfo = (RTaskInfo)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTask_fields__taskProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_taskProps, flags);
    else
      This->_taskProps = (RProps)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTask_fields__workingDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTask* This = dmi_cast<AbstractTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_workingDir, flags);
    else
      This->_workingDir = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTask_fields__childs = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_childs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskArray::clazzInfo(),
  AbstractTask_MetainfoWrapper::AbstractTask_fields__childs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTask_fields__description = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_description", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractTask_MetainfoWrapper::AbstractTask_fields__description_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTask_fields__name = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractTask_MetainfoWrapper::AbstractTask_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTask_fields__targetName = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_targetName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractTask_MetainfoWrapper::AbstractTask_fields__targetName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTask_fields__taskInfo = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_taskInfo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskInfo::clazzInfo(),
  AbstractTask_MetainfoWrapper::AbstractTask_fields__taskInfo_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTask_fields__taskProps = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_taskProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  AbstractTask_MetainfoWrapper::AbstractTask_fields__taskProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTask_fields__workingDir = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_workingDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractTask_MetainfoWrapper::AbstractTask_fields__workingDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractTask_fields[] = 
{
  &AbstractTask_fields__childs,
  &AbstractTask_fields__description,
  &AbstractTask_fields__name,
  &AbstractTask_fields__targetName,
  &AbstractTask_fields__taskInfo,
  &AbstractTask_fields__taskProps,
  &AbstractTask_fields__workingDir,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_AbstractTask__LRAbstractTask__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_AbstractTask__LRAbstractTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_AbstractTask__LRAbstractTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractTask::clazzInfo(), // return type
  "_0_AbstractTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_AbstractTask__LRAbstractTask__args, // the arguments
  0, //arguments count
  AbstractTask_methods_AbstractTask__LRAbstractTask__exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_AbstractTask__LRAbstractTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__arg_descr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "descr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__args[] = 
{
  &AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__arg_name,
  &AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__arg_target,
  &AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__arg_descr,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractTask::clazzInfo(), // return type
  "_1_AbstractTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__args, // the arguments
  0, //arguments count
  AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__arg_descr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "descr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__arg_childs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "childs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__args[] = 
{
  &AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__arg_name,
  &AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__arg_descr,
  &AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__arg_childs,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractTask::clazzInfo(), // return type
  "_2_AbstractTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__args, // the arguments
  0, //arguments count
  AbstractTask_methods_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_addDependingTask_INLRTask__V_arg_task = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "task", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_addDependingTask_INLRTask__V_args[] = 
{
  &AbstractTask_methods_addDependingTask_INLRTask__V_arg_task,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_addDependingTask_INLRTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_addDependingTask_INLRTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addDependingTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addDependingTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_addDependingTask_INLRTask__V_args, // the arguments
  0, //arguments count
  AbstractTask_methods_addDependingTask_INLRTask__V_exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_addDependingTask_INLRTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_addSubTask_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_addSubTask_INLRString__V_args[] = 
{
  &AbstractTask_methods_addSubTask_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_addSubTask_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_addSubTask_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSubTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_addSubTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_addSubTask_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractTask_methods_addSubTask_INLRString__V_exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_addSubTask_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_addSubTask_INLRTask__V_arg_subtask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "subtask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_addSubTask_INLRTask__V_args[] = 
{
  &AbstractTask_methods_addSubTask_INLRTask__V_arg_subtask,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_addSubTask_INLRTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_addSubTask_INLRTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSubTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_addSubTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_addSubTask_INLRTask__V_args, // the arguments
  0, //arguments count
  AbstractTask_methods_addSubTask_INLRTask__V_exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_addSubTask_INLRTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &AbstractTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &AbstractTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_execute", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  AbstractTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_getChilds__LRTaskArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_getChilds__LRTaskArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_getChilds__LRTaskArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChilds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskArray::clazzInfo(), // return type
  "_b_getChilds", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_getChilds__LRTaskArray__args, // the arguments
  0, //arguments count
  AbstractTask_methods_getChilds__LRTaskArray__exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_getChilds__LRTaskArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getName", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_getName__LRString__args, // the arguments
  0, //arguments count
  AbstractTask_methods_getName__LRString__exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_getTaskInfo__LRTaskInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_getTaskInfo__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_getTaskInfo__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskInfo::clazzInfo(), // return type
  "_5_getTaskInfo", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_getTaskInfo__LRTaskInfo__args, // the arguments
  0, //arguments count
  AbstractTask_methods_getTaskInfo__LRTaskInfo__exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_getTaskInfo__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_getTaskProps__LRProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_getTaskProps__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_getTaskProps__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_c_getTaskProps", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_getTaskProps__LRProps__args, // the arguments
  0, //arguments count
  AbstractTask_methods_getTaskProps__LRProps__exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_getTaskProps__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_registerTask__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_registerTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_registerTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_registerTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_registerTask__V_args, // the arguments
  0, //arguments count
  AbstractTask_methods_registerTask__V_exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_registerTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_registerTask_INLRString__V_arg_alt_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "alt_name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_registerTask_INLRString__V_args[] = 
{
  &AbstractTask_methods_registerTask_INLRString__V_arg_alt_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_registerTask_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_registerTask_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_registerTask", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_registerTask_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractTask_methods_registerTask_INLRString__V_exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_registerTask_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTask_methods_setName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTask_methods_setName_INLRString__V_args[] = 
{
  &AbstractTask_methods_setName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask_methods_setName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTask_method_setName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setName", // alternative name of method
  -1, // altlabelHashCode
  AbstractTask_methods_setName_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractTask_methods_setName_INLRString__V_exceptions, // the declared exceptions
  AbstractTask_MetainfoWrapper::AbstractTask_method_setName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractTask_methods[] = 
{
  &AbstractTask_method_AbstractTask__LRAbstractTask_,
  &AbstractTask_method_AbstractTask_INLRString_INLRString_INLRString__LRAbstractTask_,
  &AbstractTask_method_AbstractTask_INLRString_INLRString_INLRTaskArray__LRAbstractTask_,
  &AbstractTask_method_GetClass__L_acdk_lang_RClass_,
  &AbstractTask_method_addDependingTask_INLRTask__V,
  &AbstractTask_method_addSubTask_INLRString__V,
  &AbstractTask_method_addSubTask_INLRTask__V,
  &AbstractTask_method_execute_INLRString_INLRProps__Z,
  &AbstractTask_method_getChilds__LRTaskArray_,
  &AbstractTask_method_getName__LRString_,
  &AbstractTask_method_getTaskInfo__LRTaskInfo_,
  &AbstractTask_method_getTaskProps__LRProps_,
  &AbstractTask_method_registerTask__V,
  &AbstractTask_method_registerTask_INLRString__V,
  &AbstractTask_method_setName_INLRString__V,
  0
};


struct AbstractTask_MetaInfoInitializer
{  AbstractTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractTask::clazzInfo();
    ci->fields =  _AbstractTask_fields;
    ci->methods =  _AbstractTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractTask_MetaInfoInitializer AbstractTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AcdkBinaryTask_create_array(int length)
{
  return new ObjectArrayImpl<RAcdkBinaryTask>(length);
}

//static
::acdk::lang::RObject
AcdkBinaryTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AcdkBinaryTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkBinaryTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AcdkBinaryTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addAcdkLib_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addAcdkLib((RString)args[0].getObjectVar());
    else
        This->addAcdkLib((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addAcdkLibs_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addAcdkLibs((RStringArray)args[0].getObjectVar());
    else
        This->addAcdkLibs((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addCompileType_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addCompileType((RString)args[0].getObjectVar());
    else
        This->addCompileType((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addDefine_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addDefine((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->addDefine((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addDefine_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addDefine((RString)args[0].getObjectVar());
    else
        This->addDefine((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addExtIncludeDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addExtIncludeDir((RString)args[0].getObjectVar());
    else
        This->addExtIncludeDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addExtIncludeDirs_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addExtIncludeDirs((RStringArray)args[0].getObjectVar());
    else
        This->addExtIncludeDirs((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addExtLib_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addExtLib((RString)args[0].getObjectVar());
    else
        This->addExtLib((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addExtLibs_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addExtLibs((RStringArray)args[0].getObjectVar());
    else
        This->addExtLibs((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addLibraryPath_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addLibraryPath((RString)args[0].getObjectVar());
    else
        This->addLibraryPath((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addLibraryPaths_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addLibraryPaths((RStringArray)args[0].getObjectVar());
    else
        This->addLibraryPaths((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addModule_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addModule((RString)args[0].getObjectVar());
    else
        This->addModule((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addModuleConfigTask_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addModuleConfigTask((RString)args[0].getObjectVar());
    else
        This->addModuleConfigTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addModules_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addModules((RStringArray)args[0].getObjectVar());
    else
        This->addModules((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addSource_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addSource((RString)args[0].getObjectVar());
    else
        This->addSource((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_addSources_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::addSources((RStringArray)args[0].getObjectVar());
    else
        This->addSources((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AcdkBinaryTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_expandSources_INLRStringArray__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AcdkBinaryTask::expandSources((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_getAcdkLibs__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AcdkBinaryTask::getAcdkLibs();
    else
        ret = (::acdk::lang::RObject)This->getAcdkLibs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_getDspSources_INLRProps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AcdkBinaryTask::getDspSources((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getDspSources((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_getHeaderSet_INLRProps__LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AcdkBinaryTask::getHeaderSet((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getHeaderSet((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_getReleaseTag_INLRProps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AcdkBinaryTask::getReleaseTag((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getReleaseTag((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_getSourceSet_INLRProps__LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AcdkBinaryTask::getSourceSet((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getSourceSet((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_getTaskInfo__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AcdkBinaryTask::getTaskInfo();
    else
        ret = (::acdk::lang::RObject)This->getTaskInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_setBaseDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::setBaseDir((RString)args[0].getObjectVar());
    else
        This->setBaseDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_setBaseSourceDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::setBaseSourceDir((RString)args[0].getObjectVar());
    else
        This->setBaseSourceDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_setObjBaseDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::setObjBaseDir((RString)args[0].getObjectVar());
    else
        This->setObjBaseDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkBinaryTask_method_setupAcdkDeps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkBinaryTask::setupAcdkDeps((RProps)args[0].getObjectVar());
    else
        This->setupAcdkDeps((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__baseDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_baseDir, flags);
    else
      This->_baseDir = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__baseSourceDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_baseSourceDir, flags);
    else
      This->_baseSourceDir = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__defFile_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_defFile, flags);
    else
      This->_defFile = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__headers_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_headers, flags);
    else
      This->_headers = (RFileSet)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__initialized_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_initialized, flags);
    else
      This->_initialized = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__moduleConfigTasks_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_moduleConfigTasks, flags);
    else
      This->_moduleConfigTasks = (RTaskArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__moduleProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_moduleProps, flags);
    else
      This->_moduleProps = (RProps)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__modules_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_modules, flags);
    else
      This->_modules = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__sourceAndHeader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sourceAndHeader, flags);
    else
      This->_sourceAndHeader = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AcdkBinaryTask_fields__sources_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AcdkBinaryTask* This = dmi_cast<AcdkBinaryTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sources, flags);
    else
      This->_sources = (RFileSet)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__baseDir = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_baseDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__baseDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__baseSourceDir = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_baseSourceDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__baseSourceDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__defFile = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_defFile", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__defFile_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__headers = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_headers", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__headers_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__initialized = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_initialized", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__initialized_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__moduleConfigTasks = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_moduleConfigTasks", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskArray::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__moduleConfigTasks_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__moduleProps = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_moduleProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__moduleProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__modules = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_modules", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__modules_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__sourceAndHeader = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sourceAndHeader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__sourceAndHeader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AcdkBinaryTask_fields__sources = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sources", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(),
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_fields__sources_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AcdkBinaryTask_fields[] = 
{
  &AcdkBinaryTask_fields__baseDir,
  &AcdkBinaryTask_fields__baseSourceDir,
  &AcdkBinaryTask_fields__defFile,
  &AcdkBinaryTask_fields__headers,
  &AcdkBinaryTask_fields__initialized,
  &AcdkBinaryTask_fields__moduleConfigTasks,
  &AcdkBinaryTask_fields__moduleProps,
  &AcdkBinaryTask_fields__modules,
  &AcdkBinaryTask_fields__sourceAndHeader,
  &AcdkBinaryTask_fields__sources,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__args[] = 
{
  &AcdkBinaryTask_methods_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__arg_name,
  &AcdkBinaryTask_methods_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkBinaryTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkBinaryTask::clazzInfo(), // return type
  "_0_AcdkBinaryTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addAcdkLib_INLRString__V_arg_lib = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "lib", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addAcdkLib_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addAcdkLib_INLRString__V_arg_lib,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addAcdkLib_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addAcdkLib_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAcdkLib", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addAcdkLib", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addAcdkLib_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addAcdkLib_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addAcdkLib_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addAcdkLibs_INLRStringArray__V_arg_libs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "libs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addAcdkLibs_INLRStringArray__V_args[] = 
{
  &AcdkBinaryTask_methods_addAcdkLibs_INLRStringArray__V_arg_libs,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addAcdkLibs_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addAcdkLibs_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAcdkLibs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_addAcdkLibs", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addAcdkLibs_INLRStringArray__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addAcdkLibs_INLRStringArray__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addAcdkLibs_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addCompileType_INLRString__V_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addCompileType_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addCompileType_INLRString__V_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addCompileType_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addCompileType_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addCompileType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_addCompileType", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addCompileType_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addCompileType_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addCompileType_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addDefine_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addDefine_INLRString_INLRString__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addDefine_INLRString_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addDefine_INLRString_INLRString__V_arg_key,
  &AcdkBinaryTask_methods_addDefine_INLRString_INLRString__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addDefine_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addDefine_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addDefine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_addDefine", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addDefine_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addDefine_INLRString_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addDefine_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addDefine_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addDefine_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addDefine_INLRString__V_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addDefine_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addDefine_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addDefine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_addDefine", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addDefine_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addDefine_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addDefine_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addExtIncludeDir_INLRString__V_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addExtIncludeDir_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addExtIncludeDir_INLRString__V_arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addExtIncludeDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addExtIncludeDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addExtIncludeDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_addExtIncludeDir", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addExtIncludeDir_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addExtIncludeDir_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addExtIncludeDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addExtIncludeDirs_INLRStringArray__V_arg_dirs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dirs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addExtIncludeDirs_INLRStringArray__V_args[] = 
{
  &AcdkBinaryTask_methods_addExtIncludeDirs_INLRStringArray__V_arg_dirs,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addExtIncludeDirs_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addExtIncludeDirs_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addExtIncludeDirs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_addExtIncludeDirs", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addExtIncludeDirs_INLRStringArray__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addExtIncludeDirs_INLRStringArray__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addExtIncludeDirs_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addExtLib_INLRString__V_arg_lib = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "lib", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addExtLib_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addExtLib_INLRString__V_arg_lib,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addExtLib_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addExtLib_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addExtLib", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_addExtLib", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addExtLib_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addExtLib_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addExtLib_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addExtLibs_INLRStringArray__V_arg_libs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "libs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addExtLibs_INLRStringArray__V_args[] = 
{
  &AcdkBinaryTask_methods_addExtLibs_INLRStringArray__V_arg_libs,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addExtLibs_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addExtLibs_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addExtLibs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_addExtLibs", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addExtLibs_INLRStringArray__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addExtLibs_INLRStringArray__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addExtLibs_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addLibraryPath_INLRString__V_arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addLibraryPath_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addLibraryPath_INLRString__V_arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addLibraryPath_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addLibraryPath_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addLibraryPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_addLibraryPath", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addLibraryPath_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addLibraryPath_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addLibraryPath_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addLibraryPaths_INLRStringArray__V_arg_paths = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "paths", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addLibraryPaths_INLRStringArray__V_args[] = 
{
  &AcdkBinaryTask_methods_addLibraryPaths_INLRStringArray__V_arg_paths,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addLibraryPaths_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addLibraryPaths_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addLibraryPaths", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_addLibraryPaths", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addLibraryPaths_INLRStringArray__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addLibraryPaths_INLRStringArray__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addLibraryPaths_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addModule_INLRString__V_arg_modpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "modpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addModule_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addModule_INLRString__V_arg_modpath,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addModule_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addModule_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addModule", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addModule", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addModule_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addModule_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addModule_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addModuleConfigTask_INLRString__V_arg_taskname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "taskname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addModuleConfigTask_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addModuleConfigTask_INLRString__V_arg_taskname,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addModuleConfigTask_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addModuleConfigTask_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addModuleConfigTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_addModuleConfigTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addModuleConfigTask_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addModuleConfigTask_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addModuleConfigTask_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addModules_INLRStringArray__V_arg_mods = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mods", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addModules_INLRStringArray__V_args[] = 
{
  &AcdkBinaryTask_methods_addModules_INLRStringArray__V_arg_mods,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addModules_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addModules_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addModules", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addModules", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addModules_INLRStringArray__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addModules_INLRStringArray__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addModules_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addSource_INLRString__V_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addSource_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_addSource_INLRString__V_arg_source,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addSource_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addSource_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addSource", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addSource_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addSource_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addSource_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_addSources_INLRStringArray__V_arg_sources = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sources", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_addSources_INLRStringArray__V_args[] = 
{
  &AcdkBinaryTask_methods_addSources_INLRStringArray__V_arg_sources,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_addSources_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_addSources_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addSources", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_addSources_INLRStringArray__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_addSources_INLRStringArray__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_addSources_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &AcdkBinaryTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &AcdkBinaryTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_execute", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_expandSources_INLRStringArray__LRStringArray__arg_sa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_expandSources_INLRStringArray__LRStringArray__args[] = 
{
  &AcdkBinaryTask_methods_expandSources_INLRStringArray__LRStringArray__arg_sa,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_expandSources_INLRStringArray__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_expandSources_INLRStringArray__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expandSources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_l_expandSources", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_expandSources_INLRStringArray__LRStringArray__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_expandSources_INLRStringArray__LRStringArray__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_expandSources_INLRStringArray__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_getAcdkLibs__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_getAcdkLibs__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_getAcdkLibs__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkLibs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_8_getAcdkLibs", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_getAcdkLibs__LRStringArray__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_getAcdkLibs__LRStringArray__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_getAcdkLibs__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_getDspSources_INLRProps__LRString__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_getDspSources_INLRProps__LRString__args[] = 
{
  &AcdkBinaryTask_methods_getDspSources_INLRProps__LRString__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_getDspSources_INLRProps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_getDspSources_INLRProps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDspSources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_getDspSources", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_getDspSources_INLRProps__LRString__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_getDspSources_INLRProps__LRString__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_getDspSources_INLRProps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_getHeaderSet_INLRProps__LRFileSet__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_getHeaderSet_INLRProps__LRFileSet__args[] = 
{
  &AcdkBinaryTask_methods_getHeaderSet_INLRProps__LRFileSet__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_getHeaderSet_INLRProps__LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_getHeaderSet_INLRProps__LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeaderSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(), // return type
  "_i_getHeaderSet", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_getHeaderSet_INLRProps__LRFileSet__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_getHeaderSet_INLRProps__LRFileSet__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_getHeaderSet_INLRProps__LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_getReleaseTag_INLRProps__LRString__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_getReleaseTag_INLRProps__LRString__args[] = 
{
  &AcdkBinaryTask_methods_getReleaseTag_INLRProps__LRString__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_getReleaseTag_INLRProps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_getReleaseTag_INLRProps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReleaseTag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_m_getReleaseTag", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_getReleaseTag_INLRProps__LRString__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_getReleaseTag_INLRProps__LRString__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_getReleaseTag_INLRProps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_getSourceSet_INLRProps__LRFileSet__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_getSourceSet_INLRProps__LRFileSet__args[] = 
{
  &AcdkBinaryTask_methods_getSourceSet_INLRProps__LRFileSet__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_getSourceSet_INLRProps__LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_getSourceSet_INLRProps__LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSourceSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(), // return type
  "_h_getSourceSet", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_getSourceSet_INLRProps__LRFileSet__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_getSourceSet_INLRProps__LRFileSet__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_getSourceSet_INLRProps__LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_getTaskInfo__LRTaskInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_getTaskInfo__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_getTaskInfo__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskInfo::clazzInfo(), // return type
  "_1_getTaskInfo", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_getTaskInfo__LRTaskInfo__args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_getTaskInfo__LRTaskInfo__exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_getTaskInfo__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_setBaseDir_INLRString__V_arg_basedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "basedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_setBaseDir_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_setBaseDir_INLRString__V_arg_basedir,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_setBaseDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_setBaseDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBaseDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setBaseDir", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_setBaseDir_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_setBaseDir_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_setBaseDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_setBaseSourceDir_INLRString__V_arg_basedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "basedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_setBaseSourceDir_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_setBaseSourceDir_INLRString__V_arg_basedir,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_setBaseSourceDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_setBaseSourceDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBaseSourceDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setBaseSourceDir", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_setBaseSourceDir_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_setBaseSourceDir_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_setBaseSourceDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_setObjBaseDir_INLRString__V_arg_basedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "basedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_setObjBaseDir_INLRString__V_args[] = 
{
  &AcdkBinaryTask_methods_setObjBaseDir_INLRString__V_arg_basedir,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_setObjBaseDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_setObjBaseDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObjBaseDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setObjBaseDir", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_setObjBaseDir_INLRString__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_setObjBaseDir_INLRString__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_setObjBaseDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkBinaryTask_methods_setupAcdkDeps_INLRProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkBinaryTask_methods_setupAcdkDeps_INLRProps__V_args[] = 
{
  &AcdkBinaryTask_methods_setupAcdkDeps_INLRProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask_methods_setupAcdkDeps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkBinaryTask_method_setupAcdkDeps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setupAcdkDeps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setupAcdkDeps", // alternative name of method
  -1, // altlabelHashCode
  AcdkBinaryTask_methods_setupAcdkDeps_INLRProps__V_args, // the arguments
  0, //arguments count
  AcdkBinaryTask_methods_setupAcdkDeps_INLRProps__V_exceptions, // the declared exceptions
  AcdkBinaryTask_MetainfoWrapper::AcdkBinaryTask_method_setupAcdkDeps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AcdkBinaryTask_methods[] = 
{
  &AcdkBinaryTask_method_AcdkBinaryTask_INLRString_INLRString__LRAcdkBinaryTask_,
  &AcdkBinaryTask_method_GetClass__L_acdk_lang_RClass_,
  &AcdkBinaryTask_method_addAcdkLib_INLRString__V,
  &AcdkBinaryTask_method_addAcdkLibs_INLRStringArray__V,
  &AcdkBinaryTask_method_addCompileType_INLRString__V,
  &AcdkBinaryTask_method_addDefine_INLRString_INLRString__V,
  &AcdkBinaryTask_method_addDefine_INLRString__V,
  &AcdkBinaryTask_method_addExtIncludeDir_INLRString__V,
  &AcdkBinaryTask_method_addExtIncludeDirs_INLRStringArray__V,
  &AcdkBinaryTask_method_addExtLib_INLRString__V,
  &AcdkBinaryTask_method_addExtLibs_INLRStringArray__V,
  &AcdkBinaryTask_method_addLibraryPath_INLRString__V,
  &AcdkBinaryTask_method_addLibraryPaths_INLRStringArray__V,
  &AcdkBinaryTask_method_addModule_INLRString__V,
  &AcdkBinaryTask_method_addModuleConfigTask_INLRString__V,
  &AcdkBinaryTask_method_addModules_INLRStringArray__V,
  &AcdkBinaryTask_method_addSource_INLRString__V,
  &AcdkBinaryTask_method_addSources_INLRStringArray__V,
  &AcdkBinaryTask_method_execute_INLRString_INLRProps__Z,
  &AcdkBinaryTask_method_expandSources_INLRStringArray__LRStringArray_,
  &AcdkBinaryTask_method_getAcdkLibs__LRStringArray_,
  &AcdkBinaryTask_method_getDspSources_INLRProps__LRString_,
  &AcdkBinaryTask_method_getHeaderSet_INLRProps__LRFileSet_,
  &AcdkBinaryTask_method_getReleaseTag_INLRProps__LRString_,
  &AcdkBinaryTask_method_getSourceSet_INLRProps__LRFileSet_,
  &AcdkBinaryTask_method_getTaskInfo__LRTaskInfo_,
  &AcdkBinaryTask_method_setBaseDir_INLRString__V,
  &AcdkBinaryTask_method_setBaseSourceDir_INLRString__V,
  &AcdkBinaryTask_method_setObjBaseDir_INLRString__V,
  &AcdkBinaryTask_method_setupAcdkDeps_INLRProps__V,
  0
};


struct AcdkBinaryTask_MetaInfoInitializer
{  AcdkBinaryTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AcdkBinaryTask::clazzInfo();
    ci->fields =  _AcdkBinaryTask_fields;
    ci->methods =  _AcdkBinaryTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AcdkBinaryTask_MetaInfoInitializer AcdkBinaryTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AcdkExeTask_create_array(int length)
{
  return new ObjectArrayImpl<RAcdkExeTask>(length);
}

//static
::acdk::lang::RObject
AcdkExeTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AcdkExeTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkExeTask_method_AcdkExeTask_INLRString__LRAcdkExeTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkExeTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkExeTask_method_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkExeTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkExeTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AcdkExeTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkExeTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkExeTask* This = dmi_cast<AcdkExeTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AcdkExeTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkExeTask_method_setupAcdkDeps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkExeTask* This = dmi_cast<AcdkExeTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkExeTask::setupAcdkDeps((RProps)args[0].getObjectVar());
    else
        This->setupAcdkDeps((RProps)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AcdkExeTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkExeTask_methods_AcdkExeTask_INLRString__LRAcdkExeTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkExeTask_methods_AcdkExeTask_INLRString__LRAcdkExeTask__args[] = 
{
  &AcdkExeTask_methods_AcdkExeTask_INLRString__LRAcdkExeTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkExeTask_methods_AcdkExeTask_INLRString__LRAcdkExeTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkExeTask_method_AcdkExeTask_INLRString__LRAcdkExeTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkExeTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkExeTask::clazzInfo(), // return type
  "_0_AcdkExeTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkExeTask_methods_AcdkExeTask_INLRString__LRAcdkExeTask__args, // the arguments
  0, //arguments count
  AcdkExeTask_methods_AcdkExeTask_INLRString__LRAcdkExeTask__exceptions, // the declared exceptions
  AcdkExeTask_MetainfoWrapper::AcdkExeTask_method_AcdkExeTask_INLRString__LRAcdkExeTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkExeTask_methods_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkExeTask_methods_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkExeTask_methods_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__args[] = 
{
  &AcdkExeTask_methods_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__arg_name,
  &AcdkExeTask_methods_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkExeTask_methods_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkExeTask_method_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkExeTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkExeTask::clazzInfo(), // return type
  "_1_AcdkExeTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkExeTask_methods_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__args, // the arguments
  0, //arguments count
  AcdkExeTask_methods_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__exceptions, // the declared exceptions
  AcdkExeTask_MetainfoWrapper::AcdkExeTask_method_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkExeTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkExeTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkExeTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AcdkExeTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AcdkExeTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AcdkExeTask_MetainfoWrapper::AcdkExeTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkExeTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkExeTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkExeTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &AcdkExeTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &AcdkExeTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkExeTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkExeTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  AcdkExeTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  AcdkExeTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  AcdkExeTask_MetainfoWrapper::AcdkExeTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkExeTask_methods_setupAcdkDeps_INLRProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkExeTask_methods_setupAcdkDeps_INLRProps__V_args[] = 
{
  &AcdkExeTask_methods_setupAcdkDeps_INLRProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkExeTask_methods_setupAcdkDeps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkExeTask_method_setupAcdkDeps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setupAcdkDeps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setupAcdkDeps", // alternative name of method
  -1, // altlabelHashCode
  AcdkExeTask_methods_setupAcdkDeps_INLRProps__V_args, // the arguments
  0, //arguments count
  AcdkExeTask_methods_setupAcdkDeps_INLRProps__V_exceptions, // the declared exceptions
  AcdkExeTask_MetainfoWrapper::AcdkExeTask_method_setupAcdkDeps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AcdkExeTask_methods[] = 
{
  &AcdkExeTask_method_AcdkExeTask_INLRString__LRAcdkExeTask_,
  &AcdkExeTask_method_AcdkExeTask_INLRString_INLRString__LRAcdkExeTask_,
  &AcdkExeTask_method_GetClass__L_acdk_lang_RClass_,
  &AcdkExeTask_method_execute_INLRString_INLRProps__Z,
  &AcdkExeTask_method_setupAcdkDeps_INLRProps__V,
  0
};


struct AcdkExeTask_MetaInfoInitializer
{  AcdkExeTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AcdkExeTask::clazzInfo();
    ci->fields =  _AcdkExeTask_fields;
    ci->methods =  _AcdkExeTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AcdkExeTask_MetaInfoInitializer AcdkExeTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AcdkLibTask_create_array(int length)
{
  return new ObjectArrayImpl<RAcdkLibTask>(length);
}

//static
::acdk::lang::RObject
AcdkLibTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AcdkLibTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkLibTask_method_AcdkLibTask_INLRString__LRAcdkLibTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkLibTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkLibTask_method_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkLibTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkLibTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AcdkLibTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkLibTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkLibTask* This = dmi_cast<AcdkLibTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AcdkLibTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkLibTask_method_setupAcdkDeps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkLibTask* This = dmi_cast<AcdkLibTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AcdkLibTask::setupAcdkDeps((RProps)args[0].getObjectVar());
    else
        This->setupAcdkDeps((RProps)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AcdkLibTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkLibTask_methods_AcdkLibTask_INLRString__LRAcdkLibTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkLibTask_methods_AcdkLibTask_INLRString__LRAcdkLibTask__args[] = 
{
  &AcdkLibTask_methods_AcdkLibTask_INLRString__LRAcdkLibTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkLibTask_methods_AcdkLibTask_INLRString__LRAcdkLibTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkLibTask_method_AcdkLibTask_INLRString__LRAcdkLibTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkLibTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkLibTask::clazzInfo(), // return type
  "_0_AcdkLibTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkLibTask_methods_AcdkLibTask_INLRString__LRAcdkLibTask__args, // the arguments
  0, //arguments count
  AcdkLibTask_methods_AcdkLibTask_INLRString__LRAcdkLibTask__exceptions, // the declared exceptions
  AcdkLibTask_MetainfoWrapper::AcdkLibTask_method_AcdkLibTask_INLRString__LRAcdkLibTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkLibTask_methods_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkLibTask_methods_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkLibTask_methods_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__args[] = 
{
  &AcdkLibTask_methods_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__arg_name,
  &AcdkLibTask_methods_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkLibTask_methods_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkLibTask_method_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkLibTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkLibTask::clazzInfo(), // return type
  "_1_AcdkLibTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkLibTask_methods_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__args, // the arguments
  0, //arguments count
  AcdkLibTask_methods_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__exceptions, // the declared exceptions
  AcdkLibTask_MetainfoWrapper::AcdkLibTask_method_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkLibTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkLibTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkLibTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AcdkLibTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AcdkLibTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AcdkLibTask_MetainfoWrapper::AcdkLibTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkLibTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkLibTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkLibTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &AcdkLibTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &AcdkLibTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkLibTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkLibTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  AcdkLibTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  AcdkLibTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  AcdkLibTask_MetainfoWrapper::AcdkLibTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkLibTask_methods_setupAcdkDeps_INLRProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkLibTask_methods_setupAcdkDeps_INLRProps__V_args[] = 
{
  &AcdkLibTask_methods_setupAcdkDeps_INLRProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkLibTask_methods_setupAcdkDeps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkLibTask_method_setupAcdkDeps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setupAcdkDeps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setupAcdkDeps", // alternative name of method
  -1, // altlabelHashCode
  AcdkLibTask_methods_setupAcdkDeps_INLRProps__V_args, // the arguments
  0, //arguments count
  AcdkLibTask_methods_setupAcdkDeps_INLRProps__V_exceptions, // the declared exceptions
  AcdkLibTask_MetainfoWrapper::AcdkLibTask_method_setupAcdkDeps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AcdkLibTask_methods[] = 
{
  &AcdkLibTask_method_AcdkLibTask_INLRString__LRAcdkLibTask_,
  &AcdkLibTask_method_AcdkLibTask_INLRString_INLRString__LRAcdkLibTask_,
  &AcdkLibTask_method_GetClass__L_acdk_lang_RClass_,
  &AcdkLibTask_method_execute_INLRString_INLRProps__Z,
  &AcdkLibTask_method_setupAcdkDeps_INLRProps__V,
  0
};


struct AcdkLibTask_MetaInfoInitializer
{  AcdkLibTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AcdkLibTask::clazzInfo();
    ci->fields =  _AcdkLibTask_fields;
    ci->methods =  _AcdkLibTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AcdkLibTask_MetaInfoInitializer AcdkLibTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AcdkMetainfLibTask_create_array(int length)
{
  return new ObjectArrayImpl<RAcdkMetainfLibTask>(length);
}

//static
::acdk::lang::RObject
AcdkMetainfLibTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AcdkMetainfLibTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkMetainfLibTask_method_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkMetainfLibTask((RString)args[0].getObjectVar(), (RAcdkLibTask)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkMetainfLibTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AcdkMetainfLibTask::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AcdkMetainfLibTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkMetainfLibTask_methods_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkMetainfLibTask_methods_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__arg_basedLibTask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "basedLibTask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAcdkLibTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkMetainfLibTask_methods_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__args[] = 
{
  &AcdkMetainfLibTask_methods_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__arg_name,
  &AcdkMetainfLibTask_methods_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__arg_basedLibTask,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkMetainfLibTask_methods_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkMetainfLibTask_method_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkMetainfLibTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkMetainfLibTask::clazzInfo(), // return type
  "_0_AcdkMetainfLibTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkMetainfLibTask_methods_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__args, // the arguments
  0, //arguments count
  AcdkMetainfLibTask_methods_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__exceptions, // the declared exceptions
  AcdkMetainfLibTask_MetainfoWrapper::AcdkMetainfLibTask_method_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkMetainfLibTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkMetainfLibTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkMetainfLibTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AcdkMetainfLibTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AcdkMetainfLibTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AcdkMetainfLibTask_MetainfoWrapper::AcdkMetainfLibTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AcdkMetainfLibTask_methods[] = 
{
  &AcdkMetainfLibTask_method_AcdkMetainfLibTask_INLRString_INLRAcdkLibTask__LRAcdkMetainfLibTask_,
  &AcdkMetainfLibTask_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct AcdkMetainfLibTask_MetaInfoInitializer
{  AcdkMetainfLibTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AcdkMetainfLibTask::clazzInfo();
    ci->fields =  _AcdkMetainfLibTask_fields;
    ci->methods =  _AcdkMetainfLibTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AcdkMetainfLibTask_MetaInfoInitializer AcdkMetainfLibTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AcdkProjectTask_create_array(int length)
{
  return new ObjectArrayImpl<RAcdkProjectTask>(length);
}

//static
::acdk::lang::RObject
AcdkProjectTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AcdkProjectTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkProjectTask_method_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkProjectTask((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkProjectTask_method_AcdkProjectTask_INLRString__LRAcdkProjectTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkProjectTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkProjectTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AcdkProjectTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkProjectTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AcdkProjectTask* This = dmi_cast<AcdkProjectTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AcdkProjectTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AcdkProjectTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkProjectTask_methods_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkProjectTask_methods_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__arg_subtasksnames = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "subtasksnames", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkProjectTask_methods_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__args[] = 
{
  &AcdkProjectTask_methods_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__arg_name,
  &AcdkProjectTask_methods_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__arg_subtasksnames,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkProjectTask_methods_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkProjectTask_method_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkProjectTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkProjectTask::clazzInfo(), // return type
  "_0_AcdkProjectTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkProjectTask_methods_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__args, // the arguments
  0, //arguments count
  AcdkProjectTask_methods_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__exceptions, // the declared exceptions
  AcdkProjectTask_MetainfoWrapper::AcdkProjectTask_method_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkProjectTask_methods_AcdkProjectTask_INLRString__LRAcdkProjectTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkProjectTask_methods_AcdkProjectTask_INLRString__LRAcdkProjectTask__args[] = 
{
  &AcdkProjectTask_methods_AcdkProjectTask_INLRString__LRAcdkProjectTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkProjectTask_methods_AcdkProjectTask_INLRString__LRAcdkProjectTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkProjectTask_method_AcdkProjectTask_INLRString__LRAcdkProjectTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkProjectTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkProjectTask::clazzInfo(), // return type
  "_1_AcdkProjectTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkProjectTask_methods_AcdkProjectTask_INLRString__LRAcdkProjectTask__args, // the arguments
  0, //arguments count
  AcdkProjectTask_methods_AcdkProjectTask_INLRString__LRAcdkProjectTask__exceptions, // the declared exceptions
  AcdkProjectTask_MetainfoWrapper::AcdkProjectTask_method_AcdkProjectTask_INLRString__LRAcdkProjectTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkProjectTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkProjectTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkProjectTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AcdkProjectTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AcdkProjectTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AcdkProjectTask_MetainfoWrapper::AcdkProjectTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkProjectTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkProjectTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkProjectTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &AcdkProjectTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &AcdkProjectTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkProjectTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkProjectTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  AcdkProjectTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  AcdkProjectTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  AcdkProjectTask_MetainfoWrapper::AcdkProjectTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AcdkProjectTask_methods[] = 
{
  &AcdkProjectTask_method_AcdkProjectTask_INLRString_INLRStringArray__LRAcdkProjectTask_,
  &AcdkProjectTask_method_AcdkProjectTask_INLRString__LRAcdkProjectTask_,
  &AcdkProjectTask_method_GetClass__L_acdk_lang_RClass_,
  &AcdkProjectTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct AcdkProjectTask_MetaInfoInitializer
{  AcdkProjectTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AcdkProjectTask::clazzInfo();
    ci->fields =  _AcdkProjectTask_fields;
    ci->methods =  _AcdkProjectTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AcdkProjectTask_MetaInfoInitializer AcdkProjectTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AcdkTestExeTask_create_array(int length)
{
  return new ObjectArrayImpl<RAcdkTestExeTask>(length);
}

//static
::acdk::lang::RObject
AcdkTestExeTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AcdkTestExeTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkTestExeTask_method_AcdkTestExeTask_INLRString__LRAcdkTestExeTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkTestExeTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkTestExeTask_method_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AcdkTestExeTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AcdkTestExeTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AcdkTestExeTask::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AcdkTestExeTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkTestExeTask_methods_AcdkTestExeTask_INLRString__LRAcdkTestExeTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkTestExeTask_methods_AcdkTestExeTask_INLRString__LRAcdkTestExeTask__args[] = 
{
  &AcdkTestExeTask_methods_AcdkTestExeTask_INLRString__LRAcdkTestExeTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkTestExeTask_methods_AcdkTestExeTask_INLRString__LRAcdkTestExeTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkTestExeTask_method_AcdkTestExeTask_INLRString__LRAcdkTestExeTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkTestExeTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkTestExeTask::clazzInfo(), // return type
  "_0_AcdkTestExeTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkTestExeTask_methods_AcdkTestExeTask_INLRString__LRAcdkTestExeTask__args, // the arguments
  0, //arguments count
  AcdkTestExeTask_methods_AcdkTestExeTask_INLRString__LRAcdkTestExeTask__exceptions, // the declared exceptions
  AcdkTestExeTask_MetainfoWrapper::AcdkTestExeTask_method_AcdkTestExeTask_INLRString__LRAcdkTestExeTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkTestExeTask_methods_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AcdkTestExeTask_methods_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkTestExeTask_methods_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__args[] = 
{
  &AcdkTestExeTask_methods_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__arg_name,
  &AcdkTestExeTask_methods_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkTestExeTask_methods_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkTestExeTask_method_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AcdkTestExeTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AcdkTestExeTask::clazzInfo(), // return type
  "_1_AcdkTestExeTask", // alternative name of method
  -1, // altlabelHashCode
  AcdkTestExeTask_methods_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__args, // the arguments
  0, //arguments count
  AcdkTestExeTask_methods_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__exceptions, // the declared exceptions
  AcdkTestExeTask_MetainfoWrapper::AcdkTestExeTask_method_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AcdkTestExeTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkTestExeTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AcdkTestExeTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AcdkTestExeTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AcdkTestExeTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AcdkTestExeTask_MetainfoWrapper::AcdkTestExeTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AcdkTestExeTask_methods[] = 
{
  &AcdkTestExeTask_method_AcdkTestExeTask_INLRString__LRAcdkTestExeTask_,
  &AcdkTestExeTask_method_AcdkTestExeTask_INLRString_INLRString__LRAcdkTestExeTask_,
  &AcdkTestExeTask_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct AcdkTestExeTask_MetaInfoInitializer
{  AcdkTestExeTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AcdkTestExeTask::clazzInfo();
    ci->fields =  _AcdkTestExeTask_fields;
    ci->methods =  _AcdkTestExeTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AcdkTestExeTask_MetaInfoInitializer AcdkTestExeTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
ToolConfigurator_create_array(int length)
{
  return new ObjectArrayImpl<RToolConfigurator>(length);
}

//static
::acdk::lang::RObject
ToolConfigurator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ToolConfigurator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolConfigurator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ToolConfigurator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ToolConfigurator_method_configure_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ToolConfigurator* This = dmi_cast<ToolConfigurator>(This_);
  ret = This->configure((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ToolConfigurator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolConfigurator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolConfigurator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolConfigurator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ToolConfigurator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ToolConfigurator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ToolConfigurator_MetainfoWrapper::ToolConfigurator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolConfigurator_methods_configure_INLRString_INLRProps__Z_arg_fqToolCmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fqToolCmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ToolConfigurator_methods_configure_INLRString_INLRProps__Z_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ToolConfigurator_methods_configure_INLRString_INLRProps__Z_args[] = 
{
  &ToolConfigurator_methods_configure_INLRString_INLRProps__Z_arg_fqToolCmd,
  &ToolConfigurator_methods_configure_INLRString_INLRProps__Z_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* ToolConfigurator_methods_configure_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ToolConfigurator_method_configure_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "configure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_configure", // alternative name of method
  -1, // altlabelHashCode
  ToolConfigurator_methods_configure_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  ToolConfigurator_methods_configure_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  ToolConfigurator_MetainfoWrapper::ToolConfigurator_method_configure_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ToolConfigurator_methods[] = 
{
  &ToolConfigurator_method_GetClass__L_acdk_lang_RClass_,
  &ToolConfigurator_method_configure_INLRString_INLRProps__Z,
  0
};


struct ToolConfigurator_MetaInfoInitializer
{  ToolConfigurator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ToolConfigurator::clazzInfo();
    ci->fields =  _ToolConfigurator_fields;
    ci->methods =  _ToolConfigurator_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ToolConfigurator_MetaInfoInitializer ToolConfigurator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
DependencyChecker_create_array(int length)
{
  return new ObjectArrayImpl<RDependencyChecker>(length);
}

//static
::acdk::lang::RObject
DependencyChecker_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DependencyChecker_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DependencyChecker_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DependencyChecker::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DependencyChecker_method_rebuild_INLRString_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DependencyChecker* This = dmi_cast<DependencyChecker>(This_);
  ret = This->rebuild((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RProps)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DependencyChecker_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DependencyChecker_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DependencyChecker_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DependencyChecker_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DependencyChecker_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DependencyChecker_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DependencyChecker_MetainfoWrapper::DependencyChecker_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_sourceFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sourceFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_targetFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "targetFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_args[] = 
{
  &DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_sourceFile,
  &DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_targetFile,
  &DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DependencyChecker_method_rebuild_INLRString_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rebuild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_rebuild", // alternative name of method
  -1, // altlabelHashCode
  DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  DependencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  DependencyChecker_MetainfoWrapper::DependencyChecker_method_rebuild_INLRString_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DependencyChecker_methods[] = 
{
  &DependencyChecker_method_GetClass__L_acdk_lang_RClass_,
  &DependencyChecker_method_rebuild_INLRString_INLRString_INLRProps__Z,
  0
};


struct DependencyChecker_MetaInfoInitializer
{  DependencyChecker_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DependencyChecker::clazzInfo();
    ci->fields =  _DependencyChecker_fields;
    ci->methods =  _DependencyChecker_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DependencyChecker_MetaInfoInitializer DependencyChecker_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
SimpleFileDepencyChecker_create_array(int length)
{
  return new ObjectArrayImpl<RSimpleFileDepencyChecker>(length);
}

//static
::acdk::lang::RObject
SimpleFileDepencyChecker_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SimpleFileDepencyChecker_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleFileDepencyChecker_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SimpleFileDepencyChecker::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleFileDepencyChecker_method_SimpleFileDepencyChecker__LRSimpleFileDepencyChecker__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleFileDepencyChecker();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleFileDepencyChecker_method_rebuild_INLRString_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleFileDepencyChecker* This = dmi_cast<SimpleFileDepencyChecker>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleFileDepencyChecker::rebuild((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RProps)args[2].getObjectVar());
    else
      ret = This->rebuild((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RProps)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SimpleFileDepencyChecker_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleFileDepencyChecker_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFileDepencyChecker_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleFileDepencyChecker_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SimpleFileDepencyChecker_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SimpleFileDepencyChecker_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SimpleFileDepencyChecker_MetainfoWrapper::SimpleFileDepencyChecker_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleFileDepencyChecker_methods_SimpleFileDepencyChecker__LRSimpleFileDepencyChecker__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFileDepencyChecker_methods_SimpleFileDepencyChecker__LRSimpleFileDepencyChecker__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleFileDepencyChecker_method_SimpleFileDepencyChecker__LRSimpleFileDepencyChecker_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleFileDepencyChecker", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleFileDepencyChecker::clazzInfo(), // return type
  "_0_SimpleFileDepencyChecker", // alternative name of method
  -1, // altlabelHashCode
  SimpleFileDepencyChecker_methods_SimpleFileDepencyChecker__LRSimpleFileDepencyChecker__args, // the arguments
  0, //arguments count
  SimpleFileDepencyChecker_methods_SimpleFileDepencyChecker__LRSimpleFileDepencyChecker__exceptions, // the declared exceptions
  SimpleFileDepencyChecker_MetainfoWrapper::SimpleFileDepencyChecker_method_SimpleFileDepencyChecker__LRSimpleFileDepencyChecker__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_sourceFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sourceFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_targetFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "targetFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_args[] = 
{
  &SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_sourceFile,
  &SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_targetFile,
  &SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleFileDepencyChecker_method_rebuild_INLRString_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rebuild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_rebuild", // alternative name of method
  -1, // altlabelHashCode
  SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  SimpleFileDepencyChecker_methods_rebuild_INLRString_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  SimpleFileDepencyChecker_MetainfoWrapper::SimpleFileDepencyChecker_method_rebuild_INLRString_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SimpleFileDepencyChecker_methods[] = 
{
  &SimpleFileDepencyChecker_method_GetClass__L_acdk_lang_RClass_,
  &SimpleFileDepencyChecker_method_SimpleFileDepencyChecker__LRSimpleFileDepencyChecker_,
  &SimpleFileDepencyChecker_method_rebuild_INLRString_INLRString_INLRProps__Z,
  0
};


struct SimpleFileDepencyChecker_MetaInfoInitializer
{  SimpleFileDepencyChecker_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SimpleFileDepencyChecker::clazzInfo();
    ci->fields =  _SimpleFileDepencyChecker_fields;
    ci->methods =  _SimpleFileDepencyChecker_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SimpleFileDepencyChecker_MetaInfoInitializer SimpleFileDepencyChecker_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
CommandLineOutputParser_create_array(int length)
{
  return new ObjectArrayImpl<RCommandLineOutputParser>(length);
}

//static
::acdk::lang::RObject
CommandLineOutputParser_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CommandLineOutputParser_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineOutputParser_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CommandLineOutputParser::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineOutputParser_method_format_INLRString_IINLRString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandLineOutputParser* This = dmi_cast<CommandLineOutputParser>(This_);
    ret = (::acdk::lang::RObject)This->format((RString)args[0].getObjectVar(), args[1].getIntVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineOutputParser_method_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandLineOutputParser* This = dmi_cast<CommandLineOutputParser>(This_);
  ret = This->parse((RString)args[0].getObjectVar(),  ::acdk::lang::getTypedObjectRef< RString >(args[1]), args[2].getIntRef(),  ::acdk::lang::getTypedObjectRef< RString >(args[3]), args[4].getIntRef());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CommandLineOutputParser_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineOutputParser_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineOutputParser_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineOutputParser_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CommandLineOutputParser_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CommandLineOutputParser_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CommandLineOutputParser_MetainfoWrapper::CommandLineOutputParser_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__arg_lineNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__arg_logLevel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "logLevel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__args[] = 
{
  &CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__arg_file,
  &CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__arg_lineNo,
  &CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__arg_message,
  &CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__arg_logLevel,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineOutputParser_method_format_INLRString_IINLRString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_format", // alternative name of method
  -1, // altlabelHashCode
  CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__args, // the arguments
  0, //arguments count
  CommandLineOutputParser_methods_format_INLRString_IINLRString_I_LRString__exceptions, // the declared exceptions
  CommandLineOutputParser_MetainfoWrapper::CommandLineOutputParser_method_format_INLRString_IINLRString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_lineNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "lineNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_logLevel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "logLevel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_args[] = 
{
  &CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_line,
  &CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_file,
  &CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_lineNo,
  &CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_message,
  &CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_arg_logLevel,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineOutputParser_method_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_parse", // alternative name of method
  -1, // altlabelHashCode
  CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_args, // the arguments
  0, //arguments count
  CommandLineOutputParser_methods_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_exceptions, // the declared exceptions
  CommandLineOutputParser_MetainfoWrapper::CommandLineOutputParser_method_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CommandLineOutputParser_methods[] = 
{
  &CommandLineOutputParser_method_GetClass__L_acdk_lang_RClass_,
  &CommandLineOutputParser_method_format_INLRString_IINLRString_I_LRString_,
  &CommandLineOutputParser_method_parse_INLRString_OUTLRString_OUTIOUTLRString_OUTI_Z,
  0
};


struct CommandLineOutputParser_MetaInfoInitializer
{  CommandLineOutputParser_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CommandLineOutputParser::clazzInfo();
    ci->fields =  _CommandLineOutputParser_fields;
    ci->methods =  _CommandLineOutputParser_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CommandLineOutputParser_MetaInfoInitializer CommandLineOutputParser_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
CommandLineCompilerTool_create_array(int length)
{
  return new ObjectArrayImpl<RCommandLineCompilerTool>(length);
}

//static
::acdk::lang::RObject
CommandLineCompilerTool_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CommandLineCompilerTool_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineCompilerTool_method_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CommandLineCompilerTool((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RProps)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineCompilerTool_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CommandLineCompilerTool::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineCompilerTool_method_configure_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CommandLineCompilerTool::configure((RProps)args[0].getObjectVar());
    else
      ret = This->configure((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineCompilerTool_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CommandLineCompilerTool::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineCompilerTool_method_getToolProps__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CommandLineCompilerTool::getToolProps();
    else
        ret = (::acdk::lang::RObject)This->getToolProps();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineCompilerTool_method_setCommandLineOutputParser_INLRCommandLineOutputParser__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CommandLineCompilerTool::setCommandLineOutputParser((RCommandLineOutputParser)args[0].getObjectVar());
    else
        This->setCommandLineOutputParser((RCommandLineOutputParser)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CommandLineCompilerTool_method_setDependencyChecker_INLRDependencyChecker__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CommandLineCompilerTool::setDependencyChecker((RDependencyChecker)args[0].getObjectVar());
    else
        This->setDependencyChecker((RDependencyChecker)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandLineCompilerTool_fields__configurator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_configurator, flags);
    else
      This->_configurator = (RToolConfigurator)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandLineCompilerTool_fields__configured_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_configured, flags);
    else
      This->_configured = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandLineCompilerTool_fields__depChecker_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_depChecker, flags);
    else
      This->_depChecker = (RDependencyChecker)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandLineCompilerTool_fields__outputParser_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_outputParser, flags);
    else
      This->_outputParser = (RCommandLineOutputParser)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandLineCompilerTool_fields__toolFound_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_toolFound, flags);
    else
      This->_toolFound = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CommandLineCompilerTool_fields__toolProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CommandLineCompilerTool* This = dmi_cast<CommandLineCompilerTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_toolProps, flags);
    else
      This->_toolProps = (RProps)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CommandLineCompilerTool_fields__configurator = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_configurator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolConfigurator::clazzInfo(),
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_fields__configurator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandLineCompilerTool_fields__configured = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_configured", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_fields__configured_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandLineCompilerTool_fields__depChecker = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_depChecker", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDependencyChecker::clazzInfo(),
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_fields__depChecker_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandLineCompilerTool_fields__outputParser = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_outputParser", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCommandLineOutputParser::clazzInfo(),
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_fields__outputParser_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandLineCompilerTool_fields__toolFound = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_toolFound", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_fields__toolFound_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CommandLineCompilerTool_fields__toolProps = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_toolProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_fields__toolProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CommandLineCompilerTool_fields[] = 
{
  &CommandLineCompilerTool_fields__configurator,
  &CommandLineCompilerTool_fields__configured,
  &CommandLineCompilerTool_fields__depChecker,
  &CommandLineCompilerTool_fields__outputParser,
  &CommandLineCompilerTool_fields__toolFound,
  &CommandLineCompilerTool_fields__toolProps,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__arg_toolClass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolClass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__arg_toolTribe = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolTribe", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__arg_toolProps = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolProps", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__args[] = 
{
  &CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__arg_toolClass,
  &CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__arg_toolTribe,
  &CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__arg_toolProps,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineCompilerTool_method_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CommandLineCompilerTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CommandLineCompilerTool::clazzInfo(), // return type
  "_0_CommandLineCompilerTool", // alternative name of method
  -1, // altlabelHashCode
  CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__args, // the arguments
  0, //arguments count
  CommandLineCompilerTool_methods_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__exceptions, // the declared exceptions
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_method_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineCompilerTool_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineCompilerTool_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineCompilerTool_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CommandLineCompilerTool_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CommandLineCompilerTool_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineCompilerTool_methods_configure_INLRProps__Z_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineCompilerTool_methods_configure_INLRProps__Z_args[] = 
{
  &CommandLineCompilerTool_methods_configure_INLRProps__Z_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineCompilerTool_methods_configure_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineCompilerTool_method_configure_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "configure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_configure", // alternative name of method
  -1, // altlabelHashCode
  CommandLineCompilerTool_methods_configure_INLRProps__Z_args, // the arguments
  0, //arguments count
  CommandLineCompilerTool_methods_configure_INLRProps__Z_exceptions, // the declared exceptions
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_method_configure_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineCompilerTool_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineCompilerTool_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineCompilerTool_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &CommandLineCompilerTool_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &CommandLineCompilerTool_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineCompilerTool_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineCompilerTool_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  CommandLineCompilerTool_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  CommandLineCompilerTool_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineCompilerTool_methods_getToolProps__LRProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineCompilerTool_methods_getToolProps__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineCompilerTool_method_getToolProps__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_3_getToolProps", // alternative name of method
  -1, // altlabelHashCode
  CommandLineCompilerTool_methods_getToolProps__LRProps__args, // the arguments
  0, //arguments count
  CommandLineCompilerTool_methods_getToolProps__LRProps__exceptions, // the declared exceptions
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_method_getToolProps__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineCompilerTool_methods_setCommandLineOutputParser_INLRCommandLineOutputParser__V_arg_parser = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parser", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCommandLineOutputParser::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineCompilerTool_methods_setCommandLineOutputParser_INLRCommandLineOutputParser__V_args[] = 
{
  &CommandLineCompilerTool_methods_setCommandLineOutputParser_INLRCommandLineOutputParser__V_arg_parser,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineCompilerTool_methods_setCommandLineOutputParser_INLRCommandLineOutputParser__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineCompilerTool_method_setCommandLineOutputParser_INLRCommandLineOutputParser__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCommandLineOutputParser", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setCommandLineOutputParser", // alternative name of method
  -1, // altlabelHashCode
  CommandLineCompilerTool_methods_setCommandLineOutputParser_INLRCommandLineOutputParser__V_args, // the arguments
  0, //arguments count
  CommandLineCompilerTool_methods_setCommandLineOutputParser_INLRCommandLineOutputParser__V_exceptions, // the declared exceptions
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_method_setCommandLineOutputParser_INLRCommandLineOutputParser__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CommandLineCompilerTool_methods_setDependencyChecker_INLRDependencyChecker__V_arg_depChecker = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "depChecker", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDependencyChecker::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CommandLineCompilerTool_methods_setDependencyChecker_INLRDependencyChecker__V_args[] = 
{
  &CommandLineCompilerTool_methods_setDependencyChecker_INLRDependencyChecker__V_arg_depChecker,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineCompilerTool_methods_setDependencyChecker_INLRDependencyChecker__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CommandLineCompilerTool_method_setDependencyChecker_INLRDependencyChecker__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDependencyChecker", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setDependencyChecker", // alternative name of method
  -1, // altlabelHashCode
  CommandLineCompilerTool_methods_setDependencyChecker_INLRDependencyChecker__V_args, // the arguments
  0, //arguments count
  CommandLineCompilerTool_methods_setDependencyChecker_INLRDependencyChecker__V_exceptions, // the declared exceptions
  CommandLineCompilerTool_MetainfoWrapper::CommandLineCompilerTool_method_setDependencyChecker_INLRDependencyChecker__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CommandLineCompilerTool_methods[] = 
{
  &CommandLineCompilerTool_method_CommandLineCompilerTool_INLRString_INLRString_INLRProps__LRCommandLineCompilerTool_,
  &CommandLineCompilerTool_method_GetClass__L_acdk_lang_RClass_,
  &CommandLineCompilerTool_method_configure_INLRProps__Z,
  &CommandLineCompilerTool_method_execute_INLRString_INLRProps__Z,
  &CommandLineCompilerTool_method_getToolProps__LRProps_,
  &CommandLineCompilerTool_method_setCommandLineOutputParser_INLRCommandLineOutputParser__V,
  &CommandLineCompilerTool_method_setDependencyChecker_INLRDependencyChecker__V,
  0
};


struct CommandLineCompilerTool_MetaInfoInitializer
{  CommandLineCompilerTool_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CommandLineCompilerTool::clazzInfo();
    ci->fields =  _CommandLineCompilerTool_fields;
    ci->methods =  _CommandLineCompilerTool_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CommandLineCompilerTool_MetaInfoInitializer CommandLineCompilerTool_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
CompileTask_create_array(int length)
{
  return new ObjectArrayImpl<RCompileTask>(length);
}

//static
::acdk::lang::RObject
CompileTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CompileTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CompileTask_method_CompileTask_INLRString_INLRString__LRCompileTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CompileTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CompileTask_method_CompileTask__LRCompileTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CompileTask();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CompileTask_method_CompileTask_INLRString__LRCompileTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CompileTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CompileTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CompileTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CompileTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CompileTask* This = dmi_cast<CompileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CompileTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CompileTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CompileTask_methods_CompileTask_INLRString_INLRString__LRCompileTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CompileTask_methods_CompileTask_INLRString_INLRString__LRCompileTask__arg_descr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "descr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CompileTask_methods_CompileTask_INLRString_INLRString__LRCompileTask__args[] = 
{
  &CompileTask_methods_CompileTask_INLRString_INLRString__LRCompileTask__arg_name,
  &CompileTask_methods_CompileTask_INLRString_INLRString__LRCompileTask__arg_descr,
  0
};

::acdk::lang::dmi::ClazzInfo* CompileTask_methods_CompileTask_INLRString_INLRString__LRCompileTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CompileTask_method_CompileTask_INLRString_INLRString__LRCompileTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CompileTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CompileTask::clazzInfo(), // return type
  "_0_CompileTask", // alternative name of method
  -1, // altlabelHashCode
  CompileTask_methods_CompileTask_INLRString_INLRString__LRCompileTask__args, // the arguments
  0, //arguments count
  CompileTask_methods_CompileTask_INLRString_INLRString__LRCompileTask__exceptions, // the declared exceptions
  CompileTask_MetainfoWrapper::CompileTask_method_CompileTask_INLRString_INLRString__LRCompileTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CompileTask_methods_CompileTask__LRCompileTask__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CompileTask_methods_CompileTask__LRCompileTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CompileTask_method_CompileTask__LRCompileTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CompileTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CompileTask::clazzInfo(), // return type
  "_1_CompileTask", // alternative name of method
  -1, // altlabelHashCode
  CompileTask_methods_CompileTask__LRCompileTask__args, // the arguments
  0, //arguments count
  CompileTask_methods_CompileTask__LRCompileTask__exceptions, // the declared exceptions
  CompileTask_MetainfoWrapper::CompileTask_method_CompileTask__LRCompileTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CompileTask_methods_CompileTask_INLRString__LRCompileTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CompileTask_methods_CompileTask_INLRString__LRCompileTask__args[] = 
{
  &CompileTask_methods_CompileTask_INLRString__LRCompileTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* CompileTask_methods_CompileTask_INLRString__LRCompileTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CompileTask_method_CompileTask_INLRString__LRCompileTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CompileTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CompileTask::clazzInfo(), // return type
  "_2_CompileTask", // alternative name of method
  -1, // altlabelHashCode
  CompileTask_methods_CompileTask_INLRString__LRCompileTask__args, // the arguments
  0, //arguments count
  CompileTask_methods_CompileTask_INLRString__LRCompileTask__exceptions, // the declared exceptions
  CompileTask_MetainfoWrapper::CompileTask_method_CompileTask_INLRString__LRCompileTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CompileTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CompileTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CompileTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CompileTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CompileTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CompileTask_MetainfoWrapper::CompileTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CompileTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CompileTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CompileTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &CompileTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &CompileTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* CompileTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CompileTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_execute", // alternative name of method
  -1, // altlabelHashCode
  CompileTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  CompileTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  CompileTask_MetainfoWrapper::CompileTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CompileTask_methods[] = 
{
  &CompileTask_method_CompileTask_INLRString_INLRString__LRCompileTask_,
  &CompileTask_method_CompileTask__LRCompileTask_,
  &CompileTask_method_CompileTask_INLRString__LRCompileTask_,
  &CompileTask_method_GetClass__L_acdk_lang_RClass_,
  &CompileTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct CompileTask_MetaInfoInitializer
{  CompileTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CompileTask::clazzInfo();
    ci->fields =  _CompileTask_fields;
    ci->methods =  _CompileTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CompileTask_MetaInfoInitializer CompileTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
CppSourceDependTask_create_array(int length)
{
  return new ObjectArrayImpl<RCppSourceDependTask>(length);
}

//static
::acdk::lang::RObject
CppSourceDependTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CppSourceDependTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CppSourceDependTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar(), args[3].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CppSourceDependTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CppSourceDependTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CppSourceDependTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CppSourceDependTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CppSourceDependTask_method_addIncludeDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CppSourceDependTask* This = dmi_cast<CppSourceDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CppSourceDependTask::addIncludeDir((RString)args[0].getObjectVar());
    else
        This->addIncludeDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CppSourceDependTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CppSourceDependTask* This = dmi_cast<CppSourceDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CppSourceDependTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields__checkOnlyDirectIncludes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CppSourceDependTask* This = dmi_cast<CppSourceDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_checkOnlyDirectIncludes, flags);
    else
      This->_checkOnlyDirectIncludes = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields__checkRecursive_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CppSourceDependTask* This = dmi_cast<CppSourceDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_checkRecursive, flags);
    else
      This->_checkRecursive = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields__includeDirs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CppSourceDependTask* This = dmi_cast<CppSourceDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_includeDirs, flags);
    else
      This->_includeDirs = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields__source_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CppSourceDependTask* This = dmi_cast<CppSourceDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_source, flags);
    else
      This->_source = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields__target_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CppSourceDependTask* This = dmi_cast<CppSourceDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_target, flags);
    else
      This->_target = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields_noSourceDeps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CppSourceDependTask::noSourceDeps, flags);
    else
      CppSourceDependTask::noSourceDeps = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields_onlyDirectIncludes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CppSourceDependTask::onlyDirectIncludes, flags);
    else
      CppSourceDependTask::onlyDirectIncludes = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields_recursiveDeps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CppSourceDependTask::recursiveDeps, flags);
    else
      CppSourceDependTask::recursiveDeps = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CppSourceDependTask_fields_useCache_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(CppSourceDependTask::useCache, flags);
    else
      CppSourceDependTask::useCache = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields__checkOnlyDirectIncludes = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_checkOnlyDirectIncludes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields__checkOnlyDirectIncludes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields__checkRecursive = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_checkRecursive", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields__checkRecursive_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields__includeDirs = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_includeDirs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields__includeDirs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields__source = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_source", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields__source_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields__target = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_target", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields__target_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields_noSourceDeps = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "noSourceDeps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields_noSourceDeps_accessor, // read/write access to this fields
  (void*)&CppSourceDependTask::noSourceDeps // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields_onlyDirectIncludes = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "onlyDirectIncludes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields_onlyDirectIncludes_accessor, // read/write access to this fields
  (void*)&CppSourceDependTask::onlyDirectIncludes // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields_recursiveDeps = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "recursiveDeps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields_recursiveDeps_accessor, // read/write access to this fields
  (void*)&CppSourceDependTask::recursiveDeps // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CppSourceDependTask_fields_useCache = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "useCache", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_fields_useCache_accessor, // read/write access to this fields
  (void*)&CppSourceDependTask::useCache // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CppSourceDependTask_fields[] = 
{
  &CppSourceDependTask_fields__checkOnlyDirectIncludes,
  &CppSourceDependTask_fields__checkRecursive,
  &CppSourceDependTask_fields__includeDirs,
  &CppSourceDependTask_fields__source,
  &CppSourceDependTask_fields__target,
  &CppSourceDependTask_fields_noSourceDeps,
  &CppSourceDependTask_fields_onlyDirectIncludes,
  &CppSourceDependTask_fields_recursiveDeps,
  &CppSourceDependTask_fields_useCache,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__arg_parseSource = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parseSource", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__arg_checkRecursive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "checkRecursive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__arg_onlyDirectIncludes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onlyDirectIncludes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__args[] = 
{
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__arg_parseSource,
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__arg_target,
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__arg_checkRecursive,
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__arg_onlyDirectIncludes,
  0
};

::acdk::lang::dmi::ClazzInfo* CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CppSourceDependTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CppSourceDependTask::clazzInfo(), // return type
  "_0_CppSourceDependTask", // alternative name of method
  -1, // altlabelHashCode
  CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__args, // the arguments
  0, //arguments count
  CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__exceptions, // the declared exceptions
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__arg_parseSource = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parseSource", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__args[] = 
{
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__arg_parseSource,
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CppSourceDependTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CppSourceDependTask::clazzInfo(), // return type
  "_1_CppSourceDependTask", // alternative name of method
  -1, // altlabelHashCode
  CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__args, // the arguments
  0, //arguments count
  CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__exceptions, // the declared exceptions
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__arg_parseSource = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parseSource", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__arg_checkRecursive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "checkRecursive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__args[] = 
{
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__arg_parseSource,
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__arg_target,
  &CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__arg_checkRecursive,
  0
};

::acdk::lang::dmi::ClazzInfo* CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CppSourceDependTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CppSourceDependTask::clazzInfo(), // return type
  "_2_CppSourceDependTask", // alternative name of method
  -1, // altlabelHashCode
  CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__args, // the arguments
  0, //arguments count
  CppSourceDependTask_methods_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__exceptions, // the declared exceptions
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CppSourceDependTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CppSourceDependTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CppSourceDependTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CppSourceDependTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CppSourceDependTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_addIncludeDir_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CppSourceDependTask_methods_addIncludeDir_INLRString__V_args[] = 
{
  &CppSourceDependTask_methods_addIncludeDir_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* CppSourceDependTask_methods_addIncludeDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CppSourceDependTask_method_addIncludeDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addIncludeDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addIncludeDir", // alternative name of method
  -1, // altlabelHashCode
  CppSourceDependTask_methods_addIncludeDir_INLRString__V_args, // the arguments
  0, //arguments count
  CppSourceDependTask_methods_addIncludeDir_INLRString__V_exceptions, // the declared exceptions
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_method_addIncludeDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CppSourceDependTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CppSourceDependTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &CppSourceDependTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &CppSourceDependTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* CppSourceDependTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CppSourceDependTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_execute", // alternative name of method
  -1, // altlabelHashCode
  CppSourceDependTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  CppSourceDependTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  CppSourceDependTask_MetainfoWrapper::CppSourceDependTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CppSourceDependTask_methods[] = 
{
  &CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString_ZZ_LRCppSourceDependTask_,
  &CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString__LRCppSourceDependTask_,
  &CppSourceDependTask_method_CppSourceDependTask_INLRString_INLRString_Z_LRCppSourceDependTask_,
  &CppSourceDependTask_method_GetClass__L_acdk_lang_RClass_,
  &CppSourceDependTask_method_addIncludeDir_INLRString__V,
  &CppSourceDependTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct CppSourceDependTask_MetaInfoInitializer
{  CppSourceDependTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CppSourceDependTask::clazzInfo();
    ci->fields =  _CppSourceDependTask_fields;
    ci->methods =  _CppSourceDependTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CppSourceDependTask_MetaInfoInitializer CppSourceDependTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
DirExistsTask_create_array(int length)
{
  return new ObjectArrayImpl<RDirExistsTask>(length);
}

//static
::acdk::lang::RObject
DirExistsTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DirExistsTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirExistsTask_method_DirExistsTask_INLRString__LRDirExistsTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DirExistsTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirExistsTask_method_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DirExistsTask((::acdk::io::RFile)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirExistsTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DirExistsTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirExistsTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirExistsTask* This = dmi_cast<DirExistsTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DirExistsTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DirExistsTask_method_getTaskInfo__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DirExistsTask* This = dmi_cast<DirExistsTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DirExistsTask::getTaskInfo();
    else
        ret = (::acdk::lang::RObject)This->getTaskInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DirExistsTask_fields__dir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DirExistsTask* This = dmi_cast<DirExistsTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dir, flags);
    else
      This->_dir = (::acdk::io::RFile)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DirExistsTask_fields__dir = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RFile::clazzInfo(),
  DirExistsTask_MetainfoWrapper::DirExistsTask_fields__dir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DirExistsTask_fields[] = 
{
  &DirExistsTask_fields__dir,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DirExistsTask_methods_DirExistsTask_INLRString__LRDirExistsTask__arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirExistsTask_methods_DirExistsTask_INLRString__LRDirExistsTask__args[] = 
{
  &DirExistsTask_methods_DirExistsTask_INLRString__LRDirExistsTask__arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* DirExistsTask_methods_DirExistsTask_INLRString__LRDirExistsTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirExistsTask_method_DirExistsTask_INLRString__LRDirExistsTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DirExistsTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DirExistsTask::clazzInfo(), // return type
  "_0_DirExistsTask", // alternative name of method
  -1, // altlabelHashCode
  DirExistsTask_methods_DirExistsTask_INLRString__LRDirExistsTask__args, // the arguments
  0, //arguments count
  DirExistsTask_methods_DirExistsTask_INLRString__LRDirExistsTask__exceptions, // the declared exceptions
  DirExistsTask_MetainfoWrapper::DirExistsTask_method_DirExistsTask_INLRString__LRDirExistsTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirExistsTask_methods_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask__arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirExistsTask_methods_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask__args[] = 
{
  &DirExistsTask_methods_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask__arg_dir,
  0
};

::acdk::lang::dmi::ClazzInfo* DirExistsTask_methods_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirExistsTask_method_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DirExistsTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DirExistsTask::clazzInfo(), // return type
  "_1_DirExistsTask", // alternative name of method
  -1, // altlabelHashCode
  DirExistsTask_methods_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask__args, // the arguments
  0, //arguments count
  DirExistsTask_methods_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask__exceptions, // the declared exceptions
  DirExistsTask_MetainfoWrapper::DirExistsTask_method_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirExistsTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DirExistsTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirExistsTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DirExistsTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DirExistsTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DirExistsTask_MetainfoWrapper::DirExistsTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DirExistsTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DirExistsTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirExistsTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &DirExistsTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &DirExistsTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* DirExistsTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirExistsTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  DirExistsTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  DirExistsTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  DirExistsTask_MetainfoWrapper::DirExistsTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DirExistsTask_methods_getTaskInfo__LRTaskInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DirExistsTask_methods_getTaskInfo__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DirExistsTask_method_getTaskInfo__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskInfo::clazzInfo(), // return type
  "_3_getTaskInfo", // alternative name of method
  -1, // altlabelHashCode
  DirExistsTask_methods_getTaskInfo__LRTaskInfo__args, // the arguments
  0, //arguments count
  DirExistsTask_methods_getTaskInfo__LRTaskInfo__exceptions, // the declared exceptions
  DirExistsTask_MetainfoWrapper::DirExistsTask_method_getTaskInfo__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DirExistsTask_methods[] = 
{
  &DirExistsTask_method_DirExistsTask_INLRString__LRDirExistsTask_,
  &DirExistsTask_method_DirExistsTask_INL_acdk_io_RFile__LRDirExistsTask_,
  &DirExistsTask_method_GetClass__L_acdk_lang_RClass_,
  &DirExistsTask_method_execute_INLRString_INLRProps__Z,
  &DirExistsTask_method_getTaskInfo__LRTaskInfo_,
  0
};


struct DirExistsTask_MetaInfoInitializer
{  DirExistsTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DirExistsTask::clazzInfo();
    ci->fields =  _DirExistsTask_fields;
    ci->methods =  _DirExistsTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DirExistsTask_MetaInfoInitializer DirExistsTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
FileCopyTask_create_array(int length)
{
  return new ObjectArrayImpl<RFileCopyTask>(length);
}

//static
::acdk::lang::RObject
FileCopyTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileCopyTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileCopyTask_method_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileCopyTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileCopyTask_method_FileCopyTask_INLRString_INLRString__LRFileCopyTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileCopyTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileCopyTask_method_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileCopyTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileCopyTask((RFileSet)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileCopyTask((RFileSet)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileCopyTask((RFileSet)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileCopyTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileCopyTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileCopyTask_method_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileCopyTask* This = dmi_cast<FileCopyTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileCopyTask::executeFop((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RProps)args[3].getObjectVar());
    else
      ret = This->executeFop((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RProps)args[3].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FileCopyTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__arg_sourcestartdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sourcestartdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__args[] = 
{
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__arg_source,
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__arg_target,
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__arg_sourcestartdir,
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileCopyTask_method_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileCopyTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileCopyTask::clazzInfo(), // return type
  "_0_FileCopyTask", // alternative name of method
  -1, // altlabelHashCode
  FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__args, // the arguments
  0, //arguments count
  FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__exceptions, // the declared exceptions
  FileCopyTask_MetainfoWrapper::FileCopyTask_method_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString__LRFileCopyTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString__LRFileCopyTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileCopyTask_methods_FileCopyTask_INLRString_INLRString__LRFileCopyTask__args[] = 
{
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString__LRFileCopyTask__arg_source,
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString__LRFileCopyTask__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask_methods_FileCopyTask_INLRString_INLRString__LRFileCopyTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileCopyTask_method_FileCopyTask_INLRString_INLRString__LRFileCopyTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileCopyTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileCopyTask::clazzInfo(), // return type
  "_1_FileCopyTask", // alternative name of method
  -1, // altlabelHashCode
  FileCopyTask_methods_FileCopyTask_INLRString_INLRString__LRFileCopyTask__args, // the arguments
  0, //arguments count
  FileCopyTask_methods_FileCopyTask_INLRString_INLRString__LRFileCopyTask__exceptions, // the declared exceptions
  FileCopyTask_MetainfoWrapper::FileCopyTask_method_FileCopyTask_INLRString_INLRString__LRFileCopyTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__arg_sourcestartdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sourcestartdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__args[] = 
{
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__arg_source,
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__arg_target,
  &FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__arg_sourcestartdir,
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileCopyTask_method_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileCopyTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileCopyTask::clazzInfo(), // return type
  "_2_FileCopyTask", // alternative name of method
  -1, // altlabelHashCode
  FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__args, // the arguments
  0, //arguments count
  FileCopyTask_methods_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__exceptions, // the declared exceptions
  FileCopyTask_MetainfoWrapper::FileCopyTask_method_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__arg_sourcestartdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sourcestartdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__args[] = 
{
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__arg_source,
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__arg_target,
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__arg_sourcestartdir,
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileCopyTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileCopyTask::clazzInfo(), // return type
  "_3_FileCopyTask", // alternative name of method
  -1, // altlabelHashCode
  FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__args, // the arguments
  0, //arguments count
  FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__exceptions, // the declared exceptions
  FileCopyTask_MetainfoWrapper::FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__args[] = 
{
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__arg_source,
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileCopyTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileCopyTask::clazzInfo(), // return type
  "_4_FileCopyTask", // alternative name of method
  -1, // altlabelHashCode
  FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__args, // the arguments
  0, //arguments count
  FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__exceptions, // the declared exceptions
  FileCopyTask_MetainfoWrapper::FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__arg_sourcestartdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sourcestartdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__args[] = 
{
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__arg_source,
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__arg_target,
  &FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__arg_sourcestartdir,
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileCopyTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileCopyTask::clazzInfo(), // return type
  "_5_FileCopyTask", // alternative name of method
  -1, // altlabelHashCode
  FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__args, // the arguments
  0, //arguments count
  FileCopyTask_methods_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__exceptions, // the declared exceptions
  FileCopyTask_MetainfoWrapper::FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileCopyTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileCopyTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileCopyTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileCopyTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileCopyTask_MetainfoWrapper::FileCopyTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_args[] = 
{
  &FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_exec,
  &FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_source,
  &FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_target,
  &FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileCopyTask_method_executeFop_INLRString_INLRString_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeFop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_executeFop", // alternative name of method
  -1, // altlabelHashCode
  FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  FileCopyTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  FileCopyTask_MetainfoWrapper::FileCopyTask_method_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileCopyTask_methods[] = 
{
  &FileCopyTask_method_FileCopyTask_INLRString_INLRString_INLRString_I_LRFileCopyTask_,
  &FileCopyTask_method_FileCopyTask_INLRString_INLRString__LRFileCopyTask_,
  &FileCopyTask_method_FileCopyTask_INLRString_INLRString_INLRString__LRFileCopyTask_,
  &FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString_INLRString_I_LRFileCopyTask_,
  &FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString__LRFileCopyTask_,
  &FileCopyTask_method_FileCopyTask_INLRFileSet_INLRString_INLRString__LRFileCopyTask_,
  &FileCopyTask_method_GetClass__L_acdk_lang_RClass_,
  &FileCopyTask_method_executeFop_INLRString_INLRString_INLRString_INLRProps__Z,
  0
};


struct FileCopyTask_MetaInfoInitializer
{  FileCopyTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileCopyTask::clazzInfo();
    ci->fields =  _FileCopyTask_fields;
    ci->methods =  _FileCopyTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileCopyTask_MetaInfoInitializer FileCopyTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
FileDeleteTask_create_array(int length)
{
  return new ObjectArrayImpl<RFileDeleteTask>(length);
}

//static
::acdk::lang::RObject
FileDeleteTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileDeleteTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDeleteTask_method_FileDeleteTask_INLRString__LRFileDeleteTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDeleteTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDeleteTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileDeleteTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDeleteTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDeleteTask* This = dmi_cast<FileDeleteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDeleteTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileDeleteTask_fields__fname_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileDeleteTask* This = dmi_cast<FileDeleteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fname, flags);
    else
      This->_fname = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileDeleteTask_fields__fname = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fname", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileDeleteTask_MetainfoWrapper::FileDeleteTask_fields__fname_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileDeleteTask_fields[] = 
{
  &FileDeleteTask_fields__fname,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDeleteTask_methods_FileDeleteTask_INLRString__LRFileDeleteTask__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDeleteTask_methods_FileDeleteTask_INLRString__LRFileDeleteTask__args[] = 
{
  &FileDeleteTask_methods_FileDeleteTask_INLRString__LRFileDeleteTask__arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDeleteTask_methods_FileDeleteTask_INLRString__LRFileDeleteTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDeleteTask_method_FileDeleteTask_INLRString__LRFileDeleteTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDeleteTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDeleteTask::clazzInfo(), // return type
  "_0_FileDeleteTask", // alternative name of method
  -1, // altlabelHashCode
  FileDeleteTask_methods_FileDeleteTask_INLRString__LRFileDeleteTask__args, // the arguments
  0, //arguments count
  FileDeleteTask_methods_FileDeleteTask_INLRString__LRFileDeleteTask__exceptions, // the declared exceptions
  FileDeleteTask_MetainfoWrapper::FileDeleteTask_method_FileDeleteTask_INLRString__LRFileDeleteTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDeleteTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDeleteTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDeleteTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileDeleteTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileDeleteTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileDeleteTask_MetainfoWrapper::FileDeleteTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDeleteTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDeleteTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDeleteTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &FileDeleteTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &FileDeleteTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDeleteTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDeleteTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_execute", // alternative name of method
  -1, // altlabelHashCode
  FileDeleteTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  FileDeleteTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  FileDeleteTask_MetainfoWrapper::FileDeleteTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileDeleteTask_methods[] = 
{
  &FileDeleteTask_method_FileDeleteTask_INLRString__LRFileDeleteTask_,
  &FileDeleteTask_method_GetClass__L_acdk_lang_RClass_,
  &FileDeleteTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct FileDeleteTask_MetaInfoInitializer
{  FileDeleteTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileDeleteTask::clazzInfo();
    ci->fields =  _FileDeleteTask_fields;
    ci->methods =  _FileDeleteTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileDeleteTask_MetaInfoInitializer FileDeleteTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
FileDependTask_create_array(int length)
{
  return new ObjectArrayImpl<RFileDependTask>(length);
}

//static
::acdk::lang::RObject
FileDependTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileDependTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDependTask_method_FileDependTask_INLRString_INLRString__LRFileDependTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDependTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDependTask_method_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDependTask((RStringArray)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDependTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileDependTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDependTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDependTask* This = dmi_cast<FileDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDependTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileDependTask_fields__source_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileDependTask* This = dmi_cast<FileDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_source, flags);
    else
      This->_source = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileDependTask_fields__sources_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileDependTask* This = dmi_cast<FileDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sources, flags);
    else
      This->_sources = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileDependTask_fields__target_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileDependTask* This = dmi_cast<FileDependTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_target, flags);
    else
      This->_target = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileDependTask_fields__source = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_source", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileDependTask_MetainfoWrapper::FileDependTask_fields__source_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileDependTask_fields__sources = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sources", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  FileDependTask_MetainfoWrapper::FileDependTask_fields__sources_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileDependTask_fields__target = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_target", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileDependTask_MetainfoWrapper::FileDependTask_fields__target_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileDependTask_fields[] = 
{
  &FileDependTask_fields__source,
  &FileDependTask_fields__sources,
  &FileDependTask_fields__target,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDependTask_methods_FileDependTask_INLRString_INLRString__LRFileDependTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDependTask_methods_FileDependTask_INLRString_INLRString__LRFileDependTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDependTask_methods_FileDependTask_INLRString_INLRString__LRFileDependTask__args[] = 
{
  &FileDependTask_methods_FileDependTask_INLRString_INLRString__LRFileDependTask__arg_source,
  &FileDependTask_methods_FileDependTask_INLRString_INLRString__LRFileDependTask__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDependTask_methods_FileDependTask_INLRString_INLRString__LRFileDependTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDependTask_method_FileDependTask_INLRString_INLRString__LRFileDependTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDependTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDependTask::clazzInfo(), // return type
  "_0_FileDependTask", // alternative name of method
  -1, // altlabelHashCode
  FileDependTask_methods_FileDependTask_INLRString_INLRString__LRFileDependTask__args, // the arguments
  0, //arguments count
  FileDependTask_methods_FileDependTask_INLRString_INLRString__LRFileDependTask__exceptions, // the declared exceptions
  FileDependTask_MetainfoWrapper::FileDependTask_method_FileDependTask_INLRString_INLRString__LRFileDependTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDependTask_methods_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__arg_sources = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sources", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDependTask_methods_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDependTask_methods_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__args[] = 
{
  &FileDependTask_methods_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__arg_sources,
  &FileDependTask_methods_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDependTask_methods_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDependTask_method_FileDependTask_INLRStringArray_INLRString__LRFileDependTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDependTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDependTask::clazzInfo(), // return type
  "_1_FileDependTask", // alternative name of method
  -1, // altlabelHashCode
  FileDependTask_methods_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__args, // the arguments
  0, //arguments count
  FileDependTask_methods_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__exceptions, // the declared exceptions
  FileDependTask_MetainfoWrapper::FileDependTask_method_FileDependTask_INLRStringArray_INLRString__LRFileDependTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDependTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDependTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDependTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileDependTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileDependTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileDependTask_MetainfoWrapper::FileDependTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDependTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDependTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDependTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &FileDependTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &FileDependTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDependTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDependTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  FileDependTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  FileDependTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  FileDependTask_MetainfoWrapper::FileDependTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileDependTask_methods[] = 
{
  &FileDependTask_method_FileDependTask_INLRString_INLRString__LRFileDependTask_,
  &FileDependTask_method_FileDependTask_INLRStringArray_INLRString__LRFileDependTask_,
  &FileDependTask_method_GetClass__L_acdk_lang_RClass_,
  &FileDependTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct FileDependTask_MetaInfoInitializer
{  FileDependTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileDependTask::clazzInfo();
    ci->fields =  _FileDependTask_fields;
    ci->methods =  _FileDependTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileDependTask_MetaInfoInitializer FileDependTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
FileOpTask_create_array(int length)
{
  return new ObjectArrayImpl<RFileOpTask>(length);
}

//static
::acdk::lang::RObject
FileOpTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileOpTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileOpTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileOpTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileOpTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileOpTask* This = dmi_cast<FileOpTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileOpTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileOpTask_method_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileOpTask* This = dmi_cast<FileOpTask>(This_);
  ret = This->executeFop((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RProps)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileOpTask_fields__flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileOpTask* This = dmi_cast<FileOpTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flags, flags);
    else
      This->_flags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileOpTask_fields__source_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileOpTask* This = dmi_cast<FileOpTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_source, flags);
    else
      This->_source = (RFileSet)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileOpTask_fields__sourceBaseDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileOpTask* This = dmi_cast<FileOpTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sourceBaseDir, flags);
    else
      This->_sourceBaseDir = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileOpTask_fields__target_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileOpTask* This = dmi_cast<FileOpTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_target, flags);
    else
      This->_target = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileOpTask_fields__flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FileOpTask_MetainfoWrapper::FileOpTask_fields__flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileOpTask_fields__source = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_source", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(),
  FileOpTask_MetainfoWrapper::FileOpTask_fields__source_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileOpTask_fields__sourceBaseDir = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sourceBaseDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileOpTask_MetainfoWrapper::FileOpTask_fields__sourceBaseDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileOpTask_fields__target = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_target", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileOpTask_MetainfoWrapper::FileOpTask_fields__target_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileOpTask_fields[] = 
{
  &FileOpTask_fields__flags,
  &FileOpTask_fields__source,
  &FileOpTask_fields__sourceBaseDir,
  &FileOpTask_fields__target,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_soursebasedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "soursebasedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_source,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_target,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_soursebasedir,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_desc,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_0_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString__LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRString__LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRString__LRFileOpTask__arg_source,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRString__LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRString__LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_1_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRString__LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRString__LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString__LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString__LRFileOpTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRString_INLRString__LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRString_INLRString__LRFileOpTask__arg_source,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString__LRFileOpTask__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRString_INLRString__LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRString_INLRString__LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_2_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRString_INLRString__LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRString_INLRString__LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__arg_soursebasedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "soursebasedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__arg_source,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__arg_target,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__arg_soursebasedir,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_3_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__arg_soursebasedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "soursebasedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__arg_source,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__arg_target,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__arg_soursebasedir,
  &FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_4_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_soursebasedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "soursebasedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_source,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_target,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_soursebasedir,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_desc,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_5_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet__LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRFileSet__LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRFileSet__LRFileOpTask__arg_source,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRFileSet__LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRFileSet__LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_6_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRFileSet__LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRFileSet__LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString__LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString__LRFileOpTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRFileSet_INLRString__LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString__LRFileOpTask__arg_source,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString__LRFileOpTask__arg_target,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRFileSet_INLRString__LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRFileSet_INLRString__LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_7_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRFileSet_INLRString__LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRFileSet_INLRString__LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__arg_soursebasedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "soursebasedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__arg_source,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__arg_target,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__arg_soursebasedir,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_8_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__arg_soursebasedir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "soursebasedir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__args[] = 
{
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__arg_source,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__arg_target,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__arg_soursebasedir,
  &FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileOpTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileOpTask::clazzInfo(), // return type
  "_9_FileOpTask", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__args, // the arguments
  0, //arguments count
  FileOpTask_methods_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileOpTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileOpTask_MetainfoWrapper::FileOpTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &FileOpTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &FileOpTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_execute", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  FileOpTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  FileOpTask_MetainfoWrapper::FileOpTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_target = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "target", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_args[] = 
{
  &FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_exec,
  &FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_source,
  &FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_target,
  &FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileOpTask_method_executeFop_INLRString_INLRString_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeFop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_executeFop", // alternative name of method
  -1, // altlabelHashCode
  FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  FileOpTask_methods_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  FileOpTask_MetainfoWrapper::FileOpTask_method_executeFop_INLRString_INLRString_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileOpTask_methods[] = 
{
  &FileOpTask_method_FileOpTask_INLRString_INLRString_INLRString_INLRString_I_LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRString__LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRString_INLRString__LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRString_INLRString_INLRString__LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRString_INLRString_INLRString_INLRString__LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString_I_LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRFileSet__LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRFileSet_INLRString__LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRFileSet_INLRString_INLRString__LRFileOpTask_,
  &FileOpTask_method_FileOpTask_INLRFileSet_INLRString_INLRString_INLRString__LRFileOpTask_,
  &FileOpTask_method_GetClass__L_acdk_lang_RClass_,
  &FileOpTask_method_execute_INLRString_INLRProps__Z,
  &FileOpTask_method_executeFop_INLRString_INLRString_INLRString_INLRProps__Z,
  0
};


struct FileOpTask_MetaInfoInitializer
{  FileOpTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileOpTask::clazzInfo();
    ci->fields =  _FileOpTask_fields;
    ci->methods =  _FileOpTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileOpTask_MetaInfoInitializer FileOpTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
FileSet_create_array(int length)
{
  return new ObjectArrayImpl<RFileSet>(length);
}

//static
::acdk::lang::RObject
FileSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_FileSet__LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_FileSet_INLRString__LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileSet((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_FileSet_INLRStringArray__LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileSet((RStringArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_addSpec_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileSet* This = dmi_cast<FileSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileSet::addSpec((RString)args[0].getObjectVar());
    else
        This->addSpec((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileSet* This = dmi_cast<FileSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileSet::collectFiles((acdk::io::RFile)args[0].getObjectVar(), (acdk::io::RFilenameFilter)args[1].getObjectVar(), (RStringArray)args[2].getObjectVar());
    else
        This->collectFiles((acdk::io::RFile)args[0].getObjectVar(), (acdk::io::RFilenameFilter)args[1].getObjectVar(), (RStringArray)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileSet::createFileSpecs((RStringArray)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileSet::createFileSpecs((RStringArray)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_expand_INLRString_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileSet* This = dmi_cast<FileSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileSet::expand((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    else
        This->expand((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_expandPattern_INLRString_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileSet* This = dmi_cast<FileSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileSet::expandPattern((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    else
        This->expandPattern((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_getFiles__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileSet* This = dmi_cast<FileSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileSet::getFiles();
    else
        ret = (::acdk::lang::RObject)This->getFiles();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileSet_method_isPattern_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileSet* This = dmi_cast<FileSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileSet::isPattern((RString)args[0].getObjectVar());
    else
      ret = This->isPattern((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileSet_fields__fileSpecs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileSet* This = dmi_cast<FileSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fileSpecs, flags);
    else
      This->_fileSpecs = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileSet_fields__fileSpecs = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fileSpecs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  FileSet_MetainfoWrapper::FileSet_fields__fileSpecs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileSet_fields[] = 
{
  &FileSet_fields__fileSpecs,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_FileSet__LRFileSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_FileSet__LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_FileSet__LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileSet::clazzInfo(), // return type
  "_0_FileSet", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_FileSet__LRFileSet__args, // the arguments
  0, //arguments count
  FileSet_methods_FileSet__LRFileSet__exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_FileSet__LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_FileSet_INLRString__LRFileSet__arg_spec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "spec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_FileSet_INLRString__LRFileSet__args[] = 
{
  &FileSet_methods_FileSet_INLRString__LRFileSet__arg_spec,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_FileSet_INLRString__LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_FileSet_INLRString__LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileSet::clazzInfo(), // return type
  "_1_FileSet", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_FileSet_INLRString__LRFileSet__args, // the arguments
  0, //arguments count
  FileSet_methods_FileSet_INLRString__LRFileSet__exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_FileSet_INLRString__LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_FileSet_INLRStringArray__LRFileSet__arg_specs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "specs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_FileSet_INLRStringArray__LRFileSet__args[] = 
{
  &FileSet_methods_FileSet_INLRStringArray__LRFileSet__arg_specs,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_FileSet_INLRStringArray__LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_FileSet_INLRStringArray__LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileSet::clazzInfo(), // return type
  "_2_FileSet", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_FileSet_INLRStringArray__LRFileSet__args, // the arguments
  0, //arguments count
  FileSet_methods_FileSet_INLRStringArray__LRFileSet__exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_FileSet_INLRStringArray__LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_addSpec_INLRString__V_arg_spec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "spec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_addSpec_INLRString__V_args[] = 
{
  &FileSet_methods_addSpec_INLRString__V_arg_spec,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_addSpec_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_addSpec_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSpec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addSpec", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_addSpec_INLRString__V_args, // the arguments
  0, //arguments count
  FileSet_methods_addSpec_INLRString__V_exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_addSpec_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFilenameFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_arg_flist = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "flist", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_args[] = 
{
  &FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_arg_dir,
  &FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_arg_filter,
  &FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_arg_flist,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "collectFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_collectFiles", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_args, // the arguments
  0, //arguments count
  FileSet_methods_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__arg_filesOrDirs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filesOrDirs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__arg_filematchpattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filematchpattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__arg_alwaysAddFiles = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "alwaysAddFiles", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__args[] = 
{
  &FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__arg_filesOrDirs,
  &FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__arg_filematchpattern,
  &FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__arg_alwaysAddFiles,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createFileSpecs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(), // return type
  "_5_createFileSpecs", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__args, // the arguments
  0, //arguments count
  FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__arg_filesOrDirs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filesOrDirs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__arg_filematchpattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filematchpattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__args[] = 
{
  &FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__arg_filesOrDirs,
  &FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__arg_filematchpattern,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "createFileSpecs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSet::clazzInfo(), // return type
  "_6_createFileSpecs", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__args, // the arguments
  0, //arguments count
  FileSet_methods_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_expand_INLRString_INLRStringArray__V_arg_spec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "spec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_expand_INLRString_INLRStringArray__V_arg_erg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "erg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_expand_INLRString_INLRStringArray__V_args[] = 
{
  &FileSet_methods_expand_INLRString_INLRStringArray__V_arg_spec,
  &FileSet_methods_expand_INLRString_INLRStringArray__V_arg_erg,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_expand_INLRString_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_expand_INLRString_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expand", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_expand", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_expand_INLRString_INLRStringArray__V_args, // the arguments
  0, //arguments count
  FileSet_methods_expand_INLRString_INLRStringArray__V_exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_expand_INLRString_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_expandPattern_INLRString_INLRStringArray__V_arg_pattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_expandPattern_INLRString_INLRStringArray__V_arg_erg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "erg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_expandPattern_INLRString_INLRStringArray__V_args[] = 
{
  &FileSet_methods_expandPattern_INLRString_INLRStringArray__V_arg_pattern,
  &FileSet_methods_expandPattern_INLRString_INLRStringArray__V_arg_erg,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_expandPattern_INLRString_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_expandPattern_INLRString_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "expandPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_expandPattern", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_expandPattern_INLRString_INLRStringArray__V_args, // the arguments
  0, //arguments count
  FileSet_methods_expandPattern_INLRString_INLRStringArray__V_exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_expandPattern_INLRString_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_getFiles__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_getFiles__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_getFiles__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_4_getFiles", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_getFiles__LRStringArray__args, // the arguments
  0, //arguments count
  FileSet_methods_getFiles__LRStringArray__exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_getFiles__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileSet_methods_isPattern_INLRString__Z_arg_spec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "spec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileSet_methods_isPattern_INLRString__Z_args[] = 
{
  &FileSet_methods_isPattern_INLRString__Z_arg_spec,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet_methods_isPattern_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileSet_method_isPattern_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isPattern", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_isPattern", // alternative name of method
  -1, // altlabelHashCode
  FileSet_methods_isPattern_INLRString__Z_args, // the arguments
  0, //arguments count
  FileSet_methods_isPattern_INLRString__Z_exceptions, // the declared exceptions
  FileSet_MetainfoWrapper::FileSet_method_isPattern_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileSet_methods[] = 
{
  &FileSet_method_FileSet__LRFileSet_,
  &FileSet_method_FileSet_INLRString__LRFileSet_,
  &FileSet_method_FileSet_INLRStringArray__LRFileSet_,
  &FileSet_method_GetClass__L_acdk_lang_RClass_,
  &FileSet_method_addSpec_INLRString__V,
  &FileSet_method_collectFiles_INLacdk_io_RFile_INLacdk_io_RFilenameFilter_INLRStringArray__V,
  &FileSet_method_createFileSpecs_INLRStringArray_INLRStringArray_Z_LRFileSet_,
  &FileSet_method_createFileSpecs_INLRStringArray_INLRStringArray__LRFileSet_,
  &FileSet_method_expand_INLRString_INLRStringArray__V,
  &FileSet_method_expandPattern_INLRString_INLRStringArray__V,
  &FileSet_method_getFiles__LRStringArray_,
  &FileSet_method_isPattern_INLRString__Z,
  0
};


struct FileSet_MetaInfoInitializer
{  FileSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileSet::clazzInfo();
    ci->fields =  _FileSet_fields;
    ci->methods =  _FileSet_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileSet_MetaInfoInitializer FileSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
JavaCompileTask_create_array(int length)
{
  return new ObjectArrayImpl<RJavaCompileTask>(length);
}

//static
::acdk::lang::RObject
JavaCompileTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class JavaCompileTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JavaCompileTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)JavaCompileTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JavaCompileTask_method_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new JavaCompileTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JavaCompileTask_method_JavaCompileTask_INLRString__LRJavaCompileTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new JavaCompileTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JavaCompileTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JavaCompileTask* This = dmi_cast<JavaCompileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->JavaCompileTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JavaCompileTask_method_help__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JavaCompileTask* This = dmi_cast<JavaCompileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->JavaCompileTask::help();
    else
        This->help();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JavaCompileTask_fields__source_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JavaCompileTask* This = dmi_cast<JavaCompileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_source, flags);
    else
      This->_source = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JavaCompileTask_fields__targetDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JavaCompileTask* This = dmi_cast<JavaCompileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_targetDir, flags);
    else
      This->_targetDir = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo JavaCompileTask_fields__source = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_source", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  JavaCompileTask_MetainfoWrapper::JavaCompileTask_fields__source_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo JavaCompileTask_fields__targetDir = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_targetDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  JavaCompileTask_MetainfoWrapper::JavaCompileTask_fields__targetDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _JavaCompileTask_fields[] = 
{
  &JavaCompileTask_fields__source,
  &JavaCompileTask_fields__targetDir,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* JavaCompileTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* JavaCompileTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JavaCompileTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  JavaCompileTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  JavaCompileTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  JavaCompileTask_MetainfoWrapper::JavaCompileTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JavaCompileTask_methods_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JavaCompileTask_methods_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__arg_targetdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "targetdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JavaCompileTask_methods_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__args[] = 
{
  &JavaCompileTask_methods_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__arg_source,
  &JavaCompileTask_methods_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__arg_targetdir,
  0
};

::acdk::lang::dmi::ClazzInfo* JavaCompileTask_methods_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JavaCompileTask_method_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "JavaCompileTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  JavaCompileTask::clazzInfo(), // return type
  "_0_JavaCompileTask", // alternative name of method
  -1, // altlabelHashCode
  JavaCompileTask_methods_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__args, // the arguments
  0, //arguments count
  JavaCompileTask_methods_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__exceptions, // the declared exceptions
  JavaCompileTask_MetainfoWrapper::JavaCompileTask_method_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JavaCompileTask_methods_JavaCompileTask_INLRString__LRJavaCompileTask__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JavaCompileTask_methods_JavaCompileTask_INLRString__LRJavaCompileTask__args[] = 
{
  &JavaCompileTask_methods_JavaCompileTask_INLRString__LRJavaCompileTask__arg_source,
  0
};

::acdk::lang::dmi::ClazzInfo* JavaCompileTask_methods_JavaCompileTask_INLRString__LRJavaCompileTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JavaCompileTask_method_JavaCompileTask_INLRString__LRJavaCompileTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "JavaCompileTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  JavaCompileTask::clazzInfo(), // return type
  "_1_JavaCompileTask", // alternative name of method
  -1, // altlabelHashCode
  JavaCompileTask_methods_JavaCompileTask_INLRString__LRJavaCompileTask__args, // the arguments
  0, //arguments count
  JavaCompileTask_methods_JavaCompileTask_INLRString__LRJavaCompileTask__exceptions, // the declared exceptions
  JavaCompileTask_MetainfoWrapper::JavaCompileTask_method_JavaCompileTask_INLRString__LRJavaCompileTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JavaCompileTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JavaCompileTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JavaCompileTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &JavaCompileTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &JavaCompileTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* JavaCompileTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JavaCompileTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  JavaCompileTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  JavaCompileTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  JavaCompileTask_MetainfoWrapper::JavaCompileTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* JavaCompileTask_methods_help__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* JavaCompileTask_methods_help__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JavaCompileTask_method_help__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "help", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_help", // alternative name of method
  -1, // altlabelHashCode
  JavaCompileTask_methods_help__V_args, // the arguments
  0, //arguments count
  JavaCompileTask_methods_help__V_exceptions, // the declared exceptions
  JavaCompileTask_MetainfoWrapper::JavaCompileTask_method_help__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _JavaCompileTask_methods[] = 
{
  &JavaCompileTask_method_GetClass__L_acdk_lang_RClass_,
  &JavaCompileTask_method_JavaCompileTask_INLRString_INLRString__LRJavaCompileTask_,
  &JavaCompileTask_method_JavaCompileTask_INLRString__LRJavaCompileTask_,
  &JavaCompileTask_method_execute_INLRString_INLRProps__Z,
  &JavaCompileTask_method_help__V,
  0
};


struct JavaCompileTask_MetaInfoInitializer
{  JavaCompileTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = JavaCompileTask::clazzInfo();
    ci->fields =  _JavaCompileTask_fields;
    ci->methods =  _JavaCompileTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
JavaCompileTask_MetaInfoInitializer JavaCompileTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
JobExecuterTask_create_array(int length)
{
  return new ObjectArrayImpl<RJobExecuterTask>(length);
}

//static
::acdk::lang::RObject
JobExecuterTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class JobExecuterTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobExecuterTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)JobExecuterTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobExecuterTask_method_JobExecuterTask_IZ_LRJobExecuterTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new JobExecuterTask(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobExecuterTask_method_JobExecuterTask_I_LRJobExecuterTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new JobExecuterTask(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobExecuterTask_method_addTask_INLRJobTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobExecuterTask* This = dmi_cast<JobExecuterTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->JobExecuterTask::addTask((RJobTask)args[0].getObjectVar());
    else
        This->addTask((RJobTask)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobExecuterTask_method_addTask_INLRTask_INLRString_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobExecuterTask* This = dmi_cast<JobExecuterTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->JobExecuterTask::addTask((RTask)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RProps)args[2].getObjectVar());
    else
        This->addTask((RTask)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RProps)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobExecuterTask_method_breakOnFail__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobExecuterTask* This = dmi_cast<JobExecuterTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->JobExecuterTask::breakOnFail();
    else
      ret = This->breakOnFail();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobExecuterTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobExecuterTask* This = dmi_cast<JobExecuterTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->JobExecuterTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobExecuterTask_fields__breakOnFail_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobExecuterTask* This = dmi_cast<JobExecuterTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_breakOnFail, flags);
    else
      This->_breakOnFail = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobExecuterTask_fields__pool_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobExecuterTask* This = dmi_cast<JobExecuterTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pool, flags);
    else
      This->_pool = (RThreadPool)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobExecuterTask_fields__threadNum_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobExecuterTask* This = dmi_cast<JobExecuterTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_threadNum, flags);
    else
      This->_threadNum = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo JobExecuterTask_fields__breakOnFail = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_breakOnFail", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_fields__breakOnFail_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo JobExecuterTask_fields__pool = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pool", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadPool::clazzInfo(),
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_fields__pool_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo JobExecuterTask_fields__threadNum = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_threadNum", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_fields__threadNum_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _JobExecuterTask_fields[] = 
{
  &JobExecuterTask_fields__breakOnFail,
  &JobExecuterTask_fields__pool,
  &JobExecuterTask_fields__threadNum,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobExecuterTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* JobExecuterTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobExecuterTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  JobExecuterTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  JobExecuterTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_JobExecuterTask_IZ_LRJobExecuterTask__arg_threadNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "threadNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_JobExecuterTask_IZ_LRJobExecuterTask__arg_breakOnFail = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "breakOnFail", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobExecuterTask_methods_JobExecuterTask_IZ_LRJobExecuterTask__args[] = 
{
  &JobExecuterTask_methods_JobExecuterTask_IZ_LRJobExecuterTask__arg_threadNum,
  &JobExecuterTask_methods_JobExecuterTask_IZ_LRJobExecuterTask__arg_breakOnFail,
  0
};

::acdk::lang::dmi::ClazzInfo* JobExecuterTask_methods_JobExecuterTask_IZ_LRJobExecuterTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobExecuterTask_method_JobExecuterTask_IZ_LRJobExecuterTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "JobExecuterTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  JobExecuterTask::clazzInfo(), // return type
  "_0_JobExecuterTask", // alternative name of method
  -1, // altlabelHashCode
  JobExecuterTask_methods_JobExecuterTask_IZ_LRJobExecuterTask__args, // the arguments
  0, //arguments count
  JobExecuterTask_methods_JobExecuterTask_IZ_LRJobExecuterTask__exceptions, // the declared exceptions
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_method_JobExecuterTask_IZ_LRJobExecuterTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_JobExecuterTask_I_LRJobExecuterTask__arg_threadNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "threadNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobExecuterTask_methods_JobExecuterTask_I_LRJobExecuterTask__args[] = 
{
  &JobExecuterTask_methods_JobExecuterTask_I_LRJobExecuterTask__arg_threadNum,
  0
};

::acdk::lang::dmi::ClazzInfo* JobExecuterTask_methods_JobExecuterTask_I_LRJobExecuterTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobExecuterTask_method_JobExecuterTask_I_LRJobExecuterTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "JobExecuterTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  JobExecuterTask::clazzInfo(), // return type
  "_1_JobExecuterTask", // alternative name of method
  -1, // altlabelHashCode
  JobExecuterTask_methods_JobExecuterTask_I_LRJobExecuterTask__args, // the arguments
  0, //arguments count
  JobExecuterTask_methods_JobExecuterTask_I_LRJobExecuterTask__exceptions, // the declared exceptions
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_method_JobExecuterTask_I_LRJobExecuterTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_addTask_INLRJobTask__V_arg_jt = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "jt", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RJobTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobExecuterTask_methods_addTask_INLRJobTask__V_args[] = 
{
  &JobExecuterTask_methods_addTask_INLRJobTask__V_arg_jt,
  0
};

::acdk::lang::dmi::ClazzInfo* JobExecuterTask_methods_addTask_INLRJobTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobExecuterTask_method_addTask_INLRJobTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addTask", // alternative name of method
  -1, // altlabelHashCode
  JobExecuterTask_methods_addTask_INLRJobTask__V_args, // the arguments
  0, //arguments count
  JobExecuterTask_methods_addTask_INLRJobTask__V_exceptions, // the declared exceptions
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_method_addTask_INLRJobTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_arg_task = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "task", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_args[] = 
{
  &JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_arg_task,
  &JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_arg_cmd,
  &JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobExecuterTask_method_addTask_INLRTask_INLRString_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addTask", // alternative name of method
  -1, // altlabelHashCode
  JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_args, // the arguments
  0, //arguments count
  JobExecuterTask_methods_addTask_INLRTask_INLRString_INLRProps__V_exceptions, // the declared exceptions
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_method_addTask_INLRTask_INLRString_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobExecuterTask_methods_breakOnFail__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* JobExecuterTask_methods_breakOnFail__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobExecuterTask_method_breakOnFail__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "breakOnFail", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_breakOnFail", // alternative name of method
  -1, // altlabelHashCode
  JobExecuterTask_methods_breakOnFail__Z_args, // the arguments
  0, //arguments count
  JobExecuterTask_methods_breakOnFail__Z_exceptions, // the declared exceptions
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_method_breakOnFail__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JobExecuterTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobExecuterTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &JobExecuterTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &JobExecuterTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* JobExecuterTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobExecuterTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_execute", // alternative name of method
  -1, // altlabelHashCode
  JobExecuterTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  JobExecuterTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  JobExecuterTask_MetainfoWrapper::JobExecuterTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _JobExecuterTask_methods[] = 
{
  &JobExecuterTask_method_GetClass__L_acdk_lang_RClass_,
  &JobExecuterTask_method_JobExecuterTask_IZ_LRJobExecuterTask_,
  &JobExecuterTask_method_JobExecuterTask_I_LRJobExecuterTask_,
  &JobExecuterTask_method_addTask_INLRJobTask__V,
  &JobExecuterTask_method_addTask_INLRTask_INLRString_INLRProps__V,
  &JobExecuterTask_method_breakOnFail__Z,
  &JobExecuterTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct JobExecuterTask_MetaInfoInitializer
{  JobExecuterTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = JobExecuterTask::clazzInfo();
    ci->fields =  _JobExecuterTask_fields;
    ci->methods =  _JobExecuterTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
JobExecuterTask_MetaInfoInitializer JobExecuterTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) make_dummyExportFunc() {}
#endif

