// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AbstractCppTask.h"
#include "AbstractTask.h"
#include "AcdkBinaryTask.h"
#include "AcdkExeTask.h"
#include "AcdkLibTask.h"
#include "AcdkMetainfLibTask.h"
#include "AcdkProjectTask.h"
#include "AcdkTestExeTask.h"
#include "AcdkUnitConfigTask.h"
#include "ChDir.h"
#include "CommandLineCompilerTool.h"
#include "CompileTask.h"
#include "Config.h"
#include "CppSourceDependTask.h"
#include "DirExistsTask.h"
#include "FileCopyTask.h"
#include "FileDeleteTask.h"
#include "FileDependTask.h"
#include "FileOpTask.h"
#include "FileSet.h"
#include "JavaCompileTask.h"
#include "JobExecuterTask.h"
#include "JobTask.h"
#include "LookupFileTask.h"
#include "make.h"
#include "MakeProps.h"
#include "PlattformSelectTask.h"
#include "ProjectTask.h"
#include "ScriptExecuteTask.h"
#include "ShellExecuteTask.h"
#include "Task.h"
#include "TaskCfgFile.h"
#include "TaskInfo.h"
#include "TaskManager.h"
#include "TestTask.h"
#include "ThreadPool.h"
#include "Tool.h"

namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractCppTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractCppTask_interfaces[] =
{
  &_AbstractCppTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCppTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractCppTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractCppTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractCppTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractCppTask(AbstractCppTask::clazzInfo());

::acdk::lang::RClass
AbstractCppTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractCppTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_defFile._ref_this()); // RString _defFile 
  fields.push_back((::acdk::lang::RObject*)this->_moduleConfigTasks._ref_this()); // RTaskArray _moduleConfigTasks 
  fields.push_back((::acdk::lang::RObject*)this->_sourceAndHeader._ref_this()); // RStringArray _sourceAndHeader 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractTask_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractTask_super_Task =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Task::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractTask_interfaces[] =
{
  &_AbstractTask_super___acdk__lang__Object,
  &_AbstractTask_super_Task,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 7, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractTask(AbstractTask::clazzInfo());

::acdk::lang::RClass
AbstractTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractTask::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_childs._ref_this()); // RTaskArray _childs 
  fields.push_back((::acdk::lang::RObject*)this->_description._ref_this()); // RString _description 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
  fields.push_back((::acdk::lang::RObject*)this->_targetName._ref_this()); // RString _targetName 
  fields.push_back((::acdk::lang::RObject*)this->_taskInfo._ref_this()); // RTaskInfo _taskInfo 
  fields.push_back((::acdk::lang::RObject*)this->_taskProps._ref_this()); // RProps _taskProps 
  fields.push_back((::acdk::lang::RObject*)this->_workingDir._ref_this()); // RString _workingDir 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AcdkBinaryTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AcdkBinaryTask_interfaces[] =
{
  &_AcdkBinaryTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkBinaryTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AcdkBinaryTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AcdkBinaryTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 9, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AcdkBinaryTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AcdkBinaryTask(AcdkBinaryTask::clazzInfo());

::acdk::lang::RClass
AcdkBinaryTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AcdkBinaryTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_baseDir._ref_this()); // RString _baseDir 
  fields.push_back((::acdk::lang::RObject*)this->_baseSourceDir._ref_this()); // RString _baseSourceDir 
  fields.push_back((::acdk::lang::RObject*)this->_defFile._ref_this()); // RString _defFile 
  fields.push_back((::acdk::lang::RObject*)this->_headers._ref_this()); // RFileSet _headers 
  fields.push_back((::acdk::lang::RObject*)this->_moduleConfigTasks._ref_this()); // RTaskArray _moduleConfigTasks 
  fields.push_back((::acdk::lang::RObject*)this->_moduleProps._ref_this()); // RProps _moduleProps 
  fields.push_back((::acdk::lang::RObject*)this->_modules._ref_this()); // RStringArray _modules 
  fields.push_back((::acdk::lang::RObject*)this->_sourceAndHeader._ref_this()); // RStringArray _sourceAndHeader 
  fields.push_back((::acdk::lang::RObject*)this->_sources._ref_this()); // RFileSet _sources 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AcdkExeTask_super_AcdkBinaryTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AcdkBinaryTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AcdkExeTask_interfaces[] =
{
  &_AcdkExeTask_super_AcdkBinaryTask,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkExeTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AcdkExeTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AcdkExeTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AcdkExeTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AcdkExeTask(AcdkExeTask::clazzInfo());

::acdk::lang::RClass
AcdkExeTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AcdkExeTask::getCollectableFields(FieldReferences& fields)
{
  AcdkBinaryTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AcdkLibTask_super_AcdkBinaryTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AcdkBinaryTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AcdkLibTask_interfaces[] =
{
  &_AcdkLibTask_super_AcdkBinaryTask,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkLibTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AcdkLibTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AcdkLibTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AcdkLibTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AcdkLibTask(AcdkLibTask::clazzInfo());

::acdk::lang::RClass
AcdkLibTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AcdkLibTask::getCollectableFields(FieldReferences& fields)
{
  AcdkBinaryTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AcdkMetainfLibTask_super_AcdkLibTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AcdkLibTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AcdkMetainfLibTask_interfaces[] =
{
  &_AcdkMetainfLibTask_super_AcdkLibTask,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkMetainfLibTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AcdkMetainfLibTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AcdkMetainfLibTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AcdkMetainfLibTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AcdkMetainfLibTask(AcdkMetainfLibTask::clazzInfo());

::acdk::lang::RClass
AcdkMetainfLibTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AcdkMetainfLibTask::getCollectableFields(FieldReferences& fields)
{
  AcdkLibTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AcdkProjectTask_super_ProjectTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ProjectTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AcdkProjectTask_interfaces[] =
{
  &_AcdkProjectTask_super_ProjectTask,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkProjectTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AcdkProjectTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AcdkProjectTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AcdkProjectTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AcdkProjectTask(AcdkProjectTask::clazzInfo());

::acdk::lang::RClass
AcdkProjectTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AcdkProjectTask::getCollectableFields(FieldReferences& fields)
{
  ProjectTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AcdkTestExeTask_super_AcdkExeTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AcdkExeTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AcdkTestExeTask_interfaces[] =
{
  &_AcdkTestExeTask_super_AcdkExeTask,
  0
};

::acdk::lang::dmi::ClazzInfo* AcdkTestExeTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AcdkTestExeTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AcdkTestExeTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AcdkTestExeTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AcdkTestExeTask(AcdkTestExeTask::clazzInfo());

::acdk::lang::RClass
AcdkTestExeTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AcdkTestExeTask::getCollectableFields(FieldReferences& fields)
{
  AcdkExeTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo* _ToolConfigurator_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* ToolConfigurator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ToolConfigurator", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ToolConfigurator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ToolConfigurator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ToolConfigurator(ToolConfigurator::clazzInfo());

::acdk::lang::RClass
ToolConfigurator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ToolConfigurator::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo* _DependencyChecker_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* DependencyChecker::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DependencyChecker", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DependencyChecker_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DependencyChecker::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DependencyChecker(DependencyChecker::clazzInfo());

::acdk::lang::RClass
DependencyChecker::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DependencyChecker::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _SimpleFileDepencyChecker_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SimpleFileDepencyChecker_super_DependencyChecker =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DependencyChecker::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SimpleFileDepencyChecker_interfaces[] =
{
  &_SimpleFileDepencyChecker_super_acdk__lang__Object,
  &_SimpleFileDepencyChecker_super_DependencyChecker,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFileDepencyChecker::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SimpleFileDepencyChecker", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SimpleFileDepencyChecker_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SimpleFileDepencyChecker::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SimpleFileDepencyChecker(SimpleFileDepencyChecker::clazzInfo());

::acdk::lang::RClass
SimpleFileDepencyChecker::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SimpleFileDepencyChecker::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo* _CommandLineOutputParser_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineOutputParser::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "CommandLineOutputParser", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CommandLineOutputParser_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CommandLineOutputParser::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CommandLineOutputParser(CommandLineOutputParser::clazzInfo());

::acdk::lang::RClass
CommandLineOutputParser::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CommandLineOutputParser::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _CommandLineCompilerTool_super_AbstractTool =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTool::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CommandLineCompilerTool_interfaces[] =
{
  &_CommandLineCompilerTool_super_AbstractTool,
  0
};

::acdk::lang::dmi::ClazzInfo* CommandLineCompilerTool::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CommandLineCompilerTool", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CommandLineCompilerTool_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CommandLineCompilerTool::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CommandLineCompilerTool(CommandLineCompilerTool::clazzInfo());

::acdk::lang::RClass
CommandLineCompilerTool::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CommandLineCompilerTool::getCollectableFields(FieldReferences& fields)
{
  AbstractTool::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_configurator._ref_this()); // RToolConfigurator _configurator 
  fields.push_back((::acdk::lang::RObject*)this->_depChecker._ref_this()); // RDependencyChecker _depChecker 
  fields.push_back((::acdk::lang::RObject*)this->_outputParser._ref_this()); // RCommandLineOutputParser _outputParser 
  fields.push_back((::acdk::lang::RObject*)this->_toolProps._ref_this()); // RProps _toolProps 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _CompileTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CompileTask_interfaces[] =
{
  &_CompileTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* CompileTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CompileTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CompileTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CompileTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CompileTask(CompileTask::clazzInfo());

::acdk::lang::RClass
CompileTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CompileTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _CppSourceDependTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CppSourceDependTask_interfaces[] =
{
  &_CppSourceDependTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* CppSourceDependTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CppSourceDependTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CppSourceDependTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CppSourceDependTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CppSourceDependTask(CppSourceDependTask::clazzInfo());

::acdk::lang::RClass
CppSourceDependTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CppSourceDependTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_includeDirs._ref_this()); // RStringArray _includeDirs 
  fields.push_back((::acdk::lang::RObject*)this->_source._ref_this()); // RString _source 
  fields.push_back((::acdk::lang::RObject*)this->_target._ref_this()); // RString _target 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _DirExistsTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DirExistsTask_interfaces[] =
{
  &_DirExistsTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* DirExistsTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DirExistsTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DirExistsTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DirExistsTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DirExistsTask(DirExistsTask::clazzInfo());

::acdk::lang::RClass
DirExistsTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DirExistsTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_dir._ref_this()); // ::acdk::io::RFile _dir 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _FileCopyTask_super_FileOpTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  FileOpTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileCopyTask_interfaces[] =
{
  &_FileCopyTask_super_FileOpTask,
  0
};

::acdk::lang::dmi::ClazzInfo* FileCopyTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileCopyTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileCopyTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileCopyTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileCopyTask(FileCopyTask::clazzInfo());

::acdk::lang::RClass
FileCopyTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileCopyTask::getCollectableFields(FieldReferences& fields)
{
  FileOpTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _FileDeleteTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileDeleteTask_interfaces[] =
{
  &_FileDeleteTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDeleteTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileDeleteTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileDeleteTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileDeleteTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileDeleteTask(FileDeleteTask::clazzInfo());

::acdk::lang::RClass
FileDeleteTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileDeleteTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fname._ref_this()); // RString _fname 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _FileDependTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileDependTask_interfaces[] =
{
  &_FileDependTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDependTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileDependTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileDependTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileDependTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileDependTask(FileDependTask::clazzInfo());

::acdk::lang::RClass
FileDependTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileDependTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_source._ref_this()); // RString _source 
  fields.push_back((::acdk::lang::RObject*)this->_sources._ref_this()); // RStringArray _sources 
  fields.push_back((::acdk::lang::RObject*)this->_target._ref_this()); // RString _target 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


::acdk::lang::dmi::ClazzEnumValueInfo FileCopyTaskFlags_FileCopyOnlyNewer = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileCopyOnlyNewer", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::FileCopyOnlyNewer, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileCopyTaskFlags_FileCopyWithAttributes = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileCopyWithAttributes", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::FileCopyWithAttributes, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* FileCopyTaskFlags_enumValues[] = {
  &FileCopyTaskFlags_FileCopyOnlyNewer,
  &FileCopyTaskFlags_FileCopyWithAttributes,
0
};

::acdk::lang::dmi::ClazzEnumInfo* FileCopyTaskFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo FileCopyTaskFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "FileCopyTaskFlags", // name
  -1, // hashCode
  "acdk/make", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileCopyTaskFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_FileCopyTaskFlags(&FileCopyTaskFlags_enumInfo);

  return &FileCopyTaskFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_FileCopyTaskFlagsEnumInfo(FileCopyTaskFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _FileOpTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileOpTask_interfaces[] =
{
  &_FileOpTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* FileOpTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FileOpTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileOpTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileOpTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileOpTask(FileOpTask::clazzInfo());

::acdk::lang::RClass
FileOpTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileOpTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_source._ref_this()); // RFileSet _source 
  fields.push_back((::acdk::lang::RObject*)this->_sourceBaseDir._ref_this()); // RString _sourceBaseDir 
  fields.push_back((::acdk::lang::RObject*)this->_target._ref_this()); // RString _target 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _FileSet_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileSet_interfaces[] =
{
  &_FileSet_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* FileSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileSet", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileSet(FileSet::clazzInfo());

::acdk::lang::RClass
FileSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileSet::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fileSpecs._ref_this()); // RStringArray _fileSpecs 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _JavaCompileTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _JavaCompileTask_interfaces[] =
{
  &_JavaCompileTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* JavaCompileTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "JavaCompileTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _JavaCompileTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    JavaCompileTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_JavaCompileTask(JavaCompileTask::clazzInfo());

::acdk::lang::RClass
JavaCompileTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
JavaCompileTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_source._ref_this()); // RString _source 
  fields.push_back((::acdk::lang::RObject*)this->_targetDir._ref_this()); // RString _targetDir 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _JobExecuterTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _JobExecuterTask_interfaces[] =
{
  &_JobExecuterTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* JobExecuterTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "JobExecuterTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _JobExecuterTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    JobExecuterTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_JobExecuterTask(JobExecuterTask::clazzInfo());

::acdk::lang::RClass
JobExecuterTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
JobExecuterTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_pool._ref_this()); // RThreadPool _pool 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _JobTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _JobTask_super_Job =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Job::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _JobTask_interfaces[] =
{
  &_JobTask_super_AbstractTask,
  &_JobTask_super_Job,
  0
};

::acdk::lang::dmi::ClazzInfo* JobTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "JobTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _JobTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    JobTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_JobTask(JobTask::clazzInfo());

::acdk::lang::RClass
JobTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
JobTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cmd._ref_this()); // RString _cmd 
  fields.push_back((::acdk::lang::RObject*)this->_executer._ref_this()); // RObject _executer 
  fields.push_back((::acdk::lang::RObject*)this->_props._ref_this()); // RProps _props 
  fields.push_back((::acdk::lang::RObject*)this->_task._ref_this()); // RTask _task 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


::acdk::lang::dmi::ClazzEnumValueInfo LookupFileType_NormalFile = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "NormalFile", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::NormalFile, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LookupFileType_Executable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Executable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::Executable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LookupFileType_StaticLibrary = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "StaticLibrary", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::StaticLibrary, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LookupFileType_SharedLibrary = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SharedLibrary", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SharedLibrary, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LookupFileType_Header = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Header", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::Header, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LookupFileType_PerlUnit = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PerlUnit", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::PerlUnit, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LookupFileType_AcdkExecutable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AcdkExecutable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::AcdkExecutable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LookupFileType_ImportLibrary = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ImportLibrary", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::ImportLibrary, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* LookupFileType_enumValues[] = {
  &LookupFileType_NormalFile,
  &LookupFileType_Executable,
  &LookupFileType_StaticLibrary,
  &LookupFileType_SharedLibrary,
  &LookupFileType_Header,
  &LookupFileType_PerlUnit,
  &LookupFileType_AcdkExecutable,
  &LookupFileType_ImportLibrary,
0
};

::acdk::lang::dmi::ClazzEnumInfo* LookupFileTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo LookupFileType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "LookupFileType", // name
  -1, // hashCode
  "acdk/make", // ns
  0, // _scopeParent
  0, // _nextSibling
  LookupFileType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_LookupFileType(&LookupFileType_enumInfo);

  return &LookupFileType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_LookupFileTypeEnumInfo(LookupFileTypeMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _LookupFileTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LookupFileTask_interfaces[] =
{
  &_LookupFileTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LookupFileTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LookupFileTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LookupFileTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LookupFileTask(LookupFileTask::clazzInfo());

::acdk::lang::RClass
LookupFileTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LookupFileTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_filenames._ref_this()); // RProps _filenames 
  fields.push_back((::acdk::lang::RObject*)this->_foundBaseFiles._ref_this()); // RStringArray _foundBaseFiles 
  fields.push_back((::acdk::lang::RObject*)this->_foundFiles._ref_this()); // RStringArray _foundFiles 
  fields.push_back((::acdk::lang::RObject*)this->_suggestDirs._ref_this()); // RProps _suggestDirs 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _MakeProps_super_Props =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Props::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MakeProps_interfaces[] =
{
  &_MakeProps_super_Props,
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MakeProps", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MakeProps_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MakeProps::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MakeProps(MakeProps::clazzInfo());

::acdk::lang::RClass
MakeProps::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MakeProps::getCollectableFields(FieldReferences& fields)
{
  Props::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _PlattformSelectTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PlattformSelectTask_interfaces[] =
{
  &_PlattformSelectTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* PlattformSelectTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PlattformSelectTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PlattformSelectTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PlattformSelectTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PlattformSelectTask(PlattformSelectTask::clazzInfo());

::acdk::lang::RClass
PlattformSelectTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PlattformSelectTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_targetProps._ref_this()); // RProps _targetProps 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _ProjectTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ProjectTask_interfaces[] =
{
  &_ProjectTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* ProjectTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ProjectTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ProjectTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ProjectTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ProjectTask(ProjectTask::clazzInfo());

::acdk::lang::RClass
ProjectTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ProjectTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _ScriptExecuteTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ScriptExecuteTask_interfaces[] =
{
  &_ScriptExecuteTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptExecuteTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ScriptExecuteTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ScriptExecuteTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ScriptExecuteTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ScriptExecuteTask(ScriptExecuteTask::clazzInfo());

::acdk::lang::RClass
ScriptExecuteTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ScriptExecuteTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fname._ref_this()); // RString _fname 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


::acdk::lang::dmi::ClazzEnumValueInfo ShellExecuteFlags_SExecUseShell = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SExecUseShell", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SExecUseShell, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ShellExecuteFlags_SExecUseFileRedirect = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SExecUseFileRedirect", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SExecUseFileRedirect, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ShellExecuteFlags_SExecUseCleanEnv = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SExecUseCleanEnv", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SExecUseCleanEnv, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ShellExecuteFlags_SExecIsScript = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SExecIsScript", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SExecIsScript, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ShellExecuteFlags_SExecEvalBeforeExec = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SExecEvalBeforeExec", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SExecEvalBeforeExec, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ShellExecuteFlags_SExecNoStdOut = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SExecNoStdOut", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SExecNoStdOut, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ShellExecuteFlags_SExecNoErrOut = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SExecNoErrOut", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SExecNoErrOut, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ShellExecuteFlags_SExecNoOut = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SExecNoOut", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::SExecNoOut, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ShellExecuteFlags_enumValues[] = {
  &ShellExecuteFlags_SExecUseShell,
  &ShellExecuteFlags_SExecUseFileRedirect,
  &ShellExecuteFlags_SExecUseCleanEnv,
  &ShellExecuteFlags_SExecIsScript,
  &ShellExecuteFlags_SExecEvalBeforeExec,
  &ShellExecuteFlags_SExecNoStdOut,
  &ShellExecuteFlags_SExecNoErrOut,
  &ShellExecuteFlags_SExecNoOut,
0
};

::acdk::lang::dmi::ClazzEnumInfo* ShellExecuteFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo ShellExecuteFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ShellExecuteFlags", // name
  -1, // hashCode
  "acdk/make", // ns
  0, // _scopeParent
  0, // _nextSibling
  ShellExecuteFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_ShellExecuteFlags(&ShellExecuteFlags_enumInfo);

  return &ShellExecuteFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_ShellExecuteFlagsEnumInfo(ShellExecuteFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _ShellExecuteTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ShellExecuteTask_interfaces[] =
{
  &_ShellExecuteTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ShellExecuteTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ShellExecuteTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 7, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ShellExecuteTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ShellExecuteTask(ShellExecuteTask::clazzInfo());

::acdk::lang::RClass
ShellExecuteTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ShellExecuteTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cmdline._ref_this()); // RString _cmdline 
  fields.push_back((::acdk::lang::RObject*)this->_env._ref_this()); // RStringArray _env 
  fields.push_back((::acdk::lang::RObject*)this->_errWriter._ref_this()); // ::acdk::io::RCharWriter _errWriter 
  fields.push_back((::acdk::lang::RObject*)this->_errs._ref_this()); // RString _errs 
  fields.push_back((::acdk::lang::RObject*)this->_outWriter._ref_this()); // ::acdk::io::RCharWriter _outWriter 
  fields.push_back((::acdk::lang::RObject*)this->_outs._ref_this()); // RString _outs 
  fields.push_back((::acdk::lang::RObject*)this->_workDir._ref_this()); // RString _workDir 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


::acdk::lang::dmi::ClazzEnumValueInfo TaskExecuteFlags_TaskExecuteForce = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TaskExecuteForce", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::TaskExecuteForce, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TaskExecuteFlags_TaskExecuteDefault = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TaskExecuteDefault", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::TaskExecuteDefault, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* TaskExecuteFlags_enumValues[] = {
  &TaskExecuteFlags_TaskExecuteForce,
  &TaskExecuteFlags_TaskExecuteDefault,
0
};

::acdk::lang::dmi::ClazzEnumInfo* TaskExecuteFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo TaskExecuteFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "TaskExecuteFlags", // name
  -1, // hashCode
  "acdk/make", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskExecuteFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_TaskExecuteFlags(&TaskExecuteFlags_enumInfo);

  return &TaskExecuteFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_TaskExecuteFlagsEnumInfo(TaskExecuteFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo* _Task_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Task::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Task", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Task_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Task::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Task(Task::clazzInfo());

::acdk::lang::RClass
Task::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Task::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _TaskCfgFile_super___acdk__util__Properties =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::util::Properties::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TaskCfgFile_interfaces[] =
{
  &_TaskCfgFile_super___acdk__util__Properties,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskCfgFile::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TaskCfgFile", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TaskCfgFile_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TaskCfgFile::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TaskCfgFile(TaskCfgFile::clazzInfo());

::acdk::lang::RClass
TaskCfgFile::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TaskCfgFile::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::util::, Properties)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_filename._ref_this()); // RString _filename 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


::acdk::lang::dmi::ClazzEnumValueInfo TaskStatus_TaskNotBuild = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TaskNotBuild", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::TaskNotBuild, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TaskStatus_TaskOkBuild = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TaskOkBuild", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::TaskOkBuild, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TaskStatus_TaskFailBuild = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TaskFailBuild", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::TaskFailBuild, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* TaskStatus_enumValues[] = {
  &TaskStatus_TaskNotBuild,
  &TaskStatus_TaskOkBuild,
  &TaskStatus_TaskFailBuild,
0
};

::acdk::lang::dmi::ClazzEnumInfo* TaskStatusMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo TaskStatus_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "TaskStatus", // name
  -1, // hashCode
  "acdk/make", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskStatus_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_TaskStatus(&TaskStatus_enumInfo);

  return &TaskStatus_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_TaskStatusEnumInfo(TaskStatusMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _TaskInfo_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TaskInfo_interfaces[] =
{
  &_TaskInfo_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TaskInfo", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TaskInfo_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TaskInfo::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TaskInfo(TaskInfo::clazzInfo());

::acdk::lang::RClass
TaskInfo::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TaskInfo::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_description._ref_this()); // RString _description 
  fields.push_back((::acdk::lang::RObject*)this->_logString._ref_this()); // RString _logString 
  fields.push_back((::acdk::lang::RObject*)this->_targetName._ref_this()); // RString _targetName 
  fields.push_back((::acdk::lang::RObject*)this->_taskName._ref_this()); // RString _taskName 
  fields.push_back((::acdk::lang::RObject*)this->_workingDir._ref_this()); // RString _workingDir 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _TaskManager_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TaskManager_interfaces[] =
{
  &_TaskManager_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TaskManager", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TaskManager_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TaskManager::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TaskManager(TaskManager::clazzInfo());

::acdk::lang::RClass
TaskManager::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TaskManager::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_tasks._ref_this()); // ::acdk::util::RHashMap _tasks 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _TestTask_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestTask_interfaces[] =
{
  &_TestTask_super_AbstractTask,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTask::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestTask", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestTask_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestTask::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestTask(TestTask::clazzInfo());

::acdk::lang::RClass
TestTask::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestTask::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


::acdk::lang::dmi::ClazzEnumValueInfo JobResult_JobUnknown = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "JobUnknown", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::JobUnknown, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo JobResult_JobOk = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "JobOk", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::JobOk, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo JobResult_JobFailed = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "JobFailed", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::JobFailed, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo JobResult_JobAbortAll = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "JobAbortAll", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::make::JobAbortAll, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* JobResult_enumValues[] = {
  &JobResult_JobUnknown,
  &JobResult_JobOk,
  &JobResult_JobFailed,
  &JobResult_JobAbortAll,
0
};

::acdk::lang::dmi::ClazzEnumInfo* JobResultMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo JobResult_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "JobResult", // name
  -1, // hashCode
  "acdk/make", // ns
  0, // _scopeParent
  0, // _nextSibling
  JobResult_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_JobResult(&JobResult_enumInfo);

  return &JobResult_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_JobResultEnumInfo(JobResultMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _ThreadPool_super___acdk__lang__Thread =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Thread::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ThreadPool_interfaces[] =
{
  &_ThreadPool_super___acdk__lang__Thread,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ThreadPool", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ThreadPool_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ThreadPool::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ThreadPool(ThreadPool::clazzInfo());

::acdk::lang::RClass
ThreadPool::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ThreadPool::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Thread)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_queue._ref_this()); // ::acdk::util::RVector _queue 
  fields.push_back((::acdk::lang::RObject*)this->_threads._ref_this()); // RPooledThreadArray _threads 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _PooledThread_super___acdk__lang__Thread =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Thread::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PooledThread_interfaces[] =
{
  &_PooledThread_super___acdk__lang__Thread,
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PooledThread", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PooledThread_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PooledThread::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PooledThread(PooledThread::clazzInfo());

::acdk::lang::RClass
PooledThread::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PooledThread::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Thread)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_job._ref_this()); // RJob _job 
  fields.push_back((::acdk::lang::RObject*)this->_threadPool._ref_this()); // RThreadPool _threadPool 
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _Tool_super_Task =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Task::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Tool_interfaces[] =
{
  &_Tool_super_Task,
  0
};

::acdk::lang::dmi::ClazzInfo* Tool::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Tool", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Tool_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Tool::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Tool(Tool::clazzInfo());

::acdk::lang::RClass
Tool::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Tool::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractTool_super_AbstractTask =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractTask::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractTool_super_Tool =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Tool::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractTool_interfaces[] =
{
  &_AbstractTool_super_AbstractTask,
  &_AbstractTool_super_Tool,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTool::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractTool", // name of class
  -1, // hashCode
  "acdk/make", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractTool_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractTool::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractTool(AbstractTool::clazzInfo());

::acdk::lang::RClass
AbstractTool::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractTool::getCollectableFields(FieldReferences& fields)
{
  AbstractTask::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_toolClass._ref_this()); // RString _toolClass 
  fields.push_back((::acdk::lang::RObject*)this->_toolDescription._ref_this()); // RStringArrayArray _toolDescription 
  fields.push_back((::acdk::lang::RObject*)this->_toolTribe._ref_this()); // RString _toolTribe 
}


} // namespace acdk
} // namespace make

