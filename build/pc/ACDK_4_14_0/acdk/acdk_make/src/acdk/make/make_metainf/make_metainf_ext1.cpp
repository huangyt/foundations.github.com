// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../make.h"
#include "../AbstractCppTask.h"
#include "../AbstractTask.h"
#include "../AcdkBinaryTask.h"
#include "../AcdkExeTask.h"
#include "../AcdkLibTask.h"
#include "../AcdkMetainfLibTask.h"
#include "../AcdkProjectTask.h"
#include "../AcdkTestExeTask.h"
#include "../AcdkUnitConfigTask.h"
#include "../ChDir.h"
#include "../CommandLineCompilerTool.h"
#include "../CompileTask.h"
#include "../Config.h"
#include "../CppSourceDependTask.h"
#include "../DirExistsTask.h"
#include "../FileCopyTask.h"
#include "../FileDeleteTask.h"
#include "../FileDependTask.h"
#include "../FileOpTask.h"
#include "../FileSet.h"
#include "../JavaCompileTask.h"
#include "../JobExecuterTask.h"
#include "../JobTask.h"
#include "../LookupFileTask.h"
#include "../make.h"
#include "../MakeProps.h"
#include "../PlattformSelectTask.h"
#include "../ProjectTask.h"
#include "../ScriptExecuteTask.h"
#include "../ShellExecuteTask.h"
#include "../Task.h"
#include "../TaskCfgFile.h"
#include "../TaskInfo.h"
#include "../TaskManager.h"
#include "../TestTask.h"
#include "../ThreadPool.h"
#include "../Tool.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
JobTask_create_array(int length)
{
  return new ObjectArrayImpl<RJobTask>(length);
}

//static
::acdk::lang::RObject
JobTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class JobTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)JobTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobTask_method_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new JobTask((RObject)args[0].getObjectVar(), (RTask)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RProps)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->JobTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobTask_method_getResult__LJobResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (JobResult)This->JobTask::getResult();
    else
      ret = (JobResult)This->getResult();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobTask_method_isActive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->JobTask::isActive();
    else
      ret = This->isActive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobTask_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->JobTask::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  JobTask_method_setExecutor_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->JobTask::setExecutor((RObject)args[0].getObjectVar());
    else
        This->setExecutor((RObject)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobTask_fields__active_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_active, flags);
    else
      This->_active = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobTask_fields__cmd_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cmd, flags);
    else
      This->_cmd = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobTask_fields__erg_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_erg, flags);
    else
      This->_erg = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobTask_fields__executer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_executer, flags);
    else
      This->_executer = (RObject)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobTask_fields__props_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_props, flags);
    else
      This->_props = (RProps)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  JobTask_fields__task_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    JobTask* This = dmi_cast<JobTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_task, flags);
    else
      This->_task = (RTask)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo JobTask_fields__active = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_active", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  JobTask_MetainfoWrapper::JobTask_fields__active_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo JobTask_fields__cmd = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cmd", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  JobTask_MetainfoWrapper::JobTask_fields__cmd_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo JobTask_fields__erg = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_erg", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  JobTask_MetainfoWrapper::JobTask_fields__erg_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo JobTask_fields__executer = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_executer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  JobTask_MetainfoWrapper::JobTask_fields__executer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo JobTask_fields__props = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_props", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  JobTask_MetainfoWrapper::JobTask_fields__props_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo JobTask_fields__task = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_task", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo(),
  JobTask_MetainfoWrapper::JobTask_fields__task_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _JobTask_fields[] = 
{
  &JobTask_fields__active,
  &JobTask_fields__cmd,
  &JobTask_fields__erg,
  &JobTask_fields__executer,
  &JobTask_fields__props,
  &JobTask_fields__task,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* JobTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  JobTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  JobTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  JobTask_MetainfoWrapper::JobTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__arg_executer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "executer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__arg_task = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "task", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__args[] = 
{
  &JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__arg_executer,
  &JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__arg_task,
  &JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__arg_cmd,
  &JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobTask_method_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "JobTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  JobTask::clazzInfo(), // return type
  "_0_JobTask", // alternative name of method
  -1, // altlabelHashCode
  JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__args, // the arguments
  0, //arguments count
  JobTask_methods_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__exceptions, // the declared exceptions
  JobTask_MetainfoWrapper::JobTask_method_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JobTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo JobTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &JobTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &JobTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* JobTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_execute", // alternative name of method
  -1, // altlabelHashCode
  JobTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  JobTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  JobTask_MetainfoWrapper::JobTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobTask_methods_getResult__LJobResult__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* JobTask_methods_getResult__LJobResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobTask_method_getResult__LJobResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getResult", // alternative name of method
  -1, // altlabelHashCode
  JobTask_methods_getResult__LJobResult__args, // the arguments
  0, //arguments count
  JobTask_methods_getResult__LJobResult__exceptions, // the declared exceptions
  JobTask_MetainfoWrapper::JobTask_method_getResult__LJobResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobTask_methods_isActive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* JobTask_methods_isActive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobTask_method_isActive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isActive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isActive", // alternative name of method
  -1, // altlabelHashCode
  JobTask_methods_isActive__Z_args, // the arguments
  0, //arguments count
  JobTask_methods_isActive__Z_exceptions, // the declared exceptions
  JobTask_MetainfoWrapper::JobTask_method_isActive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobTask_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* JobTask_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobTask_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_run", // alternative name of method
  -1, // altlabelHashCode
  JobTask_methods_run__V_args, // the arguments
  0, //arguments count
  JobTask_methods_run__V_exceptions, // the declared exceptions
  JobTask_MetainfoWrapper::JobTask_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo JobTask_methods_setExecutor_INLRObject__V_arg_executer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "executer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* JobTask_methods_setExecutor_INLRObject__V_args[] = 
{
  &JobTask_methods_setExecutor_INLRObject__V_arg_executer,
  0
};

::acdk::lang::dmi::ClazzInfo* JobTask_methods_setExecutor_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo JobTask_method_setExecutor_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setExecutor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setExecutor", // alternative name of method
  -1, // altlabelHashCode
  JobTask_methods_setExecutor_INLRObject__V_args, // the arguments
  0, //arguments count
  JobTask_methods_setExecutor_INLRObject__V_exceptions, // the declared exceptions
  JobTask_MetainfoWrapper::JobTask_method_setExecutor_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _JobTask_methods[] = 
{
  &JobTask_method_GetClass__L_acdk_lang_RClass_,
  &JobTask_method_JobTask_INLRObject_INLRTask_INLRString_INLRProps__LRJobTask_,
  &JobTask_method_execute_INLRString_INLRProps__Z,
  &JobTask_method_getResult__LJobResult_,
  &JobTask_method_isActive__Z,
  &JobTask_method_run__V,
  &JobTask_method_setExecutor_INLRObject__V,
  0
};


struct JobTask_MetaInfoInitializer
{  JobTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = JobTask::clazzInfo();
    ci->fields =  _JobTask_fields;
    ci->methods =  _JobTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
JobTask_MetaInfoInitializer JobTask_MetaInfoInitializer_staticinstance__;


struct JobTask_clazzInfo_ClazzAttributesResInitializer1
{
  JobTask_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&JobTask_method_getResult__LJobResult_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)JobResultMetaInf::GetEnumInfo()));
  }
};

JobTask_clazzInfo_ClazzAttributesResInitializer1 JobTask_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
LookupFileTask_create_array(int length)
{
  return new ObjectArrayImpl<RLookupFileTask>(length);
}

//static
::acdk::lang::RObject
LookupFileTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LookupFileTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LookupFileTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_LookupFileTask_I_LRLookupFileTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LookupFileTask((LookupFileType)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LookupFileTask((RString)args[0].getObjectVar(), (LookupFileType)args[1].getIntVar(), (RStringArray)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_LookupFileTask_INLRString_I_LRLookupFileTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LookupFileTask((RString)args[0].getObjectVar(), (LookupFileType)args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_addFileName_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LookupFileTask::addFileName((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->addFileName((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_addLookupPath_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LookupFileTask::addLookupPath((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->addLookupPath((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LookupFileTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_fileTypeAsString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LookupFileTask::fileTypeAsString();
    else
        ret = (::acdk::lang::RObject)This->fileTypeAsString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_foundFile__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LookupFileTask::foundFile();
    else
        ret = (::acdk::lang::RObject)This->foundFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_foundFiles__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LookupFileTask::foundFiles();
    else
        ret = (::acdk::lang::RObject)This->foundFiles();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_foundParentDir__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LookupFileTask::foundParentDir();
    else
        ret = (::acdk::lang::RObject)This->foundParentDir();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_foundPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LookupFileTask::foundPath();
    else
        ret = (::acdk::lang::RObject)This->foundPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_foundPathes__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LookupFileTask::foundPathes();
    else
        ret = (::acdk::lang::RObject)This->foundPathes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LookupFileTask::lookupFileInSuggestedDir((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->lookupFileInSuggestedDir((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LookupFileTask::lookupFileInSuggestedDirs((RProps)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
      ret = This->lookupFileInSuggestedDirs((RProps)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LookupFileTask_method_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LookupFileTask::lookupFileInSuggestedDirs((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
      ret = This->lookupFileInSuggestedDirs((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LookupFileTask_fields__fileType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_fileType), flags);
    else
      This->_fileType = (LookupFileType)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LookupFileTask_fields__filenames_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filenames, flags);
    else
      This->_filenames = (RProps)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LookupFileTask_fields__foundBaseFiles_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_foundBaseFiles, flags);
    else
      This->_foundBaseFiles = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LookupFileTask_fields__foundFiles_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_foundFiles, flags);
    else
      This->_foundFiles = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LookupFileTask_fields__suggestDirs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LookupFileTask* This = dmi_cast<LookupFileTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_suggestDirs, flags);
    else
      This->_suggestDirs = (RProps)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LookupFileTask_fields__fileType = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fileType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LookupFileTask_MetainfoWrapper::LookupFileTask_fields__fileType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LookupFileTask_fields__filenames = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filenames", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  LookupFileTask_MetainfoWrapper::LookupFileTask_fields__filenames_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LookupFileTask_fields__foundBaseFiles = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_foundBaseFiles", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  LookupFileTask_MetainfoWrapper::LookupFileTask_fields__foundBaseFiles_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LookupFileTask_fields__foundFiles = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_foundFiles", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  LookupFileTask_MetainfoWrapper::LookupFileTask_fields__foundFiles_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LookupFileTask_fields__suggestDirs = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_suggestDirs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  LookupFileTask_MetainfoWrapper::LookupFileTask_fields__suggestDirs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LookupFileTask_fields[] = 
{
  &LookupFileTask_fields__fileType,
  &LookupFileTask_fields__filenames,
  &LookupFileTask_fields__foundBaseFiles,
  &LookupFileTask_fields__foundFiles,
  &LookupFileTask_fields__suggestDirs,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_LookupFileTask_I_LRLookupFileTask__arg_ft = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ft", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_LookupFileTask_I_LRLookupFileTask__args[] = 
{
  &LookupFileTask_methods_LookupFileTask_I_LRLookupFileTask__arg_ft,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_LookupFileTask_I_LRLookupFileTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_LookupFileTask_I_LRLookupFileTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LookupFileTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LookupFileTask::clazzInfo(), // return type
  "_0_LookupFileTask", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_LookupFileTask_I_LRLookupFileTask__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_LookupFileTask_I_LRLookupFileTask__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_LookupFileTask_I_LRLookupFileTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__arg_ft = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ft", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__arg_suggestPaths = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "suggestPaths", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__args[] = 
{
  &LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__arg_filename,
  &LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__arg_ft,
  &LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__arg_suggestPaths,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LookupFileTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LookupFileTask::clazzInfo(), // return type
  "_1_LookupFileTask", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__arg_ft = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ft", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__args[] = 
{
  &LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__arg_filename,
  &LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__arg_ft,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_LookupFileTask_INLRString_I_LRLookupFileTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "LookupFileTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LookupFileTask::clazzInfo(), // return type
  "_2_LookupFileTask", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_LookupFileTask_INLRString_I_LRLookupFileTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_addFileName_INLRString_INLRString__V_arg_platformtag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "platformtag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_addFileName_INLRString_INLRString__V_arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_addFileName_INLRString_INLRString__V_args[] = 
{
  &LookupFileTask_methods_addFileName_INLRString_INLRString__V_arg_platformtag,
  &LookupFileTask_methods_addFileName_INLRString_INLRString__V_arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_addFileName_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_addFileName_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addFileName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addFileName", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_addFileName_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  LookupFileTask_methods_addFileName_INLRString_INLRString__V_exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_addFileName_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_addLookupPath_INLRString_INLRString__V_arg_platformtag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "platformtag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_addLookupPath_INLRString_INLRString__V_arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_addLookupPath_INLRString_INLRString__V_args[] = 
{
  &LookupFileTask_methods_addLookupPath_INLRString_INLRString__V_arg_platformtag,
  &LookupFileTask_methods_addLookupPath_INLRString_INLRString__V_arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_addLookupPath_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_addLookupPath_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addLookupPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addLookupPath", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_addLookupPath_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  LookupFileTask_methods_addLookupPath_INLRString_INLRString__V_exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_addLookupPath_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &LookupFileTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &LookupFileTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_execute", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  LookupFileTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_fileTypeAsString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_fileTypeAsString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_fileTypeAsString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fileTypeAsString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_fileTypeAsString", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_fileTypeAsString__LRString__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_fileTypeAsString__LRString__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_fileTypeAsString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_foundFile__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_foundFile__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_foundFile__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "foundFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_foundFile", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_foundFile__LRString__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_foundFile__LRString__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_foundFile__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_foundFiles__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_foundFiles__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_foundFiles__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "foundFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_e_foundFiles", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_foundFiles__LRStringArray__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_foundFiles__LRStringArray__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_foundFiles__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_foundParentDir__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_foundParentDir__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_foundParentDir__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "foundParentDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_foundParentDir", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_foundParentDir__LRString__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_foundParentDir__LRString__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_foundParentDir__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_foundPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_foundPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_foundPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "foundPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_foundPath", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_foundPath__LRString__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_foundPath__LRString__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_foundPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_foundPathes__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_foundPathes__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_foundPathes__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "foundPathes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_b_foundPathes", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_foundPathes__LRStringArray__args, // the arguments
  0, //arguments count
  LookupFileTask_methods_foundPathes__LRStringArray__exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_foundPathes__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_args[] = 
{
  &LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_arg_props,
  &LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_arg_dir,
  &LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupFileInSuggestedDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_lookupFileInSuggestedDir", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  LookupFileTask_methods_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_arg_dirnames = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dirnames", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_args[] = 
{
  &LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_arg_props,
  &LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_arg_dirnames,
  &LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupFileInSuggestedDirs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_lookupFileInSuggestedDirs", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_args, // the arguments
  0, //arguments count
  LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_args[] = 
{
  &LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_arg_props,
  &LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LookupFileTask_method_lookupFileInSuggestedDirs_INLRProps_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookupFileInSuggestedDirs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_lookupFileInSuggestedDirs", // alternative name of method
  -1, // altlabelHashCode
  LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_args, // the arguments
  0, //arguments count
  LookupFileTask_methods_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_exceptions, // the declared exceptions
  LookupFileTask_MetainfoWrapper::LookupFileTask_method_lookupFileInSuggestedDirs_INLRProps_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LookupFileTask_methods[] = 
{
  &LookupFileTask_method_GetClass__L_acdk_lang_RClass_,
  &LookupFileTask_method_LookupFileTask_I_LRLookupFileTask_,
  &LookupFileTask_method_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask_,
  &LookupFileTask_method_LookupFileTask_INLRString_I_LRLookupFileTask_,
  &LookupFileTask_method_addFileName_INLRString_INLRString__V,
  &LookupFileTask_method_addLookupPath_INLRString_INLRString__V,
  &LookupFileTask_method_execute_INLRString_INLRProps__Z,
  &LookupFileTask_method_fileTypeAsString__LRString_,
  &LookupFileTask_method_foundFile__LRString_,
  &LookupFileTask_method_foundFiles__LRStringArray_,
  &LookupFileTask_method_foundParentDir__LRString_,
  &LookupFileTask_method_foundPath__LRString_,
  &LookupFileTask_method_foundPathes__LRStringArray_,
  &LookupFileTask_method_lookupFileInSuggestedDir_INLRProps_INLRString_INLRString__Z,
  &LookupFileTask_method_lookupFileInSuggestedDirs_INLRProps_INLRStringArray_INLRString__Z,
  &LookupFileTask_method_lookupFileInSuggestedDirs_INLRProps_INLRString__Z,
  0
};


struct LookupFileTask_MetaInfoInitializer
{  LookupFileTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LookupFileTask::clazzInfo();
    ci->fields =  _LookupFileTask_fields;
    ci->methods =  _LookupFileTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LookupFileTask_MetaInfoInitializer LookupFileTask_MetaInfoInitializer_staticinstance__;


struct LookupFileTask_clazzInfo_ClazzAttributesResInitializer2
{
  LookupFileTask_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&LookupFileTask_methods_LookupFileTask_I_LRLookupFileTask__arg_ft, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)LookupFileTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&LookupFileTask_methods_LookupFileTask_INLRString_IINLRStringArray__LRLookupFileTask__arg_ft, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)LookupFileTypeMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&LookupFileTask_methods_LookupFileTask_INLRString_I_LRLookupFileTask__arg_ft, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)LookupFileTypeMetaInf::GetEnumInfo()));
  }
};

LookupFileTask_clazzInfo_ClazzAttributesResInitializer2 LookupFileTask_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
MakeProps_create_array(int length)
{
  return new ObjectArrayImpl<RMakeProps>(length);
}

//static
::acdk::lang::RObject
MakeProps_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MakeProps_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MakeProps_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MakeProps::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MakeProps_method_MakeProps_INLRString_INLRProps_Z_LRMakeProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MakeProps((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MakeProps_method_MakeProps_INLRString__LRMakeProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MakeProps((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MakeProps_method_MakeProps_INLRString_INLRProps__LRMakeProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MakeProps((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MakeProps_method_addDefine_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MakeProps* This = dmi_cast<MakeProps>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MakeProps::addDefine((RString)args[0].getObjectVar());
    else
        This->addDefine((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MakeProps_method_addDefine_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MakeProps* This = dmi_cast<MakeProps>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MakeProps::addDefine((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->addDefine((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MakeProps_method_addExtInclude_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MakeProps* This = dmi_cast<MakeProps>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MakeProps::addExtInclude((RString)args[0].getObjectVar());
    else
        This->addExtInclude((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MakeProps_method_addExtLibPath_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MakeProps* This = dmi_cast<MakeProps>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->MakeProps::addExtLibPath((RString)args[0].getObjectVar());
    else
        This->addExtLibPath((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MakeProps_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MakeProps_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MakeProps_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MakeProps_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MakeProps_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MakeProps_MetainfoWrapper::MakeProps_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__arg_private_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "private_props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__args[] = 
{
  &MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__arg_name,
  &MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__arg_parent,
  &MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__arg_private_props,
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MakeProps_method_MakeProps_INLRString_INLRProps_Z_LRMakeProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MakeProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MakeProps::clazzInfo(), // return type
  "_0_MakeProps", // alternative name of method
  -1, // altlabelHashCode
  MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__args, // the arguments
  0, //arguments count
  MakeProps_methods_MakeProps_INLRString_INLRProps_Z_LRMakeProps__exceptions, // the declared exceptions
  MakeProps_MetainfoWrapper::MakeProps_method_MakeProps_INLRString_INLRProps_Z_LRMakeProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_MakeProps_INLRString__LRMakeProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MakeProps_methods_MakeProps_INLRString__LRMakeProps__args[] = 
{
  &MakeProps_methods_MakeProps_INLRString__LRMakeProps__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps_methods_MakeProps_INLRString__LRMakeProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MakeProps_method_MakeProps_INLRString__LRMakeProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MakeProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MakeProps::clazzInfo(), // return type
  "_1_MakeProps", // alternative name of method
  -1, // altlabelHashCode
  MakeProps_methods_MakeProps_INLRString__LRMakeProps__args, // the arguments
  0, //arguments count
  MakeProps_methods_MakeProps_INLRString__LRMakeProps__exceptions, // the declared exceptions
  MakeProps_MetainfoWrapper::MakeProps_method_MakeProps_INLRString__LRMakeProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_MakeProps_INLRString_INLRProps__LRMakeProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_MakeProps_INLRString_INLRProps__LRMakeProps__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MakeProps_methods_MakeProps_INLRString_INLRProps__LRMakeProps__args[] = 
{
  &MakeProps_methods_MakeProps_INLRString_INLRProps__LRMakeProps__arg_name,
  &MakeProps_methods_MakeProps_INLRString_INLRProps__LRMakeProps__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps_methods_MakeProps_INLRString_INLRProps__LRMakeProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MakeProps_method_MakeProps_INLRString_INLRProps__LRMakeProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MakeProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MakeProps::clazzInfo(), // return type
  "_2_MakeProps", // alternative name of method
  -1, // altlabelHashCode
  MakeProps_methods_MakeProps_INLRString_INLRProps__LRMakeProps__args, // the arguments
  0, //arguments count
  MakeProps_methods_MakeProps_INLRString_INLRProps__LRMakeProps__exceptions, // the declared exceptions
  MakeProps_MetainfoWrapper::MakeProps_method_MakeProps_INLRString_INLRProps__LRMakeProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_addDefine_INLRString__V_arg_define = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "define", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MakeProps_methods_addDefine_INLRString__V_args[] = 
{
  &MakeProps_methods_addDefine_INLRString__V_arg_define,
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps_methods_addDefine_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MakeProps_method_addDefine_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "addDefine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addDefine", // alternative name of method
  -1, // altlabelHashCode
  MakeProps_methods_addDefine_INLRString__V_args, // the arguments
  0, //arguments count
  MakeProps_methods_addDefine_INLRString__V_exceptions, // the declared exceptions
  MakeProps_MetainfoWrapper::MakeProps_method_addDefine_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_addDefine_INLRString_INLRString__V_arg_define = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "define", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_addDefine_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MakeProps_methods_addDefine_INLRString_INLRString__V_args[] = 
{
  &MakeProps_methods_addDefine_INLRString_INLRString__V_arg_define,
  &MakeProps_methods_addDefine_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps_methods_addDefine_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MakeProps_method_addDefine_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addDefine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addDefine", // alternative name of method
  -1, // altlabelHashCode
  MakeProps_methods_addDefine_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  MakeProps_methods_addDefine_INLRString_INLRString__V_exceptions, // the declared exceptions
  MakeProps_MetainfoWrapper::MakeProps_method_addDefine_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_addExtInclude_INLRString__V_arg_file_or_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file_or_path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MakeProps_methods_addExtInclude_INLRString__V_args[] = 
{
  &MakeProps_methods_addExtInclude_INLRString__V_arg_file_or_path,
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps_methods_addExtInclude_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MakeProps_method_addExtInclude_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addExtInclude", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addExtInclude", // alternative name of method
  -1, // altlabelHashCode
  MakeProps_methods_addExtInclude_INLRString__V_args, // the arguments
  0, //arguments count
  MakeProps_methods_addExtInclude_INLRString__V_exceptions, // the declared exceptions
  MakeProps_MetainfoWrapper::MakeProps_method_addExtInclude_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MakeProps_methods_addExtLibPath_INLRString__V_arg_file_or_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file_or_path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MakeProps_methods_addExtLibPath_INLRString__V_args[] = 
{
  &MakeProps_methods_addExtLibPath_INLRString__V_arg_file_or_path,
  0
};

::acdk::lang::dmi::ClazzInfo* MakeProps_methods_addExtLibPath_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MakeProps_method_addExtLibPath_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addExtLibPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addExtLibPath", // alternative name of method
  -1, // altlabelHashCode
  MakeProps_methods_addExtLibPath_INLRString__V_args, // the arguments
  0, //arguments count
  MakeProps_methods_addExtLibPath_INLRString__V_exceptions, // the declared exceptions
  MakeProps_MetainfoWrapper::MakeProps_method_addExtLibPath_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MakeProps_methods[] = 
{
  &MakeProps_method_GetClass__L_acdk_lang_RClass_,
  &MakeProps_method_MakeProps_INLRString_INLRProps_Z_LRMakeProps_,
  &MakeProps_method_MakeProps_INLRString__LRMakeProps_,
  &MakeProps_method_MakeProps_INLRString_INLRProps__LRMakeProps_,
  &MakeProps_method_addDefine_INLRString__V,
  &MakeProps_method_addDefine_INLRString_INLRString__V,
  &MakeProps_method_addExtInclude_INLRString__V,
  &MakeProps_method_addExtLibPath_INLRString__V,
  0
};


struct MakeProps_MetaInfoInitializer
{  MakeProps_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MakeProps::clazzInfo();
    ci->fields =  _MakeProps_fields;
    ci->methods =  _MakeProps_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MakeProps_MetaInfoInitializer MakeProps_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
PlattformSelectTask_create_array(int length)
{
  return new ObjectArrayImpl<RPlattformSelectTask>(length);
}

//static
::acdk::lang::RObject
PlattformSelectTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PlattformSelectTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PlattformSelectTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PlattformSelectTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PlattformSelectTask_method_PlattformSelectTask__LRPlattformSelectTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PlattformSelectTask();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PlattformSelectTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PlattformSelectTask* This = dmi_cast<PlattformSelectTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->PlattformSelectTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PlattformSelectTask_method_getAvailableTargets_INLRProps__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PlattformSelectTask* This = dmi_cast<PlattformSelectTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PlattformSelectTask::getAvailableTargets((RProps)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getAvailableTargets((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PlattformSelectTask_method_getTargetSpecs_INLRProps_INLRString__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PlattformSelectTask* This = dmi_cast<PlattformSelectTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PlattformSelectTask::getTargetSpecs((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTargetSpecs((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PlattformSelectTask_method_initTargetProps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PlattformSelectTask* This = dmi_cast<PlattformSelectTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PlattformSelectTask::initTargetProps((RProps)args[0].getObjectVar());
    else
        This->initTargetProps((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PlattformSelectTask_fields__targetProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PlattformSelectTask* This = dmi_cast<PlattformSelectTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_targetProps, flags);
    else
      This->_targetProps = (RProps)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PlattformSelectTask_fields__targetProps = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_targetProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  PlattformSelectTask_MetainfoWrapper::PlattformSelectTask_fields__targetProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PlattformSelectTask_fields[] = 
{
  &PlattformSelectTask_fields__targetProps,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PlattformSelectTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PlattformSelectTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PlattformSelectTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PlattformSelectTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PlattformSelectTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PlattformSelectTask_MetainfoWrapper::PlattformSelectTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PlattformSelectTask_methods_PlattformSelectTask__LRPlattformSelectTask__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PlattformSelectTask_methods_PlattformSelectTask__LRPlattformSelectTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PlattformSelectTask_method_PlattformSelectTask__LRPlattformSelectTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PlattformSelectTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PlattformSelectTask::clazzInfo(), // return type
  "_0_PlattformSelectTask", // alternative name of method
  -1, // altlabelHashCode
  PlattformSelectTask_methods_PlattformSelectTask__LRPlattformSelectTask__args, // the arguments
  0, //arguments count
  PlattformSelectTask_methods_PlattformSelectTask__LRPlattformSelectTask__exceptions, // the declared exceptions
  PlattformSelectTask_MetainfoWrapper::PlattformSelectTask_method_PlattformSelectTask__LRPlattformSelectTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PlattformSelectTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PlattformSelectTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PlattformSelectTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &PlattformSelectTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &PlattformSelectTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* PlattformSelectTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PlattformSelectTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_execute", // alternative name of method
  -1, // altlabelHashCode
  PlattformSelectTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  PlattformSelectTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  PlattformSelectTask_MetainfoWrapper::PlattformSelectTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PlattformSelectTask_methods_getAvailableTargets_INLRProps__LRStringArray__arg_globals = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "globals", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PlattformSelectTask_methods_getAvailableTargets_INLRProps__LRStringArray__args[] = 
{
  &PlattformSelectTask_methods_getAvailableTargets_INLRProps__LRStringArray__arg_globals,
  0
};

::acdk::lang::dmi::ClazzInfo* PlattformSelectTask_methods_getAvailableTargets_INLRProps__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PlattformSelectTask_method_getAvailableTargets_INLRProps__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableTargets", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_2_getAvailableTargets", // alternative name of method
  -1, // altlabelHashCode
  PlattformSelectTask_methods_getAvailableTargets_INLRProps__LRStringArray__args, // the arguments
  0, //arguments count
  PlattformSelectTask_methods_getAvailableTargets_INLRProps__LRStringArray__exceptions, // the declared exceptions
  PlattformSelectTask_MetainfoWrapper::PlattformSelectTask_method_getAvailableTargets_INLRProps__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PlattformSelectTask_methods_getTargetSpecs_INLRProps_INLRString__LRProps__arg_globals = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "globals", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PlattformSelectTask_methods_getTargetSpecs_INLRProps_INLRString__LRProps__arg_targetname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "targetname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PlattformSelectTask_methods_getTargetSpecs_INLRProps_INLRString__LRProps__args[] = 
{
  &PlattformSelectTask_methods_getTargetSpecs_INLRProps_INLRString__LRProps__arg_globals,
  &PlattformSelectTask_methods_getTargetSpecs_INLRProps_INLRString__LRProps__arg_targetname,
  0
};

::acdk::lang::dmi::ClazzInfo* PlattformSelectTask_methods_getTargetSpecs_INLRProps_INLRString__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PlattformSelectTask_method_getTargetSpecs_INLRProps_INLRString__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTargetSpecs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_3_getTargetSpecs", // alternative name of method
  -1, // altlabelHashCode
  PlattformSelectTask_methods_getTargetSpecs_INLRProps_INLRString__LRProps__args, // the arguments
  0, //arguments count
  PlattformSelectTask_methods_getTargetSpecs_INLRProps_INLRString__LRProps__exceptions, // the declared exceptions
  PlattformSelectTask_MetainfoWrapper::PlattformSelectTask_method_getTargetSpecs_INLRProps_INLRString__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PlattformSelectTask_methods_initTargetProps_INLRProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PlattformSelectTask_methods_initTargetProps_INLRProps__V_args[] = 
{
  &PlattformSelectTask_methods_initTargetProps_INLRProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* PlattformSelectTask_methods_initTargetProps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PlattformSelectTask_method_initTargetProps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initTargetProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_initTargetProps", // alternative name of method
  -1, // altlabelHashCode
  PlattformSelectTask_methods_initTargetProps_INLRProps__V_args, // the arguments
  0, //arguments count
  PlattformSelectTask_methods_initTargetProps_INLRProps__V_exceptions, // the declared exceptions
  PlattformSelectTask_MetainfoWrapper::PlattformSelectTask_method_initTargetProps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PlattformSelectTask_methods[] = 
{
  &PlattformSelectTask_method_GetClass__L_acdk_lang_RClass_,
  &PlattformSelectTask_method_PlattformSelectTask__LRPlattformSelectTask_,
  &PlattformSelectTask_method_execute_INLRString_INLRProps__Z,
  &PlattformSelectTask_method_getAvailableTargets_INLRProps__LRStringArray_,
  &PlattformSelectTask_method_getTargetSpecs_INLRProps_INLRString__LRProps_,
  &PlattformSelectTask_method_initTargetProps_INLRProps__V,
  0
};


struct PlattformSelectTask_MetaInfoInitializer
{  PlattformSelectTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PlattformSelectTask::clazzInfo();
    ci->fields =  _PlattformSelectTask_fields;
    ci->methods =  _PlattformSelectTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PlattformSelectTask_MetaInfoInitializer PlattformSelectTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
ProjectTask_create_array(int length)
{
  return new ObjectArrayImpl<RProjectTask>(length);
}

//static
::acdk::lang::RObject
ProjectTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ProjectTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProjectTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ProjectTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProjectTask_method_ProjectTask_INLRString_INLRStringArray__LRProjectTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProjectTask((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProjectTask_method_ProjectTask_INLRString__LRProjectTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProjectTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProjectTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProjectTask* This = dmi_cast<ProjectTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ProjectTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ProjectTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProjectTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProjectTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProjectTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ProjectTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ProjectTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ProjectTask_MetainfoWrapper::ProjectTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProjectTask_methods_ProjectTask_INLRString_INLRStringArray__LRProjectTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProjectTask_methods_ProjectTask_INLRString_INLRStringArray__LRProjectTask__arg_subtasksnames = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "subtasksnames", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProjectTask_methods_ProjectTask_INLRString_INLRStringArray__LRProjectTask__args[] = 
{
  &ProjectTask_methods_ProjectTask_INLRString_INLRStringArray__LRProjectTask__arg_name,
  &ProjectTask_methods_ProjectTask_INLRString_INLRStringArray__LRProjectTask__arg_subtasksnames,
  0
};

::acdk::lang::dmi::ClazzInfo* ProjectTask_methods_ProjectTask_INLRString_INLRStringArray__LRProjectTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProjectTask_method_ProjectTask_INLRString_INLRStringArray__LRProjectTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ProjectTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProjectTask::clazzInfo(), // return type
  "_0_ProjectTask", // alternative name of method
  -1, // altlabelHashCode
  ProjectTask_methods_ProjectTask_INLRString_INLRStringArray__LRProjectTask__args, // the arguments
  0, //arguments count
  ProjectTask_methods_ProjectTask_INLRString_INLRStringArray__LRProjectTask__exceptions, // the declared exceptions
  ProjectTask_MetainfoWrapper::ProjectTask_method_ProjectTask_INLRString_INLRStringArray__LRProjectTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProjectTask_methods_ProjectTask_INLRString__LRProjectTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProjectTask_methods_ProjectTask_INLRString__LRProjectTask__args[] = 
{
  &ProjectTask_methods_ProjectTask_INLRString__LRProjectTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ProjectTask_methods_ProjectTask_INLRString__LRProjectTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProjectTask_method_ProjectTask_INLRString__LRProjectTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ProjectTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProjectTask::clazzInfo(), // return type
  "_1_ProjectTask", // alternative name of method
  -1, // altlabelHashCode
  ProjectTask_methods_ProjectTask_INLRString__LRProjectTask__args, // the arguments
  0, //arguments count
  ProjectTask_methods_ProjectTask_INLRString__LRProjectTask__exceptions, // the declared exceptions
  ProjectTask_MetainfoWrapper::ProjectTask_method_ProjectTask_INLRString__LRProjectTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProjectTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProjectTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProjectTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &ProjectTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &ProjectTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ProjectTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProjectTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  ProjectTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  ProjectTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  ProjectTask_MetainfoWrapper::ProjectTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ProjectTask_methods[] = 
{
  &ProjectTask_method_GetClass__L_acdk_lang_RClass_,
  &ProjectTask_method_ProjectTask_INLRString_INLRStringArray__LRProjectTask_,
  &ProjectTask_method_ProjectTask_INLRString__LRProjectTask_,
  &ProjectTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct ProjectTask_MetaInfoInitializer
{  ProjectTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ProjectTask::clazzInfo();
    ci->fields =  _ProjectTask_fields;
    ci->methods =  _ProjectTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ProjectTask_MetaInfoInitializer ProjectTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
ScriptExecuteTask_create_array(int length)
{
  return new ObjectArrayImpl<RScriptExecuteTask>(length);
}

//static
::acdk::lang::RObject
ScriptExecuteTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScriptExecuteTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptExecuteTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptExecuteTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptExecuteTask_method_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScriptExecuteTask((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptExecuteTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptExecuteTask* This = dmi_cast<ScriptExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptExecuteTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptExecuteTask_fields__flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptExecuteTask* This = dmi_cast<ScriptExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flags, flags);
    else
      This->_flags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptExecuteTask_fields__fname_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptExecuteTask* This = dmi_cast<ScriptExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fname, flags);
    else
      This->_fname = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ScriptExecuteTask_fields__flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScriptExecuteTask_MetainfoWrapper::ScriptExecuteTask_fields__flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScriptExecuteTask_fields__fname = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fname", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ScriptExecuteTask_MetainfoWrapper::ScriptExecuteTask_fields__fname_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ScriptExecuteTask_fields[] = 
{
  &ScriptExecuteTask_fields__flags,
  &ScriptExecuteTask_fields__fname,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptExecuteTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptExecuteTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptExecuteTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptExecuteTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScriptExecuteTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScriptExecuteTask_MetainfoWrapper::ScriptExecuteTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptExecuteTask_methods_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptExecuteTask_methods_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptExecuteTask_methods_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__args[] = 
{
  &ScriptExecuteTask_methods_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__arg_filename,
  &ScriptExecuteTask_methods_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptExecuteTask_methods_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptExecuteTask_method_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScriptExecuteTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScriptExecuteTask::clazzInfo(), // return type
  "_0_ScriptExecuteTask", // alternative name of method
  -1, // altlabelHashCode
  ScriptExecuteTask_methods_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__args, // the arguments
  0, //arguments count
  ScriptExecuteTask_methods_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__exceptions, // the declared exceptions
  ScriptExecuteTask_MetainfoWrapper::ScriptExecuteTask_method_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptExecuteTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptExecuteTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptExecuteTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &ScriptExecuteTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &ScriptExecuteTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptExecuteTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptExecuteTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_execute", // alternative name of method
  -1, // altlabelHashCode
  ScriptExecuteTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  ScriptExecuteTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  ScriptExecuteTask_MetainfoWrapper::ScriptExecuteTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScriptExecuteTask_methods[] = 
{
  &ScriptExecuteTask_method_GetClass__L_acdk_lang_RClass_,
  &ScriptExecuteTask_method_ScriptExecuteTask_INLRString_I_LRScriptExecuteTask_,
  &ScriptExecuteTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct ScriptExecuteTask_MetaInfoInitializer
{  ScriptExecuteTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScriptExecuteTask::clazzInfo();
    ci->fields =  _ScriptExecuteTask_fields;
    ci->methods =  _ScriptExecuteTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScriptExecuteTask_MetaInfoInitializer ScriptExecuteTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
ShellExecuteTask_create_array(int length)
{
  return new ObjectArrayImpl<RShellExecuteTask>(length);
}

//static
::acdk::lang::RObject
ShellExecuteTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ShellExecuteTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ShellExecuteTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ShellExecuteTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), (RStringArray)args[4].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ShellExecuteTask((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ShellExecuteTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_getErrString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ShellExecuteTask::getErrString();
    else
        ret = (::acdk::lang::RObject)This->getErrString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_getOutString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ShellExecuteTask::getOutString();
    else
        ret = (::acdk::lang::RObject)This->getOutString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_getShell_INLRProps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ShellExecuteTask::getShell((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_getShellExecuteOpt_INLRProps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ShellExecuteTask::getShellExecuteOpt((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_setCommandLine_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecuteTask::setCommandLine((RString)args[0].getObjectVar());
    else
        This->setCommandLine((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_setErrWriter_INL_acdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecuteTask::setErrWriter((::acdk::io::RCharWriter)args[0].getObjectVar());
    else
        This->setErrWriter((::acdk::io::RCharWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_setOutWriter_INL_acdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecuteTask::setOutWriter((::acdk::io::RCharWriter)args[0].getObjectVar());
    else
        This->setOutWriter((::acdk::io::RCharWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecuteTask_method_setWorkingDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecuteTask::setWorkingDir((RString)args[0].getObjectVar());
    else
        This->setWorkingDir((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecuteTask_fields__cmdline_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cmdline, flags);
    else
      This->_cmdline = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecuteTask_fields__env_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_env, flags);
    else
      This->_env = (RStringArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecuteTask_fields__errWriter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errWriter, flags);
    else
      This->_errWriter = (::acdk::io::RCharWriter)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecuteTask_fields__errs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errs, flags);
    else
      This->_errs = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecuteTask_fields__flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flags, flags);
    else
      This->_flags = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecuteTask_fields__outWriter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_outWriter, flags);
    else
      This->_outWriter = (::acdk::io::RCharWriter)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecuteTask_fields__outs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_outs, flags);
    else
      This->_outs = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecuteTask_fields__workDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecuteTask* This = dmi_cast<ShellExecuteTask>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_workDir, flags);
    else
      This->_workDir = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecuteTask_fields__cmdline = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cmdline", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_fields__cmdline_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecuteTask_fields__env = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_env", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_fields__env_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecuteTask_fields__errWriter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errWriter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo(),
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_fields__errWriter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecuteTask_fields__errs = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_fields__errs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecuteTask_fields__flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_fields__flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecuteTask_fields__outWriter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_outWriter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo(),
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_fields__outWriter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecuteTask_fields__outs = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_outs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_fields__outs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecuteTask_fields__workDir = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_workDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_fields__workDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ShellExecuteTask_fields[] = 
{
  &ShellExecuteTask_fields__cmdline,
  &ShellExecuteTask_fields__env,
  &ShellExecuteTask_fields__errWriter,
  &ShellExecuteTask_fields__errs,
  &ShellExecuteTask_fields__flags,
  &ShellExecuteTask_fields__outWriter,
  &ShellExecuteTask_fields__outs,
  &ShellExecuteTask_fields__workDir,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_descr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "descr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_cmdline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__args[] = 
{
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_name,
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_descr,
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_cmdline,
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_flags,
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ShellExecuteTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ShellExecuteTask::clazzInfo(), // return type
  "_0_ShellExecuteTask", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__arg_descr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "descr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__arg_cmdline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__args[] = 
{
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__arg_name,
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__arg_descr,
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__arg_cmdline,
  &ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ShellExecuteTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ShellExecuteTask::clazzInfo(), // return type
  "_1_ShellExecuteTask", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &ShellExecuteTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &ShellExecuteTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_execute", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_getErrString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_getErrString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_getErrString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getErrString", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_getErrString__LRString__args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_getErrString__LRString__exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_getErrString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_getOutString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_getOutString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_getOutString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getOutString", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_getOutString__LRString__args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_getOutString__LRString__exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_getOutString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_getShell_INLRProps__LRString__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_getShell_INLRProps__LRString__args[] = 
{
  &ShellExecuteTask_methods_getShell_INLRProps__LRString__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_getShell_INLRProps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_getShell_INLRProps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShell", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getShell", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_getShell_INLRProps__LRString__args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_getShell_INLRProps__LRString__exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_getShell_INLRProps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_getShellExecuteOpt_INLRProps__LRString__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_getShellExecuteOpt_INLRProps__LRString__args[] = 
{
  &ShellExecuteTask_methods_getShellExecuteOpt_INLRProps__LRString__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_getShellExecuteOpt_INLRProps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_getShellExecuteOpt_INLRProps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShellExecuteOpt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getShellExecuteOpt", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_getShellExecuteOpt_INLRProps__LRString__args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_getShellExecuteOpt_INLRProps__LRString__exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_getShellExecuteOpt_INLRProps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_setCommandLine_INLRString__V_arg_cmdline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_setCommandLine_INLRString__V_args[] = 
{
  &ShellExecuteTask_methods_setCommandLine_INLRString__V_arg_cmdline,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_setCommandLine_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_setCommandLine_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCommandLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setCommandLine", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_setCommandLine_INLRString__V_args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_setCommandLine_INLRString__V_exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_setCommandLine_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_setErrWriter_INL_acdk_io_RCharWriter__V_arg_errWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "errWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_setErrWriter_INL_acdk_io_RCharWriter__V_args[] = 
{
  &ShellExecuteTask_methods_setErrWriter_INL_acdk_io_RCharWriter__V_arg_errWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_setErrWriter_INL_acdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_setErrWriter_INL_acdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setErrWriter", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_setErrWriter_INL_acdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_setErrWriter_INL_acdk_io_RCharWriter__V_exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_setErrWriter_INL_acdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_setOutWriter_INL_acdk_io_RCharWriter__V_arg_outWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "outWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_setOutWriter_INL_acdk_io_RCharWriter__V_args[] = 
{
  &ShellExecuteTask_methods_setOutWriter_INL_acdk_io_RCharWriter__V_arg_outWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_setOutWriter_INL_acdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_setOutWriter_INL_acdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOutWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setOutWriter", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_setOutWriter_INL_acdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_setOutWriter_INL_acdk_io_RCharWriter__V_exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_setOutWriter_INL_acdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecuteTask_methods_setWorkingDir_INLRString__V_arg_wdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "wdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecuteTask_methods_setWorkingDir_INLRString__V_args[] = 
{
  &ShellExecuteTask_methods_setWorkingDir_INLRString__V_arg_wdir,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecuteTask_methods_setWorkingDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecuteTask_method_setWorkingDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWorkingDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setWorkingDir", // alternative name of method
  -1, // altlabelHashCode
  ShellExecuteTask_methods_setWorkingDir_INLRString__V_args, // the arguments
  0, //arguments count
  ShellExecuteTask_methods_setWorkingDir_INLRString__V_exceptions, // the declared exceptions
  ShellExecuteTask_MetainfoWrapper::ShellExecuteTask_method_setWorkingDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ShellExecuteTask_methods[] = 
{
  &ShellExecuteTask_method_GetClass__L_acdk_lang_RClass_,
  &ShellExecuteTask_method_ShellExecuteTask_INLRString_INLRString_INLRString_IINLRStringArray__LRShellExecuteTask_,
  &ShellExecuteTask_method_ShellExecuteTask_INLRString_INLRString_INLRString_I_LRShellExecuteTask_,
  &ShellExecuteTask_method_execute_INLRString_INLRProps__Z,
  &ShellExecuteTask_method_getErrString__LRString_,
  &ShellExecuteTask_method_getOutString__LRString_,
  &ShellExecuteTask_method_getShell_INLRProps__LRString_,
  &ShellExecuteTask_method_getShellExecuteOpt_INLRProps__LRString_,
  &ShellExecuteTask_method_setCommandLine_INLRString__V,
  &ShellExecuteTask_method_setErrWriter_INL_acdk_io_RCharWriter__V,
  &ShellExecuteTask_method_setOutWriter_INL_acdk_io_RCharWriter__V,
  &ShellExecuteTask_method_setWorkingDir_INLRString__V,
  0
};


struct ShellExecuteTask_MetaInfoInitializer
{  ShellExecuteTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ShellExecuteTask::clazzInfo();
    ci->fields =  _ShellExecuteTask_fields;
    ci->methods =  _ShellExecuteTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ShellExecuteTask_MetaInfoInitializer ShellExecuteTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
Task_create_array(int length)
{
  return new ObjectArrayImpl<RTask>(length);
}

//static
::acdk::lang::RObject
Task_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Task_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Task_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Task::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Task_method_addDependingTask_INLRTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Task* This = dmi_cast<Task>(This_);
    This->addDependingTask((RTask)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Task_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Task* This = dmi_cast<Task>(This_);
  ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Task_method_getTaskInfo__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Task* This = dmi_cast<Task>(This_);
    ret = (::acdk::lang::RObject)This->getTaskInfo();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Task_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Task_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Task_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Task_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Task_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Task_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Task_MetainfoWrapper::Task_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Task_methods_addDependingTask_INLRTask__V_arg_task = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "task", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Task_methods_addDependingTask_INLRTask__V_args[] = 
{
  &Task_methods_addDependingTask_INLRTask__V_arg_task,
  0
};

::acdk::lang::dmi::ClazzInfo* Task_methods_addDependingTask_INLRTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Task_method_addDependingTask_INLRTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addDependingTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_addDependingTask", // alternative name of method
  -1, // altlabelHashCode
  Task_methods_addDependingTask_INLRTask__V_args, // the arguments
  0, //arguments count
  Task_methods_addDependingTask_INLRTask__V_exceptions, // the declared exceptions
  Task_MetainfoWrapper::Task_method_addDependingTask_INLRTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Task_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Task_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Task_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &Task_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &Task_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Task_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Task_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_execute", // alternative name of method
  -1, // altlabelHashCode
  Task_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  Task_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  Task_MetainfoWrapper::Task_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Task_methods_getTaskInfo__LRTaskInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Task_methods_getTaskInfo__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Task_method_getTaskInfo__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskInfo::clazzInfo(), // return type
  "_0_getTaskInfo", // alternative name of method
  -1, // altlabelHashCode
  Task_methods_getTaskInfo__LRTaskInfo__args, // the arguments
  0, //arguments count
  Task_methods_getTaskInfo__LRTaskInfo__exceptions, // the declared exceptions
  Task_MetainfoWrapper::Task_method_getTaskInfo__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Task_methods[] = 
{
  &Task_method_GetClass__L_acdk_lang_RClass_,
  &Task_method_addDependingTask_INLRTask__V,
  &Task_method_execute_INLRString_INLRProps__Z,
  &Task_method_getTaskInfo__LRTaskInfo_,
  0
};


struct Task_MetaInfoInitializer
{  Task_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Task::clazzInfo();
    ci->fields =  _Task_fields;
    ci->methods =  _Task_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Task_MetaInfoInitializer Task_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
TaskCfgFile_create_array(int length)
{
  return new ObjectArrayImpl<RTaskCfgFile>(length);
}

//static
::acdk::lang::RObject
TaskCfgFile_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TaskCfgFile_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskCfgFile_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TaskCfgFile::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskCfgFile_method_TaskCfgFile_INLRString__LRTaskCfgFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TaskCfgFile((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskCfgFile_method_put_INLRObject_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskCfgFile* This = dmi_cast<TaskCfgFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TaskCfgFile::put((RObject)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->put((RObject)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskCfgFile_method_read__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskCfgFile* This = dmi_cast<TaskCfgFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TaskCfgFile::read();
    else
        This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskCfgFile_fields__filename_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskCfgFile* This = dmi_cast<TaskCfgFile>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filename, flags);
    else
      This->_filename = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TaskCfgFile_fields__filename = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filename", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TaskCfgFile_MetainfoWrapper::TaskCfgFile_fields__filename_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TaskCfgFile_fields[] = 
{
  &TaskCfgFile_fields__filename,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskCfgFile_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskCfgFile_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskCfgFile_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TaskCfgFile_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TaskCfgFile_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TaskCfgFile_MetainfoWrapper::TaskCfgFile_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskCfgFile_methods_TaskCfgFile_INLRString__LRTaskCfgFile__arg_cfgfile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cfgfile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskCfgFile_methods_TaskCfgFile_INLRString__LRTaskCfgFile__args[] = 
{
  &TaskCfgFile_methods_TaskCfgFile_INLRString__LRTaskCfgFile__arg_cfgfile,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskCfgFile_methods_TaskCfgFile_INLRString__LRTaskCfgFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskCfgFile_method_TaskCfgFile_INLRString__LRTaskCfgFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TaskCfgFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskCfgFile::clazzInfo(), // return type
  "_0_TaskCfgFile", // alternative name of method
  -1, // altlabelHashCode
  TaskCfgFile_methods_TaskCfgFile_INLRString__LRTaskCfgFile__args, // the arguments
  0, //arguments count
  TaskCfgFile_methods_TaskCfgFile_INLRString__LRTaskCfgFile__exceptions, // the declared exceptions
  TaskCfgFile_MetainfoWrapper::TaskCfgFile_method_TaskCfgFile_INLRString__LRTaskCfgFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskCfgFile_methods_put_INLRObject_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskCfgFile_methods_put_INLRObject_INLRObject__LRObject__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskCfgFile_methods_put_INLRObject_INLRObject__LRObject__args[] = 
{
  &TaskCfgFile_methods_put_INLRObject_INLRObject__LRObject__arg_key,
  &TaskCfgFile_methods_put_INLRObject_INLRObject__LRObject__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskCfgFile_methods_put_INLRObject_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskCfgFile_method_put_INLRObject_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "put", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_put", // alternative name of method
  -1, // altlabelHashCode
  TaskCfgFile_methods_put_INLRObject_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  TaskCfgFile_methods_put_INLRObject_INLRObject__LRObject__exceptions, // the declared exceptions
  TaskCfgFile_MetainfoWrapper::TaskCfgFile_method_put_INLRObject_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskCfgFile_methods_read__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskCfgFile_methods_read__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskCfgFile_method_read__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_read", // alternative name of method
  -1, // altlabelHashCode
  TaskCfgFile_methods_read__V_args, // the arguments
  0, //arguments count
  TaskCfgFile_methods_read__V_exceptions, // the declared exceptions
  TaskCfgFile_MetainfoWrapper::TaskCfgFile_method_read__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TaskCfgFile_methods[] = 
{
  &TaskCfgFile_method_GetClass__L_acdk_lang_RClass_,
  &TaskCfgFile_method_TaskCfgFile_INLRString__LRTaskCfgFile_,
  &TaskCfgFile_method_put_INLRObject_INLRObject__LRObject_,
  &TaskCfgFile_method_read__V,
  0
};


struct TaskCfgFile_MetaInfoInitializer
{  TaskCfgFile_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TaskCfgFile::clazzInfo();
    ci->fields =  _TaskCfgFile_fields;
    ci->methods =  _TaskCfgFile_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TaskCfgFile_MetaInfoInitializer TaskCfgFile_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
TaskInfo_create_array(int length)
{
  return new ObjectArrayImpl<RTaskInfo>(length);
}

//static
::acdk::lang::RObject
TaskInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TaskInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TaskInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TaskInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_TaskInfo_INLRString__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TaskInfo((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_TaskInfo_INLRString_INLRString__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TaskInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TaskInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TaskInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_getDescription__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TaskInfo::getDescription();
    else
        ret = (::acdk::lang::RObject)This->getDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_getExecuteLogString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TaskInfo::getExecuteLogString();
    else
        ret = (::acdk::lang::RObject)This->getExecuteLogString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_getTargetName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TaskInfo::getTargetName();
    else
        ret = (::acdk::lang::RObject)This->getTargetName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_getTaskName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TaskInfo::getTaskName();
    else
        ret = (::acdk::lang::RObject)This->getTaskName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_getTaskStatus__LTaskStatus__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (TaskStatus)This->TaskInfo::getTaskStatus();
    else
      ret = (TaskStatus)This->getTaskStatus();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_getWorkingDir__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TaskInfo::getWorkingDir();
    else
        ret = (::acdk::lang::RObject)This->getWorkingDir();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_logLevel__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TaskInfo::logLevel();
    else
      ret = This->logLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskInfo_method_setTaskBuildStatus_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TaskInfo::setTaskBuildStatus(args[0].getBoolVar());
    else
        This->setTaskBuildStatus(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskInfo_fields__description_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_description, flags);
    else
      This->_description = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskInfo_fields__logLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_logLevel, flags);
    else
      This->_logLevel = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskInfo_fields__logString_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_logString, flags);
    else
      This->_logString = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskInfo_fields__targetName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_targetName, flags);
    else
      This->_targetName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskInfo_fields__taskName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_taskName, flags);
    else
      This->_taskName = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskInfo_fields__taskStatus_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_taskStatus), flags);
    else
      This->_taskStatus = (TaskStatus)var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskInfo_fields__workingDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskInfo* This = dmi_cast<TaskInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_workingDir, flags);
    else
      This->_workingDir = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TaskInfo_fields__description = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_description", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TaskInfo_MetainfoWrapper::TaskInfo_fields__description_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TaskInfo_fields__logLevel = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_logLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TaskInfo_MetainfoWrapper::TaskInfo_fields__logLevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TaskInfo_fields__logString = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_logString", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TaskInfo_MetainfoWrapper::TaskInfo_fields__logString_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TaskInfo_fields__targetName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_targetName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TaskInfo_MetainfoWrapper::TaskInfo_fields__targetName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TaskInfo_fields__taskName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_taskName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TaskInfo_MetainfoWrapper::TaskInfo_fields__taskName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TaskInfo_fields__taskStatus = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_taskStatus", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TaskInfo_MetainfoWrapper::TaskInfo_fields__taskStatus_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TaskInfo_fields__workingDir = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_workingDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TaskInfo_MetainfoWrapper::TaskInfo_fields__workingDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TaskInfo_fields[] = 
{
  &TaskInfo_fields__description,
  &TaskInfo_fields__logLevel,
  &TaskInfo_fields__logString,
  &TaskInfo_fields__targetName,
  &TaskInfo_fields__taskName,
  &TaskInfo_fields__taskStatus,
  &TaskInfo_fields__workingDir,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TaskInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_taskname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "taskname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_targetname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "targetname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_logstring = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "logstring", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_loglevel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "loglevel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__args[] = 
{
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_taskname,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_targetname,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_desc,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_logstring,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__arg_loglevel,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskInfo::clazzInfo(), // return type
  "_0_TaskInfo", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__args, // the arguments
  0, //arguments count
  TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString__LRTaskInfo__arg_taskname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "taskname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_TaskInfo_INLRString__LRTaskInfo__args[] = 
{
  &TaskInfo_methods_TaskInfo_INLRString__LRTaskInfo__arg_taskname,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_TaskInfo_INLRString__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_TaskInfo_INLRString__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskInfo::clazzInfo(), // return type
  "_1_TaskInfo", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_TaskInfo_INLRString__LRTaskInfo__args, // the arguments
  0, //arguments count
  TaskInfo_methods_TaskInfo_INLRString__LRTaskInfo__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_TaskInfo_INLRString__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString__LRTaskInfo__arg_taskname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "taskname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString__LRTaskInfo__arg_targetname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "targetname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_TaskInfo_INLRString_INLRString__LRTaskInfo__args[] = 
{
  &TaskInfo_methods_TaskInfo_INLRString_INLRString__LRTaskInfo__arg_taskname,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString__LRTaskInfo__arg_targetname,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_TaskInfo_INLRString_INLRString__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_TaskInfo_INLRString_INLRString__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskInfo::clazzInfo(), // return type
  "_2_TaskInfo", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_TaskInfo_INLRString_INLRString__LRTaskInfo__args, // the arguments
  0, //arguments count
  TaskInfo_methods_TaskInfo_INLRString_INLRString__LRTaskInfo__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_TaskInfo_INLRString_INLRString__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__arg_taskname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "taskname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__arg_targetname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "targetname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__args[] = 
{
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__arg_taskname,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__arg_targetname,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskInfo::clazzInfo(), // return type
  "_3_TaskInfo", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__args, // the arguments
  0, //arguments count
  TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__arg_taskname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "taskname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__arg_targetname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "targetname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__arg_logstring = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "logstring", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__args[] = 
{
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__arg_taskname,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__arg_targetname,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__arg_desc,
  &TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__arg_logstring,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TaskInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskInfo::clazzInfo(), // return type
  "_4_TaskInfo", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__args, // the arguments
  0, //arguments count
  TaskInfo_methods_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_getDescription__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_getDescription__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_getDescription__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getDescription", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_getDescription__LRString__args, // the arguments
  0, //arguments count
  TaskInfo_methods_getDescription__LRString__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_getDescription__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_getExecuteLogString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_getExecuteLogString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_getExecuteLogString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExecuteLogString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getExecuteLogString", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_getExecuteLogString__LRString__args, // the arguments
  0, //arguments count
  TaskInfo_methods_getExecuteLogString__LRString__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_getExecuteLogString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_getTargetName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_getTargetName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_getTargetName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTargetName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getTargetName", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_getTargetName__LRString__args, // the arguments
  0, //arguments count
  TaskInfo_methods_getTargetName__LRString__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_getTargetName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_getTaskName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_getTaskName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_getTaskName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getTaskName", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_getTaskName__LRString__args, // the arguments
  0, //arguments count
  TaskInfo_methods_getTaskName__LRString__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_getTaskName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_getTaskStatus__LTaskStatus__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_getTaskStatus__LTaskStatus__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_getTaskStatus__LTaskStatus_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskStatus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getTaskStatus", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_getTaskStatus__LTaskStatus__args, // the arguments
  0, //arguments count
  TaskInfo_methods_getTaskStatus__LTaskStatus__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_getTaskStatus__LTaskStatus__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_getWorkingDir__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_getWorkingDir__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_getWorkingDir__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWorkingDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getWorkingDir", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_getWorkingDir__LRString__args, // the arguments
  0, //arguments count
  TaskInfo_methods_getWorkingDir__LRString__exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_getWorkingDir__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_logLevel__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_logLevel__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_logLevel__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "logLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_logLevel", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_logLevel__I_args, // the arguments
  0, //arguments count
  TaskInfo_methods_logLevel__I_exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_logLevel__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskInfo_methods_setTaskBuildStatus_Z_V_arg_erg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "erg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskInfo_methods_setTaskBuildStatus_Z_V_args[] = 
{
  &TaskInfo_methods_setTaskBuildStatus_Z_V_arg_erg,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskInfo_methods_setTaskBuildStatus_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskInfo_method_setTaskBuildStatus_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTaskBuildStatus", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setTaskBuildStatus", // alternative name of method
  -1, // altlabelHashCode
  TaskInfo_methods_setTaskBuildStatus_Z_V_args, // the arguments
  0, //arguments count
  TaskInfo_methods_setTaskBuildStatus_Z_V_exceptions, // the declared exceptions
  TaskInfo_MetainfoWrapper::TaskInfo_method_setTaskBuildStatus_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TaskInfo_methods[] = 
{
  &TaskInfo_method_GetClass__L_acdk_lang_RClass_,
  &TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString_INLRString_I_LRTaskInfo_,
  &TaskInfo_method_TaskInfo_INLRString__LRTaskInfo_,
  &TaskInfo_method_TaskInfo_INLRString_INLRString__LRTaskInfo_,
  &TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString__LRTaskInfo_,
  &TaskInfo_method_TaskInfo_INLRString_INLRString_INLRString_INLRString__LRTaskInfo_,
  &TaskInfo_method_getDescription__LRString_,
  &TaskInfo_method_getExecuteLogString__LRString_,
  &TaskInfo_method_getTargetName__LRString_,
  &TaskInfo_method_getTaskName__LRString_,
  &TaskInfo_method_getTaskStatus__LTaskStatus_,
  &TaskInfo_method_getWorkingDir__LRString_,
  &TaskInfo_method_logLevel__I,
  &TaskInfo_method_setTaskBuildStatus_Z_V,
  0
};


struct TaskInfo_MetaInfoInitializer
{  TaskInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TaskInfo::clazzInfo();
    ci->fields =  _TaskInfo_fields;
    ci->methods =  _TaskInfo_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TaskInfo_MetaInfoInitializer TaskInfo_MetaInfoInitializer_staticinstance__;


struct TaskInfo_clazzInfo_ClazzAttributesResInitializer3
{
  TaskInfo_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TaskInfo_method_getTaskStatus__LTaskStatus_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)TaskStatusMetaInf::GetEnumInfo()));
  }
};

TaskInfo_clazzInfo_ClazzAttributesResInitializer3 TaskInfo_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
TaskManager_create_array(int length)
{
  return new ObjectArrayImpl<RTaskManager>(length);
}

//static
::acdk::lang::RObject
TaskManager_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TaskManager_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TaskManager::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_TaskManager__LRTaskManager__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TaskManager();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method__getTask_INLRString__LRTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskManager* This = dmi_cast<TaskManager>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TaskManager::_getTask((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->_getTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method__getTasks__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskManager* This = dmi_cast<TaskManager>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TaskManager::_getTasks();
    else
        ret = (::acdk::lang::RObject)This->_getTasks();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method__registerTask_INLRTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskManager* This = dmi_cast<TaskManager>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TaskManager::_registerTask((RTask)args[0].getObjectVar());
    else
        This->_registerTask((RTask)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method__registerTask_INLRString_INLRTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskManager* This = dmi_cast<TaskManager>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TaskManager::_registerTask((RString)args[0].getObjectVar(), (RTask)args[1].getObjectVar());
    else
        This->_registerTask((RString)args[0].getObjectVar(), (RTask)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_getTask_INLRString__LRTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TaskManager::getTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_getTaskManager__LRTaskManager__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TaskManager::getTaskManager();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_getTasks__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TaskManager::getTasks();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_noFailOnBreak_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskManager::noFailOnBreak(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_noFailOnBreak__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = TaskManager::noFailOnBreak();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_registerTask_INLRTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskManager::registerTask((RTask)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TaskManager_method_registerTask_INLRString_INLRTask__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TaskManager::registerTask((RString)args[0].getObjectVar(), (RTask)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskManager_fields__noFailOnBreak_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskManager* This = dmi_cast<TaskManager>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_noFailOnBreak, flags);
    else
      This->_noFailOnBreak = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TaskManager_fields__tasks_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TaskManager* This = dmi_cast<TaskManager>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tasks, flags);
    else
      This->_tasks = (::acdk::util::RHashMap)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TaskManager_fields__noFailOnBreak = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_noFailOnBreak", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TaskManager_MetainfoWrapper::TaskManager_fields__noFailOnBreak_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TaskManager_fields__tasks = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tasks", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RHashMap::clazzInfo(),
  TaskManager_MetainfoWrapper::TaskManager_fields__tasks_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TaskManager_fields[] = 
{
  &TaskManager_fields__noFailOnBreak,
  &TaskManager_fields__tasks,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TaskManager_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_TaskManager__LRTaskManager__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_TaskManager__LRTaskManager__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_TaskManager__LRTaskManager_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TaskManager", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TaskManager::clazzInfo(), // return type
  "_0_TaskManager", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_TaskManager__LRTaskManager__args, // the arguments
  0, //arguments count
  TaskManager_methods_TaskManager__LRTaskManager__exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_TaskManager__LRTaskManager__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods__getTask_INLRString__LRTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods__getTask_INLRString__LRTask__args[] = 
{
  &TaskManager_methods__getTask_INLRString__LRTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods__getTask_INLRString__LRTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method__getTask_INLRString__LRTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo(), // return type
  "_3__getTask", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods__getTask_INLRString__LRTask__args, // the arguments
  0, //arguments count
  TaskManager_methods__getTask_INLRString__LRTask__exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method__getTask_INLRString__LRTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods__getTasks__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods__getTasks__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method__getTasks__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getTasks", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_4__getTasks", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods__getTasks__LRStringArray__args, // the arguments
  0, //arguments count
  TaskManager_methods__getTasks__LRStringArray__exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method__getTasks__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods__registerTask_INLRTask__V_arg_task = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "task", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods__registerTask_INLRTask__V_args[] = 
{
  &TaskManager_methods__registerTask_INLRTask__V_arg_task,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods__registerTask_INLRTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method__registerTask_INLRTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_registerTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1__registerTask", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods__registerTask_INLRTask__V_args, // the arguments
  0, //arguments count
  TaskManager_methods__registerTask_INLRTask__V_exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method__registerTask_INLRTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods__registerTask_INLRString_INLRTask__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods__registerTask_INLRString_INLRTask__V_arg_task = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "task", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods__registerTask_INLRString_INLRTask__V_args[] = 
{
  &TaskManager_methods__registerTask_INLRString_INLRTask__V_arg_name,
  &TaskManager_methods__registerTask_INLRString_INLRTask__V_arg_task,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods__registerTask_INLRString_INLRTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method__registerTask_INLRString_INLRTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_registerTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2__registerTask", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods__registerTask_INLRString_INLRTask__V_args, // the arguments
  0, //arguments count
  TaskManager_methods__registerTask_INLRString_INLRTask__V_exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method__registerTask_INLRString_INLRTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods_getTask_INLRString__LRTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_getTask_INLRString__LRTask__args[] = 
{
  &TaskManager_methods_getTask_INLRString__LRTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_getTask_INLRString__LRTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_getTask_INLRString__LRTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo(), // return type
  "_8_getTask", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_getTask_INLRString__LRTask__args, // the arguments
  0, //arguments count
  TaskManager_methods_getTask_INLRString__LRTask__exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_getTask_INLRString__LRTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_getTaskManager__LRTaskManager__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_getTaskManager__LRTaskManager__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_getTaskManager__LRTaskManager_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTaskManager", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTaskManager::clazzInfo(), // return type
  "_5_getTaskManager", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_getTaskManager__LRTaskManager__args, // the arguments
  0, //arguments count
  TaskManager_methods_getTaskManager__LRTaskManager__exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_getTaskManager__LRTaskManager__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_getTasks__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_getTasks__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_getTasks__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTasks", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_9_getTasks", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_getTasks__LRStringArray__args, // the arguments
  0, //arguments count
  TaskManager_methods_getTasks__LRStringArray__exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_getTasks__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods_noFailOnBreak_Z_V_arg_nofail = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nofail", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_noFailOnBreak_Z_V_args[] = 
{
  &TaskManager_methods_noFailOnBreak_Z_V_arg_nofail,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_noFailOnBreak_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_noFailOnBreak_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "noFailOnBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_noFailOnBreak", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_noFailOnBreak_Z_V_args, // the arguments
  0, //arguments count
  TaskManager_methods_noFailOnBreak_Z_V_exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_noFailOnBreak_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_noFailOnBreak__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_noFailOnBreak__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_noFailOnBreak__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "noFailOnBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_noFailOnBreak", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_noFailOnBreak__Z_args, // the arguments
  0, //arguments count
  TaskManager_methods_noFailOnBreak__Z_exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_noFailOnBreak__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods_registerTask_INLRTask__V_arg_task = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "task", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_registerTask_INLRTask__V_args[] = 
{
  &TaskManager_methods_registerTask_INLRTask__V_arg_task,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_registerTask_INLRTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_registerTask_INLRTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_registerTask", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_registerTask_INLRTask__V_args, // the arguments
  0, //arguments count
  TaskManager_methods_registerTask_INLRTask__V_exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_registerTask_INLRTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods_registerTask_INLRString_INLRTask__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TaskManager_methods_registerTask_INLRString_INLRTask__V_arg_task = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "task", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTask::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TaskManager_methods_registerTask_INLRString_INLRTask__V_args[] = 
{
  &TaskManager_methods_registerTask_INLRString_INLRTask__V_arg_name,
  &TaskManager_methods_registerTask_INLRString_INLRTask__V_arg_task,
  0
};

::acdk::lang::dmi::ClazzInfo* TaskManager_methods_registerTask_INLRString_INLRTask__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TaskManager_method_registerTask_INLRString_INLRTask__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_registerTask", // alternative name of method
  -1, // altlabelHashCode
  TaskManager_methods_registerTask_INLRString_INLRTask__V_args, // the arguments
  0, //arguments count
  TaskManager_methods_registerTask_INLRString_INLRTask__V_exceptions, // the declared exceptions
  TaskManager_MetainfoWrapper::TaskManager_method_registerTask_INLRString_INLRTask__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TaskManager_methods[] = 
{
  &TaskManager_method_GetClass__L_acdk_lang_RClass_,
  &TaskManager_method_TaskManager__LRTaskManager_,
  &TaskManager_method__getTask_INLRString__LRTask_,
  &TaskManager_method__getTasks__LRStringArray_,
  &TaskManager_method__registerTask_INLRTask__V,
  &TaskManager_method__registerTask_INLRString_INLRTask__V,
  &TaskManager_method_getTask_INLRString__LRTask_,
  &TaskManager_method_getTaskManager__LRTaskManager_,
  &TaskManager_method_getTasks__LRStringArray_,
  &TaskManager_method_noFailOnBreak_Z_V,
  &TaskManager_method_noFailOnBreak__Z,
  &TaskManager_method_registerTask_INLRTask__V,
  &TaskManager_method_registerTask_INLRString_INLRTask__V,
  0
};


struct TaskManager_MetaInfoInitializer
{  TaskManager_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TaskManager::clazzInfo();
    ci->fields =  _TaskManager_fields;
    ci->methods =  _TaskManager_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TaskManager_MetaInfoInitializer TaskManager_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
TestTask_create_array(int length)
{
  return new ObjectArrayImpl<RTestTask>(length);
}

//static
::acdk::lang::RObject
TestTask_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestTask_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTask_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestTask::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTask_method_TestTask_INLRString_INLRStringArray__LRTestTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestTask((RString)args[0].getObjectVar(), (RStringArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTask_method_TestTask__LRTestTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestTask();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTask_method_TestTask_INLRString__LRTestTask__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestTask((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTask_method_addTest_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestTask* This = dmi_cast<TestTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestTask::addTest((RString)args[0].getObjectVar());
    else
        This->addTest((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTask_method_execute_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestTask* This = dmi_cast<TestTask>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestTask::execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar(), (RProps)args[1].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TestTask_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTask_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestTask_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTask_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestTask_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestTask_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestTask_MetainfoWrapper::TestTask_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTask_methods_TestTask_INLRString_INLRStringArray__LRTestTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTask_methods_TestTask_INLRString_INLRStringArray__LRTestTask__arg_subtasks = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "subtasks", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTask_methods_TestTask_INLRString_INLRStringArray__LRTestTask__args[] = 
{
  &TestTask_methods_TestTask_INLRString_INLRStringArray__LRTestTask__arg_name,
  &TestTask_methods_TestTask_INLRString_INLRStringArray__LRTestTask__arg_subtasks,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTask_methods_TestTask_INLRString_INLRStringArray__LRTestTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTask_method_TestTask_INLRString_INLRStringArray__LRTestTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestTask::clazzInfo(), // return type
  "_0_TestTask", // alternative name of method
  -1, // altlabelHashCode
  TestTask_methods_TestTask_INLRString_INLRStringArray__LRTestTask__args, // the arguments
  0, //arguments count
  TestTask_methods_TestTask_INLRString_INLRStringArray__LRTestTask__exceptions, // the declared exceptions
  TestTask_MetainfoWrapper::TestTask_method_TestTask_INLRString_INLRStringArray__LRTestTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTask_methods_TestTask__LRTestTask__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestTask_methods_TestTask__LRTestTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTask_method_TestTask__LRTestTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestTask::clazzInfo(), // return type
  "_1_TestTask", // alternative name of method
  -1, // altlabelHashCode
  TestTask_methods_TestTask__LRTestTask__args, // the arguments
  0, //arguments count
  TestTask_methods_TestTask__LRTestTask__exceptions, // the declared exceptions
  TestTask_MetainfoWrapper::TestTask_method_TestTask__LRTestTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTask_methods_TestTask_INLRString__LRTestTask__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTask_methods_TestTask_INLRString__LRTestTask__args[] = 
{
  &TestTask_methods_TestTask_INLRString__LRTestTask__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTask_methods_TestTask_INLRString__LRTestTask__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTask_method_TestTask_INLRString__LRTestTask_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestTask", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestTask::clazzInfo(), // return type
  "_2_TestTask", // alternative name of method
  -1, // altlabelHashCode
  TestTask_methods_TestTask_INLRString__LRTestTask__args, // the arguments
  0, //arguments count
  TestTask_methods_TestTask_INLRString__LRTestTask__exceptions, // the declared exceptions
  TestTask_MetainfoWrapper::TestTask_method_TestTask_INLRString__LRTestTask__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTask_methods_addTest_INLRString__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTask_methods_addTest_INLRString__V_args[] = 
{
  &TestTask_methods_addTest_INLRString__V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTask_methods_addTest_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTask_method_addTest_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addTest", // alternative name of method
  -1, // altlabelHashCode
  TestTask_methods_addTest_INLRString__V_args, // the arguments
  0, //arguments count
  TestTask_methods_addTest_INLRString__V_exceptions, // the declared exceptions
  TestTask_MetainfoWrapper::TestTask_method_addTest_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTask_methods_execute_INLRString_INLRProps__Z_arg_exec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTask_methods_execute_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTask_methods_execute_INLRString_INLRProps__Z_args[] = 
{
  &TestTask_methods_execute_INLRString_INLRProps__Z_arg_exec,
  &TestTask_methods_execute_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTask_methods_execute_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTask_method_execute_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_execute", // alternative name of method
  -1, // altlabelHashCode
  TestTask_methods_execute_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  TestTask_methods_execute_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  TestTask_MetainfoWrapper::TestTask_method_execute_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestTask_methods[] = 
{
  &TestTask_method_GetClass__L_acdk_lang_RClass_,
  &TestTask_method_TestTask_INLRString_INLRStringArray__LRTestTask_,
  &TestTask_method_TestTask__LRTestTask_,
  &TestTask_method_TestTask_INLRString__LRTestTask_,
  &TestTask_method_addTest_INLRString__V,
  &TestTask_method_execute_INLRString_INLRProps__Z,
  0
};


struct TestTask_MetaInfoInitializer
{  TestTask_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestTask::clazzInfo();
    ci->fields =  _TestTask_fields;
    ci->methods =  _TestTask_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestTask_MetaInfoInitializer TestTask_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
ThreadPool_create_array(int length)
{
  return new ObjectArrayImpl<RThreadPool>(length);
}

//static
::acdk::lang::RObject
ThreadPool_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ThreadPool_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThreadPool::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_ThreadPool_II_LRThreadPool__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThreadPool(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_dequeue__LRJob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ThreadPool::dequeue();
    else
        ret = (::acdk::lang::RObject)This->dequeue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_doShutdown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadPool::doShutdown();
    else
        This->doShutdown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_enqeue_INLRJob__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadPool::enqeue((RJob)args[0].getObjectVar());
    else
        This->enqeue((RJob)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_failedCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadPool::failedCount();
    else
      ret = This->failedCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadPool::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_setJobResult_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadPool::setJobResult((JobResult)args[0].getIntVar());
    else
        This->setJobResult((JobResult)args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_shutdown__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThreadPool::shutdown();
    else
      ret = This->shutdown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThreadPool_method_startJob_INLRJob__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ThreadPool::startJob((RJob)args[0].getObjectVar());
    else
        This->startJob((RJob)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadPool_fields__failedCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_failedCount, flags);
    else
      This->_failedCount = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadPool_fields__maxCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxCount, flags);
    else
      This->_maxCount = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadPool_fields__minCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minCount, flags);
    else
      This->_minCount = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadPool_fields__queue_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_queue, flags);
    else
      This->_queue = (::acdk::util::RVector)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadPool_fields__shutdown_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_shutdown, flags);
    else
      This->_shutdown = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThreadPool_fields__threads_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThreadPool* This = dmi_cast<ThreadPool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_threads, flags);
    else
      This->_threads = (RPooledThreadArray)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ThreadPool_fields__failedCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_failedCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ThreadPool_MetainfoWrapper::ThreadPool_fields__failedCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadPool_fields__maxCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ThreadPool_MetainfoWrapper::ThreadPool_fields__maxCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadPool_fields__minCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ThreadPool_MetainfoWrapper::ThreadPool_fields__minCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadPool_fields__queue = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_queue", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RVector::clazzInfo(),
  ThreadPool_MetainfoWrapper::ThreadPool_fields__queue_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadPool_fields__shutdown = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_shutdown", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ThreadPool_MetainfoWrapper::ThreadPool_fields__shutdown_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ThreadPool_fields__threads = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_threads", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPooledThreadArray::clazzInfo(),
  ThreadPool_MetainfoWrapper::ThreadPool_fields__threads_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ThreadPool_fields[] = 
{
  &ThreadPool_fields__failedCount,
  &ThreadPool_fields__maxCount,
  &ThreadPool_fields__minCount,
  &ThreadPool_fields__queue,
  &ThreadPool_fields__shutdown,
  &ThreadPool_fields__threads,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ThreadPool_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadPool_methods_ThreadPool_II_LRThreadPool__arg_minCount = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minCount", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadPool_methods_ThreadPool_II_LRThreadPool__arg_maxCount = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxCount", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_ThreadPool_II_LRThreadPool__args[] = 
{
  &ThreadPool_methods_ThreadPool_II_LRThreadPool__arg_minCount,
  &ThreadPool_methods_ThreadPool_II_LRThreadPool__arg_maxCount,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_ThreadPool_II_LRThreadPool__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_ThreadPool_II_LRThreadPool_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThreadPool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThreadPool::clazzInfo(), // return type
  "_0_ThreadPool", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_ThreadPool_II_LRThreadPool__args, // the arguments
  0, //arguments count
  ThreadPool_methods_ThreadPool_II_LRThreadPool__exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_ThreadPool_II_LRThreadPool__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_dequeue__LRJob__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_dequeue__LRJob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_dequeue__LRJob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dequeue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RJob::clazzInfo(), // return type
  "_3_dequeue", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_dequeue__LRJob__args, // the arguments
  0, //arguments count
  ThreadPool_methods_dequeue__LRJob__exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_dequeue__LRJob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_doShutdown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_doShutdown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_doShutdown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doShutdown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_doShutdown", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_doShutdown__V_args, // the arguments
  0, //arguments count
  ThreadPool_methods_doShutdown__V_exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_doShutdown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadPool_methods_enqeue_INLRJob__V_arg_runnable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "runnable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RJob::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_enqeue_INLRJob__V_args[] = 
{
  &ThreadPool_methods_enqeue_INLRJob__V_arg_runnable,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_enqeue_INLRJob__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_enqeue_INLRJob__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "enqeue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_enqeue", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_enqeue_INLRJob__V_args, // the arguments
  0, //arguments count
  ThreadPool_methods_enqeue_INLRJob__V_exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_enqeue_INLRJob__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_failedCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_failedCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_failedCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "failedCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_failedCount", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_failedCount__I_args, // the arguments
  0, //arguments count
  ThreadPool_methods_failedCount__I_exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_failedCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_run", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_run__V_args, // the arguments
  0, //arguments count
  ThreadPool_methods_run__V_exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadPool_methods_setJobResult_I_V_arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_setJobResult_I_V_args[] = 
{
  &ThreadPool_methods_setJobResult_I_V_arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_setJobResult_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_setJobResult_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setJobResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setJobResult", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_setJobResult_I_V_args, // the arguments
  0, //arguments count
  ThreadPool_methods_setJobResult_I_V_exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_setJobResult_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_shutdown__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_shutdown__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_shutdown__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shutdown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_shutdown", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_shutdown__Z_args, // the arguments
  0, //arguments count
  ThreadPool_methods_shutdown__Z_exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_shutdown__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThreadPool_methods_startJob_INLRJob__V_arg_runnable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "runnable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RJob::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThreadPool_methods_startJob_INLRJob__V_args[] = 
{
  &ThreadPool_methods_startJob_INLRJob__V_arg_runnable,
  0
};

::acdk::lang::dmi::ClazzInfo* ThreadPool_methods_startJob_INLRJob__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThreadPool_method_startJob_INLRJob__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startJob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_startJob", // alternative name of method
  -1, // altlabelHashCode
  ThreadPool_methods_startJob_INLRJob__V_args, // the arguments
  0, //arguments count
  ThreadPool_methods_startJob_INLRJob__V_exceptions, // the declared exceptions
  ThreadPool_MetainfoWrapper::ThreadPool_method_startJob_INLRJob__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ThreadPool_methods[] = 
{
  &ThreadPool_method_GetClass__L_acdk_lang_RClass_,
  &ThreadPool_method_ThreadPool_II_LRThreadPool_,
  &ThreadPool_method_dequeue__LRJob_,
  &ThreadPool_method_doShutdown__V,
  &ThreadPool_method_enqeue_INLRJob__V,
  &ThreadPool_method_failedCount__I,
  &ThreadPool_method_run__V,
  &ThreadPool_method_setJobResult_I_V,
  &ThreadPool_method_shutdown__Z,
  &ThreadPool_method_startJob_INLRJob__V,
  0
};


struct ThreadPool_MetaInfoInitializer
{  ThreadPool_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ThreadPool::clazzInfo();
    ci->fields =  _ThreadPool_fields;
    ci->methods =  _ThreadPool_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ThreadPool_MetaInfoInitializer ThreadPool_MetaInfoInitializer_staticinstance__;


struct ThreadPool_clazzInfo_ClazzAttributesResInitializer4
{
  ThreadPool_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ThreadPool_methods_setJobResult_I_V_arg_result, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)JobResultMetaInf::GetEnumInfo()));
  }
};

ThreadPool_clazzInfo_ClazzAttributesResInitializer4 ThreadPool_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
PooledThread_create_array(int length)
{
  return new ObjectArrayImpl<RPooledThread>(length);
}

//static
::acdk::lang::RObject
PooledThread_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PooledThread_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PooledThread::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_PooledThread_INLRThreadPool__LRPooledThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PooledThread((RThreadPool)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_PooledThread__LRPooledThread__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PooledThread();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_isActive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->PooledThread::isActive();
    else
      ret = This->isActive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PooledThread::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_setActive_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PooledThread::setActive(args[0].getBoolVar());
    else
        This->setActive(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_setJob_INLRJob__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PooledThread::setJob((RJob)args[0].getObjectVar());
    else
        This->setJob((RJob)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_setQuit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PooledThread::setQuit();
    else
        This->setQuit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PooledThread_method_setThreadPool_INLRThreadPool__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PooledThread::setThreadPool((RThreadPool)args[0].getObjectVar());
    else
        This->setThreadPool((RThreadPool)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PooledThread_fields__active_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_active, flags);
    else
      This->_active = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PooledThread_fields__job_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_job, flags);
    else
      This->_job = (RJob)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PooledThread_fields__quit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_quit, flags);
    else
      This->_quit = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PooledThread_fields__threadPool_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PooledThread* This = dmi_cast<PooledThread>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_threadPool, flags);
    else
      This->_threadPool = (RThreadPool)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PooledThread_fields__active = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_active", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  PooledThread_MetainfoWrapper::PooledThread_fields__active_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PooledThread_fields__job = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_job", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RJob::clazzInfo(),
  PooledThread_MetainfoWrapper::PooledThread_fields__job_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PooledThread_fields__quit = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_quit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  PooledThread_MetainfoWrapper::PooledThread_fields__quit_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PooledThread_fields__threadPool = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_threadPool", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadPool::clazzInfo(),
  PooledThread_MetainfoWrapper::PooledThread_fields__threadPool_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PooledThread_fields[] = 
{
  &PooledThread_fields__active,
  &PooledThread_fields__job,
  &PooledThread_fields__quit,
  &PooledThread_fields__threadPool,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PooledThread_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PooledThread_methods_PooledThread_INLRThreadPool__LRPooledThread__arg_threadPool = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "threadPool", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadPool::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_PooledThread_INLRThreadPool__LRPooledThread__args[] = 
{
  &PooledThread_methods_PooledThread_INLRThreadPool__LRPooledThread__arg_threadPool,
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_PooledThread_INLRThreadPool__LRPooledThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_PooledThread_INLRThreadPool__LRPooledThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PooledThread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PooledThread::clazzInfo(), // return type
  "_0_PooledThread", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_PooledThread_INLRThreadPool__LRPooledThread__args, // the arguments
  0, //arguments count
  PooledThread_methods_PooledThread_INLRThreadPool__LRPooledThread__exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_PooledThread_INLRThreadPool__LRPooledThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_PooledThread__LRPooledThread__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_PooledThread__LRPooledThread__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_PooledThread__LRPooledThread_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "PooledThread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PooledThread::clazzInfo(), // return type
  "_1_PooledThread", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_PooledThread__LRPooledThread__args, // the arguments
  0, //arguments count
  PooledThread_methods_PooledThread__LRPooledThread__exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_PooledThread__LRPooledThread__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_isActive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_isActive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_isActive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isActive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isActive", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_isActive__Z_args, // the arguments
  0, //arguments count
  PooledThread_methods_isActive__Z_exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_isActive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_run", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_run__V_args, // the arguments
  0, //arguments count
  PooledThread_methods_run__V_exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PooledThread_methods_setActive_Z_V_arg_active = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "active", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_setActive_Z_V_args[] = 
{
  &PooledThread_methods_setActive_Z_V_arg_active,
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_setActive_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_setActive_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setActive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setActive", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_setActive_Z_V_args, // the arguments
  0, //arguments count
  PooledThread_methods_setActive_Z_V_exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_setActive_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PooledThread_methods_setJob_INLRJob__V_arg_job = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "job", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RJob::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_setJob_INLRJob__V_args[] = 
{
  &PooledThread_methods_setJob_INLRJob__V_arg_job,
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_setJob_INLRJob__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_setJob_INLRJob__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setJob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setJob", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_setJob_INLRJob__V_args, // the arguments
  0, //arguments count
  PooledThread_methods_setJob_INLRJob__V_exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_setJob_INLRJob__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_setQuit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_setQuit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_setQuit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setQuit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setQuit", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_setQuit__V_args, // the arguments
  0, //arguments count
  PooledThread_methods_setQuit__V_exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_setQuit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PooledThread_methods_setThreadPool_INLRThreadPool__V_arg_threadPool = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "threadPool", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThreadPool::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PooledThread_methods_setThreadPool_INLRThreadPool__V_args[] = 
{
  &PooledThread_methods_setThreadPool_INLRThreadPool__V_arg_threadPool,
  0
};

::acdk::lang::dmi::ClazzInfo* PooledThread_methods_setThreadPool_INLRThreadPool__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PooledThread_method_setThreadPool_INLRThreadPool__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setThreadPool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setThreadPool", // alternative name of method
  -1, // altlabelHashCode
  PooledThread_methods_setThreadPool_INLRThreadPool__V_args, // the arguments
  0, //arguments count
  PooledThread_methods_setThreadPool_INLRThreadPool__V_exceptions, // the declared exceptions
  PooledThread_MetainfoWrapper::PooledThread_method_setThreadPool_INLRThreadPool__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PooledThread_methods[] = 
{
  &PooledThread_method_GetClass__L_acdk_lang_RClass_,
  &PooledThread_method_PooledThread_INLRThreadPool__LRPooledThread_,
  &PooledThread_method_PooledThread__LRPooledThread_,
  &PooledThread_method_isActive__Z,
  &PooledThread_method_run__V,
  &PooledThread_method_setActive_Z_V,
  &PooledThread_method_setJob_INLRJob__V,
  &PooledThread_method_setQuit__V,
  &PooledThread_method_setThreadPool_INLRThreadPool__V,
  0
};


struct PooledThread_MetaInfoInitializer
{  PooledThread_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PooledThread::clazzInfo();
    ci->fields =  _PooledThread_fields;
    ci->methods =  _PooledThread_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PooledThread_MetaInfoInitializer PooledThread_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
Tool_create_array(int length)
{
  return new ObjectArrayImpl<RTool>(length);
}

//static
::acdk::lang::RObject
Tool_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Tool_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Tool::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_configure_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Tool* This = dmi_cast<Tool>(This_);
  ret = This->configure((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_getTool_INLRProps_INLRString_INLRString__LRTool__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Tool::getTool((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_getTool_INLRProps_INLRString__LRTool__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Tool::getTool((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_getToolClass__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Tool* This = dmi_cast<Tool>(This_);
    ret = (::acdk::lang::RObject)This->getToolClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_getToolDescription__LRStringArrayArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Tool* This = dmi_cast<Tool>(This_);
    ret = (::acdk::lang::RObject)This->getToolDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_getToolTribe__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Tool* This = dmi_cast<Tool>(This_);
    ret = (::acdk::lang::RObject)This->getToolTribe();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_getTools_INLRProps_INLRString__LRToolArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Tool::getTools((RProps)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_getToolsMap__Lacdk_util_RMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Tool::getToolsMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Tool_method_registerTool_INLRTool__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Tool::registerTool((RTool)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Tool_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Tool_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_configure_INLRProps__Z_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_configure_INLRProps__Z_args[] = 
{
  &Tool_methods_configure_INLRProps__Z_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_configure_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_configure_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "configure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_configure", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_configure_INLRProps__Z_args, // the arguments
  0, //arguments count
  Tool_methods_configure_INLRProps__Z_exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_configure_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__arg_toolClass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolClass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__arg_toolTribe = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "toolTribe", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__args[] = 
{
  &Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__arg_env,
  &Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__arg_toolClass,
  &Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__arg_toolTribe,
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_getTool_INLRProps_INLRString_INLRString__LRTool_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTool::clazzInfo(), // return type
  "_5_getTool", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__args, // the arguments
  0, //arguments count
  Tool_methods_getTool_INLRProps_INLRString_INLRString__LRTool__exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_getTool_INLRProps_INLRString_INLRString__LRTool__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_getTool_INLRProps_INLRString__LRTool__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_getTool_INLRProps_INLRString__LRTool__arg_toolClass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolClass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_getTool_INLRProps_INLRString__LRTool__args[] = 
{
  &Tool_methods_getTool_INLRProps_INLRString__LRTool__arg_env,
  &Tool_methods_getTool_INLRProps_INLRString__LRTool__arg_toolClass,
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_getTool_INLRProps_INLRString__LRTool__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_getTool_INLRProps_INLRString__LRTool_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTool::clazzInfo(), // return type
  "_6_getTool", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_getTool_INLRProps_INLRString__LRTool__args, // the arguments
  0, //arguments count
  Tool_methods_getTool_INLRProps_INLRString__LRTool__exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_getTool_INLRProps_INLRString__LRTool__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_getToolClass__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_getToolClass__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_getToolClass__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getToolClass", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_getToolClass__LRString__args, // the arguments
  0, //arguments count
  Tool_methods_getToolClass__LRString__exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_getToolClass__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_getToolDescription__LRStringArrayArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_getToolDescription__LRStringArrayArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_getToolDescription__LRStringArrayArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArrayArray::clazzInfo(), // return type
  "_3_getToolDescription", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_getToolDescription__LRStringArrayArray__args, // the arguments
  0, //arguments count
  Tool_methods_getToolDescription__LRStringArrayArray__exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_getToolDescription__LRStringArrayArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_getToolTribe__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_getToolTribe__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_getToolTribe__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolTribe", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getToolTribe", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_getToolTribe__LRString__args, // the arguments
  0, //arguments count
  Tool_methods_getToolTribe__LRString__exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_getToolTribe__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_getTools_INLRProps_INLRString__LRToolArray__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_getTools_INLRProps_INLRString__LRToolArray__arg_toolClass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolClass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_getTools_INLRProps_INLRString__LRToolArray__args[] = 
{
  &Tool_methods_getTools_INLRProps_INLRString__LRToolArray__arg_env,
  &Tool_methods_getTools_INLRProps_INLRString__LRToolArray__arg_toolClass,
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_getTools_INLRProps_INLRString__LRToolArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_getTools_INLRProps_INLRString__LRToolArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTools", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RToolArray::clazzInfo(), // return type
  "_7_getTools", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_getTools_INLRProps_INLRString__LRToolArray__args, // the arguments
  0, //arguments count
  Tool_methods_getTools_INLRProps_INLRString__LRToolArray__exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_getTools_INLRProps_INLRString__LRToolArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_getToolsMap__Lacdk_util_RMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_getToolsMap__Lacdk_util_RMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_getToolsMap__Lacdk_util_RMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolsMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo(), // return type
  "_8_getToolsMap", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_getToolsMap__Lacdk_util_RMap__args, // the arguments
  0, //arguments count
  Tool_methods_getToolsMap__Lacdk_util_RMap__exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_getToolsMap__Lacdk_util_RMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Tool_methods_registerTool_INLRTool__V_arg_tool = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tool", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTool::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Tool_methods_registerTool_INLRTool__V_args[] = 
{
  &Tool_methods_registerTool_INLRTool__V_arg_tool,
  0
};

::acdk::lang::dmi::ClazzInfo* Tool_methods_registerTool_INLRTool__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Tool_method_registerTool_INLRTool__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_registerTool", // alternative name of method
  -1, // altlabelHashCode
  Tool_methods_registerTool_INLRTool__V_args, // the arguments
  0, //arguments count
  Tool_methods_registerTool_INLRTool__V_exceptions, // the declared exceptions
  Tool_MetainfoWrapper::Tool_method_registerTool_INLRTool__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Tool_methods[] = 
{
  &Tool_method_GetClass__L_acdk_lang_RClass_,
  &Tool_method_configure_INLRProps__Z,
  &Tool_method_getTool_INLRProps_INLRString_INLRString__LRTool_,
  &Tool_method_getTool_INLRProps_INLRString__LRTool_,
  &Tool_method_getToolClass__LRString_,
  &Tool_method_getToolDescription__LRStringArrayArray_,
  &Tool_method_getToolTribe__LRString_,
  &Tool_method_getTools_INLRProps_INLRString__LRToolArray_,
  &Tool_method_getToolsMap__Lacdk_util_RMap_,
  &Tool_method_registerTool_INLRTool__V,
  0
};


struct Tool_MetaInfoInitializer
{  Tool_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Tool::clazzInfo();
    ci->fields =  _Tool_fields;
    ci->methods =  _Tool_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Tool_MetaInfoInitializer Tool_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make


namespace acdk { 
namespace make { 


//static
::acdk::lang::RObject
AbstractTool_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractTool>(length);
}

//static
::acdk::lang::RObject
AbstractTool_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractTool_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTool_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractTool::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTool_method_configure_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTool* This = dmi_cast<AbstractTool>(This_);
  ret = This->configure((RProps)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTool_method_getToolClass__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTool* This = dmi_cast<AbstractTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractTool::getToolClass();
    else
        ret = (::acdk::lang::RObject)This->getToolClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTool_method_getToolDescription__LRStringArrayArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTool* This = dmi_cast<AbstractTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractTool::getToolDescription();
    else
        ret = (::acdk::lang::RObject)This->getToolDescription();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTool_method_getToolTribe__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTool* This = dmi_cast<AbstractTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractTool::getToolTribe();
    else
        ret = (::acdk::lang::RObject)This->getToolTribe();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractTool_method_setToolDescription_INLRStringArrayArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractTool* This = dmi_cast<AbstractTool>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractTool::setToolDescription((RStringArrayArray)args[0].getObjectVar());
    else
        This->setToolDescription((RStringArrayArray)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTool_fields__toolClass_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTool* This = dmi_cast<AbstractTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_toolClass, flags);
    else
      This->_toolClass = (RString)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTool_fields__toolDescription_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTool* This = dmi_cast<AbstractTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_toolDescription, flags);
    else
      This->_toolDescription = (RStringArrayArray)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractTool_fields__toolTribe_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractTool* This = dmi_cast<AbstractTool>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_toolTribe, flags);
    else
      This->_toolTribe = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTool_fields__toolClass = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_toolClass", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractTool_MetainfoWrapper::AbstractTool_fields__toolClass_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTool_fields__toolDescription = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_toolDescription", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArrayArray::clazzInfo(),
  AbstractTool_MetainfoWrapper::AbstractTool_fields__toolDescription_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractTool_fields__toolTribe = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_toolTribe", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractTool_MetainfoWrapper::AbstractTool_fields__toolTribe_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractTool_fields[] = 
{
  &AbstractTool_fields__toolClass,
  &AbstractTool_fields__toolDescription,
  &AbstractTool_fields__toolTribe,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTool_methods_AbstractTool_INLRString_INLRString__LRAbstractTool__arg_toolClass = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolClass", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTool_methods_AbstractTool_INLRString_INLRString__LRAbstractTool__arg_toolTribe = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toolTribe", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTool_methods_AbstractTool_INLRString_INLRString__LRAbstractTool__args[] = 
{
  &AbstractTool_methods_AbstractTool_INLRString_INLRString__LRAbstractTool__arg_toolClass,
  &AbstractTool_methods_AbstractTool_INLRString_INLRString__LRAbstractTool__arg_toolTribe,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTool_methods_AbstractTool_INLRString_INLRString__LRAbstractTool__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTool_method_AbstractTool_INLRString_INLRString__LRAbstractTool_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractTool", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractTool::clazzInfo(), // return type
  "_0_AbstractTool", // alternative name of method
  -1, // altlabelHashCode
  AbstractTool_methods_AbstractTool_INLRString_INLRString__LRAbstractTool__args, // the arguments
  0, //arguments count
  AbstractTool_methods_AbstractTool_INLRString_INLRString__LRAbstractTool__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTool_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTool_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTool_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractTool_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractTool_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractTool_MetainfoWrapper::AbstractTool_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTool_methods_configure_INLRProps__Z_arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTool_methods_configure_INLRProps__Z_args[] = 
{
  &AbstractTool_methods_configure_INLRProps__Z_arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTool_methods_configure_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTool_method_configure_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "configure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_configure", // alternative name of method
  -1, // altlabelHashCode
  AbstractTool_methods_configure_INLRProps__Z_args, // the arguments
  0, //arguments count
  AbstractTool_methods_configure_INLRProps__Z_exceptions, // the declared exceptions
  AbstractTool_MetainfoWrapper::AbstractTool_method_configure_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTool_methods_getToolClass__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTool_methods_getToolClass__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTool_method_getToolClass__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getToolClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractTool_methods_getToolClass__LRString__args, // the arguments
  0, //arguments count
  AbstractTool_methods_getToolClass__LRString__exceptions, // the declared exceptions
  AbstractTool_MetainfoWrapper::AbstractTool_method_getToolClass__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTool_methods_getToolDescription__LRStringArrayArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTool_methods_getToolDescription__LRStringArrayArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTool_method_getToolDescription__LRStringArrayArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArrayArray::clazzInfo(), // return type
  "_4_getToolDescription", // alternative name of method
  -1, // altlabelHashCode
  AbstractTool_methods_getToolDescription__LRStringArrayArray__args, // the arguments
  0, //arguments count
  AbstractTool_methods_getToolDescription__LRStringArrayArray__exceptions, // the declared exceptions
  AbstractTool_MetainfoWrapper::AbstractTool_method_getToolDescription__LRStringArrayArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTool_methods_getToolTribe__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTool_methods_getToolTribe__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTool_method_getToolTribe__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getToolTribe", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getToolTribe", // alternative name of method
  -1, // altlabelHashCode
  AbstractTool_methods_getToolTribe__LRString__args, // the arguments
  0, //arguments count
  AbstractTool_methods_getToolTribe__LRString__exceptions, // the declared exceptions
  AbstractTool_MetainfoWrapper::AbstractTool_method_getToolTribe__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractTool_methods_setToolDescription_INLRStringArrayArray__V_arg_desc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "desc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArrayArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractTool_methods_setToolDescription_INLRStringArrayArray__V_args[] = 
{
  &AbstractTool_methods_setToolDescription_INLRStringArrayArray__V_arg_desc,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractTool_methods_setToolDescription_INLRStringArrayArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractTool_method_setToolDescription_INLRStringArrayArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setToolDescription", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setToolDescription", // alternative name of method
  -1, // altlabelHashCode
  AbstractTool_methods_setToolDescription_INLRStringArrayArray__V_args, // the arguments
  0, //arguments count
  AbstractTool_methods_setToolDescription_INLRStringArrayArray__V_exceptions, // the declared exceptions
  AbstractTool_MetainfoWrapper::AbstractTool_method_setToolDescription_INLRStringArrayArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractTool_methods[] = 
{
  &AbstractTool_method_AbstractTool_INLRString_INLRString__LRAbstractTool_,
  &AbstractTool_method_GetClass__L_acdk_lang_RClass_,
  &AbstractTool_method_configure_INLRProps__Z,
  &AbstractTool_method_getToolClass__LRString_,
  &AbstractTool_method_getToolDescription__LRStringArrayArray_,
  &AbstractTool_method_getToolTribe__LRString_,
  &AbstractTool_method_setToolDescription_INLRStringArrayArray__V,
  0
};


struct AbstractTool_MetaInfoInitializer
{  AbstractTool_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractTool::clazzInfo();
    ci->fields =  _AbstractTool_fields;
    ci->methods =  _AbstractTool_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractTool_MetaInfoInitializer AbstractTool_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace make

