// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "Config.h"
#include "LiteConnection.h"
#include "LiteDatabaseMetaData.h"
#include "LiteDriver.h"
#include "LitePreparedStatement.h"
#include "LiteResultSet.h"
#include "LiteResultSetMetaData.h"
#include "LiteStatement.h"
#include "LiteTable.h"
#include "sqlite.h"

namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteConnection_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LiteConnection_super_acdk__sql__Connection =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::sql::Connection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteConnection_interfaces[] =
{
  &_LiteConnection_super_acdk__lang__Object,
  &_LiteConnection_super_acdk__sql__Connection,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteConnection", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteConnection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteConnection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteConnection(LiteConnection::clazzInfo());

::acdk::lang::RClass
LiteConnection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteConnection::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_db._ref_this()); // RLiteDb _db 
  fields.push_back((::acdk::lang::RObject*)this->_url._ref_this()); // RString _url 
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteDatabaseMetaData_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LiteDatabaseMetaData_super_acdk__sql__DatabaseMetaData =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::sql::DatabaseMetaData::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteDatabaseMetaData_interfaces[] =
{
  &_LiteDatabaseMetaData_super_acdk__lang__Object,
  &_LiteDatabaseMetaData_super_acdk__sql__DatabaseMetaData,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteDatabaseMetaData", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteDatabaseMetaData_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteDatabaseMetaData::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteDatabaseMetaData(LiteDatabaseMetaData::clazzInfo());

::acdk::lang::RClass
LiteDatabaseMetaData::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteDatabaseMetaData::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_con._ref_this()); // RLiteConnection _con 
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteDriver_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LiteDriver_super_acdk__sql__Driver =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::sql::Driver::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteDriver_interfaces[] =
{
  &_LiteDriver_super_acdk__lang__Object,
  &_LiteDriver_super_acdk__sql__Driver,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteDriver", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteDriver_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteDriver::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteDriver(LiteDriver::clazzInfo());

::acdk::lang::RClass
LiteDriver::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteDriver::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LitePreparedStatement_super_LiteStatement =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LiteStatement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LitePreparedStatement_super_acdk__sql__PreparedStatement =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::sql::PreparedStatement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LitePreparedStatement_interfaces[] =
{
  &_LitePreparedStatement_super_LiteStatement,
  &_LitePreparedStatement_super_acdk__sql__PreparedStatement,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LitePreparedStatement", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LitePreparedStatement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LitePreparedStatement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LitePreparedStatement(LitePreparedStatement::clazzInfo());

::acdk::lang::RClass
LitePreparedStatement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LitePreparedStatement::getCollectableFields(FieldReferences& fields)
{
  LiteStatement::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_table._ref_this()); // RLiteTable _table 
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteResultSet_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LiteResultSet_super_acdk__sql__ResultSet =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::sql::ResultSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteResultSet_interfaces[] =
{
  &_LiteResultSet_super_acdk__lang__Object,
  &_LiteResultSet_super_acdk__sql__ResultSet,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteResultSet", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteResultSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteResultSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteResultSet(LiteResultSet::clazzInfo());

::acdk::lang::RClass
LiteResultSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteResultSet::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_con._ref_this()); // RLiteConnection _con 
  fields.push_back((::acdk::lang::RObject*)this->_stm._ref_this()); // RLiteStatement _stm 
  fields.push_back((::acdk::lang::RObject*)this->_table._ref_this()); // RLiteTable _table 
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteResultSetMetaData_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LiteResultSetMetaData_super_acdk__sql__ResultSetMetaData =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::sql::ResultSetMetaData::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteResultSetMetaData_interfaces[] =
{
  &_LiteResultSetMetaData_super_acdk__lang__Object,
  &_LiteResultSetMetaData_super_acdk__sql__ResultSetMetaData,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteResultSetMetaData", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteResultSetMetaData_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteResultSetMetaData::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteResultSetMetaData(LiteResultSetMetaData::clazzInfo());

::acdk::lang::RClass
LiteResultSetMetaData::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteResultSetMetaData::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_table._ref_this()); // RLiteTable _table 
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteStatement_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LiteStatement_super_acdk__sql__Statement =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::sql::Statement::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteStatement_interfaces[] =
{
  &_LiteStatement_super_acdk__lang__Object,
  &_LiteStatement_super_acdk__sql__Statement,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteStatement", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteStatement_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteStatement::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteStatement(LiteStatement::clazzInfo());

::acdk::lang::RClass
LiteStatement::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteStatement::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_con._ref_this()); // RLiteConnection _con 
  fields.push_back((::acdk::lang::RObject*)this->_rset._ref_this()); // RResultSet _rset 
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


::acdk::lang::dmi::ClazzEnumValueInfo LiteColType_SqlLiteInteger = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SqlLiteInteger", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::sqlite::SqlLiteInteger, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LiteColType_SqlLiteFloat = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SqlLiteFloat", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::sqlite::SqlLiteFloat, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LiteColType_SqlLiteText = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SqlLiteText", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::sqlite::SqlLiteText, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LiteColType_SqlLiteBlob = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SqlLiteBlob", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::sqlite::SqlLiteBlob, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LiteColType_SqlLiteNull = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SqlLiteNull", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::sql::sqlite::SqlLiteNull, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* LiteColType_enumValues[] = {
  &LiteColType_SqlLiteInteger,
  &LiteColType_SqlLiteFloat,
  &LiteColType_SqlLiteText,
  &LiteColType_SqlLiteBlob,
  &LiteColType_SqlLiteNull,
0
};

::acdk::lang::dmi::ClazzEnumInfo LiteColType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "LiteColType", // name
  -1, // hashCode
  "acdk/sql/sqlite", // ns
  0, // _scopeParent
  0, // _nextSibling
  LiteColType_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_LiteColType(&LiteColType_enumInfo);


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteDb_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteDb_interfaces[] =
{
  &_LiteDb_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteDb", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteDb_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteDb::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteDb(LiteDb::clazzInfo());

::acdk::lang::RClass
LiteDb::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteDb::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteTable_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LiteTable_super_acdk__util__Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::util::Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteTable_interfaces[] =
{
  &_LiteTable_super_acdk__lang__Object,
  &_LiteTable_super_acdk__util__Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteTable", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteTable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteTable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteTable(LiteTable::clazzInfo());

::acdk::lang::RClass
LiteTable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteTable::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_db._ref_this()); // RLiteDb _db 
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteMemTable_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteMemTable_interfaces[] =
{
  &_LiteMemTable_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteMemTable", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteMemTable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteMemTable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteMemTable(LiteMemTable::clazzInfo());

::acdk::lang::RClass
LiteMemTable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteMemTable::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 

::acdk::lang::dmi::ClazzSuperInfo _LiteMemTableIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LiteMemTableIterator_super_acdk__util__Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::util::Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LiteMemTableIterator_interfaces[] =
{
  &_LiteMemTableIterator_super_acdk__lang__Object,
  &_LiteMemTableIterator_super_acdk__util__Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LiteMemTableIterator", // name of class
  -1, // hashCode
  "acdk/sql/sqlite", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LiteMemTableIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LiteMemTableIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LiteMemTableIterator(LiteMemTableIterator::clazzInfo());

::acdk::lang::RClass
LiteMemTableIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LiteMemTableIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_table._ref_this()); // RLiteMemTable _table 
}


} // namespace acdk
} // namespace sql
} // namespace sqlite

