// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../sqlite.h"
#include "../Config.h"
#include "../LiteConnection.h"
#include "../LiteDatabaseMetaData.h"
#include "../LiteDriver.h"
#include "../LitePreparedStatement.h"
#include "../LiteResultSet.h"
#include "../LiteResultSetMetaData.h"
#include "../LiteStatement.h"
#include "../LiteTable.h"
#include "../sqlite.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteResultSet_create_array(int length)
{
  return new ObjectArrayImpl<RLiteResultSet>(length);
}

//static
::acdk::lang::RObject
LiteResultSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteResultSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteResultSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LiteResultSet((RLiteConnection)args[0].getObjectVar(), (RLiteStatement)args[1].getObjectVar(), (RLiteTable)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_absolute_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::absolute(args[0].getIntVar());
    else
      ret = This->absolute(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_afterLast__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::afterLast();
    else
        This->afterLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_beforeFirst__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::beforeFirst();
    else
        This->beforeFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_cancelRowUpdates__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::cancelRowUpdates();
    else
        This->cancelRowUpdates();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::clearWarnings();
    else
        This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_deleteRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::deleteRow();
    else
        This->deleteRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_findColumn_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::findColumn((RString)args[0].getObjectVar());
    else
      ret = This->findColumn((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_first__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::first();
    else
      ret = This->first();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getArray_I_LRArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getArray(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getArray(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getArray_INLRString__LRArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getArray((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getArray((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getAsciiStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getAsciiStream(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getAsciiStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getAsciiStream((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getAsciiStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getBinaryStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getBinaryStream(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBinaryStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getBinaryStream((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getBinaryStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getBlob_I_LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getBlob(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBlob(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getBlob_INLRString__LRBlob__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getBlob((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getBlob((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getBoolean_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getBoolean(args[0].getIntVar());
    else
      ret = This->getBoolean(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getBoolean_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getBoolean((RString)args[0].getObjectVar());
    else
      ret = This->getBoolean((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getByte_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getByte(args[0].getIntVar());
    else
      ret = This->getByte(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getByte_INLRString__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getByte((RString)args[0].getObjectVar());
    else
      ret = This->getByte((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getBytes_I_LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getBytes(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBytes(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getBytes_INLRString__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getBytes((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getBytes((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getCharacterStream_I_Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getCharacterStream(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getCharacterStream(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getCharacterStream((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getCharacterStream((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getConcurrency__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getConcurrency();
    else
      ret = This->getConcurrency();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getCursorName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getCursorName();
    else
        ret = (::acdk::lang::RObject)This->getCursorName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getDate_I_Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getDate(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getDate(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getDate_INLRString__Lacdk_util_RDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getDate((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getDate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getDouble_I_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getDouble(args[0].getIntVar());
    else
      ret = This->getDouble(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getDouble_INLRString__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getDouble((RString)args[0].getObjectVar());
    else
      ret = This->getDouble((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getFetchDirection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getFetchDirection();
    else
      ret = This->getFetchDirection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getFetchSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getFetchSize();
    else
      ret = This->getFetchSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getFloat_I_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getFloat(args[0].getIntVar());
    else
      ret = This->getFloat(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getFloat_INLRString__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getFloat((RString)args[0].getObjectVar());
    else
      ret = This->getFloat((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getInt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getInt(args[0].getIntVar());
    else
      ret = This->getInt(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getInt_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getInt((RString)args[0].getObjectVar());
    else
      ret = This->getInt((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getLong_I_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getLong(args[0].getIntVar());
    else
      ret = This->getLong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getLong_INLRString__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getLong((RString)args[0].getObjectVar());
    else
      ret = This->getLong((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getMetaData__LRResultSetMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getMetaData();
    else
        ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getObject_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getObject(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getObject_IINLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getObject(args[0].getIntVar(), (acdk::util::RMap)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObject(args[0].getIntVar(), (acdk::util::RMap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getObject((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObject((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getObject((RString)args[0].getObjectVar(), (acdk::util::RMap)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getObject((RString)args[0].getObjectVar(), (acdk::util::RMap)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getRow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getRow();
    else
      ret = This->getRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getShort_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getShort(args[0].getIntVar());
    else
      ret = This->getShort(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getShort_INLRString__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getShort((RString)args[0].getObjectVar());
    else
      ret = This->getShort((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getStatement__LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getStatement();
    else
        ret = (::acdk::lang::RObject)This->getStatement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getString((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getString((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getTime_I_LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getTime(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getTime(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getTime_INLRString__LRTime__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getTime((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTime((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getTimestamp_I_LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getTimestamp(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getTimestamp(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getTimestamp_INLRString__LRTimestamp__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getTimestamp((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTimestamp((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::getType();
    else
      ret = This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_getWarnings__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSet::getWarnings();
    else
        ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_insertRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::insertRow();
    else
        This->insertRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_isAfterLast__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::isAfterLast();
    else
      ret = This->isAfterLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_isBeforeFirst__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::isBeforeFirst();
    else
      ret = This->isBeforeFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_isFirst__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::isFirst();
    else
      ret = This->isFirst();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_isLast__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::isLast();
    else
      ret = This->isLast();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_last__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::last();
    else
      ret = This->last();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_moveToCurrentRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::moveToCurrentRow();
    else
        This->moveToCurrentRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_moveToInsertRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::moveToInsertRow();
    else
        This->moveToInsertRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_next__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::next();
    else
      ret = This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_previous__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::previous();
    else
      ret = This->previous();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_refreshRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::refreshRow();
    else
        This->refreshRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_relative_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::relative(args[0].getIntVar());
    else
      ret = This->relative(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_rowDeleted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::rowDeleted();
    else
      ret = This->rowDeleted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_rowInserted__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::rowInserted();
    else
      ret = This->rowInserted();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_rowUpdated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::rowUpdated();
    else
      ret = This->rowUpdated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_setFetchDirection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::setFetchDirection(args[0].getIntVar());
    else
        This->setFetchDirection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_setFetchSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::setFetchSize(args[0].getIntVar());
    else
        This->setFetchSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateAsciiStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateAsciiStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateAsciiStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateAsciiStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateBinaryStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateBinaryStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateBinaryStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateBinaryStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateBoolean_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateBoolean(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->updateBoolean(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateBoolean_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateBoolean((RString)args[0].getObjectVar(), args[1].getBoolVar());
    else
        This->updateBoolean((RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateByte_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateByte(args[0].getIntVar(), args[1].getByteVar());
    else
        This->updateByte(args[0].getIntVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateByte_INLRString_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateByte((RString)args[0].getObjectVar(), args[1].getByteVar());
    else
        This->updateByte((RString)args[0].getObjectVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateBytes_IINLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    else
        This->updateBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateBytes_INLRString_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateBytes((RString)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    else
        This->updateBytes((RString)args[0].getObjectVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateCharacterStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateCharacterStream(args[0].getIntVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateCharacterStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateCharacterStream((RString)args[0].getObjectVar(), (acdk::io::RReader)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateDate_IINLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar());
    else
        This->updateDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateDate((RString)args[0].getObjectVar(), (acdk::util::RDate)args[1].getObjectVar());
    else
        This->updateDate((RString)args[0].getObjectVar(), (acdk::util::RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateDouble_ID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateDouble(args[0].getIntVar(), args[1].getDoubleVar());
    else
        This->updateDouble(args[0].getIntVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateDouble_INLRString_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateDouble((RString)args[0].getObjectVar(), args[1].getDoubleVar());
    else
        This->updateDouble((RString)args[0].getObjectVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateFloat_IF_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateFloat(args[0].getIntVar(), args[1].getFloatVar());
    else
        This->updateFloat(args[0].getIntVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateFloat_INLRString_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateFloat((RString)args[0].getObjectVar(), args[1].getFloatVar());
    else
        This->updateFloat((RString)args[0].getObjectVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateInt_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateInt(args[0].getIntVar(), args[1].getIntVar());
    else
        This->updateInt(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateInt_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateInt((RString)args[0].getObjectVar(), args[1].getIntVar());
    else
        This->updateInt((RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateLong_IJ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateLong(args[0].getIntVar(), args[1].getLongVar());
    else
        This->updateLong(args[0].getIntVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateLong_INLRString_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateLong((RString)args[0].getObjectVar(), args[1].getLongVar());
    else
        This->updateLong((RString)args[0].getObjectVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateNull_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateNull(args[0].getIntVar());
    else
        This->updateNull(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateNull_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateNull((RString)args[0].getObjectVar());
    else
        This->updateNull((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateObject_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    else
        This->updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateObject_IINLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateObject_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    else
        This->updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateObject_INLRString_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->updateObject((RString)args[0].getObjectVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateRow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateRow();
    else
        This->updateRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateShort_IS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateShort(args[0].getIntVar(), args[1].getShortVar());
    else
        This->updateShort(args[0].getIntVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateShort_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateShort((RString)args[0].getObjectVar(), args[1].getShortVar());
    else
        This->updateShort((RString)args[0].getObjectVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->updateString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateString((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    else
        This->updateString((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateTime_IINLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    else
        This->updateTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateTime_INLRString_INLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateTime((RString)args[0].getObjectVar(), (RTime)args[1].getObjectVar());
    else
        This->updateTime((RString)args[0].getObjectVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateTimestamp_IINLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    else
        This->updateTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteResultSet::updateTimestamp((RString)args[0].getObjectVar(), (RTimestamp)args[1].getObjectVar());
    else
        This->updateTimestamp((RString)args[0].getObjectVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSet_method_wasNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSet::wasNull();
    else
      ret = This->wasNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteResultSet_fields__con_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_con, flags);
    else
      This->_con = (RLiteConnection)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteResultSet_fields__stm_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stm, flags);
    else
      This->_stm = (RLiteStatement)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteResultSet_fields__table_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_table, flags);
    else
      This->_table = (RLiteTable)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteResultSet_fields__updateCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteResultSet* This = dmi_cast<LiteResultSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_updateCount, flags);
    else
      This->_updateCount = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LiteResultSet_fields__con = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_con", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo(),
  LiteResultSet_MetainfoWrapper::LiteResultSet_fields__con_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteResultSet_fields__stm = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stm", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteStatement::clazzInfo(),
  LiteResultSet_MetainfoWrapper::LiteResultSet_fields__stm_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteResultSet_fields__table = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_table", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteTable::clazzInfo(),
  LiteResultSet_MetainfoWrapper::LiteResultSet_fields__table_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteResultSet_fields__updateCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_updateCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LiteResultSet_MetainfoWrapper::LiteResultSet_fields__updateCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteResultSet_fields[] = 
{
  &LiteResultSet_fields__con,
  &LiteResultSet_fields__stm,
  &LiteResultSet_fields__table,
  &LiteResultSet_fields__updateCount,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1O_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__arg_stm = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "stm", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteStatement::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteTable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__args[] = 
{
  &LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__arg_con,
  &LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__arg_stm,
  &LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LiteResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LiteResultSet::clazzInfo(), // return type
  "_0_LiteResultSet", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_absolute_I_Z_arg_row = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "row", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_absolute_I_Z_args[] = 
{
  &LiteResultSet_methods_absolute_I_Z_arg_row,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_absolute_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_absolute_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "absolute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_absolute", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_absolute_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_absolute_I_Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_absolute_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_afterLast__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_afterLast__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_afterLast__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "afterLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_afterLast", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_afterLast__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_afterLast__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_afterLast__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_beforeFirst__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_beforeFirst__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_beforeFirst__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "beforeFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_beforeFirst", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_beforeFirst__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_beforeFirst__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_beforeFirst__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_cancelRowUpdates__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_cancelRowUpdates__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_cancelRowUpdates__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cancelRowUpdates", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_cancelRowUpdates", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_cancelRowUpdates__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_cancelRowUpdates__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_cancelRowUpdates__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_clearWarnings__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_close", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_close__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_close__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_deleteRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_deleteRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_deleteRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_deleteRow", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_deleteRow__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_deleteRow__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_deleteRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_findColumn_INLRString__I_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_findColumn_INLRString__I_args[] = 
{
  &LiteResultSet_methods_findColumn_INLRString__I_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_findColumn_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_findColumn_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_findColumn", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_findColumn_INLRString__I_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_findColumn_INLRString__I_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_findColumn_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_first__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_first__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_first__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "first", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_first", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_first__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_first__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_first__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getArray_I_LRArray__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getArray_I_LRArray__args[] = 
{
  &LiteResultSet_methods_getArray_I_LRArray__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getArray_I_LRArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getArray_I_LRArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArray::clazzInfo(), // return type
  "_a_getArray", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getArray_I_LRArray__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getArray_I_LRArray__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getArray_I_LRArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getArray_INLRString__LRArray__arg_colName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getArray_INLRString__LRArray__args[] = 
{
  &LiteResultSet_methods_getArray_INLRString__LRArray__arg_colName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getArray_INLRString__LRArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getArray_INLRString__LRArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RArray::clazzInfo(), // return type
  "_b_getArray", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getArray_INLRString__LRArray__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getArray_INLRString__LRArray__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getArray_INLRString__LRArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__args[] = 
{
  &LiteResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getAsciiStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_e_getAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getAsciiStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getAsciiStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &LiteResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_f_getAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getAsciiStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__args[] = 
{
  &LiteResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getBinaryStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_g_getBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getBinaryStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getBinaryStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &LiteResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_h_getBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getBinaryStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getBlob_I_LRBlob__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getBlob_I_LRBlob__args[] = 
{
  &LiteResultSet_methods_getBlob_I_LRBlob__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getBlob_I_LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getBlob_I_LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_c_getBlob", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getBlob_I_LRBlob__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getBlob_I_LRBlob__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getBlob_I_LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getBlob_INLRString__LRBlob__arg_colName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getBlob_INLRString__LRBlob__args[] = 
{
  &LiteResultSet_methods_getBlob_INLRString__LRBlob__arg_colName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getBlob_INLRString__LRBlob__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getBlob_INLRString__LRBlob_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo(), // return type
  "_d_getBlob", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getBlob_INLRString__LRBlob__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getBlob_INLRString__LRBlob__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getBlob_INLRString__LRBlob__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getBoolean_I_Z_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getBoolean_I_Z_args[] = 
{
  &LiteResultSet_methods_getBoolean_I_Z_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getBoolean_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getBoolean_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getBoolean_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getBoolean_I_Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getBoolean_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getBoolean_INLRString__Z_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getBoolean_INLRString__Z_args[] = 
{
  &LiteResultSet_methods_getBoolean_INLRString__Z_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getBoolean_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getBoolean_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getBoolean_INLRString__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getBoolean_INLRString__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getBoolean_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getByte_I_B_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getByte_I_B_args[] = 
{
  &LiteResultSet_methods_getByte_I_B_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getByte_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getByte_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_k_getByte", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getByte_I_B_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getByte_I_B_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getByte_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getByte_INLRString__B_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getByte_INLRString__B_args[] = 
{
  &LiteResultSet_methods_getByte_INLRString__B_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getByte_INLRString__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getByte_INLRString__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_l_getByte", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getByte_INLRString__B_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getByte_INLRString__B_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getByte_INLRString__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getBytes_I_LRbyteArray__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getBytes_I_LRbyteArray__args[] = 
{
  &LiteResultSet_methods_getBytes_I_LRbyteArray__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getBytes_I_LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getBytes_I_LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_m_getBytes", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getBytes_I_LRbyteArray__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getBytes_I_LRbyteArray__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getBytes_I_LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getBytes_INLRString__LRbyteArray__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getBytes_INLRString__LRbyteArray__args[] = 
{
  &LiteResultSet_methods_getBytes_INLRString__LRbyteArray__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getBytes_INLRString__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getBytes_INLRString__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_n_getBytes", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getBytes_INLRString__LRbyteArray__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getBytes_INLRString__LRbyteArray__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getBytes_INLRString__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__args[] = 
{
  &LiteResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getCharacterStream_I_Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_o_getCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getCharacterStream_I_Lacdk_io_RReader__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getCharacterStream_I_Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__args[] = 
{
  &LiteResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_p_getCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getCharacterStream_INLRString__Lacdk_io_RReader__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getConcurrency__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getConcurrency__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getConcurrency__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_q_getConcurrency", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getConcurrency__I_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getConcurrency__I_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getConcurrency__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getCursorName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getCursorName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getCursorName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCursorName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_getCursorName", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getCursorName__LRString__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getCursorName__LRString__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getCursorName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getDate_I_Lacdk_util_RDate__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getDate_I_Lacdk_util_RDate__args[] = 
{
  &LiteResultSet_methods_getDate_I_Lacdk_util_RDate__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getDate_I_Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getDate_I_Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_s_getDate", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getDate_I_Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getDate_I_Lacdk_util_RDate__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getDate_I_Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getDate_INLRString__Lacdk_util_RDate__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getDate_INLRString__Lacdk_util_RDate__args[] = 
{
  &LiteResultSet_methods_getDate_INLRString__Lacdk_util_RDate__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getDate_INLRString__Lacdk_util_RDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getDate_INLRString__Lacdk_util_RDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo(), // return type
  "_t_getDate", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getDate_INLRString__Lacdk_util_RDate__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getDate_INLRString__Lacdk_util_RDate__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getDate_INLRString__Lacdk_util_RDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getDouble_I_D_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getDouble_I_D_args[] = 
{
  &LiteResultSet_methods_getDouble_I_D_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getDouble_I_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getDouble_I_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_u_getDouble", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getDouble_I_D_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getDouble_I_D_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getDouble_I_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getDouble_INLRString__D_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getDouble_INLRString__D_args[] = 
{
  &LiteResultSet_methods_getDouble_INLRString__D_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getDouble_INLRString__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getDouble_INLRString__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_v_getDouble", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getDouble_INLRString__D_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getDouble_INLRString__D_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getDouble_INLRString__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getFetchDirection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getFetchDirection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getFetchDirection__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_w_getFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getFetchDirection__I_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getFetchDirection__I_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getFetchDirection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getFetchSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getFetchSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getFetchSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_x_getFetchSize", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getFetchSize__I_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getFetchSize__I_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getFetchSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getFloat_I_F_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getFloat_I_F_args[] = 
{
  &LiteResultSet_methods_getFloat_I_F_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getFloat_I_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getFloat_I_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_y_getFloat", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getFloat_I_F_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getFloat_I_F_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getFloat_I_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getFloat_INLRString__F_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getFloat_INLRString__F_args[] = 
{
  &LiteResultSet_methods_getFloat_INLRString__F_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getFloat_INLRString__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getFloat_INLRString__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_z_getFloat", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getFloat_INLRString__F_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getFloat_INLRString__F_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getFloat_INLRString__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getInt_I_I_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getInt_I_I_args[] = 
{
  &LiteResultSet_methods_getInt_I_I_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getInt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getInt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_getInt", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getInt_I_I_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getInt_I_I_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getInt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getInt_INLRString__I_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getInt_INLRString__I_args[] = 
{
  &LiteResultSet_methods_getInt_INLRString__I_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getInt_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getInt_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_getInt", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getInt_INLRString__I_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getInt_INLRString__I_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getInt_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getLong_I_J_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getLong_I_J_args[] = 
{
  &LiteResultSet_methods_getLong_I_J_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getLong_I_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getLong_I_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_C_getLong", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getLong_I_J_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getLong_I_J_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getLong_I_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getLong_INLRString__J_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getLong_INLRString__J_args[] = 
{
  &LiteResultSet_methods_getLong_INLRString__J_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getLong_INLRString__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getLong_INLRString__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_D_getLong", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getLong_INLRString__J_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getLong_INLRString__J_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getLong_INLRString__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getMetaData__LRResultSetMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getMetaData__LRResultSetMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getMetaData__LRResultSetMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSetMetaData::clazzInfo(), // return type
  "_E_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getMetaData__LRResultSetMetaData__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getMetaData__LRResultSetMetaData__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getMetaData__LRResultSetMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getObject_I_LRObject__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getObject_I_LRObject__args[] = 
{
  &LiteResultSet_methods_getObject_I_LRObject__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getObject_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getObject_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_F_getObject", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getObject_I_LRObject__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getObject_I_LRObject__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getObject_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__args[] = 
{
  &LiteResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_i,
  &LiteResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getObject_IINLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_G_getObject", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getObject_IINLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getObject_IINLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getObject_INLRString__LRObject__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getObject_INLRString__LRObject__args[] = 
{
  &LiteResultSet_methods_getObject_INLRString__LRObject__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getObject_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_H_getObject", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getObject_INLRString__LRObject__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getObject_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_colName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "colName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__args[] = 
{
  &LiteResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_colName,
  &LiteResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_I_getObject", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getObject_INLRString_INLacdk_util_RMap__LRObject__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getRow__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getRow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getRow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_J_getRow", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getRow__I_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getRow__I_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getRow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getShort_I_S_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getShort_I_S_args[] = 
{
  &LiteResultSet_methods_getShort_I_S_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getShort_I_S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getShort_I_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_K_getShort", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getShort_I_S_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getShort_I_S_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getShort_I_S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getShort_INLRString__S_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getShort_INLRString__S_args[] = 
{
  &LiteResultSet_methods_getShort_INLRString__S_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getShort_INLRString__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getShort_INLRString__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_L_getShort", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getShort_INLRString__S_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getShort_INLRString__S_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getShort_INLRString__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getStatement__LRStatement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getStatement__LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getStatement__LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_M_getStatement", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getStatement__LRStatement__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getStatement__LRStatement__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getStatement__LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getString_I_LRString__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getString_I_LRString__args[] = 
{
  &LiteResultSet_methods_getString_I_LRString__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_N_getString", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getString_I_LRString__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getString_INLRString__LRString__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getString_INLRString__LRString__args[] = 
{
  &LiteResultSet_methods_getString_INLRString__LRString__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_O_getString", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getString_INLRString__LRString__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getString_INLRString__LRString__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getTime_I_LRTime__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getTime_I_LRTime__args[] = 
{
  &LiteResultSet_methods_getTime_I_LRTime__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getTime_I_LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getTime_I_LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_P_getTime", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getTime_I_LRTime__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getTime_I_LRTime__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getTime_I_LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getTime_INLRString__LRTime__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getTime_INLRString__LRTime__args[] = 
{
  &LiteResultSet_methods_getTime_INLRString__LRTime__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getTime_INLRString__LRTime__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getTime_INLRString__LRTime_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo(), // return type
  "_Q_getTime", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getTime_INLRString__LRTime__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getTime_INLRString__LRTime__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getTime_INLRString__LRTime__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getTimestamp_I_LRTimestamp__arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getTimestamp_I_LRTimestamp__args[] = 
{
  &LiteResultSet_methods_getTimestamp_I_LRTimestamp__arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getTimestamp_I_LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getTimestamp_I_LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_R_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getTimestamp_I_LRTimestamp__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getTimestamp_I_LRTimestamp__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getTimestamp_I_LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_getTimestamp_INLRString__LRTimestamp__arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getTimestamp_INLRString__LRTimestamp__args[] = 
{
  &LiteResultSet_methods_getTimestamp_INLRString__LRTimestamp__arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getTimestamp_INLRString__LRTimestamp__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getTimestamp_INLRString__LRTimestamp_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo(), // return type
  "_S_getTimestamp", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getTimestamp_INLRString__LRTimestamp__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getTimestamp_INLRString__LRTimestamp__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getTimestamp_INLRString__LRTimestamp__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_T_getType", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getType__I_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getType__I_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_getWarnings__LRSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_getWarnings__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_getWarnings__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLWarning::clazzInfo(), // return type
  "_U_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_getWarnings__LRSQLWarning__args, // the arguments
  0, //arguments count
  LiteResultSet_methods_getWarnings__LRSQLWarning__exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_getWarnings__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_insertRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_insertRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_insertRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_V_insertRow", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_insertRow__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_insertRow__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_insertRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_isAfterLast__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_isAfterLast__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_isAfterLast__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAfterLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_W_isAfterLast", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_isAfterLast__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_isAfterLast__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_isAfterLast__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_isBeforeFirst__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_isBeforeFirst__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_isBeforeFirst__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBeforeFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_X_isBeforeFirst", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_isBeforeFirst__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_isBeforeFirst__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_isBeforeFirst__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_isFirst__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_isFirst__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_isFirst__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFirst", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Y_isFirst", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_isFirst__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_isFirst__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_isFirst__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_isLast__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_isLast__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_isLast__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLast", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Z_isLast", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_isLast__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_isLast__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_isLast__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_last__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_last__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_last__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "last", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_10_last", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_last__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_last__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_last__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_moveToCurrentRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_moveToCurrentRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_moveToCurrentRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moveToCurrentRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_11_moveToCurrentRow", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_moveToCurrentRow__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_moveToCurrentRow__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_moveToCurrentRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_moveToInsertRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_moveToInsertRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_moveToInsertRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "moveToInsertRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12_moveToInsertRow", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_moveToInsertRow__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_moveToInsertRow__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_moveToInsertRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_next__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_next__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_next__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_13_next", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_next__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_next__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_next__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_previous__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_previous__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_previous__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previous", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_previous", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_previous__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_previous__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_previous__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_refreshRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_refreshRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_refreshRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "refreshRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_15_refreshRow", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_refreshRow__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_refreshRow__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_refreshRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_relative_I_Z_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_relative_I_Z_args[] = 
{
  &LiteResultSet_methods_relative_I_Z_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_relative_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_relative_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "relative", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_16_relative", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_relative_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_relative_I_Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_relative_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_rowDeleted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_rowDeleted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_rowDeleted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowDeleted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_17_rowDeleted", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_rowDeleted__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_rowDeleted__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_rowDeleted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_rowInserted__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_rowInserted__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_rowInserted__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowInserted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_18_rowInserted", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_rowInserted__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_rowInserted__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_rowInserted__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_rowUpdated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_rowUpdated__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_rowUpdated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowUpdated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_19_rowUpdated", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_rowUpdated__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_rowUpdated__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_rowUpdated__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_setFetchDirection_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_setFetchDirection_I_V_args[] = 
{
  &LiteResultSet_methods_setFetchDirection_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_setFetchDirection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_setFetchDirection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1a_setFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_setFetchDirection_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_setFetchDirection_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_setFetchDirection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_setFetchSize_I_V_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_setFetchSize_I_V_args[] = 
{
  &LiteResultSet_methods_setFetchSize_I_V_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_setFetchSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_setFetchSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1b_setFetchSize", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_setFetchSize_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_setFetchSize_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_setFetchSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_x,
  &LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1c_updateAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateAsciiStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_x,
  &LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateAsciiStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1d_updateAsciiStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_x,
  &LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1e_updateBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateBinaryStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_x,
  &LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBinaryStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1f_updateBinaryStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBoolean_IZ_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBoolean_IZ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateBoolean_IZ_V_args[] = 
{
  &LiteResultSet_methods_updateBoolean_IZ_V_arg_columnIndex,
  &LiteResultSet_methods_updateBoolean_IZ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateBoolean_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateBoolean_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1g_updateBoolean", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateBoolean_IZ_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateBoolean_IZ_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateBoolean_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBoolean_INLRString_Z_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBoolean_INLRString_Z_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateBoolean_INLRString_Z_V_args[] = 
{
  &LiteResultSet_methods_updateBoolean_INLRString_Z_V_arg_columnName,
  &LiteResultSet_methods_updateBoolean_INLRString_Z_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateBoolean_INLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateBoolean_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1h_updateBoolean", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateBoolean_INLRString_Z_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateBoolean_INLRString_Z_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateBoolean_INLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateByte_IB_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateByte_IB_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateByte_IB_V_args[] = 
{
  &LiteResultSet_methods_updateByte_IB_V_arg_columnIndex,
  &LiteResultSet_methods_updateByte_IB_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateByte_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateByte_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1i_updateByte", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateByte_IB_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateByte_IB_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateByte_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateByte_INLRString_B_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateByte_INLRString_B_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateByte_INLRString_B_V_args[] = 
{
  &LiteResultSet_methods_updateByte_INLRString_B_V_arg_columnName,
  &LiteResultSet_methods_updateByte_INLRString_B_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateByte_INLRString_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateByte_INLRString_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1j_updateByte", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateByte_INLRString_B_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateByte_INLRString_B_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateByte_INLRString_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBytes_IINLRbyteArray__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBytes_IINLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateBytes_IINLRbyteArray__V_args[] = 
{
  &LiteResultSet_methods_updateBytes_IINLRbyteArray__V_arg_columnIndex,
  &LiteResultSet_methods_updateBytes_IINLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateBytes_IINLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateBytes_IINLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1k_updateBytes", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateBytes_IINLRbyteArray__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateBytes_IINLRbyteArray__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateBytes_IINLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_args[] = 
{
  &LiteResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_columnName,
  &LiteResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateBytes_INLRString_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1l_updateBytes", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateBytes_INLRString_INLRbyteArray__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateBytes_INLRString_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_args[] = 
{
  &LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_columnIndex,
  &LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_x,
  &LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1m_updateCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateCharacterStream_IINLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_reader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_args[] = 
{
  &LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_columnName,
  &LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_reader,
  &LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateCharacterStream", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1n_updateCharacterStream", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateDate_IINLacdk_util_RDate__V_args[] = 
{
  &LiteResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_columnIndex,
  &LiteResultSet_methods_updateDate_IINLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateDate_IINLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateDate_IINLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1o_updateDate", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateDate_IINLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateDate_IINLacdk_util_RDate__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateDate_IINLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_args[] = 
{
  &LiteResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_columnName,
  &LiteResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1p_updateDate", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateDate_INLRString_INLacdk_util_RDate__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateDouble_ID_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateDouble_ID_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateDouble_ID_V_args[] = 
{
  &LiteResultSet_methods_updateDouble_ID_V_arg_columnIndex,
  &LiteResultSet_methods_updateDouble_ID_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateDouble_ID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateDouble_ID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1q_updateDouble", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateDouble_ID_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateDouble_ID_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateDouble_ID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateDouble_INLRString_D_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateDouble_INLRString_D_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateDouble_INLRString_D_V_args[] = 
{
  &LiteResultSet_methods_updateDouble_INLRString_D_V_arg_columnName,
  &LiteResultSet_methods_updateDouble_INLRString_D_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateDouble_INLRString_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateDouble_INLRString_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1r_updateDouble", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateDouble_INLRString_D_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateDouble_INLRString_D_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateDouble_INLRString_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateFloat_IF_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateFloat_IF_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateFloat_IF_V_args[] = 
{
  &LiteResultSet_methods_updateFloat_IF_V_arg_columnIndex,
  &LiteResultSet_methods_updateFloat_IF_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateFloat_IF_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateFloat_IF_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1s_updateFloat", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateFloat_IF_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateFloat_IF_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateFloat_IF_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateFloat_INLRString_F_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateFloat_INLRString_F_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateFloat_INLRString_F_V_args[] = 
{
  &LiteResultSet_methods_updateFloat_INLRString_F_V_arg_columnName,
  &LiteResultSet_methods_updateFloat_INLRString_F_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateFloat_INLRString_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateFloat_INLRString_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1t_updateFloat", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateFloat_INLRString_F_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateFloat_INLRString_F_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateFloat_INLRString_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateInt_II_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateInt_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateInt_II_V_args[] = 
{
  &LiteResultSet_methods_updateInt_II_V_arg_columnIndex,
  &LiteResultSet_methods_updateInt_II_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateInt_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateInt_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1u_updateInt", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateInt_II_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateInt_II_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateInt_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateInt_INLRString_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateInt_INLRString_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateInt_INLRString_I_V_args[] = 
{
  &LiteResultSet_methods_updateInt_INLRString_I_V_arg_columnName,
  &LiteResultSet_methods_updateInt_INLRString_I_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateInt_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateInt_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1v_updateInt", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateInt_INLRString_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateInt_INLRString_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateInt_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateLong_IJ_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateLong_IJ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateLong_IJ_V_args[] = 
{
  &LiteResultSet_methods_updateLong_IJ_V_arg_columnIndex,
  &LiteResultSet_methods_updateLong_IJ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateLong_IJ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateLong_IJ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1w_updateLong", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateLong_IJ_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateLong_IJ_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateLong_IJ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateLong_INLRString_J_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateLong_INLRString_J_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateLong_INLRString_J_V_args[] = 
{
  &LiteResultSet_methods_updateLong_INLRString_J_V_arg_columnName,
  &LiteResultSet_methods_updateLong_INLRString_J_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateLong_INLRString_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateLong_INLRString_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1x_updateLong", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateLong_INLRString_J_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateLong_INLRString_J_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateLong_INLRString_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateNull_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateNull_I_V_args[] = 
{
  &LiteResultSet_methods_updateNull_I_V_arg_columnIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateNull_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateNull_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1y_updateNull", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateNull_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateNull_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateNull_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateNull_INLRString__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateNull_INLRString__V_args[] = 
{
  &LiteResultSet_methods_updateNull_INLRString__V_arg_columnName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateNull_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateNull_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1z_updateNull", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateNull_INLRString__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateNull_INLRString__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateNull_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_IINLRObject__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_IINLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateObject_IINLRObject__V_args[] = 
{
  &LiteResultSet_methods_updateObject_IINLRObject__V_arg_columnIndex,
  &LiteResultSet_methods_updateObject_IINLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateObject_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateObject_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1A_updateObject", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateObject_IINLRObject__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateObject_IINLRObject__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateObject_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_IINLRObject_I_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_IINLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_IINLRObject_I_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateObject_IINLRObject_I_V_args[] = 
{
  &LiteResultSet_methods_updateObject_IINLRObject_I_V_arg_columnIndex,
  &LiteResultSet_methods_updateObject_IINLRObject_I_V_arg_x,
  &LiteResultSet_methods_updateObject_IINLRObject_I_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateObject_IINLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateObject_IINLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1B_updateObject", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateObject_IINLRObject_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateObject_IINLRObject_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateObject_IINLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_INLRString_INLRObject__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_INLRString_INLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateObject_INLRString_INLRObject__V_args[] = 
{
  &LiteResultSet_methods_updateObject_INLRString_INLRObject__V_arg_columnName,
  &LiteResultSet_methods_updateObject_INLRString_INLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateObject_INLRString_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateObject_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1C_updateObject", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateObject_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateObject_INLRString_INLRObject__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateObject_INLRString_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_args[] = 
{
  &LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_columnName,
  &LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_x,
  &LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateObject_INLRString_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1D_updateObject", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateObject_INLRString_INLRObject_I_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateObject_INLRString_INLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateRow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateRow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateRow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1E_updateRow", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateRow__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateRow__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateRow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateShort_IS_V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateShort_IS_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateShort_IS_V_args[] = 
{
  &LiteResultSet_methods_updateShort_IS_V_arg_columnIndex,
  &LiteResultSet_methods_updateShort_IS_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateShort_IS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateShort_IS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1F_updateShort", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateShort_IS_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateShort_IS_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateShort_IS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateShort_INLRString_S_V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateShort_INLRString_S_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateShort_INLRString_S_V_args[] = 
{
  &LiteResultSet_methods_updateShort_INLRString_S_V_arg_columnName,
  &LiteResultSet_methods_updateShort_INLRString_S_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateShort_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateShort_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1G_updateShort", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateShort_INLRString_S_V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateShort_INLRString_S_V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateShort_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateString_IINLRString__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateString_IINLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateString_IINLRString__V_args[] = 
{
  &LiteResultSet_methods_updateString_IINLRString__V_arg_columnIndex,
  &LiteResultSet_methods_updateString_IINLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1H_updateString", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateString_IINLRString__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateString_IINLRString__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateString_INLRString_INLRString__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateString_INLRString_INLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateString_INLRString_INLRString__V_args[] = 
{
  &LiteResultSet_methods_updateString_INLRString_INLRString__V_arg_columnName,
  &LiteResultSet_methods_updateString_INLRString_INLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1I_updateString", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateString_INLRString_INLRString__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateTime_IINLRTime__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateTime_IINLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateTime_IINLRTime__V_args[] = 
{
  &LiteResultSet_methods_updateTime_IINLRTime__V_arg_columnIndex,
  &LiteResultSet_methods_updateTime_IINLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateTime_IINLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateTime_IINLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1J_updateTime", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateTime_IINLRTime__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateTime_IINLRTime__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateTime_IINLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateTime_INLRString_INLRTime__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateTime_INLRString_INLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateTime_INLRString_INLRTime__V_args[] = 
{
  &LiteResultSet_methods_updateTime_INLRString_INLRTime__V_arg_columnName,
  &LiteResultSet_methods_updateTime_INLRString_INLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateTime_INLRString_INLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateTime_INLRString_INLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1K_updateTime", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateTime_INLRString_INLRTime__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateTime_INLRString_INLRTime__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateTime_INLRString_INLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_columnIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "columnIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateTimestamp_IINLRTimestamp__V_args[] = 
{
  &LiteResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_columnIndex,
  &LiteResultSet_methods_updateTimestamp_IINLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateTimestamp_IINLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateTimestamp_IINLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1L_updateTimestamp", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateTimestamp_IINLRTimestamp__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateTimestamp_IINLRTimestamp__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateTimestamp_IINLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_columnName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_args[] = 
{
  &LiteResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_columnName,
  &LiteResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updateTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1M_updateTimestamp", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_updateTimestamp_INLRString_INLRTimestamp__V_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSet_methods_wasNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSet_methods_wasNull__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSet_method_wasNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wasNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1N_wasNull", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSet_methods_wasNull__Z_args, // the arguments
  0, //arguments count
  LiteResultSet_methods_wasNull__Z_exceptions, // the declared exceptions
  LiteResultSet_MetainfoWrapper::LiteResultSet_method_wasNull__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteResultSet_methods[] = 
{
  &LiteResultSet_method_GetClass__L_acdk_lang_RClass_,
  &LiteResultSet_method_LiteResultSet_INLRLiteConnection_INLRLiteStatement_INLRLiteTable__LRLiteResultSet_,
  &LiteResultSet_method_absolute_I_Z,
  &LiteResultSet_method_afterLast__V,
  &LiteResultSet_method_beforeFirst__V,
  &LiteResultSet_method_cancelRowUpdates__V,
  &LiteResultSet_method_clearWarnings__V,
  &LiteResultSet_method_close__V,
  &LiteResultSet_method_deleteRow__V,
  &LiteResultSet_method_findColumn_INLRString__I,
  &LiteResultSet_method_first__Z,
  &LiteResultSet_method_getArray_I_LRArray_,
  &LiteResultSet_method_getArray_INLRString__LRArray_,
  &LiteResultSet_method_getAsciiStream_I_Lacdk_io_RReader_,
  &LiteResultSet_method_getAsciiStream_INLRString__Lacdk_io_RReader_,
  &LiteResultSet_method_getBinaryStream_I_Lacdk_io_RReader_,
  &LiteResultSet_method_getBinaryStream_INLRString__Lacdk_io_RReader_,
  &LiteResultSet_method_getBlob_I_LRBlob_,
  &LiteResultSet_method_getBlob_INLRString__LRBlob_,
  &LiteResultSet_method_getBoolean_I_Z,
  &LiteResultSet_method_getBoolean_INLRString__Z,
  &LiteResultSet_method_getByte_I_B,
  &LiteResultSet_method_getByte_INLRString__B,
  &LiteResultSet_method_getBytes_I_LRbyteArray_,
  &LiteResultSet_method_getBytes_INLRString__LRbyteArray_,
  &LiteResultSet_method_getCharacterStream_I_Lacdk_io_RReader_,
  &LiteResultSet_method_getCharacterStream_INLRString__Lacdk_io_RReader_,
  &LiteResultSet_method_getConcurrency__I,
  &LiteResultSet_method_getCursorName__LRString_,
  &LiteResultSet_method_getDate_I_Lacdk_util_RDate_,
  &LiteResultSet_method_getDate_INLRString__Lacdk_util_RDate_,
  &LiteResultSet_method_getDouble_I_D,
  &LiteResultSet_method_getDouble_INLRString__D,
  &LiteResultSet_method_getFetchDirection__I,
  &LiteResultSet_method_getFetchSize__I,
  &LiteResultSet_method_getFloat_I_F,
  &LiteResultSet_method_getFloat_INLRString__F,
  &LiteResultSet_method_getInt_I_I,
  &LiteResultSet_method_getInt_INLRString__I,
  &LiteResultSet_method_getLong_I_J,
  &LiteResultSet_method_getLong_INLRString__J,
  &LiteResultSet_method_getMetaData__LRResultSetMetaData_,
  &LiteResultSet_method_getObject_I_LRObject_,
  &LiteResultSet_method_getObject_IINLacdk_util_RMap__LRObject_,
  &LiteResultSet_method_getObject_INLRString__LRObject_,
  &LiteResultSet_method_getObject_INLRString_INLacdk_util_RMap__LRObject_,
  &LiteResultSet_method_getRow__I,
  &LiteResultSet_method_getShort_I_S,
  &LiteResultSet_method_getShort_INLRString__S,
  &LiteResultSet_method_getStatement__LRStatement_,
  &LiteResultSet_method_getString_I_LRString_,
  &LiteResultSet_method_getString_INLRString__LRString_,
  &LiteResultSet_method_getTime_I_LRTime_,
  &LiteResultSet_method_getTime_INLRString__LRTime_,
  &LiteResultSet_method_getTimestamp_I_LRTimestamp_,
  &LiteResultSet_method_getTimestamp_INLRString__LRTimestamp_,
  &LiteResultSet_method_getType__I,
  &LiteResultSet_method_getWarnings__LRSQLWarning_,
  &LiteResultSet_method_insertRow__V,
  &LiteResultSet_method_isAfterLast__Z,
  &LiteResultSet_method_isBeforeFirst__Z,
  &LiteResultSet_method_isFirst__Z,
  &LiteResultSet_method_isLast__Z,
  &LiteResultSet_method_last__Z,
  &LiteResultSet_method_moveToCurrentRow__V,
  &LiteResultSet_method_moveToInsertRow__V,
  &LiteResultSet_method_next__Z,
  &LiteResultSet_method_previous__Z,
  &LiteResultSet_method_refreshRow__V,
  &LiteResultSet_method_relative_I_Z,
  &LiteResultSet_method_rowDeleted__Z,
  &LiteResultSet_method_rowInserted__Z,
  &LiteResultSet_method_rowUpdated__Z,
  &LiteResultSet_method_setFetchDirection_I_V,
  &LiteResultSet_method_setFetchSize_I_V,
  &LiteResultSet_method_updateAsciiStream_IINLacdk_io_RReader_I_V,
  &LiteResultSet_method_updateAsciiStream_INLRString_INLacdk_io_RReader_I_V,
  &LiteResultSet_method_updateBinaryStream_IINLacdk_io_RReader_I_V,
  &LiteResultSet_method_updateBinaryStream_INLRString_INLacdk_io_RReader_I_V,
  &LiteResultSet_method_updateBoolean_IZ_V,
  &LiteResultSet_method_updateBoolean_INLRString_Z_V,
  &LiteResultSet_method_updateByte_IB_V,
  &LiteResultSet_method_updateByte_INLRString_B_V,
  &LiteResultSet_method_updateBytes_IINLRbyteArray__V,
  &LiteResultSet_method_updateBytes_INLRString_INLRbyteArray__V,
  &LiteResultSet_method_updateCharacterStream_IINLacdk_io_RReader_I_V,
  &LiteResultSet_method_updateCharacterStream_INLRString_INLacdk_io_RReader_I_V,
  &LiteResultSet_method_updateDate_IINLacdk_util_RDate__V,
  &LiteResultSet_method_updateDate_INLRString_INLacdk_util_RDate__V,
  &LiteResultSet_method_updateDouble_ID_V,
  &LiteResultSet_method_updateDouble_INLRString_D_V,
  &LiteResultSet_method_updateFloat_IF_V,
  &LiteResultSet_method_updateFloat_INLRString_F_V,
  &LiteResultSet_method_updateInt_II_V,
  &LiteResultSet_method_updateInt_INLRString_I_V,
  &LiteResultSet_method_updateLong_IJ_V,
  &LiteResultSet_method_updateLong_INLRString_J_V,
  &LiteResultSet_method_updateNull_I_V,
  &LiteResultSet_method_updateNull_INLRString__V,
  &LiteResultSet_method_updateObject_IINLRObject__V,
  &LiteResultSet_method_updateObject_IINLRObject_I_V,
  &LiteResultSet_method_updateObject_INLRString_INLRObject__V,
  &LiteResultSet_method_updateObject_INLRString_INLRObject_I_V,
  &LiteResultSet_method_updateRow__V,
  &LiteResultSet_method_updateShort_IS_V,
  &LiteResultSet_method_updateShort_INLRString_S_V,
  &LiteResultSet_method_updateString_IINLRString__V,
  &LiteResultSet_method_updateString_INLRString_INLRString__V,
  &LiteResultSet_method_updateTime_IINLRTime__V,
  &LiteResultSet_method_updateTime_INLRString_INLRTime__V,
  &LiteResultSet_method_updateTimestamp_IINLRTimestamp__V,
  &LiteResultSet_method_updateTimestamp_INLRString_INLRTimestamp__V,
  &LiteResultSet_method_wasNull__Z,
  0
};


struct LiteResultSet_MetaInfoInitializer
{  LiteResultSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteResultSet::clazzInfo();
    ci->fields =  _LiteResultSet_fields;
    ci->methods =  _LiteResultSet_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteResultSet_MetaInfoInitializer LiteResultSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteResultSetMetaData_create_array(int length)
{
  return new ObjectArrayImpl<RLiteResultSetMetaData>(length);
}

//static
::acdk::lang::RObject
LiteResultSetMetaData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteResultSetMetaData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteResultSetMetaData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LiteResultSetMetaData((RLiteTable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getCatalogName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSetMetaData::getCatalogName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getCatalogName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getColumnClassName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSetMetaData::getColumnClassName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnClassName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getColumnCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::getColumnCount();
    else
      ret = This->getColumnCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getColumnDisplaySize_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::getColumnDisplaySize(args[0].getIntVar());
    else
      ret = This->getColumnDisplaySize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getColumnLabel_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSetMetaData::getColumnLabel(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnLabel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getColumnName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSetMetaData::getColumnName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getColumnType_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::getColumnType(args[0].getIntVar());
    else
      ret = This->getColumnType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getColumnTypeName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSetMetaData::getColumnTypeName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnTypeName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getPrecision_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::getPrecision(args[0].getIntVar());
    else
      ret = This->getPrecision(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getScale_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::getScale(args[0].getIntVar());
    else
      ret = This->getScale(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getSchemaName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSetMetaData::getSchemaName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getSchemaName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_getTableName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteResultSetMetaData::getTableName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getTableName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isAutoIncrement_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isAutoIncrement(args[0].getIntVar());
    else
      ret = This->isAutoIncrement(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isCaseSensitive_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isCaseSensitive(args[0].getIntVar());
    else
      ret = This->isCaseSensitive(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isCurrency_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isCurrency(args[0].getIntVar());
    else
      ret = This->isCurrency(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isDefinitelyWritable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isDefinitelyWritable(args[0].getIntVar());
    else
      ret = This->isDefinitelyWritable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isNullable_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isNullable(args[0].getIntVar());
    else
      ret = This->isNullable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isReadOnly_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isReadOnly(args[0].getIntVar());
    else
      ret = This->isReadOnly(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isSearchable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isSearchable(args[0].getIntVar());
    else
      ret = This->isSearchable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isSigned_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isSigned(args[0].getIntVar());
    else
      ret = This->isSigned(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteResultSetMetaData_method_isWritable_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteResultSetMetaData::isWritable(args[0].getIntVar());
    else
      ret = This->isWritable(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteResultSetMetaData_fields__table_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteResultSetMetaData* This = dmi_cast<LiteResultSetMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_table, flags);
    else
      This->_table = (RLiteTable)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LiteResultSetMetaData_fields__table = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_table", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteTable::clazzInfo(),
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_fields__table_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteResultSetMetaData_fields[] = 
{
  &LiteResultSetMetaData_fields__table,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_m_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteTable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData__args[] = 
{
  &LiteResultSetMetaData_methods_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LiteResultSetMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LiteResultSetMetaData::clazzInfo(), // return type
  "_0_LiteResultSetMetaData", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getCatalogName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getCatalogName_I_LRString__args[] = 
{
  &LiteResultSetMetaData_methods_getCatalogName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getCatalogName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getCatalogName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getCatalogName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_getCatalogName", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getCatalogName_I_LRString__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getCatalogName_I_LRString__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getCatalogName_I_LRString__dispatch, // invoke this method
  LiteResultSetMetaData_getCatalogName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getColumnClassName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getColumnClassName_I_LRString__args[] = 
{
  &LiteResultSetMetaData_methods_getColumnClassName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getColumnClassName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getColumnClassName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getColumnClassName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnClassName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getColumnClassName", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getColumnClassName_I_LRString__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getColumnClassName_I_LRString__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getColumnClassName_I_LRString__dispatch, // invoke this method
  LiteResultSetMetaData_getColumnClassName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getColumnCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getColumnCount__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getColumnCount__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getColumnCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getColumnCount", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getColumnCount__I_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getColumnCount__I_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getColumnCount__I_dispatch, // invoke this method
  LiteResultSetMetaData_getColumnCount__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getColumnDisplaySize_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getColumnDisplaySize_I_I_args[] = 
{
  &LiteResultSetMetaData_methods_getColumnDisplaySize_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getColumnDisplaySize_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getColumnDisplaySize_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getColumnDisplaySize_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnDisplaySize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getColumnDisplaySize", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getColumnDisplaySize_I_I_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getColumnDisplaySize_I_I_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getColumnDisplaySize_I_I_dispatch, // invoke this method
  LiteResultSetMetaData_getColumnDisplaySize_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getColumnLabel_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getColumnLabel_I_LRString__args[] = 
{
  &LiteResultSetMetaData_methods_getColumnLabel_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getColumnLabel_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getColumnLabel_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getColumnLabel_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnLabel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getColumnLabel", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getColumnLabel_I_LRString__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getColumnLabel_I_LRString__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getColumnLabel_I_LRString__dispatch, // invoke this method
  LiteResultSetMetaData_getColumnLabel_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getColumnName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getColumnName_I_LRString__args[] = 
{
  &LiteResultSetMetaData_methods_getColumnName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getColumnName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getColumnName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getColumnName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getColumnName", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getColumnName_I_LRString__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getColumnName_I_LRString__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getColumnName_I_LRString__dispatch, // invoke this method
  LiteResultSetMetaData_getColumnName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getColumnType_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getColumnType_I_I_args[] = 
{
  &LiteResultSetMetaData_methods_getColumnType_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getColumnType_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getColumnType_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getColumnType_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getColumnType", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getColumnType_I_I_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getColumnType_I_I_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getColumnType_I_I_dispatch, // invoke this method
  LiteResultSetMetaData_getColumnType_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getColumnTypeName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getColumnTypeName_I_LRString__args[] = 
{
  &LiteResultSetMetaData_methods_getColumnTypeName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getColumnTypeName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getColumnTypeName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getColumnTypeName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnTypeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_getColumnTypeName", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getColumnTypeName_I_LRString__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getColumnTypeName_I_LRString__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getColumnTypeName_I_LRString__dispatch, // invoke this method
  LiteResultSetMetaData_getColumnTypeName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getPrecision_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getPrecision_I_I_args[] = 
{
  &LiteResultSetMetaData_methods_getPrecision_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getPrecision_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getPrecision_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getPrecision_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrecision", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getPrecision", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getPrecision_I_I_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getPrecision_I_I_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getPrecision_I_I_dispatch, // invoke this method
  LiteResultSetMetaData_getPrecision_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getScale_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getScale_I_I_args[] = 
{
  &LiteResultSetMetaData_methods_getScale_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getScale_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getScale_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getScale_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getScale", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getScale_I_I_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getScale_I_I_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getScale_I_I_dispatch, // invoke this method
  LiteResultSetMetaData_getScale_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getSchemaName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getSchemaName_I_LRString__args[] = 
{
  &LiteResultSetMetaData_methods_getSchemaName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getSchemaName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getSchemaName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getSchemaName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemaName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getSchemaName", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getSchemaName_I_LRString__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getSchemaName_I_LRString__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getSchemaName_I_LRString__dispatch, // invoke this method
  LiteResultSetMetaData_getSchemaName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_getTableName_I_LRString__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_getTableName_I_LRString__args[] = 
{
  &LiteResultSetMetaData_methods_getTableName_I_LRString__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_getTableName_I_LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_getTableName_I_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_getTableName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTableName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getTableName", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_getTableName_I_LRString__args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_getTableName_I_LRString__exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_getTableName_I_LRString__dispatch, // invoke this method
  LiteResultSetMetaData_getTableName_I_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isAutoIncrement_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isAutoIncrement_I_Z_args[] = 
{
  &LiteResultSetMetaData_methods_isAutoIncrement_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isAutoIncrement_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isAutoIncrement_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isAutoIncrement_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAutoIncrement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isAutoIncrement", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isAutoIncrement_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isAutoIncrement_I_Z_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isAutoIncrement_I_Z_dispatch, // invoke this method
  LiteResultSetMetaData_isAutoIncrement_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isCaseSensitive_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isCaseSensitive_I_Z_args[] = 
{
  &LiteResultSetMetaData_methods_isCaseSensitive_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isCaseSensitive_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isCaseSensitive_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isCaseSensitive_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCaseSensitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isCaseSensitive", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isCaseSensitive_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isCaseSensitive_I_Z_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isCaseSensitive_I_Z_dispatch, // invoke this method
  LiteResultSetMetaData_isCaseSensitive_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isCurrency_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isCurrency_I_Z_args[] = 
{
  &LiteResultSetMetaData_methods_isCurrency_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isCurrency_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isCurrency_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isCurrency_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_isCurrency", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isCurrency_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isCurrency_I_Z_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isCurrency_I_Z_dispatch, // invoke this method
  LiteResultSetMetaData_isCurrency_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isDefinitelyWritable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isDefinitelyWritable_I_Z_args[] = 
{
  &LiteResultSetMetaData_methods_isDefinitelyWritable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isDefinitelyWritable_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isDefinitelyWritable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isDefinitelyWritable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDefinitelyWritable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_isDefinitelyWritable", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isDefinitelyWritable_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isDefinitelyWritable_I_Z_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isDefinitelyWritable_I_Z_dispatch, // invoke this method
  LiteResultSetMetaData_isDefinitelyWritable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isNullable_I_I_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isNullable_I_I_args[] = 
{
  &LiteResultSetMetaData_methods_isNullable_I_I_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isNullable_I_I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isNullable_I_I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isNullable_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNullable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_isNullable", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isNullable_I_I_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isNullable_I_I_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isNullable_I_I_dispatch, // invoke this method
  LiteResultSetMetaData_isNullable_I_I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isReadOnly_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isReadOnly_I_Z_args[] = 
{
  &LiteResultSetMetaData_methods_isReadOnly_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isReadOnly_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isReadOnly_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isReadOnly_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isReadOnly_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isReadOnly_I_Z_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isReadOnly_I_Z_dispatch, // invoke this method
  LiteResultSetMetaData_isReadOnly_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isSearchable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isSearchable_I_Z_args[] = 
{
  &LiteResultSetMetaData_methods_isSearchable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isSearchable_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isSearchable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isSearchable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSearchable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isSearchable", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isSearchable_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isSearchable_I_Z_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isSearchable_I_Z_dispatch, // invoke this method
  LiteResultSetMetaData_isSearchable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isSigned_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isSigned_I_Z_args[] = 
{
  &LiteResultSetMetaData_methods_isSigned_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isSigned_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isSigned_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isSigned_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSigned", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isSigned", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isSigned_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isSigned_I_Z_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isSigned_I_Z_dispatch, // invoke this method
  LiteResultSetMetaData_isSigned_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteResultSetMetaData_methods_isWritable_I_Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteResultSetMetaData_methods_isWritable_I_Z_args[] = 
{
  &LiteResultSetMetaData_methods_isWritable_I_Z_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteResultSetMetaData_methods_isWritable_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteResultSetMetaData_isWritable_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteResultSetMetaData_method_isWritable_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWritable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_isWritable", // alternative name of method
  -1, // altlabelHashCode
  LiteResultSetMetaData_methods_isWritable_I_Z_args, // the arguments
  0, //arguments count
  LiteResultSetMetaData_methods_isWritable_I_Z_exceptions, // the declared exceptions
  LiteResultSetMetaData_MetainfoWrapper::LiteResultSetMetaData_method_isWritable_I_Z_dispatch, // invoke this method
  LiteResultSetMetaData_isWritable_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteResultSetMetaData_methods[] = 
{
  &LiteResultSetMetaData_method_GetClass__L_acdk_lang_RClass_,
  &LiteResultSetMetaData_method_LiteResultSetMetaData_INLRLiteTable__LRLiteResultSetMetaData_,
  &LiteResultSetMetaData_method_getCatalogName_I_LRString_,
  &LiteResultSetMetaData_method_getColumnClassName_I_LRString_,
  &LiteResultSetMetaData_method_getColumnCount__I,
  &LiteResultSetMetaData_method_getColumnDisplaySize_I_I,
  &LiteResultSetMetaData_method_getColumnLabel_I_LRString_,
  &LiteResultSetMetaData_method_getColumnName_I_LRString_,
  &LiteResultSetMetaData_method_getColumnType_I_I,
  &LiteResultSetMetaData_method_getColumnTypeName_I_LRString_,
  &LiteResultSetMetaData_method_getPrecision_I_I,
  &LiteResultSetMetaData_method_getScale_I_I,
  &LiteResultSetMetaData_method_getSchemaName_I_LRString_,
  &LiteResultSetMetaData_method_getTableName_I_LRString_,
  &LiteResultSetMetaData_method_isAutoIncrement_I_Z,
  &LiteResultSetMetaData_method_isCaseSensitive_I_Z,
  &LiteResultSetMetaData_method_isCurrency_I_Z,
  &LiteResultSetMetaData_method_isDefinitelyWritable_I_Z,
  &LiteResultSetMetaData_method_isNullable_I_I,
  &LiteResultSetMetaData_method_isReadOnly_I_Z,
  &LiteResultSetMetaData_method_isSearchable_I_Z,
  &LiteResultSetMetaData_method_isSigned_I_Z,
  &LiteResultSetMetaData_method_isWritable_I_Z,
  0
};


struct LiteResultSetMetaData_MetaInfoInitializer
{  LiteResultSetMetaData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteResultSetMetaData::clazzInfo();
    ci->fields =  _LiteResultSetMetaData_fields;
    ci->methods =  _LiteResultSetMetaData_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteResultSetMetaData_MetaInfoInitializer LiteResultSetMetaData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteStatement_create_array(int length)
{
  return new ObjectArrayImpl<RLiteStatement>(length);
}

//static
::acdk::lang::RObject
LiteStatement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteStatement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteStatement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_LiteStatement_INLRLiteConnection__LRLiteStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LiteStatement((RLiteConnection)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_addBatch_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::addBatch((RString)args[0].getObjectVar());
    else
        This->addBatch((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_cancel__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::cancel();
    else
        This->cancel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_clearBatch__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::clearBatch();
    else
        This->clearBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::clearWarnings();
    else
        This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_execute_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::execute((RString)args[0].getObjectVar());
    else
      ret = This->execute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_executeBatch__LRintArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteStatement::executeBatch();
    else
        ret = (::acdk::lang::RObject)This->executeBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_executeQuery_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteStatement::executeQuery((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->executeQuery((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_executeUpdate_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::executeUpdate((RString)args[0].getObjectVar());
    else
      ret = This->executeUpdate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteStatement::getConnection();
    else
        ret = (::acdk::lang::RObject)This->getConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getFetchDirection__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getFetchDirection();
    else
      ret = This->getFetchDirection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getFetchSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getFetchSize();
    else
      ret = This->getFetchSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getMaxFieldSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getMaxFieldSize();
    else
      ret = This->getMaxFieldSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getMaxRows__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getMaxRows();
    else
      ret = This->getMaxRows();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getMoreResults__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getMoreResults();
    else
      ret = This->getMoreResults();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getQueryTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getQueryTimeout();
    else
      ret = This->getQueryTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getResultSet__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteStatement::getResultSet();
    else
        ret = (::acdk::lang::RObject)This->getResultSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getResultSetConcurrency__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getResultSetConcurrency();
    else
      ret = This->getResultSetConcurrency();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getResultSetType__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getResultSetType();
    else
      ret = This->getResultSetType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getUpdateCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteStatement::getUpdateCount();
    else
      ret = This->getUpdateCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_getWarnings__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteStatement::getWarnings();
    else
        ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_setCursorName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::setCursorName((RString)args[0].getObjectVar());
    else
        This->setCursorName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_setEscapeProcessing_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::setEscapeProcessing(args[0].getBoolVar());
    else
        This->setEscapeProcessing(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_setFetchDirection_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::setFetchDirection(args[0].getIntVar());
    else
        This->setFetchDirection(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_setFetchSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::setFetchSize(args[0].getIntVar());
    else
        This->setFetchSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_setMaxFieldSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::setMaxFieldSize(args[0].getIntVar());
    else
        This->setMaxFieldSize(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_setMaxRows_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::setMaxRows(args[0].getIntVar());
    else
        This->setMaxRows(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteStatement_method_setQueryTimeout_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteStatement::setQueryTimeout(args[0].getIntVar());
    else
        This->setQueryTimeout(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteStatement_fields__con_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_con, flags);
    else
      This->_con = (RLiteConnection)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteStatement_fields__rset_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rset, flags);
    else
      This->_rset = (RResultSet)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteStatement_fields__updateCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteStatement* This = dmi_cast<LiteStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_updateCount, flags);
    else
      This->_updateCount = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LiteStatement_fields__con = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_con", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo(),
  LiteStatement_MetainfoWrapper::LiteStatement_fields__con_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteStatement_fields__rset = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rset", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(),
  LiteStatement_MetainfoWrapper::LiteStatement_fields__rset_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteStatement_fields__updateCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_updateCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LiteStatement_MetainfoWrapper::LiteStatement_fields__updateCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteStatement_fields[] = 
{
  &LiteStatement_fields__con,
  &LiteStatement_fields__rset,
  &LiteStatement_fields__updateCount,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_t_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteStatement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_LiteStatement_INLRLiteConnection__LRLiteStatement__arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_LiteStatement_INLRLiteConnection__LRLiteStatement__args[] = 
{
  &LiteStatement_methods_LiteStatement_INLRLiteConnection__LRLiteStatement__arg_con,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_LiteStatement_INLRLiteConnection__LRLiteStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_LiteStatement_INLRLiteConnection__LRLiteStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LiteStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LiteStatement::clazzInfo(), // return type
  "_0_LiteStatement", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_LiteStatement_INLRLiteConnection__LRLiteStatement__args, // the arguments
  0, //arguments count
  LiteStatement_methods_LiteStatement_INLRLiteConnection__LRLiteStatement__exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_LiteStatement_INLRLiteConnection__LRLiteStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_addBatch_INLRString__V_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_addBatch_INLRString__V_args[] = 
{
  &LiteStatement_methods_addBatch_INLRString__V_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_addBatch_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_addBatch_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_addBatch", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_addBatch_INLRString__V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_addBatch_INLRString__V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_addBatch_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_cancel__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_cancel__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_cancel__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "cancel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_cancel", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_cancel__V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_cancel__V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_cancel__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_clearBatch__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_clearBatch__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_clearBatch__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_clearBatch", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_clearBatch__V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_clearBatch__V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_clearBatch__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_clearWarnings__V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_close__V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_close__V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_execute_INLRString__Z_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_execute_INLRString__Z_args[] = 
{
  &LiteStatement_methods_execute_INLRString__Z_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_execute_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_execute_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_execute", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_execute_INLRString__Z_args, // the arguments
  0, //arguments count
  LiteStatement_methods_execute_INLRString__Z_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_execute_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_executeBatch__LRintArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_executeBatch__LRintArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_executeBatch__LRintArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo(), // return type
  "_7_executeBatch", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_executeBatch__LRintArray__args, // the arguments
  0, //arguments count
  LiteStatement_methods_executeBatch__LRintArray__exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_executeBatch__LRintArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_executeQuery_INLRString__LRResultSet__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_executeQuery_INLRString__LRResultSet__args[] = 
{
  &LiteStatement_methods_executeQuery_INLRString__LRResultSet__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_executeQuery_INLRString__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_executeQuery_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeQuery", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_8_executeQuery", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_executeQuery_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteStatement_methods_executeQuery_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_executeQuery_INLRString__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_executeUpdate_INLRString__I_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_executeUpdate_INLRString__I_args[] = 
{
  &LiteStatement_methods_executeUpdate_INLRString__I_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_executeUpdate_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_executeUpdate_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_executeUpdate_INLRString__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_executeUpdate_INLRString__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_executeUpdate_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getConnection__LRConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_a_getConnection", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getConnection__LRConnection__args, // the arguments
  0, //arguments count
  LiteStatement_methods_getConnection__LRConnection__exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getConnection__LRConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getFetchDirection__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getFetchDirection__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getFetchDirection__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getFetchDirection__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getFetchDirection__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getFetchDirection__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getFetchSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getFetchSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getFetchSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getFetchSize", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getFetchSize__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getFetchSize__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getFetchSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getMaxFieldSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getMaxFieldSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getMaxFieldSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxFieldSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_getMaxFieldSize", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getMaxFieldSize__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getMaxFieldSize__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getMaxFieldSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getMaxRows__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getMaxRows__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getMaxRows__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getMaxRows", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getMaxRows__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getMaxRows__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getMaxRows__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getMoreResults__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getMoreResults__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getMoreResults__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMoreResults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_getMoreResults", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getMoreResults__Z_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getMoreResults__Z_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getMoreResults__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getQueryTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getQueryTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getQueryTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getQueryTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getQueryTimeout", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getQueryTimeout__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getQueryTimeout__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getQueryTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getResultSet__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getResultSet__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getResultSet__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_h_getResultSet", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getResultSet__LRResultSet__args, // the arguments
  0, //arguments count
  LiteStatement_methods_getResultSet__LRResultSet__exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getResultSet__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getResultSetConcurrency__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getResultSetConcurrency__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getResultSetConcurrency__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSetConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getResultSetConcurrency", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getResultSetConcurrency__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getResultSetConcurrency__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getResultSetConcurrency__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getResultSetType__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getResultSetType__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getResultSetType__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResultSetType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_getResultSetType", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getResultSetType__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getResultSetType__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getResultSetType__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getUpdateCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getUpdateCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getUpdateCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUpdateCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_getUpdateCount", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getUpdateCount__I_args, // the arguments
  0, //arguments count
  LiteStatement_methods_getUpdateCount__I_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getUpdateCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_getWarnings__LRSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_getWarnings__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_getWarnings__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLWarning::clazzInfo(), // return type
  "_l_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_getWarnings__LRSQLWarning__args, // the arguments
  0, //arguments count
  LiteStatement_methods_getWarnings__LRSQLWarning__exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_getWarnings__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_setCursorName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_setCursorName_INLRString__V_args[] = 
{
  &LiteStatement_methods_setCursorName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_setCursorName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_setCursorName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCursorName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setCursorName", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_setCursorName_INLRString__V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_setCursorName_INLRString__V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_setCursorName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_setEscapeProcessing_Z_V_arg_enable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "enable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_setEscapeProcessing_Z_V_args[] = 
{
  &LiteStatement_methods_setEscapeProcessing_Z_V_arg_enable,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_setEscapeProcessing_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_setEscapeProcessing_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEscapeProcessing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setEscapeProcessing", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_setEscapeProcessing_Z_V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_setEscapeProcessing_Z_V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_setEscapeProcessing_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_setFetchDirection_I_V_arg_direction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "direction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_setFetchDirection_I_V_args[] = 
{
  &LiteStatement_methods_setFetchDirection_I_V_arg_direction,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_setFetchDirection_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_setFetchDirection_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchDirection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setFetchDirection", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_setFetchDirection_I_V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_setFetchDirection_I_V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_setFetchDirection_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_setFetchSize_I_V_arg_rows = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rows", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_setFetchSize_I_V_args[] = 
{
  &LiteStatement_methods_setFetchSize_I_V_arg_rows,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_setFetchSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_setFetchSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFetchSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setFetchSize", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_setFetchSize_I_V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_setFetchSize_I_V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_setFetchSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_setMaxFieldSize_I_V_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_setMaxFieldSize_I_V_args[] = 
{
  &LiteStatement_methods_setMaxFieldSize_I_V_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_setMaxFieldSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_setMaxFieldSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxFieldSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setMaxFieldSize", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_setMaxFieldSize_I_V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_setMaxFieldSize_I_V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_setMaxFieldSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_setMaxRows_I_V_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_setMaxRows_I_V_args[] = 
{
  &LiteStatement_methods_setMaxRows_I_V_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_setMaxRows_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_setMaxRows_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxRows", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setMaxRows", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_setMaxRows_I_V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_setMaxRows_I_V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_setMaxRows_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteStatement_methods_setQueryTimeout_I_V_arg_seconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteStatement_methods_setQueryTimeout_I_V_args[] = 
{
  &LiteStatement_methods_setQueryTimeout_I_V_arg_seconds,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteStatement_methods_setQueryTimeout_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteStatement_method_setQueryTimeout_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setQueryTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setQueryTimeout", // alternative name of method
  -1, // altlabelHashCode
  LiteStatement_methods_setQueryTimeout_I_V_args, // the arguments
  0, //arguments count
  LiteStatement_methods_setQueryTimeout_I_V_exceptions, // the declared exceptions
  LiteStatement_MetainfoWrapper::LiteStatement_method_setQueryTimeout_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteStatement_methods[] = 
{
  &LiteStatement_method_GetClass__L_acdk_lang_RClass_,
  &LiteStatement_method_LiteStatement_INLRLiteConnection__LRLiteStatement_,
  &LiteStatement_method_addBatch_INLRString__V,
  &LiteStatement_method_cancel__V,
  &LiteStatement_method_clearBatch__V,
  &LiteStatement_method_clearWarnings__V,
  &LiteStatement_method_close__V,
  &LiteStatement_method_execute_INLRString__Z,
  &LiteStatement_method_executeBatch__LRintArray_,
  &LiteStatement_method_executeQuery_INLRString__LRResultSet_,
  &LiteStatement_method_executeUpdate_INLRString__I,
  &LiteStatement_method_getConnection__LRConnection_,
  &LiteStatement_method_getFetchDirection__I,
  &LiteStatement_method_getFetchSize__I,
  &LiteStatement_method_getMaxFieldSize__I,
  &LiteStatement_method_getMaxRows__I,
  &LiteStatement_method_getMoreResults__Z,
  &LiteStatement_method_getQueryTimeout__I,
  &LiteStatement_method_getResultSet__LRResultSet_,
  &LiteStatement_method_getResultSetConcurrency__I,
  &LiteStatement_method_getResultSetType__I,
  &LiteStatement_method_getUpdateCount__I,
  &LiteStatement_method_getWarnings__LRSQLWarning_,
  &LiteStatement_method_setCursorName_INLRString__V,
  &LiteStatement_method_setEscapeProcessing_Z_V,
  &LiteStatement_method_setFetchDirection_I_V,
  &LiteStatement_method_setFetchSize_I_V,
  &LiteStatement_method_setMaxFieldSize_I_V,
  &LiteStatement_method_setMaxRows_I_V,
  &LiteStatement_method_setQueryTimeout_I_V,
  0
};


struct LiteStatement_MetaInfoInitializer
{  LiteStatement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteStatement::clazzInfo();
    ci->fields =  _LiteStatement_fields;
    ci->methods =  _LiteStatement_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteStatement_MetaInfoInitializer LiteStatement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteDb_create_array(int length)
{
  return new ObjectArrayImpl<RLiteDb>(length);
}

//static
::acdk::lang::RObject
LiteDb_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteDb_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteDb::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method__checkOpenDb__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteDb::_checkOpenDb();
    else
        This->_checkOpenDb();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_changes__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDb::changes();
    else
      ret = This->changes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_checkLastResult__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteDb::checkLastResult();
    else
        This->checkLastResult();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_checkResult_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDb::checkResult(args[0].getIntVar());
    else
      ret = This->checkResult(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_closeDb__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteDb::closeDb();
    else
        This->closeDb();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteDb::createSqlFunction((RString)args[0].getObjectVar(), args[1].getIntVar(), (acdk::lang::dmi::RDmiDelegate)args[2].getObjectVar());
    else
        This->createSqlFunction((RString)args[0].getObjectVar(), args[1].getIntVar(), (acdk::lang::dmi::RDmiDelegate)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_execDirect_INLRString__LRLiteMemTable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDb::execDirect((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->execDirect((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_execute_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteDb::execute((RString)args[0].getObjectVar());
    else
        This->execute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteDb::execute((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiDelegate)args[1].getObjectVar());
    else
        This->execute((RString)args[0].getObjectVar(), (acdk::lang::dmi::RDmiDelegate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_executeUpdate_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDb::executeUpdate((RString)args[0].getObjectVar());
    else
      ret = This->executeUpdate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_getVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteDb::getVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_isClosed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDb::isClosed();
    else
      ret = This->isClosed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_openDb_INLRString__LRLiteDb__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteDb::openDb((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDb_method_prepareStatement_INLRString__LRLiteTable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDb* This = dmi_cast<LiteDb>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDb::prepareStatement((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->prepareStatement((RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteDb_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteDb_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods__checkOpenDb__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods__checkOpenDb__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method__checkOpenDb__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkOpenDb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d__checkOpenDb", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods__checkOpenDb__V_args, // the arguments
  0, //arguments count
  LiteDb_methods__checkOpenDb__V_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method__checkOpenDb__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_changes__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_changes__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_changes__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "changes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_changes", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_changes__I_args, // the arguments
  0, //arguments count
  LiteDb_methods_changes__I_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_changes__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_checkLastResult__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_checkLastResult__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_checkLastResult__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkLastResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_checkLastResult", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_checkLastResult__V_args, // the arguments
  0, //arguments count
  LiteDb_methods_checkLastResult__V_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_checkLastResult__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_checkResult_I_I_arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_checkResult_I_I_args[] = 
{
  &LiteDb_methods_checkResult_I_I_arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_checkResult_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_checkResult_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_checkResult", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_checkResult_I_I_args, // the arguments
  0, //arguments count
  LiteDb_methods_checkResult_I_I_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_checkResult_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_closeDb__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_closeDb__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_closeDb__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "closeDb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_closeDb", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_closeDb__V_args, // the arguments
  0, //arguments count
  LiteDb_methods_closeDb__V_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_closeDb__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_arg_function = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "function", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_arg_delegate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delegate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_args[] = 
{
  &LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_arg_function,
  &LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_arg_args,
  &LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_arg_delegate,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createSqlFunction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_createSqlFunction", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_args, // the arguments
  0, //arguments count
  LiteDb_methods_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_execDirect_INLRString__LRLiteMemTable__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_execDirect_INLRString__LRLiteMemTable__args[] = 
{
  &LiteDb_methods_execDirect_INLRString__LRLiteMemTable__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_execDirect_INLRString__LRLiteMemTable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_execDirect_INLRString__LRLiteMemTable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execDirect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteMemTable::clazzInfo(), // return type
  "_3_execDirect", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_execDirect_INLRString__LRLiteMemTable__args, // the arguments
  0, //arguments count
  LiteDb_methods_execDirect_INLRString__LRLiteMemTable__exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_execDirect_INLRString__LRLiteMemTable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_execute_INLRString__V_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_execute_INLRString__V_args[] = 
{
  &LiteDb_methods_execute_INLRString__V_arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_execute_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_execute_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_execute", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_execute_INLRString__V_args, // the arguments
  0, //arguments count
  LiteDb_methods_execute_INLRString__V_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_execute_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_arg_delegate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delegate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiDelegate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_args[] = 
{
  &LiteDb_methods_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_arg_sql,
  &LiteDb_methods_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_arg_delegate,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_execute", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_args, // the arguments
  0, //arguments count
  LiteDb_methods_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_executeUpdate_INLRString__I_arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_executeUpdate_INLRString__I_args[] = 
{
  &LiteDb_methods_executeUpdate_INLRString__I_arg_cmd,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_executeUpdate_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_executeUpdate_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_executeUpdate_INLRString__I_args, // the arguments
  0, //arguments count
  LiteDb_methods_executeUpdate_INLRString__I_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_executeUpdate_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_getVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_getVersion__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_getVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getVersion", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_getVersion__LRString__args, // the arguments
  0, //arguments count
  LiteDb_methods_getVersion__LRString__exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_getVersion__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_isClosed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_isClosed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_isClosed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClosed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isClosed", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_isClosed__Z_args, // the arguments
  0, //arguments count
  LiteDb_methods_isClosed__Z_exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_isClosed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_openDb_INLRString__LRLiteDb__arg_fileName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_openDb_INLRString__LRLiteDb__args[] = 
{
  &LiteDb_methods_openDb_INLRString__LRLiteDb__arg_fileName,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_openDb_INLRString__LRLiteDb__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_openDb_INLRString__LRLiteDb_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "openDb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteDb::clazzInfo(), // return type
  "_0_openDb", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_openDb_INLRString__LRLiteDb__args, // the arguments
  0, //arguments count
  LiteDb_methods_openDb_INLRString__LRLiteDb__exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_openDb_INLRString__LRLiteDb__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDb_methods_prepareStatement_INLRString__LRLiteTable__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDb_methods_prepareStatement_INLRString__LRLiteTable__args[] = 
{
  &LiteDb_methods_prepareStatement_INLRString__LRLiteTable__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDb_methods_prepareStatement_INLRString__LRLiteTable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDb_method_prepareStatement_INLRString__LRLiteTable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepareStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteTable::clazzInfo(), // return type
  "_7_prepareStatement", // alternative name of method
  -1, // altlabelHashCode
  LiteDb_methods_prepareStatement_INLRString__LRLiteTable__args, // the arguments
  0, //arguments count
  LiteDb_methods_prepareStatement_INLRString__LRLiteTable__exceptions, // the declared exceptions
  LiteDb_MetainfoWrapper::LiteDb_method_prepareStatement_INLRString__LRLiteTable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteDb_methods[] = 
{
  &LiteDb_method_GetClass__L_acdk_lang_RClass_,
  &LiteDb_method__checkOpenDb__V,
  &LiteDb_method_changes__I,
  &LiteDb_method_checkLastResult__V,
  &LiteDb_method_checkResult_I_I,
  &LiteDb_method_closeDb__V,
  &LiteDb_method_createSqlFunction_INLRString_IINLacdk_lang_dmi_RDmiDelegate__V,
  &LiteDb_method_execDirect_INLRString__LRLiteMemTable_,
  &LiteDb_method_execute_INLRString__V,
  &LiteDb_method_execute_INLRString_INLacdk_lang_dmi_RDmiDelegate__V,
  &LiteDb_method_executeUpdate_INLRString__I,
  &LiteDb_method_getVersion__LRString_,
  &LiteDb_method_isClosed__Z,
  &LiteDb_method_openDb_INLRString__LRLiteDb_,
  &LiteDb_method_prepareStatement_INLRString__LRLiteTable_,
  0
};


struct LiteDb_MetaInfoInitializer
{  LiteDb_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteDb::clazzInfo();
    ci->fields =  _LiteDb_fields;
    ci->methods =  _LiteDb_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteDb_MetaInfoInitializer LiteDb_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteTable_create_array(int length)
{
  return new ObjectArrayImpl<RLiteTable>(length);
}

//static
::acdk::lang::RObject
LiteTable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteTable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteTable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_bindBlob_IINLRReadByteBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::bindBlob(args[0].getIntVar(), (RReadByteBuffer)args[1].getObjectVar());
    else
        This->bindBlob(args[0].getIntVar(), (RReadByteBuffer)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_bindDouble_ID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::bindDouble(args[0].getIntVar(), args[1].getDoubleVar());
    else
        This->bindDouble(args[0].getIntVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_bindInt_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::bindInt(args[0].getIntVar(), args[1].getIntVar());
    else
        This->bindInt(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_bindLong_IJ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::bindLong(args[0].getIntVar(), args[1].getLongVar());
    else
        This->bindLong(args[0].getIntVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_bindNull_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::bindNull(args[0].getIntVar());
    else
        This->bindNull(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_bindText_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::bindText(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->bindText(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_checkLastResult__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::checkLastResult();
    else
        This->checkLastResult();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_checkResult_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::checkResult(args[0].getIntVar());
    else
      ret = This->checkResult(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_clearParameters__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::clearParameters();
    else
        This->clearParameters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_colCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::colCount();
    else
      ret = This->colCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_curRow__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::curRow();
    else
      ret = This->curRow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getBlob_I_LRFlexByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::getBlob(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getBlob(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getBoolean_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getBoolean(args[0].getIntVar());
    else
      ret = This->getBoolean(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getByte_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getByte(args[0].getIntVar());
    else
      ret = This->getByte(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getColName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::getColName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getColumnByName_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getColumnByName((RString)args[0].getObjectVar());
    else
      ret = This->getColumnByName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getColumnClassName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::getColumnClassName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnClassName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getDb__LRLiteDb__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::getDb();
    else
        ret = (::acdk::lang::RObject)This->getDb();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getDouble_I_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getDouble(args[0].getIntVar());
    else
      ret = This->getDouble(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getFloat_I_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getFloat(args[0].getIntVar());
    else
      ret = This->getFloat(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getInt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getInt(args[0].getIntVar());
    else
      ret = This->getInt(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getLiteType_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getLiteType(args[0].getIntVar());
    else
      ret = This->getLiteType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getLong_I_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getLong(args[0].getIntVar());
    else
      ret = This->getLong(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getNext();
    else
      ret = This->getNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getParameterCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getParameterCount();
    else
      ret = This->getParameterCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getParameterName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::getParameterName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getParameterName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getParamterIndexByName_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getParamterIndexByName((RString)args[0].getObjectVar());
    else
      ret = This->getParamterIndexByName((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getSQLTypeName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::getSQLTypeName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getSQLTypeName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getShort_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getShort(args[0].getIntVar());
    else
      ret = This->getShort(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getSqlType_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::getSqlType(args[0].getIntVar());
    else
      ret = This->getSqlType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_getString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::getString(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getString(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteTable::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteTable::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_seek_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::seek(args[0].getIntVar());
    else
      ret = This->seek(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteTable_method_seekEnd__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteTable::seekEnd();
    else
      ret = This->seekEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteTable_fields__currow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_currow, flags);
    else
      This->_currow = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteTable_fields__db_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_db, flags);
    else
      This->_db = (RLiteDb)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteTable_fields__hasRow_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_hasRow, flags);
    else
      This->_hasRow = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteTable_fields__rowCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rowCount, flags);
    else
      This->_rowCount = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteTable_fields__rowDelivered_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteTable* This = dmi_cast<LiteTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rowDelivered, flags);
    else
      This->_rowDelivered = var.getBoolVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LiteTable_fields__currow = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_currow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LiteTable_MetainfoWrapper::LiteTable_fields__currow_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteTable_fields__db = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_db", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteDb::clazzInfo(),
  LiteTable_MetainfoWrapper::LiteTable_fields__db_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteTable_fields__hasRow = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_hasRow", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LiteTable_MetainfoWrapper::LiteTable_fields__hasRow_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteTable_fields__rowCount = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rowCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LiteTable_MetainfoWrapper::LiteTable_fields__rowCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteTable_fields__rowDelivered = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rowDelivered", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LiteTable_MetainfoWrapper::LiteTable_fields__rowDelivered_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteTable_fields[] = 
{
  &LiteTable_fields__currow,
  &LiteTable_fields__db,
  &LiteTable_fields__hasRow,
  &LiteTable_fields__rowCount,
  &LiteTable_fields__rowDelivered,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_C_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteTable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindBlob_IINLRReadByteBuffer__V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindBlob_IINLRReadByteBuffer__V_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_bindBlob_IINLRReadByteBuffer__V_args[] = 
{
  &LiteTable_methods_bindBlob_IINLRReadByteBuffer__V_arg_col,
  &LiteTable_methods_bindBlob_IINLRReadByteBuffer__V_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_bindBlob_IINLRReadByteBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_bindBlob_IINLRReadByteBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_bindBlob", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_bindBlob_IINLRReadByteBuffer__V_args, // the arguments
  0, //arguments count
  LiteTable_methods_bindBlob_IINLRReadByteBuffer__V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_bindBlob_IINLRReadByteBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindDouble_ID_V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindDouble_ID_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_bindDouble_ID_V_args[] = 
{
  &LiteTable_methods_bindDouble_ID_V_arg_col,
  &LiteTable_methods_bindDouble_ID_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_bindDouble_ID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_bindDouble_ID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_bindDouble", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_bindDouble_ID_V_args, // the arguments
  0, //arguments count
  LiteTable_methods_bindDouble_ID_V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_bindDouble_ID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindInt_II_V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindInt_II_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_bindInt_II_V_args[] = 
{
  &LiteTable_methods_bindInt_II_V_arg_col,
  &LiteTable_methods_bindInt_II_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_bindInt_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_bindInt_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_bindInt", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_bindInt_II_V_args, // the arguments
  0, //arguments count
  LiteTable_methods_bindInt_II_V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_bindInt_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindLong_IJ_V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindLong_IJ_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_bindLong_IJ_V_args[] = 
{
  &LiteTable_methods_bindLong_IJ_V_arg_col,
  &LiteTable_methods_bindLong_IJ_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_bindLong_IJ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_bindLong_IJ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_bindLong", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_bindLong_IJ_V_args, // the arguments
  0, //arguments count
  LiteTable_methods_bindLong_IJ_V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_bindLong_IJ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindNull_I_V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_bindNull_I_V_args[] = 
{
  &LiteTable_methods_bindNull_I_V_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_bindNull_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_bindNull_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_bindNull", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_bindNull_I_V_args, // the arguments
  0, //arguments count
  LiteTable_methods_bindNull_I_V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_bindNull_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindText_IINLRString__V_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_bindText_IINLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_bindText_IINLRString__V_args[] = 
{
  &LiteTable_methods_bindText_IINLRString__V_arg_col,
  &LiteTable_methods_bindText_IINLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_bindText_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_bindText_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bindText", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_bindText", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_bindText_IINLRString__V_args, // the arguments
  0, //arguments count
  LiteTable_methods_bindText_IINLRString__V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_bindText_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_checkLastResult__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_checkLastResult__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_checkLastResult__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkLastResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_checkLastResult", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_checkLastResult__V_args, // the arguments
  0, //arguments count
  LiteTable_methods_checkLastResult__V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_checkLastResult__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_checkResult_I_I_arg_res = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "res", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_checkResult_I_I_args[] = 
{
  &LiteTable_methods_checkResult_I_I_arg_res,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_checkResult_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_checkResult_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "checkResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_checkResult", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_checkResult_I_I_args, // the arguments
  0, //arguments count
  LiteTable_methods_checkResult_I_I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_checkResult_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_clearParameters__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_clearParameters__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_clearParameters__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearParameters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_clearParameters", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_clearParameters__V_args, // the arguments
  0, //arguments count
  LiteTable_methods_clearParameters__V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_clearParameters__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_colCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_colCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_colCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "colCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_colCount", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_colCount__I_args, // the arguments
  0, //arguments count
  LiteTable_methods_colCount__I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_colCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_curRow__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_curRow__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_curRow__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "curRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_curRow", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_curRow__I_args, // the arguments
  0, //arguments count
  LiteTable_methods_curRow__I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_curRow__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_element", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_element__LRObject__args, // the arguments
  0, //arguments count
  LiteTable_methods_element__LRObject__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getBlob_I_LRFlexByteBuffer__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getBlob_I_LRFlexByteBuffer__args[] = 
{
  &LiteTable_methods_getBlob_I_LRFlexByteBuffer__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getBlob_I_LRFlexByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getBlob_I_LRFlexByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFlexByteBuffer::clazzInfo(), // return type
  "_k_getBlob", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getBlob_I_LRFlexByteBuffer__args, // the arguments
  0, //arguments count
  LiteTable_methods_getBlob_I_LRFlexByteBuffer__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getBlob_I_LRFlexByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getBoolean_I_Z_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getBoolean_I_Z_args[] = 
{
  &LiteTable_methods_getBoolean_I_Z_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getBoolean_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getBoolean_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getBoolean_I_Z_args, // the arguments
  0, //arguments count
  LiteTable_methods_getBoolean_I_Z_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getBoolean_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getByte_I_B_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getByte_I_B_args[] = 
{
  &LiteTable_methods_getByte_I_B_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getByte_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getByte_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_d_getByte", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getByte_I_B_args, // the arguments
  0, //arguments count
  LiteTable_methods_getByte_I_B_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getByte_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getColName_I_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getColName_I_LRString__args[] = 
{
  &LiteTable_methods_getColName_I_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getColName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getColName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getColName", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getColName_I_LRString__args, // the arguments
  0, //arguments count
  LiteTable_methods_getColName_I_LRString__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getColName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getColumnByName_INLRString__I_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getColumnByName_INLRString__I_args[] = 
{
  &LiteTable_methods_getColumnByName_INLRString__I_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getColumnByName_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getColumnByName_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnByName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_getColumnByName", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getColumnByName_INLRString__I_args, // the arguments
  0, //arguments count
  LiteTable_methods_getColumnByName_INLRString__I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getColumnByName_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getColumnClassName_I_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getColumnClassName_I_LRString__args[] = 
{
  &LiteTable_methods_getColumnClassName_I_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getColumnClassName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getColumnClassName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnClassName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_getColumnClassName", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getColumnClassName_I_LRString__args, // the arguments
  0, //arguments count
  LiteTable_methods_getColumnClassName_I_LRString__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getColumnClassName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getDb__LRLiteDb__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getDb__LRLiteDb__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getDb__LRLiteDb_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteDb::clazzInfo(), // return type
  "_6_getDb", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getDb__LRLiteDb__args, // the arguments
  0, //arguments count
  LiteTable_methods_getDb__LRLiteDb__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getDb__LRLiteDb__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getDouble_I_D_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getDouble_I_D_args[] = 
{
  &LiteTable_methods_getDouble_I_D_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getDouble_I_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getDouble_I_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_i_getDouble", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getDouble_I_D_args, // the arguments
  0, //arguments count
  LiteTable_methods_getDouble_I_D_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getDouble_I_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getFloat_I_F_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getFloat_I_F_args[] = 
{
  &LiteTable_methods_getFloat_I_F_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getFloat_I_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getFloat_I_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_h_getFloat", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getFloat_I_F_args, // the arguments
  0, //arguments count
  LiteTable_methods_getFloat_I_F_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getFloat_I_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getInt_I_I_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getInt_I_I_args[] = 
{
  &LiteTable_methods_getInt_I_I_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getInt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getInt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getInt", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getInt_I_I_args, // the arguments
  0, //arguments count
  LiteTable_methods_getInt_I_I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getInt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getLiteType_I_I_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getLiteType_I_I_args[] = 
{
  &LiteTable_methods_getLiteType_I_I_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getLiteType_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getLiteType_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLiteType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getLiteType", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getLiteType_I_I_args, // the arguments
  0, //arguments count
  LiteTable_methods_getLiteType_I_I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getLiteType_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getLong_I_J_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getLong_I_J_args[] = 
{
  &LiteTable_methods_getLong_I_J_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getLong_I_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getLong_I_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_g_getLong", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getLong_I_J_args, // the arguments
  0, //arguments count
  LiteTable_methods_getLong_I_J_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getLong_I_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_getNext", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getNext__Z_args, // the arguments
  0, //arguments count
  LiteTable_methods_getNext__Z_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getParameterCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getParameterCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getParameterCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameterCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_x_getParameterCount", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getParameterCount__I_args, // the arguments
  0, //arguments count
  LiteTable_methods_getParameterCount__I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getParameterCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getParameterName_I_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getParameterName_I_LRString__args[] = 
{
  &LiteTable_methods_getParameterName_I_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getParameterName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getParameterName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameterName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_y_getParameterName", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getParameterName_I_LRString__args, // the arguments
  0, //arguments count
  LiteTable_methods_getParameterName_I_LRString__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getParameterName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getParamterIndexByName_INLRString__I_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getParamterIndexByName_INLRString__I_args[] = 
{
  &LiteTable_methods_getParamterIndexByName_INLRString__I_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getParamterIndexByName_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getParamterIndexByName_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParamterIndexByName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_z_getParamterIndexByName", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getParamterIndexByName_INLRString__I_args, // the arguments
  0, //arguments count
  LiteTable_methods_getParamterIndexByName_INLRString__I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getParamterIndexByName_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getSQLTypeName_I_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getSQLTypeName_I_LRString__args[] = 
{
  &LiteTable_methods_getSQLTypeName_I_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getSQLTypeName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getSQLTypeName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSQLTypeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_p_getSQLTypeName", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getSQLTypeName_I_LRString__args, // the arguments
  0, //arguments count
  LiteTable_methods_getSQLTypeName_I_LRString__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getSQLTypeName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getShort_I_S_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getShort_I_S_args[] = 
{
  &LiteTable_methods_getShort_I_S_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getShort_I_S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getShort_I_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_e_getShort", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getShort_I_S_args, // the arguments
  0, //arguments count
  LiteTable_methods_getShort_I_S_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getShort_I_S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getSqlType_I_I_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getSqlType_I_I_args[] = 
{
  &LiteTable_methods_getSqlType_I_I_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getSqlType_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getSqlType_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSqlType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_getSqlType", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getSqlType_I_I_args, // the arguments
  0, //arguments count
  LiteTable_methods_getSqlType_I_I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getSqlType_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_getString_I_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_getString_I_LRString__args[] = 
{
  &LiteTable_methods_getString_I_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_getString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_getString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getString", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_getString_I_LRString__args, // the arguments
  0, //arguments count
  LiteTable_methods_getString_I_LRString__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_getString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_hasNext", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  LiteTable_methods_hasNext__Z_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_next", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_next__LRObject__args, // the arguments
  0, //arguments count
  LiteTable_methods_next__LRObject__exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_remove", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_remove__V_args, // the arguments
  0, //arguments count
  LiteTable_methods_remove__V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_reset", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_reset__V_args, // the arguments
  0, //arguments count
  LiteTable_methods_reset__V_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteTable_methods_seek_I_Z_arg_rowCount = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rowCount", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_seek_I_Z_args[] = 
{
  &LiteTable_methods_seek_I_Z_arg_rowCount,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_seek_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_seek_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "seek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_seek", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_seek_I_Z_args, // the arguments
  0, //arguments count
  LiteTable_methods_seek_I_Z_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_seek_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteTable_methods_seekEnd__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteTable_methods_seekEnd__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteTable_method_seekEnd__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "seekEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_seekEnd", // alternative name of method
  -1, // altlabelHashCode
  LiteTable_methods_seekEnd__I_args, // the arguments
  0, //arguments count
  LiteTable_methods_seekEnd__I_exceptions, // the declared exceptions
  LiteTable_MetainfoWrapper::LiteTable_method_seekEnd__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteTable_methods[] = 
{
  &LiteTable_method_GetClass__L_acdk_lang_RClass_,
  &LiteTable_method_bindBlob_IINLRReadByteBuffer__V,
  &LiteTable_method_bindDouble_ID_V,
  &LiteTable_method_bindInt_II_V,
  &LiteTable_method_bindLong_IJ_V,
  &LiteTable_method_bindNull_I_V,
  &LiteTable_method_bindText_IINLRString__V,
  &LiteTable_method_checkLastResult__V,
  &LiteTable_method_checkResult_I_I,
  &LiteTable_method_clearParameters__V,
  &LiteTable_method_colCount__I,
  &LiteTable_method_curRow__I,
  &LiteTable_method_element__LRObject_,
  &LiteTable_method_getBlob_I_LRFlexByteBuffer_,
  &LiteTable_method_getBoolean_I_Z,
  &LiteTable_method_getByte_I_B,
  &LiteTable_method_getColName_I_LRString_,
  &LiteTable_method_getColumnByName_INLRString__I,
  &LiteTable_method_getColumnClassName_I_LRString_,
  &LiteTable_method_getDb__LRLiteDb_,
  &LiteTable_method_getDouble_I_D,
  &LiteTable_method_getFloat_I_F,
  &LiteTable_method_getInt_I_I,
  &LiteTable_method_getLiteType_I_I,
  &LiteTable_method_getLong_I_J,
  &LiteTable_method_getNext__Z,
  &LiteTable_method_getParameterCount__I,
  &LiteTable_method_getParameterName_I_LRString_,
  &LiteTable_method_getParamterIndexByName_INLRString__I,
  &LiteTable_method_getSQLTypeName_I_LRString_,
  &LiteTable_method_getShort_I_S,
  &LiteTable_method_getSqlType_I_I,
  &LiteTable_method_getString_I_LRString_,
  &LiteTable_method_hasNext__Z,
  &LiteTable_method_next__LRObject_,
  &LiteTable_method_remove__V,
  &LiteTable_method_reset__V,
  &LiteTable_method_seek_I_Z,
  &LiteTable_method_seekEnd__I,
  0
};


struct LiteTable_MetaInfoInitializer
{  LiteTable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteTable::clazzInfo();
    ci->fields =  _LiteTable_fields;
    ci->methods =  _LiteTable_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteTable_MetaInfoInitializer LiteTable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteMemTable_create_array(int length)
{
  return new ObjectArrayImpl<RLiteMemTable>(length);
}

//static
::acdk::lang::RObject
LiteMemTable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteMemTable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteMemTable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_columnCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteMemTable::columnCount();
    else
      ret = This->columnCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_getColumnName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTable::getColumnName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_getColumnNames__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTable::getColumnNames();
    else
        ret = (::acdk::lang::RObject)This->getColumnNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_getField_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTable::getField(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getField(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_getMaxColWidth_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteMemTable::getMaxColWidth(args[0].getIntVar());
    else
      ret = This->getMaxColWidth(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_getRow_I_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTable::getRow(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getRow(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_iterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTable::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_printTable_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteMemTable::printTable((acdk::io::RPrintWriter)args[0].getObjectVar());
    else
        This->printTable((acdk::io::RPrintWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTable_method_rowCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteMemTable::rowCount();
    else
      ret = This->rowCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteMemTable_fields__cols_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cols, flags);
    else
      This->_cols = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteMemTable_fields__rows_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteMemTable* This = dmi_cast<LiteMemTable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rows, flags);
    else
      This->_rows = var.getIntVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LiteMemTable_fields__cols = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cols", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LiteMemTable_MetainfoWrapper::LiteMemTable_fields__cols_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteMemTable_fields__rows = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rows", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LiteMemTable_MetainfoWrapper::LiteMemTable_fields__rows_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteMemTable_fields[] = 
{
  &LiteMemTable_fields__cols,
  &LiteMemTable_fields__rows,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteMemTable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_columnCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_columnCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_columnCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "columnCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_columnCount", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_columnCount__I_args, // the arguments
  0, //arguments count
  LiteMemTable_methods_columnCount__I_exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_columnCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTable_methods_getColumnName_I_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_getColumnName_I_LRString__args[] = 
{
  &LiteMemTable_methods_getColumnName_I_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_getColumnName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_getColumnName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getColumnName", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_getColumnName_I_LRString__args, // the arguments
  0, //arguments count
  LiteMemTable_methods_getColumnName_I_LRString__exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_getColumnName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_getColumnNames__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_getColumnNames__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_getColumnNames__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_2_getColumnNames", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_getColumnNames__LRStringArray__args, // the arguments
  0, //arguments count
  LiteMemTable_methods_getColumnNames__LRStringArray__exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_getColumnNames__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTable_methods_getField_II_LRString__arg_row = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "row", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTable_methods_getField_II_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_getField_II_LRString__args[] = 
{
  &LiteMemTable_methods_getField_II_LRString__arg_row,
  &LiteMemTable_methods_getField_II_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_getField_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_getField_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getField", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_getField_II_LRString__args, // the arguments
  0, //arguments count
  LiteMemTable_methods_getField_II_LRString__exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_getField_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTable_methods_getMaxColWidth_I_I_arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_getMaxColWidth_I_I_args[] = 
{
  &LiteMemTable_methods_getMaxColWidth_I_I_arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_getMaxColWidth_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_getMaxColWidth_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColWidth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_getMaxColWidth", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_getMaxColWidth_I_I_args, // the arguments
  0, //arguments count
  LiteMemTable_methods_getMaxColWidth_I_I_exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_getMaxColWidth_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTable_methods_getRow_I_LRStringArray__arg_row = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "row", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_getRow_I_LRStringArray__args[] = 
{
  &LiteMemTable_methods_getRow_I_LRStringArray__arg_row,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_getRow_I_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_getRow_I_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_6_getRow", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_getRow_I_LRStringArray__args, // the arguments
  0, //arguments count
  LiteMemTable_methods_getRow_I_LRStringArray__exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_getRow_I_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_iterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_iterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_iterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_7_iterator", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_iterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  LiteMemTable_methods_iterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_iterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTable_methods_printTable_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_printTable_INLacdk_io_RPrintWriter__V_args[] = 
{
  &LiteMemTable_methods_printTable_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_printTable_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_printTable_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "printTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_printTable", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_printTable_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  LiteMemTable_methods_printTable_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_printTable_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTable_methods_rowCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTable_methods_rowCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTable_method_rowCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rowCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_rowCount", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTable_methods_rowCount__I_args, // the arguments
  0, //arguments count
  LiteMemTable_methods_rowCount__I_exceptions, // the declared exceptions
  LiteMemTable_MetainfoWrapper::LiteMemTable_method_rowCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteMemTable_methods[] = 
{
  &LiteMemTable_method_GetClass__L_acdk_lang_RClass_,
  &LiteMemTable_method_columnCount__I,
  &LiteMemTable_method_getColumnName_I_LRString_,
  &LiteMemTable_method_getColumnNames__LRStringArray_,
  &LiteMemTable_method_getField_II_LRString_,
  &LiteMemTable_method_getMaxColWidth_I_I,
  &LiteMemTable_method_getRow_I_LRStringArray_,
  &LiteMemTable_method_iterator__Lacdk_util_RIterator_,
  &LiteMemTable_method_printTable_INLacdk_io_RPrintWriter__V,
  &LiteMemTable_method_rowCount__I,
  0
};


struct LiteMemTable_MetaInfoInitializer
{  LiteMemTable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteMemTable::clazzInfo();
    ci->fields =  _LiteMemTable_fields;
    ci->methods =  _LiteMemTable_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteMemTable_MetaInfoInitializer LiteMemTable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteMemTableIterator_create_array(int length)
{
  return new ObjectArrayImpl<RLiteMemTableIterator>(length);
}

//static
::acdk::lang::RObject
LiteMemTableIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteMemTableIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteMemTableIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LiteMemTableIterator((RLiteMemTable)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTableIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_getColumnName_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTableIterator::getColumnName(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnName(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_getField_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTableIterator::getField(args[0].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->getField(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteMemTableIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_iterator__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTableIterator::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteMemTableIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteMemTableIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteMemTableIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteMemTableIterator_fields__row_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_row, flags);
    else
      This->_row = var.getIntVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteMemTableIterator_fields__table_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteMemTableIterator* This = dmi_cast<LiteMemTableIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_table, flags);
    else
      This->_table = (RLiteMemTable)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LiteMemTableIterator_fields__row = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_row", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_fields__row_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteMemTableIterator_fields__table = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_table", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteMemTable::clazzInfo(),
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_fields__table_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteMemTableIterator_fields[] = 
{
  &LiteMemTableIterator_fields__row,
  &LiteMemTableIterator_fields__table,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTableIterator_methods_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteMemTable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator__args[] = 
{
  &LiteMemTableIterator_methods_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LiteMemTableIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LiteMemTableIterator::clazzInfo(), // return type
  "_0_LiteMemTableIterator", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator__args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator__exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_element", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_element__LRObject__exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTableIterator_methods_getColumnName_I_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_getColumnName_I_LRString__args[] = 
{
  &LiteMemTableIterator_methods_getColumnName_I_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_getColumnName_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_getColumnName_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getColumnName", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_getColumnName_I_LRString__args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_getColumnName_I_LRString__exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_getColumnName_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteMemTableIterator_methods_getField_I_LRString__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_getField_I_LRString__args[] = 
{
  &LiteMemTableIterator_methods_getField_I_LRString__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_getField_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_getField_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getField", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getField", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_getField_I_LRString__args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_getField_I_LRString__exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_getField_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_hasNext", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_iterator__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_iterator__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_iterator__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_3_iterator", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_iterator__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_iterator__Lacdk_util_RIterator__exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_iterator__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_next", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_next__LRObject__exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteMemTableIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteMemTableIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteMemTableIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_remove", // alternative name of method
  -1, // altlabelHashCode
  LiteMemTableIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  LiteMemTableIterator_methods_remove__V_exceptions, // the declared exceptions
  LiteMemTableIterator_MetainfoWrapper::LiteMemTableIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteMemTableIterator_methods[] = 
{
  &LiteMemTableIterator_method_GetClass__L_acdk_lang_RClass_,
  &LiteMemTableIterator_method_LiteMemTableIterator_INLRLiteMemTable__LRLiteMemTableIterator_,
  &LiteMemTableIterator_method_element__LRObject_,
  &LiteMemTableIterator_method_getColumnName_I_LRString_,
  &LiteMemTableIterator_method_getField_I_LRString_,
  &LiteMemTableIterator_method_hasNext__Z,
  &LiteMemTableIterator_method_iterator__Lacdk_util_RIterator_,
  &LiteMemTableIterator_method_next__LRObject_,
  &LiteMemTableIterator_method_remove__V,
  0
};


struct LiteMemTableIterator_MetaInfoInitializer
{  LiteMemTableIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteMemTableIterator::clazzInfo();
    ci->fields =  _LiteMemTableIterator_fields;
    ci->methods =  _LiteMemTableIterator_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteMemTableIterator_MetaInfoInitializer LiteMemTableIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite

