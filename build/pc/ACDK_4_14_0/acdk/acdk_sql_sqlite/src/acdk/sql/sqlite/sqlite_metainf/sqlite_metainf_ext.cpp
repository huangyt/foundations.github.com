// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../sqlite.h"
#include "../Config.h"
#include "../LiteConnection.h"
#include "../LiteDatabaseMetaData.h"
#include "../LiteDriver.h"
#include "../LitePreparedStatement.h"
#include "../LiteResultSet.h"
#include "../LiteResultSetMetaData.h"
#include "../LiteStatement.h"
#include "../LiteTable.h"
#include "../sqlite.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteConnection_create_array(int length)
{
  return new ObjectArrayImpl<RLiteConnection>(length);
}

//static
::acdk::lang::RObject
LiteConnection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteConnection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteConnection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_clearWarnings__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::clearWarnings();
    else
        This->clearWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_commit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::commit();
    else
        This->commit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_createConnection_INLRString_INLRString_Z_LRLiteConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteConnection::createConnection((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), args[2].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_createConnection_INLRString_INLRString__LRLiteConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteConnection::createConnection((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_createStatement__LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::createStatement();
    else
        ret = (::acdk::lang::RObject)This->createStatement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_createStatement_II_LRStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::createStatement(args[0].getIntVar(), args[1].getIntVar());
    else
        ret = (::acdk::lang::RObject)This->createStatement(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_execute_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::execute((RString)args[0].getObjectVar());
    else
        This->execute((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_executeUpdate_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteConnection::executeUpdate((RString)args[0].getObjectVar());
    else
      ret = This->executeUpdate((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_getAutoCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteConnection::getAutoCommit();
    else
      ret = This->getAutoCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_getCatalog__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::getCatalog();
    else
        ret = (::acdk::lang::RObject)This->getCatalog();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_getDb__LRLiteDb__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::getDb();
    else
        ret = (::acdk::lang::RObject)This->getDb();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_getMetaData__LRDatabaseMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::getMetaData();
    else
        ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_getTransactionIsolation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteConnection::getTransactionIsolation();
    else
      ret = This->getTransactionIsolation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_getTypeMap__Lacdk_util_RMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::getTypeMap();
    else
        ret = (::acdk::lang::RObject)This->getTypeMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_getURL__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::getURL();
    else
        ret = (::acdk::lang::RObject)This->getURL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_getWarnings__LRSQLWarning__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::getWarnings();
    else
        ret = (::acdk::lang::RObject)This->getWarnings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_isClosed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteConnection::isClosed();
    else
      ret = This->isClosed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_isReadOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteConnection::isReadOnly();
    else
      ret = This->isReadOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_nativeSQL_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::nativeSQL((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->nativeSQL((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_prepareCall_INLRString__LRCallableStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::prepareCall((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->prepareCall((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_prepareStatement_INLRString__LRPreparedStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteConnection::prepareStatement((RString)args[0].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->prepareStatement((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_rollback__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::rollback();
    else
        This->rollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_setAutoCommit_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::setAutoCommit(args[0].getBoolVar());
    else
        This->setAutoCommit(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_setCatalog_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::setCatalog((RString)args[0].getObjectVar());
    else
        This->setCatalog((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_setReadOnly_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::setReadOnly(args[0].getBoolVar());
    else
        This->setReadOnly(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_setTransactionIsolation_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::setTransactionIsolation(args[0].getIntVar());
    else
        This->setTransactionIsolation(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteConnection_method_setTypeMap_INLacdk_util_RMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LiteConnection::setTypeMap((acdk::util::RMap)args[0].getObjectVar());
    else
        This->setTypeMap((acdk::util::RMap)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteConnection_fields__autoCommit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_autoCommit, flags);
    else
      This->_autoCommit = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteConnection_fields__db_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_db, flags);
    else
      This->_db = (RLiteDb)var.getObjectVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteConnection_fields__readOnly_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_readOnly, flags);
    else
      This->_readOnly = var.getBoolVar();
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteConnection_fields__url_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteConnection* This = dmi_cast<LiteConnection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_url, flags);
    else
      This->_url = (RString)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LiteConnection_fields__autoCommit = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_autoCommit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LiteConnection_MetainfoWrapper::LiteConnection_fields__autoCommit_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteConnection_fields__db = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_db", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteDb::clazzInfo(),
  LiteConnection_MetainfoWrapper::LiteConnection_fields__db_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteConnection_fields__readOnly = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_readOnly", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LiteConnection_MetainfoWrapper::LiteConnection_fields__readOnly_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LiteConnection_fields__url = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_url", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LiteConnection_MetainfoWrapper::LiteConnection_fields__url_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteConnection_fields[] = 
{
  &LiteConnection_fields__autoCommit,
  &LiteConnection_fields__db,
  &LiteConnection_fields__readOnly,
  &LiteConnection_fields__url,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_s_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteConnection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_clearWarnings__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_clearWarnings__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_clearWarnings__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_clearWarnings", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_clearWarnings__V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_clearWarnings__V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_clearWarnings__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_close__V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_close__V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_commit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_commit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_commit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "commit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_commit", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_commit__V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_commit__V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_commit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__arg_dbFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dbFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__arg_readOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "readOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__args[] = 
{
  &LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__arg_url,
  &LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__arg_dbFile,
  &LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__arg_readOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_createConnection_INLRString_INLRString_Z_LRLiteConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo(), // return type
  "_2_createConnection", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__args, // the arguments
  0, //arguments count
  LiteConnection_methods_createConnection_INLRString_INLRString_Z_LRLiteConnection__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_createConnection_INLRString_INLRString_Z_LRLiteConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_createConnection_INLRString_INLRString__LRLiteConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_createConnection_INLRString_INLRString__LRLiteConnection__arg_dbFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dbFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_createConnection_INLRString_INLRString__LRLiteConnection__args[] = 
{
  &LiteConnection_methods_createConnection_INLRString_INLRString__LRLiteConnection__arg_url,
  &LiteConnection_methods_createConnection_INLRString_INLRString__LRLiteConnection__arg_dbFile,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_createConnection_INLRString_INLRString__LRLiteConnection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_createConnection_INLRString_INLRString__LRLiteConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "createConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo(), // return type
  "_3_createConnection", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_createConnection_INLRString_INLRString__LRLiteConnection__args, // the arguments
  0, //arguments count
  LiteConnection_methods_createConnection_INLRString_INLRString__LRLiteConnection__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_createConnection_INLRString_INLRString__LRLiteConnection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_createStatement__LRStatement__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_createStatement__LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_createStatement__LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_7_createStatement", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_createStatement__LRStatement__args, // the arguments
  0, //arguments count
  LiteConnection_methods_createStatement__LRStatement__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_createStatement__LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_createStatement_II_LRStatement__arg_resultSetType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "resultSetType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_createStatement_II_LRStatement__arg_resultSetConcurrency = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "resultSetConcurrency", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_createStatement_II_LRStatement__args[] = 
{
  &LiteConnection_methods_createStatement_II_LRStatement__arg_resultSetType,
  &LiteConnection_methods_createStatement_II_LRStatement__arg_resultSetConcurrency,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_createStatement_II_LRStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_createStatement_II_LRStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStatement::clazzInfo(), // return type
  "_8_createStatement", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_createStatement_II_LRStatement__args, // the arguments
  0, //arguments count
  LiteConnection_methods_createStatement_II_LRStatement__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_createStatement_II_LRStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_execute_INLRString__V_arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_execute_INLRString__V_args[] = 
{
  &LiteConnection_methods_execute_INLRString__V_arg_cmd,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_execute_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_execute_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_execute", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_execute_INLRString__V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_execute_INLRString__V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_execute_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_executeUpdate_INLRString__I_arg_cmd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_executeUpdate_INLRString__I_args[] = 
{
  &LiteConnection_methods_executeUpdate_INLRString__I_arg_cmd,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_executeUpdate_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_executeUpdate_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_r_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_executeUpdate_INLRString__I_args, // the arguments
  0, //arguments count
  LiteConnection_methods_executeUpdate_INLRString__I_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_executeUpdate_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_getAutoCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_getAutoCommit__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_getAutoCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAutoCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_getAutoCommit", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_getAutoCommit__Z_args, // the arguments
  0, //arguments count
  LiteConnection_methods_getAutoCommit__Z_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_getAutoCommit__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_getCatalog__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_getCatalog__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_getCatalog__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getCatalog", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_getCatalog__LRString__args, // the arguments
  0, //arguments count
  LiteConnection_methods_getCatalog__LRString__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_getCatalog__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_getDb__LRLiteDb__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_getDb__LRLiteDb__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_getDb__LRLiteDb_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteDb::clazzInfo(), // return type
  "_0_getDb", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_getDb__LRLiteDb__args, // the arguments
  0, //arguments count
  LiteConnection_methods_getDb__LRLiteDb__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_getDb__LRLiteDb__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_getMetaData__LRDatabaseMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_getMetaData__LRDatabaseMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_getMetaData__LRDatabaseMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDatabaseMetaData::clazzInfo(), // return type
  "_b_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_getMetaData__LRDatabaseMetaData__args, // the arguments
  0, //arguments count
  LiteConnection_methods_getMetaData__LRDatabaseMetaData__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_getMetaData__LRDatabaseMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_getTransactionIsolation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_getTransactionIsolation__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_getTransactionIsolation__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_getTransactionIsolation__I_args, // the arguments
  0, //arguments count
  LiteConnection_methods_getTransactionIsolation__I_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_getTransactionIsolation__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_getTypeMap__Lacdk_util_RMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_getTypeMap__Lacdk_util_RMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_getTypeMap__Lacdk_util_RMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo(), // return type
  "_d_getTypeMap", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_getTypeMap__Lacdk_util_RMap__args, // the arguments
  0, //arguments count
  LiteConnection_methods_getTypeMap__Lacdk_util_RMap__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_getTypeMap__Lacdk_util_RMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_getURL__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_getURL__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_getURL__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getURL", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_getURL__LRString__args, // the arguments
  0, //arguments count
  LiteConnection_methods_getURL__LRString__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_getURL__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_getWarnings__LRSQLWarning__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_getWarnings__LRSQLWarning__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_getWarnings__LRSQLWarning_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWarnings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSQLWarning::clazzInfo(), // return type
  "_e_getWarnings", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_getWarnings__LRSQLWarning__args, // the arguments
  0, //arguments count
  LiteConnection_methods_getWarnings__LRSQLWarning__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_getWarnings__LRSQLWarning__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_isClosed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_isClosed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_isClosed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isClosed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_isClosed", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_isClosed__Z_args, // the arguments
  0, //arguments count
  LiteConnection_methods_isClosed__Z_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_isClosed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_isReadOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_isReadOnly__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_isReadOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_isReadOnly__Z_args, // the arguments
  0, //arguments count
  LiteConnection_methods_isReadOnly__Z_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_isReadOnly__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_nativeSQL_INLRString__LRString__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_nativeSQL_INLRString__LRString__args[] = 
{
  &LiteConnection_methods_nativeSQL_INLRString__LRString__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_nativeSQL_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_nativeSQL_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nativeSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_nativeSQL", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_nativeSQL_INLRString__LRString__args, // the arguments
  0, //arguments count
  LiteConnection_methods_nativeSQL_INLRString__LRString__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_nativeSQL_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_prepareCall_INLRString__LRCallableStatement__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_prepareCall_INLRString__LRCallableStatement__args[] = 
{
  &LiteConnection_methods_prepareCall_INLRString__LRCallableStatement__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_prepareCall_INLRString__LRCallableStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_prepareCall_INLRString__LRCallableStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepareCall", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCallableStatement::clazzInfo(), // return type
  "_i_prepareCall", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_prepareCall_INLRString__LRCallableStatement__args, // the arguments
  0, //arguments count
  LiteConnection_methods_prepareCall_INLRString__LRCallableStatement__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_prepareCall_INLRString__LRCallableStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_prepareStatement_INLRString__LRPreparedStatement__arg_sql = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sql", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_prepareStatement_INLRString__LRPreparedStatement__args[] = 
{
  &LiteConnection_methods_prepareStatement_INLRString__LRPreparedStatement__arg_sql,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_prepareStatement_INLRString__LRPreparedStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_prepareStatement_INLRString__LRPreparedStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "prepareStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPreparedStatement::clazzInfo(), // return type
  "_j_prepareStatement", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_prepareStatement_INLRString__LRPreparedStatement__args, // the arguments
  0, //arguments count
  LiteConnection_methods_prepareStatement_INLRString__LRPreparedStatement__exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_prepareStatement_INLRString__LRPreparedStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_rollback__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_rollback__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_rollback__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_rollback", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_rollback__V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_rollback__V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_rollback__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_setAutoCommit_Z_V_arg_autoCommit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "autoCommit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_setAutoCommit_Z_V_args[] = 
{
  &LiteConnection_methods_setAutoCommit_Z_V_arg_autoCommit,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_setAutoCommit_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_setAutoCommit_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAutoCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setAutoCommit", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_setAutoCommit_Z_V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_setAutoCommit_Z_V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_setAutoCommit_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_setCatalog_INLRString__V_arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_setCatalog_INLRString__V_args[] = 
{
  &LiteConnection_methods_setCatalog_INLRString__V_arg_catalog,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_setCatalog_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_setCatalog_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCatalog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setCatalog", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_setCatalog_INLRString__V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_setCatalog_INLRString__V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_setCatalog_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_setReadOnly_Z_V_arg_readOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_setReadOnly_Z_V_args[] = 
{
  &LiteConnection_methods_setReadOnly_Z_V_arg_readOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_setReadOnly_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_setReadOnly_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setReadOnly", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_setReadOnly_Z_V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_setReadOnly_Z_V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_setReadOnly_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_setTransactionIsolation_I_V_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_setTransactionIsolation_I_V_args[] = 
{
  &LiteConnection_methods_setTransactionIsolation_I_V_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_setTransactionIsolation_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_setTransactionIsolation_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_setTransactionIsolation_I_V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_setTransactionIsolation_I_V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_setTransactionIsolation_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteConnection_methods_setTypeMap_INLacdk_util_RMap__V_arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteConnection_methods_setTypeMap_INLacdk_util_RMap__V_args[] = 
{
  &LiteConnection_methods_setTypeMap_INLacdk_util_RMap__V_arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteConnection_methods_setTypeMap_INLacdk_util_RMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteConnection_method_setTypeMap_INLacdk_util_RMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTypeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setTypeMap", // alternative name of method
  -1, // altlabelHashCode
  LiteConnection_methods_setTypeMap_INLacdk_util_RMap__V_args, // the arguments
  0, //arguments count
  LiteConnection_methods_setTypeMap_INLacdk_util_RMap__V_exceptions, // the declared exceptions
  LiteConnection_MetainfoWrapper::LiteConnection_method_setTypeMap_INLacdk_util_RMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteConnection_methods[] = 
{
  &LiteConnection_method_GetClass__L_acdk_lang_RClass_,
  &LiteConnection_method_clearWarnings__V,
  &LiteConnection_method_close__V,
  &LiteConnection_method_commit__V,
  &LiteConnection_method_createConnection_INLRString_INLRString_Z_LRLiteConnection_,
  &LiteConnection_method_createConnection_INLRString_INLRString__LRLiteConnection_,
  &LiteConnection_method_createStatement__LRStatement_,
  &LiteConnection_method_createStatement_II_LRStatement_,
  &LiteConnection_method_execute_INLRString__V,
  &LiteConnection_method_executeUpdate_INLRString__I,
  &LiteConnection_method_getAutoCommit__Z,
  &LiteConnection_method_getCatalog__LRString_,
  &LiteConnection_method_getDb__LRLiteDb_,
  &LiteConnection_method_getMetaData__LRDatabaseMetaData_,
  &LiteConnection_method_getTransactionIsolation__I,
  &LiteConnection_method_getTypeMap__Lacdk_util_RMap_,
  &LiteConnection_method_getURL__LRString_,
  &LiteConnection_method_getWarnings__LRSQLWarning_,
  &LiteConnection_method_isClosed__Z,
  &LiteConnection_method_isReadOnly__Z,
  &LiteConnection_method_nativeSQL_INLRString__LRString_,
  &LiteConnection_method_prepareCall_INLRString__LRCallableStatement_,
  &LiteConnection_method_prepareStatement_INLRString__LRPreparedStatement_,
  &LiteConnection_method_rollback__V,
  &LiteConnection_method_setAutoCommit_Z_V,
  &LiteConnection_method_setCatalog_INLRString__V,
  &LiteConnection_method_setReadOnly_Z_V,
  &LiteConnection_method_setTransactionIsolation_I_V,
  &LiteConnection_method_setTypeMap_INLacdk_util_RMap__V,
  0
};


struct LiteConnection_MetaInfoInitializer
{  LiteConnection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteConnection::clazzInfo();
    ci->fields =  _LiteConnection_fields;
    ci->methods =  _LiteConnection_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteConnection_MetaInfoInitializer LiteConnection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteDatabaseMetaData_create_array(int length)
{
  return new ObjectArrayImpl<RLiteDatabaseMetaData>(length);
}

//static
::acdk::lang::RObject
LiteDatabaseMetaData_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteDatabaseMetaData_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteDatabaseMetaData::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LiteDatabaseMetaData((RLiteConnection)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_allProceduresAreCallable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::allProceduresAreCallable();
    else
      ret = This->allProceduresAreCallable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_allTablesAreSelectable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::allTablesAreSelectable();
    else
      ret = This->allTablesAreSelectable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::dataDefinitionCausesTransactionCommit();
    else
      ret = This->dataDefinitionCausesTransactionCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::dataDefinitionIgnoredInTransactions();
    else
      ret = This->dataDefinitionIgnoredInTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_deletesAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::deletesAreDetected(args[0].getIntVar());
    else
      ret = This->deletesAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::doesMaxRowSizeIncludeBlobs();
    else
      ret = This->doesMaxRowSizeIncludeBlobs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getBestRowIdentifier((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->getBestRowIdentifier((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getIntVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getCatalogSeparator__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getCatalogSeparator();
    else
        ret = (::acdk::lang::RObject)This->getCatalogSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getCatalogTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getCatalogTerm();
    else
        ret = (::acdk::lang::RObject)This->getCatalogTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getCatalogs__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getCatalogs();
    else
        ret = (::acdk::lang::RObject)This->getCatalogs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getColumnPrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getColumnPrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getConnection__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getConnection();
    else
        ret = (::acdk::lang::RObject)This->getConnection();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getCrossReference((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getCrossReference((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar(), (RString)args[4].getObjectVar(), (RString)args[5].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getDatabaseProductName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getDatabaseProductName();
    else
        ret = (::acdk::lang::RObject)This->getDatabaseProductName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getDatabaseProductVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getDatabaseProductVersion();
    else
        ret = (::acdk::lang::RObject)This->getDatabaseProductVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getDateTimeFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getDateTimeFunctions();
    else
        ret = (::acdk::lang::RObject)This->getDateTimeFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getDefaultTransactionIsolation__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getDefaultTransactionIsolation();
    else
      ret = This->getDefaultTransactionIsolation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getDriverMajorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getDriverMajorVersion();
    else
      ret = This->getDriverMajorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getDriverMinorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getDriverMinorVersion();
    else
      ret = This->getDriverMinorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getDriverName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getDriverName();
    else
        ret = (::acdk::lang::RObject)This->getDriverName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getDriverVersion__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getDriverVersion();
    else
        ret = (::acdk::lang::RObject)This->getDriverVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getExportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getExportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getExtraNameCharacters__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getExtraNameCharacters();
    else
        ret = (::acdk::lang::RObject)This->getExtraNameCharacters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getIdentiferQuoteString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getIdentiferQuoteString();
    else
        ret = (::acdk::lang::RObject)This->getIdentiferQuoteString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getImportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getImportedKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getIndexInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar(), args[4].getBoolVar());
    else
        ret = (::acdk::lang::RObject)This->getIndexInfo((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), args[3].getBoolVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxBinaryLiteralLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxBinaryLiteralLength();
    else
      ret = This->getMaxBinaryLiteralLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxCatalogNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxCatalogNameLength();
    else
      ret = This->getMaxCatalogNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxCharLiteralLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxCharLiteralLength();
    else
      ret = This->getMaxCharLiteralLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxColumnNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxColumnNameLength();
    else
      ret = This->getMaxColumnNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxColumnsInGroupBy__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxColumnsInGroupBy();
    else
      ret = This->getMaxColumnsInGroupBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxColumnsInIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxColumnsInIndex();
    else
      ret = This->getMaxColumnsInIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxColumnsInOrderBy__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxColumnsInOrderBy();
    else
      ret = This->getMaxColumnsInOrderBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxColumnsInSelect__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxColumnsInSelect();
    else
      ret = This->getMaxColumnsInSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxColumnsInTable__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxColumnsInTable();
    else
      ret = This->getMaxColumnsInTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxConnections__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxConnections();
    else
      ret = This->getMaxConnections();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxCursorNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxCursorNameLength();
    else
      ret = This->getMaxCursorNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxIndexLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxIndexLength();
    else
      ret = This->getMaxIndexLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxProcedureNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxProcedureNameLength();
    else
      ret = This->getMaxProcedureNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxRowSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxRowSize();
    else
      ret = This->getMaxRowSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxSchemaNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxSchemaNameLength();
    else
      ret = This->getMaxSchemaNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxStatementLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxStatementLength();
    else
      ret = This->getMaxStatementLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxStatements__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxStatements();
    else
      ret = This->getMaxStatements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxTableNameLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxTableNameLength();
    else
      ret = This->getMaxTableNameLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxTableUserLength__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxTableUserLength();
    else
      ret = This->getMaxTableUserLength();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getMaxTablesInSelect__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::getMaxTablesInSelect();
    else
      ret = This->getMaxTablesInSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getNumericFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getNumericFunctions();
    else
        ret = (::acdk::lang::RObject)This->getNumericFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getPrimaryKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPrimaryKeys((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getProcedureColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getProcedureColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RString)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getProcedureTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getProcedureTerm();
    else
        ret = (::acdk::lang::RObject)This->getProcedureTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getProcedures((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getProcedures((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getSQLKeywords__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getSQLKeywords();
    else
        ret = (::acdk::lang::RObject)This->getSQLKeywords();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getSchemaTerm__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getSchemaTerm();
    else
        ret = (::acdk::lang::RObject)This->getSchemaTerm();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getSchemas__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getSchemas();
    else
        ret = (::acdk::lang::RObject)This->getSchemas();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getSearchStringEscape__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getSearchStringEscape();
    else
        ret = (::acdk::lang::RObject)This->getSearchStringEscape();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getStringFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getStringFunctions();
    else
        ret = (::acdk::lang::RObject)This->getStringFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getSystemFunctions__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getSystemFunctions();
    else
        ret = (::acdk::lang::RObject)This->getSystemFunctions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getTablePrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTablePrivileges((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getTableTypes__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getTableTypes();
    else
        ret = (::acdk::lang::RObject)This->getTableTypes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getTables((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getTables((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getTypeInfo__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getTypeInfo();
    else
        ret = (::acdk::lang::RObject)This->getTypeInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getUDTs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RintArray)args[3].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getUDTs((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar(), (RintArray)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getURL__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getURL();
    else
        ret = (::acdk::lang::RObject)This->getURL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getUserName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getUserName();
    else
        ret = (::acdk::lang::RObject)This->getUserName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDatabaseMetaData::getVersionColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getVersionColumns((RString)args[0].getObjectVar(), (RString)args[1].getObjectVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_insertsAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::insertsAreDetected(args[0].getIntVar());
    else
      ret = This->insertsAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_isCatalogAtStart__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::isCatalogAtStart();
    else
      ret = This->isCatalogAtStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_isReadOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::isReadOnly();
    else
      ret = This->isReadOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_nullPlusNonNullIsNull__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::nullPlusNonNullIsNull();
    else
      ret = This->nullPlusNonNullIsNull();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_nullsAreSortedAtEnd__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::nullsAreSortedAtEnd();
    else
      ret = This->nullsAreSortedAtEnd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_nullsAreSortedAtStart__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::nullsAreSortedAtStart();
    else
      ret = This->nullsAreSortedAtStart();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_nullsAreSortedHigh__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::nullsAreSortedHigh();
    else
      ret = This->nullsAreSortedHigh();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_nullsAreSortedLow__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::nullsAreSortedLow();
    else
      ret = This->nullsAreSortedLow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_othersDeletesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::othersDeletesAreVisible(args[0].getIntVar());
    else
      ret = This->othersDeletesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_othersInsertsAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::othersInsertsAreVisible(args[0].getIntVar());
    else
      ret = This->othersInsertsAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_othersUpdatesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::othersUpdatesAreVisible(args[0].getIntVar());
    else
      ret = This->othersUpdatesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_ownDeletesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::ownDeletesAreVisible(args[0].getIntVar());
    else
      ret = This->ownDeletesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_ownInsertsAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::ownInsertsAreVisible(args[0].getIntVar());
    else
      ret = This->ownInsertsAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_ownUpdatesAreVisible_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::ownUpdatesAreVisible(args[0].getIntVar());
    else
      ret = This->ownUpdatesAreVisible(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_storesLowerCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::storesLowerCaseIdentifiers();
    else
      ret = This->storesLowerCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::storesLowerCaseQuotedIdentifiers();
    else
      ret = This->storesLowerCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_storesMixedCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::storesMixedCaseIdentifiers();
    else
      ret = This->storesMixedCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::storesMixedCaseQuotedIdentifiers();
    else
      ret = This->storesMixedCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_storesUpperCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::storesUpperCaseIdentifiers();
    else
      ret = This->storesUpperCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::storesUpperCaseQuotedIdentifiers();
    else
      ret = This->storesUpperCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsANSI92EntryLevelSQL();
    else
      ret = This->supportsANSI92EntryLevelSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsANSI92FullSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsANSI92FullSQL();
    else
      ret = This->supportsANSI92FullSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsANSI92IntermediateSQL__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsANSI92IntermediateSQL();
    else
      ret = This->supportsANSI92IntermediateSQL();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsAlterTableWithAddColumn__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsAlterTableWithAddColumn();
    else
      ret = This->supportsAlterTableWithAddColumn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsAlterTableWithDropColumn__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsAlterTableWithDropColumn();
    else
      ret = This->supportsAlterTableWithDropColumn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsBatchUpdates__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsBatchUpdates();
    else
      ret = This->supportsBatchUpdates();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsCatalogInPrivilegeDefinitions();
    else
      ret = This->supportsCatalogInPrivilegeDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsCatalogsInDataManipulation__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsCatalogsInDataManipulation();
    else
      ret = This->supportsCatalogsInDataManipulation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsCatalogsInIndexDefinitions();
    else
      ret = This->supportsCatalogsInIndexDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsCatalogsInProcedureCalls();
    else
      ret = This->supportsCatalogsInProcedureCalls();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsCatalogsInTableDefinitions();
    else
      ret = This->supportsCatalogsInTableDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsColumnAliasing__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsColumnAliasing();
    else
      ret = This->supportsColumnAliasing();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsConvert__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsConvert();
    else
      ret = This->supportsConvert();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsConvert_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsConvert(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->supportsConvert(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsCoreSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsCoreSQLGrammar();
    else
      ret = This->supportsCoreSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsCorrelatedSubqueries__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsCorrelatedSubqueries();
    else
      ret = This->supportsCorrelatedSubqueries();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsDataDefinitionAndDataManipulationTransactions();
    else
      ret = This->supportsDataDefinitionAndDataManipulationTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsDataManipulationTransactionsOnly();
    else
      ret = This->supportsDataManipulationTransactionsOnly();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsDifferentTableCorrelationNames();
    else
      ret = This->supportsDifferentTableCorrelationNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsExpressionsInOrderBy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsExpressionsInOrderBy();
    else
      ret = This->supportsExpressionsInOrderBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsExtendedSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsExtendedSQLGrammar();
    else
      ret = This->supportsExtendedSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsFullOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsFullOuterJoins();
    else
      ret = This->supportsFullOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsGroupBy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsGroupBy();
    else
      ret = This->supportsGroupBy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsGroupByBeyondSelect__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsGroupByBeyondSelect();
    else
      ret = This->supportsGroupByBeyondSelect();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsGroupByUnrelated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsGroupByUnrelated();
    else
      ret = This->supportsGroupByUnrelated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsIntegrityEnhancementFacility();
    else
      ret = This->supportsIntegrityEnhancementFacility();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsLikeEscapeClause__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsLikeEscapeClause();
    else
      ret = This->supportsLikeEscapeClause();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsLimitedOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsLimitedOuterJoins();
    else
      ret = This->supportsLimitedOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsMinimumSQLGrammar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsMinimumSQLGrammar();
    else
      ret = This->supportsMinimumSQLGrammar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsMixedCaseIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsMixedCaseIdentifiers();
    else
      ret = This->supportsMixedCaseIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsMixedCaseQuotedIdentifiers();
    else
      ret = This->supportsMixedCaseQuotedIdentifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsMultipleResultSets__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsMultipleResultSets();
    else
      ret = This->supportsMultipleResultSets();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsMultipleTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsMultipleTransactions();
    else
      ret = This->supportsMultipleTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsNonNullableColumns__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsNonNullableColumns();
    else
      ret = This->supportsNonNullableColumns();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsOpenCursorsAcrossCommit();
    else
      ret = This->supportsOpenCursorsAcrossCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsOpenCursorsAcrossRollback();
    else
      ret = This->supportsOpenCursorsAcrossRollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsOpenStatementsAcrossCommit();
    else
      ret = This->supportsOpenStatementsAcrossCommit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsOpenStatementsAcrossRollback();
    else
      ret = This->supportsOpenStatementsAcrossRollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsOrderByUnrelated__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsOrderByUnrelated();
    else
      ret = This->supportsOrderByUnrelated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsOuterJoins__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsOuterJoins();
    else
      ret = This->supportsOuterJoins();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsPositionedDelete__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsPositionedDelete();
    else
      ret = This->supportsPositionedDelete();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsPositionedUpdate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsPositionedUpdate();
    else
      ret = This->supportsPositionedUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsResultSetConcurrency_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsResultSetConcurrency(args[0].getIntVar(), args[1].getIntVar());
    else
      ret = This->supportsResultSetConcurrency(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsResultType_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsResultType(args[0].getIntVar());
    else
      ret = This->supportsResultType(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSchemasInDataManipulation__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSchemasInDataManipulation();
    else
      ret = This->supportsSchemasInDataManipulation();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSchemasInIndexDefinitions();
    else
      ret = This->supportsSchemasInIndexDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSchemasInPrivilegeDefinitions();
    else
      ret = This->supportsSchemasInPrivilegeDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSchemasInProcedureCalls__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSchemasInProcedureCalls();
    else
      ret = This->supportsSchemasInProcedureCalls();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSchemasInTableDefinitions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSchemasInTableDefinitions();
    else
      ret = This->supportsSchemasInTableDefinitions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSelectForUpdate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSelectForUpdate();
    else
      ret = This->supportsSelectForUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsStoredProcedures__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsStoredProcedures();
    else
      ret = This->supportsStoredProcedures();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSubqueriesInComparisons__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSubqueriesInComparisons();
    else
      ret = This->supportsSubqueriesInComparisons();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSubqueriesInExists__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSubqueriesInExists();
    else
      ret = This->supportsSubqueriesInExists();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSubqueriesInIns__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSubqueriesInIns();
    else
      ret = This->supportsSubqueriesInIns();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsSubqueriesInQuantifieds();
    else
      ret = This->supportsSubqueriesInQuantifieds();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsTableCorrelationNames__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsTableCorrelationNames();
    else
      ret = This->supportsTableCorrelationNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsTransactionIsolationLevel(args[0].getIntVar());
    else
      ret = This->supportsTransactionIsolationLevel(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsTransactions__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsTransactions();
    else
      ret = This->supportsTransactions();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsUnion__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsUnion();
    else
      ret = This->supportsUnion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_supportsUnionAll__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::supportsUnionAll();
    else
      ret = This->supportsUnionAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_updatesAreDetected_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::updatesAreDetected(args[0].getIntVar());
    else
      ret = This->updatesAreDetected(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_usesLocalFilePerTable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::usesLocalFilePerTable();
    else
      ret = This->usesLocalFilePerTable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDatabaseMetaData_method_usesLocalFiles__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDatabaseMetaData::usesLocalFiles();
    else
      ret = This->usesLocalFiles();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LiteDatabaseMetaData_fields__con_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LiteDatabaseMetaData* This = dmi_cast<LiteDatabaseMetaData>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_con, flags);
    else
      This->_con = (RLiteConnection)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LiteDatabaseMetaData_fields__con = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_con", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo(),
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_fields__con_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteDatabaseMetaData_fields[] = 
{
  &LiteDatabaseMetaData_fields__con,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2q_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData__arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData__args[] = 
{
  &LiteDatabaseMetaData_methods_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData__arg_con,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LiteDatabaseMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LiteDatabaseMetaData::clazzInfo(), // return type
  "_0_LiteDatabaseMetaData", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_allProceduresAreCallable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_allProceduresAreCallable__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_allProceduresAreCallable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_allProceduresAreCallable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allProceduresAreCallable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_allProceduresAreCallable", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_allProceduresAreCallable__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_allProceduresAreCallable__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_allProceduresAreCallable__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_allProceduresAreCallable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_allTablesAreSelectable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_allTablesAreSelectable__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_allTablesAreSelectable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_allTablesAreSelectable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allTablesAreSelectable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_allTablesAreSelectable", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_allTablesAreSelectable__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_allTablesAreSelectable__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_allTablesAreSelectable__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_allTablesAreSelectable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_dataDefinitionCausesTransactionCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dataDefinitionCausesTransactionCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1T_dataDefinitionCausesTransactionCommit", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_dataDefinitionCausesTransactionCommit__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_dataDefinitionCausesTransactionCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_dataDefinitionIgnoredInTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dataDefinitionIgnoredInTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1U_dataDefinitionIgnoredInTransactions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_dataDefinitionIgnoredInTransactions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_dataDefinitionIgnoredInTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_deletesAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_deletesAreDetected_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_deletesAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_deletesAreDetected_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_deletesAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_deletesAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deletesAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2l_deletesAreDetected", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_deletesAreDetected_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_deletesAreDetected_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_deletesAreDetected_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_deletesAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_doesMaxRowSizeIncludeBlobs__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doesMaxRowSizeIncludeBlobs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1I_doesMaxRowSizeIncludeBlobs", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_doesMaxRowSizeIncludeBlobs__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_doesMaxRowSizeIncludeBlobs__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_scope = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scope", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_nullable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nullable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_table,
  &LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_scope,
  &LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__arg_nullable,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBestRowIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_24_getBestRowIdentifier", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getCatalogSeparator__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getCatalogSeparator__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getCatalogSeparator__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getCatalogSeparator__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_13_getCatalogSeparator", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getCatalogSeparator__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getCatalogSeparator__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getCatalogSeparator__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getCatalogSeparator__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getCatalogTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getCatalogTerm__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getCatalogTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getCatalogTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_11_getCatalogTerm", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getCatalogTerm__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getCatalogTerm__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getCatalogTerm__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getCatalogTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getCatalogs__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getCatalogs__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getCatalogs__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getCatalogs__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCatalogs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1Z_getCatalogs", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getCatalogs__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getCatalogs__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getCatalogs__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getCatalogs__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  &LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumnPrivileges", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_22_getColumnPrivileges", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern,
  &LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern,
  &LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_21_getColumns", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getConnection__LRConnection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getConnection__LRConnection__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getConnection__LRConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getConnection__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getConnection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_2p_getConnection", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getConnection__LRConnection__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getConnection__LRConnection__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getConnection__LRConnection__dispatch, // invoke this method
  LiteDatabaseMetaData_getConnection__LRConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primCatalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primCatalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primSchema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primSchema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primTable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "primTable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forCatalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forCatalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forSchema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forSchema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forTable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "forTable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primCatalog,
  &LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primSchema,
  &LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_primTable,
  &LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forCatalog,
  &LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forSchema,
  &LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_forTable,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCrossReference", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_29_getCrossReference", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getDatabaseProductName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getDatabaseProductName__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getDatabaseProductName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getDatabaseProductName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDatabaseProductName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getDatabaseProductName", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getDatabaseProductName__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getDatabaseProductName__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getDatabaseProductName__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getDatabaseProductName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getDatabaseProductVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getDatabaseProductVersion__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getDatabaseProductVersion__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getDatabaseProductVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDatabaseProductVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getDatabaseProductVersion", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getDatabaseProductVersion__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getDatabaseProductVersion__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getDatabaseProductVersion__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getDatabaseProductVersion__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getDateTimeFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getDateTimeFunctions__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getDateTimeFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getDateTimeFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDateTimeFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_v_getDateTimeFunctions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getDateTimeFunctions__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getDateTimeFunctions__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getDateTimeFunctions__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getDateTimeFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getDefaultTransactionIsolation__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getDefaultTransactionIsolation__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getDefaultTransactionIsolation__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getDefaultTransactionIsolation__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultTransactionIsolation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1O_getDefaultTransactionIsolation", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getDefaultTransactionIsolation__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getDefaultTransactionIsolation__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getDefaultTransactionIsolation__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getDefaultTransactionIsolation__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getDriverMajorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getDriverMajorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getDriverMajorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverMajorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getDriverMajorVersion", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getDriverMajorVersion__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getDriverMajorVersion__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getDriverMajorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getDriverMinorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getDriverMinorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getDriverMinorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverMinorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getDriverMinorVersion", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getDriverMinorVersion__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getDriverMinorVersion__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getDriverMinorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getDriverName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getDriverName__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getDriverName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getDriverName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getDriverName", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getDriverName__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getDriverName__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getDriverName__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getDriverName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getDriverVersion__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getDriverVersion__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getDriverVersion__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getDriverVersion__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDriverVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getDriverVersion", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getDriverVersion__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getDriverVersion__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getDriverVersion__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getDriverVersion__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExportedKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_28_getExportedKeys", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getExtraNameCharacters__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getExtraNameCharacters__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getExtraNameCharacters__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getExtraNameCharacters__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExtraNameCharacters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_x_getExtraNameCharacters", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getExtraNameCharacters__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getExtraNameCharacters__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getExtraNameCharacters__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getExtraNameCharacters__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getIdentiferQuoteString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getIdentiferQuoteString__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getIdentiferQuoteString__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getIdentiferQuoteString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentiferQuoteString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_q_getIdentiferQuoteString", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getIdentiferQuoteString__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getIdentiferQuoteString__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getIdentiferQuoteString__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getIdentiferQuoteString__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getImportedKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_27_getImportedKeys", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_unique = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "unique", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_approx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "approx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_table,
  &LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_unique,
  &LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__arg_approx,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIndexInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_2b_getIndexInfo", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxBinaryLiteralLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxBinaryLiteralLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxBinaryLiteralLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxBinaryLiteralLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxBinaryLiteralLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1t_getMaxBinaryLiteralLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxBinaryLiteralLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxBinaryLiteralLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxBinaryLiteralLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxBinaryLiteralLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxCatalogNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxCatalogNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxCatalogNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxCatalogNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCatalogNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1G_getMaxCatalogNameLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxCatalogNameLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxCatalogNameLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxCatalogNameLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxCatalogNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxCharLiteralLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxCharLiteralLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxCharLiteralLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxCharLiteralLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCharLiteralLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1u_getMaxCharLiteralLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxCharLiteralLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxCharLiteralLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxCharLiteralLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxCharLiteralLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxColumnNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxColumnNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxColumnNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxColumnNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1v_getMaxColumnNameLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxColumnNameLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxColumnNameLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxColumnNameLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxColumnNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxColumnsInGroupBy__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxColumnsInGroupBy__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxColumnsInGroupBy__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxColumnsInGroupBy__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInGroupBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1w_getMaxColumnsInGroupBy", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxColumnsInGroupBy__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxColumnsInGroupBy__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxColumnsInGroupBy__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxColumnsInGroupBy__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxColumnsInIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxColumnsInIndex__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxColumnsInIndex__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxColumnsInIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1x_getMaxColumnsInIndex", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxColumnsInIndex__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxColumnsInIndex__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxColumnsInIndex__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxColumnsInIndex__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxColumnsInOrderBy__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxColumnsInOrderBy__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxColumnsInOrderBy__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxColumnsInOrderBy__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInOrderBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1y_getMaxColumnsInOrderBy", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxColumnsInOrderBy__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxColumnsInOrderBy__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxColumnsInOrderBy__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxColumnsInOrderBy__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxColumnsInSelect__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxColumnsInSelect__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxColumnsInSelect__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxColumnsInSelect__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1z_getMaxColumnsInSelect", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxColumnsInSelect__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxColumnsInSelect__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxColumnsInSelect__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxColumnsInSelect__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxColumnsInTable__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxColumnsInTable__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxColumnsInTable__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxColumnsInTable__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxColumnsInTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1A_getMaxColumnsInTable", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxColumnsInTable__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxColumnsInTable__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxColumnsInTable__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxColumnsInTable__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxConnections__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxConnections__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxConnections__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxConnections__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxConnections", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1B_getMaxConnections", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxConnections__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxConnections__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxConnections__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxConnections__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxCursorNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxCursorNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxCursorNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxCursorNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxCursorNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1C_getMaxCursorNameLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxCursorNameLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxCursorNameLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxCursorNameLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxCursorNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxIndexLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxIndexLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxIndexLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxIndexLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxIndexLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1D_getMaxIndexLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxIndexLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxIndexLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxIndexLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxIndexLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxProcedureNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxProcedureNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxProcedureNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxProcedureNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxProcedureNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1F_getMaxProcedureNameLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxProcedureNameLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxProcedureNameLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxProcedureNameLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxProcedureNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxRowSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxRowSize__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxRowSize__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxRowSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxRowSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1H_getMaxRowSize", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxRowSize__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxRowSize__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxRowSize__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxRowSize__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxSchemaNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxSchemaNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxSchemaNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxSchemaNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxSchemaNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1E_getMaxSchemaNameLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxSchemaNameLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxSchemaNameLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxSchemaNameLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxSchemaNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxStatementLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxStatementLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxStatementLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxStatementLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxStatementLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1J_getMaxStatementLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxStatementLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxStatementLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxStatementLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxStatementLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxStatements__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxStatements__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxStatements__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxStatements__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxStatements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1K_getMaxStatements", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxStatements__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxStatements__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxStatements__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxStatements__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxTableNameLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxTableNameLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxTableNameLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxTableNameLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTableNameLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1L_getMaxTableNameLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxTableNameLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxTableNameLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxTableNameLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxTableNameLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxTableUserLength__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxTableUserLength__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxTableUserLength__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxTableUserLength__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTableUserLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1N_getMaxTableUserLength", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxTableUserLength__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxTableUserLength__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxTableUserLength__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxTableUserLength__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getMaxTablesInSelect__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getMaxTablesInSelect__I_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getMaxTablesInSelect__I_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getMaxTablesInSelect__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxTablesInSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1M_getMaxTablesInSelect", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getMaxTablesInSelect__I_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getMaxTablesInSelect__I_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getMaxTablesInSelect__I_dispatch, // invoke this method
  LiteDatabaseMetaData_getMaxTablesInSelect__I_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getNumericFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getNumericFunctions__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getNumericFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getNumericFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNumericFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_s_getNumericFunctions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getNumericFunctions__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getNumericFunctions__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getNumericFunctions__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getNumericFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPrimaryKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_26_getPrimaryKeys", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "columnPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern,
  &LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern,
  &LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__arg_columnPattern,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedureColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1W_getProcedureColumns", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getProcedureTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getProcedureTerm__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getProcedureTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getProcedureTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedureTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_10_getProcedureTerm", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getProcedureTerm__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getProcedureTerm__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getProcedureTerm__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getProcedureTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern,
  &LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getProcedures_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProcedures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1V_getProcedures", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getProcedures_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getProcedures_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getSQLKeywords__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getSQLKeywords__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getSQLKeywords__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getSQLKeywords__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSQLKeywords", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_r_getSQLKeywords", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getSQLKeywords__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getSQLKeywords__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getSQLKeywords__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getSQLKeywords__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getSchemaTerm__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getSchemaTerm__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getSchemaTerm__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getSchemaTerm__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemaTerm", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Z_getSchemaTerm", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getSchemaTerm__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getSchemaTerm__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getSchemaTerm__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getSchemaTerm__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getSchemas__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getSchemas__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getSchemas__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getSchemas__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSchemas", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1Y_getSchemas", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getSchemas__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getSchemas__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getSchemas__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getSchemas__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getSearchStringEscape__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getSearchStringEscape__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getSearchStringEscape__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getSearchStringEscape__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSearchStringEscape", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_w_getSearchStringEscape", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getSearchStringEscape__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getSearchStringEscape__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getSearchStringEscape__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getSearchStringEscape__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getStringFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getStringFunctions__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getStringFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getStringFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_t_getStringFunctions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getStringFunctions__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getStringFunctions__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getStringFunctions__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getStringFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getSystemFunctions__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getSystemFunctions__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getSystemFunctions__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getSystemFunctions__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemFunctions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_u_getSystemFunctions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getSystemFunctions__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getSystemFunctions__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getSystemFunctions__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getSystemFunctions__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTablePrivileges", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_23_getTablePrivileges", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getTableTypes__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getTableTypes__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getTableTypes__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getTableTypes__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTableTypes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_20_getTableTypes", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getTableTypes__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getTableTypes__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getTableTypes__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getTableTypes__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schemaPattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_schemaPattern,
  &LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__arg_namePattern,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getTables_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTables", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_1X_getTables", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getTables_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getTables_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getTypeInfo__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getTypeInfo__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getTypeInfo__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getTypeInfo__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_2a_getTypeInfo", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getTypeInfo__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getTypeInfo__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getTypeInfo__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getTypeInfo__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_typePattern = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "typePattern", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_types = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "types", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_typePattern,
  &LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__arg_types,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUDTs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_2o_getUDTs", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getURL__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getURL__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getURL__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getURL__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getURL", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getURL__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getURL__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getURL__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getURL__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getUserName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getUserName__LRString__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getUserName__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getUserName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUserName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getUserName", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getUserName__LRString__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getUserName__LRString__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getUserName__LRString__dispatch, // invoke this method
  LiteDatabaseMetaData_getUserName__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_catalog = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "catalog", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_schema = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "schema", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__args[] = 
{
  &LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_catalog,
  &LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_schema,
  &LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVersionColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_25_getVersionColumns", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__dispatch, // invoke this method
  LiteDatabaseMetaData_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_insertsAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_insertsAreDetected_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_insertsAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_insertsAreDetected_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_insertsAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_insertsAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertsAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2m_insertsAreDetected", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_insertsAreDetected_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_insertsAreDetected_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_insertsAreDetected_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_insertsAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_isCatalogAtStart__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_isCatalogAtStart__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_isCatalogAtStart__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_isCatalogAtStart__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isCatalogAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_12_isCatalogAtStart", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_isCatalogAtStart__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_isCatalogAtStart__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_isCatalogAtStart__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_isCatalogAtStart__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_isReadOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_isReadOnly__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_isReadOnly__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_isReadOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_isReadOnly", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_isReadOnly__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_isReadOnly__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_isReadOnly__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_isReadOnly__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_nullPlusNonNullIsNull__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_nullPlusNonNullIsNull__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_nullPlusNonNullIsNull__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_nullPlusNonNullIsNull__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullPlusNonNullIsNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_B_nullPlusNonNullIsNull", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_nullPlusNonNullIsNull__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_nullPlusNonNullIsNull__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_nullPlusNonNullIsNull__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_nullPlusNonNullIsNull__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_nullsAreSortedAtEnd__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_nullsAreSortedAtEnd__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_nullsAreSortedAtEnd__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_nullsAreSortedAtEnd__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedAtEnd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_nullsAreSortedAtEnd", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_nullsAreSortedAtEnd__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_nullsAreSortedAtEnd__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_nullsAreSortedAtEnd__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_nullsAreSortedAtEnd__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_nullsAreSortedAtStart__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_nullsAreSortedAtStart__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_nullsAreSortedAtStart__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_nullsAreSortedAtStart__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedAtStart", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_nullsAreSortedAtStart", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_nullsAreSortedAtStart__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_nullsAreSortedAtStart__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_nullsAreSortedAtStart__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_nullsAreSortedAtStart__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_nullsAreSortedHigh__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_nullsAreSortedHigh__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_nullsAreSortedHigh__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_nullsAreSortedHigh__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedHigh", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_nullsAreSortedHigh", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_nullsAreSortedHigh__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_nullsAreSortedHigh__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_nullsAreSortedHigh__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_nullsAreSortedHigh__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_nullsAreSortedLow__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_nullsAreSortedLow__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_nullsAreSortedLow__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_nullsAreSortedLow__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nullsAreSortedLow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_nullsAreSortedLow", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_nullsAreSortedLow__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_nullsAreSortedLow__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_nullsAreSortedLow__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_nullsAreSortedLow__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_othersDeletesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_othersDeletesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersDeletesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2i_othersDeletesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_othersDeletesAreVisible_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_othersDeletesAreVisible_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_othersDeletesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_othersInsertsAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_othersInsertsAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersInsertsAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2j_othersInsertsAreVisible", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_othersInsertsAreVisible_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_othersInsertsAreVisible_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_othersInsertsAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_othersUpdatesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_othersUpdatesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "othersUpdatesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2h_othersUpdatesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_othersUpdatesAreVisible_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_othersUpdatesAreVisible_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_othersUpdatesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_ownDeletesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_ownDeletesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownDeletesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2f_ownDeletesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_ownDeletesAreVisible_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_ownDeletesAreVisible_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_ownDeletesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_ownInsertsAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_ownInsertsAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownInsertsAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2g_ownInsertsAreVisible", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_ownInsertsAreVisible_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_ownInsertsAreVisible_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_ownInsertsAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_ownUpdatesAreVisible_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_ownUpdatesAreVisible_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownUpdatesAreVisible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2e_ownUpdatesAreVisible", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_ownUpdatesAreVisible_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_ownUpdatesAreVisible_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_ownUpdatesAreVisible_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_storesLowerCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_storesLowerCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesLowerCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_storesLowerCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_storesLowerCaseIdentifiers__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_storesLowerCaseIdentifiers__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_storesLowerCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_storesLowerCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesLowerCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_storesLowerCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_storesLowerCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_storesLowerCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_storesMixedCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_storesMixedCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesMixedCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_storesMixedCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_storesMixedCaseIdentifiers__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_storesMixedCaseIdentifiers__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_storesMixedCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_storesMixedCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesMixedCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_storesMixedCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_storesMixedCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_storesMixedCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_storesUpperCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_storesUpperCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesUpperCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_storesUpperCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_storesUpperCaseIdentifiers__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_storesUpperCaseIdentifiers__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_storesUpperCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_storesUpperCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "storesUpperCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_storesUpperCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_storesUpperCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_storesUpperCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsANSI92EntryLevelSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92EntryLevelSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_S_supportsANSI92EntryLevelSQL", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsANSI92EntryLevelSQL__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsANSI92EntryLevelSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsANSI92FullSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsANSI92FullSQL__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsANSI92FullSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsANSI92FullSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92FullSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_U_supportsANSI92FullSQL", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsANSI92FullSQL__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsANSI92FullSQL__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsANSI92FullSQL__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsANSI92FullSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsANSI92IntermediateSQL__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsANSI92IntermediateSQL__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsANSI92IntermediateSQL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_T_supportsANSI92IntermediateSQL", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsANSI92IntermediateSQL__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsANSI92IntermediateSQL__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsANSI92IntermediateSQL__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsAlterTableWithAddColumn__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsAlterTableWithAddColumn__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsAlterTableWithAddColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_supportsAlterTableWithAddColumn", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsAlterTableWithAddColumn__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsAlterTableWithAddColumn__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsAlterTableWithAddColumn__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsAlterTableWithDropColumn__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsAlterTableWithDropColumn__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsAlterTableWithDropColumn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_z_supportsAlterTableWithDropColumn", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsAlterTableWithDropColumn__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsAlterTableWithDropColumn__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsAlterTableWithDropColumn__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsBatchUpdates__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsBatchUpdates__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsBatchUpdates__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsBatchUpdates__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsBatchUpdates", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2n_supportsBatchUpdates", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsBatchUpdates__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsBatchUpdates__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsBatchUpdates__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsBatchUpdates__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsCatalogInPrivilegeDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogInPrivilegeDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1d_supportsCatalogInPrivilegeDefinitions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsCatalogInPrivilegeDefinitions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsCatalogInPrivilegeDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsCatalogsInDataManipulation__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsCatalogsInDataManipulation__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInDataManipulation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_19_supportsCatalogsInDataManipulation", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsCatalogsInDataManipulation__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsCatalogsInDataManipulation__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsCatalogsInDataManipulation__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsCatalogsInIndexDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInIndexDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1c_supportsCatalogsInIndexDefinitions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsCatalogsInIndexDefinitions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsCatalogsInIndexDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsCatalogsInProcedureCalls__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInProcedureCalls", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1a_supportsCatalogsInProcedureCalls", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsCatalogsInProcedureCalls__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsCatalogsInProcedureCalls__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsCatalogsInTableDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCatalogsInTableDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1b_supportsCatalogsInTableDefinitions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsCatalogsInTableDefinitions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsCatalogsInTableDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsColumnAliasing__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsColumnAliasing__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsColumnAliasing__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsColumnAliasing__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsColumnAliasing", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_A_supportsColumnAliasing", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsColumnAliasing__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsColumnAliasing__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsColumnAliasing__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsColumnAliasing__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsConvert__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsConvert__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsConvert__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsConvert__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsConvert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_supportsConvert", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsConvert__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsConvert__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsConvert__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsConvert__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_supportsConvert_II_Z_arg_fromType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_supportsConvert_II_Z_arg_toType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsConvert_II_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_supportsConvert_II_Z_arg_fromType,
  &LiteDatabaseMetaData_methods_supportsConvert_II_Z_arg_toType,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsConvert_II_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsConvert_II_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsConvert_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsConvert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_D_supportsConvert", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsConvert_II_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsConvert_II_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsConvert_II_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsConvert_II_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsCoreSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsCoreSQLGrammar__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsCoreSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsCoreSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCoreSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Q_supportsCoreSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsCoreSQLGrammar__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsCoreSQLGrammar__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsCoreSQLGrammar__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsCoreSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsCorrelatedSubqueries__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsCorrelatedSubqueries__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsCorrelatedSubqueries", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1m_supportsCorrelatedSubqueries", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsCorrelatedSubqueries__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsCorrelatedSubqueries__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsCorrelatedSubqueries__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsDataDefinitionAndDataManipulationTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDataDefinitionAndDataManipulationTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1R_supportsDataDefinitionAndDataManipulationTransactions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsDataDefinitionAndDataManipulationTransactions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsDataDefinitionAndDataManipulationTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsDataManipulationTransactionsOnly__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDataManipulationTransactionsOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1S_supportsDataManipulationTransactionsOnly", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsDataManipulationTransactionsOnly__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsDataManipulationTransactionsOnly__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsDifferentTableCorrelationNames__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsDifferentTableCorrelationNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_F_supportsDifferentTableCorrelationNames", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsDifferentTableCorrelationNames__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsDifferentTableCorrelationNames__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsExpressionsInOrderBy__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsExpressionsInOrderBy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsExpressionsInOrderBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_supportsExpressionsInOrderBy", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsExpressionsInOrderBy__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsExpressionsInOrderBy__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsExpressionsInOrderBy__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsExtendedSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsExtendedSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsExtendedSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_R_supportsExtendedSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsExtendedSQLGrammar__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsExtendedSQLGrammar__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsExtendedSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsFullOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsFullOuterJoins__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsFullOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsFullOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsFullOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_X_supportsFullOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsFullOuterJoins__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsFullOuterJoins__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsFullOuterJoins__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsFullOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsGroupBy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsGroupBy__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsGroupBy__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsGroupBy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupBy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_supportsGroupBy", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsGroupBy__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsGroupBy__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsGroupBy__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsGroupBy__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsGroupByBeyondSelect__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsGroupByBeyondSelect__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupByBeyondSelect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_supportsGroupByBeyondSelect", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsGroupByBeyondSelect__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsGroupByBeyondSelect__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsGroupByBeyondSelect__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsGroupByUnrelated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsGroupByUnrelated__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsGroupByUnrelated__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsGroupByUnrelated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsGroupByUnrelated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_supportsGroupByUnrelated", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsGroupByUnrelated__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsGroupByUnrelated__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsGroupByUnrelated__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsGroupByUnrelated__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsIntegrityEnhancementFacility__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsIntegrityEnhancementFacility", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_V_supportsIntegrityEnhancementFacility", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsIntegrityEnhancementFacility__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsIntegrityEnhancementFacility__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsLikeEscapeClause__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsLikeEscapeClause__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsLikeEscapeClause__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsLikeEscapeClause__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsLikeEscapeClause", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L_supportsLikeEscapeClause", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsLikeEscapeClause__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsLikeEscapeClause__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsLikeEscapeClause__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsLikeEscapeClause__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsLimitedOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsLimitedOuterJoins__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsLimitedOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsLimitedOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsLimitedOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Y_supportsLimitedOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsLimitedOuterJoins__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsLimitedOuterJoins__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsLimitedOuterJoins__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsLimitedOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsMinimumSQLGrammar__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsMinimumSQLGrammar__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMinimumSQLGrammar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_P_supportsMinimumSQLGrammar", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsMinimumSQLGrammar__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsMinimumSQLGrammar__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsMinimumSQLGrammar__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsMixedCaseIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsMixedCaseIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMixedCaseIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_supportsMixedCaseIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsMixedCaseIdentifiers__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsMixedCaseIdentifiers__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsMixedCaseIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsMixedCaseQuotedIdentifiers__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMixedCaseQuotedIdentifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_supportsMixedCaseQuotedIdentifiers", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsMixedCaseQuotedIdentifiers__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsMixedCaseQuotedIdentifiers__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsMultipleResultSets__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsMultipleResultSets__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsMultipleResultSets__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsMultipleResultSets__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMultipleResultSets", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_M_supportsMultipleResultSets", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsMultipleResultSets__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsMultipleResultSets__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsMultipleResultSets__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsMultipleResultSets__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsMultipleTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsMultipleTransactions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsMultipleTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsMultipleTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsMultipleTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_N_supportsMultipleTransactions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsMultipleTransactions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsMultipleTransactions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsMultipleTransactions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsMultipleTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsNonNullableColumns__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsNonNullableColumns__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsNonNullableColumns__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsNonNullableColumns__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsNonNullableColumns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_O_supportsNonNullableColumns", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsNonNullableColumns__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsNonNullableColumns__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsNonNullableColumns__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsNonNullableColumns__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsOpenCursorsAcrossCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenCursorsAcrossCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1p_supportsOpenCursorsAcrossCommit", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsOpenCursorsAcrossCommit__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsOpenCursorsAcrossCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsOpenCursorsAcrossRollback__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenCursorsAcrossRollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1q_supportsOpenCursorsAcrossRollback", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsOpenCursorsAcrossRollback__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsOpenCursorsAcrossRollback__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsOpenStatementsAcrossCommit__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenStatementsAcrossCommit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1r_supportsOpenStatementsAcrossCommit", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsOpenStatementsAcrossCommit__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsOpenStatementsAcrossCommit__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsOpenStatementsAcrossRollback__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOpenStatementsAcrossRollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1s_supportsOpenStatementsAcrossRollback", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsOpenStatementsAcrossRollback__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsOpenStatementsAcrossRollback__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsOrderByUnrelated__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsOrderByUnrelated__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsOrderByUnrelated__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsOrderByUnrelated__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOrderByUnrelated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H_supportsOrderByUnrelated", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsOrderByUnrelated__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsOrderByUnrelated__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsOrderByUnrelated__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsOrderByUnrelated__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsOuterJoins__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsOuterJoins__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsOuterJoins__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsOuterJoins__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsOuterJoins", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_W_supportsOuterJoins", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsOuterJoins__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsOuterJoins__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsOuterJoins__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsOuterJoins__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsPositionedDelete__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsPositionedDelete__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsPositionedDelete__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsPositionedDelete__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsPositionedDelete", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1e_supportsPositionedDelete", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsPositionedDelete__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsPositionedDelete__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsPositionedDelete__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsPositionedDelete__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsPositionedUpdate__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsPositionedUpdate__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsPositionedUpdate__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsPositionedUpdate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsPositionedUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1f_supportsPositionedUpdate", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsPositionedUpdate__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsPositionedUpdate__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsPositionedUpdate__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsPositionedUpdate__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_concur = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "concur", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_type,
  &LiteDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_arg_concur,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsResultSetConcurrency_II_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsResultSetConcurrency_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsResultSetConcurrency", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2d_supportsResultSetConcurrency", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsResultSetConcurrency_II_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsResultSetConcurrency_II_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsResultSetConcurrency_II_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_supportsResultType_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsResultType_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_supportsResultType_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsResultType_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsResultType_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsResultType_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsResultType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2c_supportsResultType", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsResultType_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsResultType_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsResultType_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsResultType_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSchemasInDataManipulation__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSchemasInDataManipulation__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInDataManipulation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_14_supportsSchemasInDataManipulation", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSchemasInDataManipulation__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSchemasInDataManipulation__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSchemasInDataManipulation__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSchemasInIndexDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInIndexDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_17_supportsSchemasInIndexDefinitions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSchemasInIndexDefinitions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSchemasInIndexDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSchemasInPrivilegeDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInPrivilegeDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_18_supportsSchemasInPrivilegeDefinitions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSchemasInPrivilegeDefinitions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSchemasInPrivilegeDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSchemasInProcedureCalls__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSchemasInProcedureCalls__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInProcedureCalls", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_15_supportsSchemasInProcedureCalls", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSchemasInProcedureCalls__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSchemasInProcedureCalls__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSchemasInProcedureCalls__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSchemasInTableDefinitions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSchemasInTableDefinitions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSchemasInTableDefinitions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_16_supportsSchemasInTableDefinitions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSchemasInTableDefinitions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSchemasInTableDefinitions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSchemasInTableDefinitions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSelectForUpdate__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSelectForUpdate__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSelectForUpdate__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSelectForUpdate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSelectForUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1g_supportsSelectForUpdate", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSelectForUpdate__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSelectForUpdate__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSelectForUpdate__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSelectForUpdate__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsStoredProcedures__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsStoredProcedures__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsStoredProcedures__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsStoredProcedures__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsStoredProcedures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1h_supportsStoredProcedures", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsStoredProcedures__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsStoredProcedures__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsStoredProcedures__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsStoredProcedures__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSubqueriesInComparisons__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSubqueriesInComparisons__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInComparisons", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1i_supportsSubqueriesInComparisons", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSubqueriesInComparisons__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSubqueriesInComparisons__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSubqueriesInComparisons__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSubqueriesInExists__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSubqueriesInExists__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSubqueriesInExists__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSubqueriesInExists__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInExists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1j_supportsSubqueriesInExists", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSubqueriesInExists__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSubqueriesInExists__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSubqueriesInExists__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSubqueriesInExists__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSubqueriesInIns__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSubqueriesInIns__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSubqueriesInIns__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSubqueriesInIns__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInIns", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1k_supportsSubqueriesInIns", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSubqueriesInIns__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSubqueriesInIns__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSubqueriesInIns__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSubqueriesInIns__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsSubqueriesInQuantifieds__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsSubqueriesInQuantifieds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1l_supportsSubqueriesInQuantifieds", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsSubqueriesInQuantifieds__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsSubqueriesInQuantifieds__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsTableCorrelationNames__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsTableCorrelationNames__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsTableCorrelationNames__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsTableCorrelationNames__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTableCorrelationNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_supportsTableCorrelationNames", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsTableCorrelationNames__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsTableCorrelationNames__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsTableCorrelationNames__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsTableCorrelationNames__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsTransactionIsolationLevel_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTransactionIsolationLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1Q_supportsTransactionIsolationLevel", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsTransactionIsolationLevel_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsTransactionIsolationLevel_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsTransactions__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsTransactions__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsTransactions__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsTransactions__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsTransactions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1P_supportsTransactions", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsTransactions__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsTransactions__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsTransactions__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsTransactions__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsUnion__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsUnion__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsUnion__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsUnion__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsUnion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1n_supportsUnion", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsUnion__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsUnion__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsUnion__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsUnion__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_supportsUnionAll__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_supportsUnionAll__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_supportsUnionAll__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_supportsUnionAll__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "supportsUnionAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1o_supportsUnionAll", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_supportsUnionAll__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_supportsUnionAll__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_supportsUnionAll__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_supportsUnionAll__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDatabaseMetaData_methods_updatesAreDetected_I_Z_arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_updatesAreDetected_I_Z_args[] = 
{
  &LiteDatabaseMetaData_methods_updatesAreDetected_I_Z_arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_updatesAreDetected_I_Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_updatesAreDetected_I_Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_updatesAreDetected_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "updatesAreDetected", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2k_updatesAreDetected", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_updatesAreDetected_I_Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_updatesAreDetected_I_Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_updatesAreDetected_I_Z_dispatch, // invoke this method
  LiteDatabaseMetaData_updatesAreDetected_I_Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_usesLocalFilePerTable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_usesLocalFilePerTable__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_usesLocalFilePerTable__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_usesLocalFilePerTable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usesLocalFilePerTable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_usesLocalFilePerTable", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_usesLocalFilePerTable__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_usesLocalFilePerTable__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_usesLocalFilePerTable__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_usesLocalFilePerTable__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDatabaseMetaData_methods_usesLocalFiles__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDatabaseMetaData_methods_usesLocalFiles__Z_exceptions[] =
{
  RSQLException::clazzInfo(), 
  0
};

void LiteDatabaseMetaData_usesLocalFiles__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, SQLException) == true)
    THROW_INSTANCE( RSQLException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDatabaseMetaData_method_usesLocalFiles__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "usesLocalFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_usesLocalFiles", // alternative name of method
  -1, // altlabelHashCode
  LiteDatabaseMetaData_methods_usesLocalFiles__Z_args, // the arguments
  0, //arguments count
  LiteDatabaseMetaData_methods_usesLocalFiles__Z_exceptions, // the declared exceptions
  LiteDatabaseMetaData_MetainfoWrapper::LiteDatabaseMetaData_method_usesLocalFiles__Z_dispatch, // invoke this method
  LiteDatabaseMetaData_usesLocalFiles__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteDatabaseMetaData_methods[] = 
{
  &LiteDatabaseMetaData_method_GetClass__L_acdk_lang_RClass_,
  &LiteDatabaseMetaData_method_LiteDatabaseMetaData_INLRLiteConnection__LRLiteDatabaseMetaData_,
  &LiteDatabaseMetaData_method_allProceduresAreCallable__Z,
  &LiteDatabaseMetaData_method_allTablesAreSelectable__Z,
  &LiteDatabaseMetaData_method_dataDefinitionCausesTransactionCommit__Z,
  &LiteDatabaseMetaData_method_dataDefinitionIgnoredInTransactions__Z,
  &LiteDatabaseMetaData_method_deletesAreDetected_I_Z,
  &LiteDatabaseMetaData_method_doesMaxRowSizeIncludeBlobs__Z,
  &LiteDatabaseMetaData_method_getBestRowIdentifier_INLRString_INLRString_INLRString_IZ_LRResultSet_,
  &LiteDatabaseMetaData_method_getCatalogSeparator__LRString_,
  &LiteDatabaseMetaData_method_getCatalogTerm__LRString_,
  &LiteDatabaseMetaData_method_getCatalogs__LRResultSet_,
  &LiteDatabaseMetaData_method_getColumnPrivileges_INLRString_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getConnection__LRConnection_,
  &LiteDatabaseMetaData_method_getCrossReference_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getDatabaseProductName__LRString_,
  &LiteDatabaseMetaData_method_getDatabaseProductVersion__LRString_,
  &LiteDatabaseMetaData_method_getDateTimeFunctions__LRString_,
  &LiteDatabaseMetaData_method_getDefaultTransactionIsolation__I,
  &LiteDatabaseMetaData_method_getDriverMajorVersion__I,
  &LiteDatabaseMetaData_method_getDriverMinorVersion__I,
  &LiteDatabaseMetaData_method_getDriverName__LRString_,
  &LiteDatabaseMetaData_method_getDriverVersion__LRString_,
  &LiteDatabaseMetaData_method_getExportedKeys_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getExtraNameCharacters__LRString_,
  &LiteDatabaseMetaData_method_getIdentiferQuoteString__LRString_,
  &LiteDatabaseMetaData_method_getImportedKeys_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getIndexInfo_INLRString_INLRString_INLRString_ZZ_LRResultSet_,
  &LiteDatabaseMetaData_method_getMaxBinaryLiteralLength__I,
  &LiteDatabaseMetaData_method_getMaxCatalogNameLength__I,
  &LiteDatabaseMetaData_method_getMaxCharLiteralLength__I,
  &LiteDatabaseMetaData_method_getMaxColumnNameLength__I,
  &LiteDatabaseMetaData_method_getMaxColumnsInGroupBy__I,
  &LiteDatabaseMetaData_method_getMaxColumnsInIndex__I,
  &LiteDatabaseMetaData_method_getMaxColumnsInOrderBy__I,
  &LiteDatabaseMetaData_method_getMaxColumnsInSelect__I,
  &LiteDatabaseMetaData_method_getMaxColumnsInTable__I,
  &LiteDatabaseMetaData_method_getMaxConnections__I,
  &LiteDatabaseMetaData_method_getMaxCursorNameLength__I,
  &LiteDatabaseMetaData_method_getMaxIndexLength__I,
  &LiteDatabaseMetaData_method_getMaxProcedureNameLength__I,
  &LiteDatabaseMetaData_method_getMaxRowSize__I,
  &LiteDatabaseMetaData_method_getMaxSchemaNameLength__I,
  &LiteDatabaseMetaData_method_getMaxStatementLength__I,
  &LiteDatabaseMetaData_method_getMaxStatements__I,
  &LiteDatabaseMetaData_method_getMaxTableNameLength__I,
  &LiteDatabaseMetaData_method_getMaxTableUserLength__I,
  &LiteDatabaseMetaData_method_getMaxTablesInSelect__I,
  &LiteDatabaseMetaData_method_getNumericFunctions__LRString_,
  &LiteDatabaseMetaData_method_getPrimaryKeys_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getProcedureColumns_INLRString_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getProcedureTerm__LRString_,
  &LiteDatabaseMetaData_method_getProcedures_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getSQLKeywords__LRString_,
  &LiteDatabaseMetaData_method_getSchemaTerm__LRString_,
  &LiteDatabaseMetaData_method_getSchemas__LRResultSet_,
  &LiteDatabaseMetaData_method_getSearchStringEscape__LRString_,
  &LiteDatabaseMetaData_method_getStringFunctions__LRString_,
  &LiteDatabaseMetaData_method_getSystemFunctions__LRString_,
  &LiteDatabaseMetaData_method_getTablePrivileges_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getTableTypes__LRResultSet_,
  &LiteDatabaseMetaData_method_getTables_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_getTypeInfo__LRResultSet_,
  &LiteDatabaseMetaData_method_getUDTs_INLRString_INLRString_INLRString_INLRintArray__LRResultSet_,
  &LiteDatabaseMetaData_method_getURL__LRString_,
  &LiteDatabaseMetaData_method_getUserName__LRString_,
  &LiteDatabaseMetaData_method_getVersionColumns_INLRString_INLRString_INLRString__LRResultSet_,
  &LiteDatabaseMetaData_method_insertsAreDetected_I_Z,
  &LiteDatabaseMetaData_method_isCatalogAtStart__Z,
  &LiteDatabaseMetaData_method_isReadOnly__Z,
  &LiteDatabaseMetaData_method_nullPlusNonNullIsNull__Z,
  &LiteDatabaseMetaData_method_nullsAreSortedAtEnd__Z,
  &LiteDatabaseMetaData_method_nullsAreSortedAtStart__Z,
  &LiteDatabaseMetaData_method_nullsAreSortedHigh__Z,
  &LiteDatabaseMetaData_method_nullsAreSortedLow__Z,
  &LiteDatabaseMetaData_method_othersDeletesAreVisible_I_Z,
  &LiteDatabaseMetaData_method_othersInsertsAreVisible_I_Z,
  &LiteDatabaseMetaData_method_othersUpdatesAreVisible_I_Z,
  &LiteDatabaseMetaData_method_ownDeletesAreVisible_I_Z,
  &LiteDatabaseMetaData_method_ownInsertsAreVisible_I_Z,
  &LiteDatabaseMetaData_method_ownUpdatesAreVisible_I_Z,
  &LiteDatabaseMetaData_method_storesLowerCaseIdentifiers__Z,
  &LiteDatabaseMetaData_method_storesLowerCaseQuotedIdentifiers__Z,
  &LiteDatabaseMetaData_method_storesMixedCaseIdentifiers__Z,
  &LiteDatabaseMetaData_method_storesMixedCaseQuotedIdentifiers__Z,
  &LiteDatabaseMetaData_method_storesUpperCaseIdentifiers__Z,
  &LiteDatabaseMetaData_method_storesUpperCaseQuotedIdentifiers__Z,
  &LiteDatabaseMetaData_method_supportsANSI92EntryLevelSQL__Z,
  &LiteDatabaseMetaData_method_supportsANSI92FullSQL__Z,
  &LiteDatabaseMetaData_method_supportsANSI92IntermediateSQL__Z,
  &LiteDatabaseMetaData_method_supportsAlterTableWithAddColumn__Z,
  &LiteDatabaseMetaData_method_supportsAlterTableWithDropColumn__Z,
  &LiteDatabaseMetaData_method_supportsBatchUpdates__Z,
  &LiteDatabaseMetaData_method_supportsCatalogInPrivilegeDefinitions__Z,
  &LiteDatabaseMetaData_method_supportsCatalogsInDataManipulation__Z,
  &LiteDatabaseMetaData_method_supportsCatalogsInIndexDefinitions__Z,
  &LiteDatabaseMetaData_method_supportsCatalogsInProcedureCalls__Z,
  &LiteDatabaseMetaData_method_supportsCatalogsInTableDefinitions__Z,
  &LiteDatabaseMetaData_method_supportsColumnAliasing__Z,
  &LiteDatabaseMetaData_method_supportsConvert__Z,
  &LiteDatabaseMetaData_method_supportsConvert_II_Z,
  &LiteDatabaseMetaData_method_supportsCoreSQLGrammar__Z,
  &LiteDatabaseMetaData_method_supportsCorrelatedSubqueries__Z,
  &LiteDatabaseMetaData_method_supportsDataDefinitionAndDataManipulationTransactions__Z,
  &LiteDatabaseMetaData_method_supportsDataManipulationTransactionsOnly__Z,
  &LiteDatabaseMetaData_method_supportsDifferentTableCorrelationNames__Z,
  &LiteDatabaseMetaData_method_supportsExpressionsInOrderBy__Z,
  &LiteDatabaseMetaData_method_supportsExtendedSQLGrammar__Z,
  &LiteDatabaseMetaData_method_supportsFullOuterJoins__Z,
  &LiteDatabaseMetaData_method_supportsGroupBy__Z,
  &LiteDatabaseMetaData_method_supportsGroupByBeyondSelect__Z,
  &LiteDatabaseMetaData_method_supportsGroupByUnrelated__Z,
  &LiteDatabaseMetaData_method_supportsIntegrityEnhancementFacility__Z,
  &LiteDatabaseMetaData_method_supportsLikeEscapeClause__Z,
  &LiteDatabaseMetaData_method_supportsLimitedOuterJoins__Z,
  &LiteDatabaseMetaData_method_supportsMinimumSQLGrammar__Z,
  &LiteDatabaseMetaData_method_supportsMixedCaseIdentifiers__Z,
  &LiteDatabaseMetaData_method_supportsMixedCaseQuotedIdentifiers__Z,
  &LiteDatabaseMetaData_method_supportsMultipleResultSets__Z,
  &LiteDatabaseMetaData_method_supportsMultipleTransactions__Z,
  &LiteDatabaseMetaData_method_supportsNonNullableColumns__Z,
  &LiteDatabaseMetaData_method_supportsOpenCursorsAcrossCommit__Z,
  &LiteDatabaseMetaData_method_supportsOpenCursorsAcrossRollback__Z,
  &LiteDatabaseMetaData_method_supportsOpenStatementsAcrossCommit__Z,
  &LiteDatabaseMetaData_method_supportsOpenStatementsAcrossRollback__Z,
  &LiteDatabaseMetaData_method_supportsOrderByUnrelated__Z,
  &LiteDatabaseMetaData_method_supportsOuterJoins__Z,
  &LiteDatabaseMetaData_method_supportsPositionedDelete__Z,
  &LiteDatabaseMetaData_method_supportsPositionedUpdate__Z,
  &LiteDatabaseMetaData_method_supportsResultSetConcurrency_II_Z,
  &LiteDatabaseMetaData_method_supportsResultType_I_Z,
  &LiteDatabaseMetaData_method_supportsSchemasInDataManipulation__Z,
  &LiteDatabaseMetaData_method_supportsSchemasInIndexDefinitions__Z,
  &LiteDatabaseMetaData_method_supportsSchemasInPrivilegeDefinitions__Z,
  &LiteDatabaseMetaData_method_supportsSchemasInProcedureCalls__Z,
  &LiteDatabaseMetaData_method_supportsSchemasInTableDefinitions__Z,
  &LiteDatabaseMetaData_method_supportsSelectForUpdate__Z,
  &LiteDatabaseMetaData_method_supportsStoredProcedures__Z,
  &LiteDatabaseMetaData_method_supportsSubqueriesInComparisons__Z,
  &LiteDatabaseMetaData_method_supportsSubqueriesInExists__Z,
  &LiteDatabaseMetaData_method_supportsSubqueriesInIns__Z,
  &LiteDatabaseMetaData_method_supportsSubqueriesInQuantifieds__Z,
  &LiteDatabaseMetaData_method_supportsTableCorrelationNames__Z,
  &LiteDatabaseMetaData_method_supportsTransactionIsolationLevel_I_Z,
  &LiteDatabaseMetaData_method_supportsTransactions__Z,
  &LiteDatabaseMetaData_method_supportsUnion__Z,
  &LiteDatabaseMetaData_method_supportsUnionAll__Z,
  &LiteDatabaseMetaData_method_updatesAreDetected_I_Z,
  &LiteDatabaseMetaData_method_usesLocalFilePerTable__Z,
  &LiteDatabaseMetaData_method_usesLocalFiles__Z,
  0
};


struct LiteDatabaseMetaData_MetaInfoInitializer
{  LiteDatabaseMetaData_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteDatabaseMetaData::clazzInfo();
    ci->fields =  _LiteDatabaseMetaData_fields;
    ci->methods =  _LiteDatabaseMetaData_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteDatabaseMetaData_MetaInfoInitializer LiteDatabaseMetaData_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LiteDriver_create_array(int length)
{
  return new ObjectArrayImpl<RLiteDriver>(length);
}

//static
::acdk::lang::RObject
LiteDriver_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LiteDriver_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDriver_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LiteDriver::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDriver_method_LiteDriver__LRLiteDriver__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LiteDriver();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDriver_method_acceptsURL_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDriver* This = dmi_cast<LiteDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDriver::acceptsURL((RString)args[0].getObjectVar());
    else
      ret = This->acceptsURL((RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDriver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDriver* This = dmi_cast<LiteDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDriver::connect((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->connect((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDriver_method_getMajorVersionNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDriver* This = dmi_cast<LiteDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDriver::getMajorVersionNumber();
    else
      ret = This->getMajorVersionNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDriver_method_getMinorVersion__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDriver* This = dmi_cast<LiteDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDriver::getMinorVersion();
    else
      ret = This->getMinorVersion();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDriver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDriver* This = dmi_cast<LiteDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LiteDriver::getPropertyInfo((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    else
        ret = (::acdk::lang::RObject)This->getPropertyInfo((RString)args[0].getObjectVar(), (acdk::util::RProperties)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LiteDriver_method_jdbcCompliant__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LiteDriver* This = dmi_cast<LiteDriver>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LiteDriver::jdbcCompliant();
    else
      ret = This->jdbcCompliant();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LiteDriver_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDriver_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDriver_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LiteDriver_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LiteDriver_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LiteDriver_MetainfoWrapper::LiteDriver_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDriver_methods_LiteDriver__LRLiteDriver__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver_methods_LiteDriver__LRLiteDriver__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDriver_method_LiteDriver__LRLiteDriver_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LiteDriver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LiteDriver::clazzInfo(), // return type
  "_0_LiteDriver", // alternative name of method
  -1, // altlabelHashCode
  LiteDriver_methods_LiteDriver__LRLiteDriver__args, // the arguments
  0, //arguments count
  LiteDriver_methods_LiteDriver__LRLiteDriver__exceptions, // the declared exceptions
  LiteDriver_MetainfoWrapper::LiteDriver_method_LiteDriver__LRLiteDriver__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDriver_methods_acceptsURL_INLRString__Z_arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDriver_methods_acceptsURL_INLRString__Z_args[] = 
{
  &LiteDriver_methods_acceptsURL_INLRString__Z_arg_url,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver_methods_acceptsURL_INLRString__Z_exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void LiteDriver_acceptsURL_INLRString__Z_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDriver_method_acceptsURL_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "acceptsURL", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_acceptsURL", // alternative name of method
  -1, // altlabelHashCode
  LiteDriver_methods_acceptsURL_INLRString__Z_args, // the arguments
  0, //arguments count
  LiteDriver_methods_acceptsURL_INLRString__Z_exceptions, // the declared exceptions
  LiteDriver_MetainfoWrapper::LiteDriver_method_acceptsURL_INLRString__Z_dispatch, // invoke this method
  LiteDriver_acceptsURL_INLRString__Z_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_properties = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "properties", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__args[] = 
{
  &LiteDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_url,
  &LiteDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__arg_properties,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void LiteDriver_connect_INLRString_INLacdk_util_RProperties__LRConnection__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDriver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "connect", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RConnection::clazzInfo(), // return type
  "_6_connect", // alternative name of method
  -1, // altlabelHashCode
  LiteDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__args, // the arguments
  0, //arguments count
  LiteDriver_methods_connect_INLRString_INLacdk_util_RProperties__LRConnection__exceptions, // the declared exceptions
  LiteDriver_MetainfoWrapper::LiteDriver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection__dispatch, // invoke this method
  LiteDriver_connect_INLRString_INLacdk_util_RProperties__LRConnection__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDriver_methods_getMajorVersionNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver_methods_getMajorVersionNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDriver_method_getMajorVersionNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMajorVersionNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getMajorVersionNumber", // alternative name of method
  -1, // altlabelHashCode
  LiteDriver_methods_getMajorVersionNumber__I_args, // the arguments
  0, //arguments count
  LiteDriver_methods_getMajorVersionNumber__I_exceptions, // the declared exceptions
  LiteDriver_MetainfoWrapper::LiteDriver_method_getMajorVersionNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDriver_methods_getMinorVersion__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver_methods_getMinorVersion__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDriver_method_getMinorVersion__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinorVersion", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getMinorVersion", // alternative name of method
  -1, // altlabelHashCode
  LiteDriver_methods_getMinorVersion__I_args, // the arguments
  0, //arguments count
  LiteDriver_methods_getMinorVersion__I_exceptions, // the declared exceptions
  LiteDriver_MetainfoWrapper::LiteDriver_method_getMinorVersion__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_url = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "url", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LiteDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_properties = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "properties", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__args[] = 
{
  &LiteDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_url,
  &LiteDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__arg_properties,
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__exceptions[] =
{
  RException::clazzInfo(), 
  0
};

void LiteDriver_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, Exception) == true)
    THROW_INSTANCE( RException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo LiteDriver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPropertyInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDriverPropertyInfoArray::clazzInfo(), // return type
  "_4_getPropertyInfo", // alternative name of method
  -1, // altlabelHashCode
  LiteDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__args, // the arguments
  0, //arguments count
  LiteDriver_methods_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__exceptions, // the declared exceptions
  LiteDriver_MetainfoWrapper::LiteDriver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__dispatch, // invoke this method
  LiteDriver_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LiteDriver_methods_jdbcCompliant__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LiteDriver_methods_jdbcCompliant__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LiteDriver_method_jdbcCompliant__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "jdbcCompliant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_jdbcCompliant", // alternative name of method
  -1, // altlabelHashCode
  LiteDriver_methods_jdbcCompliant__Z_args, // the arguments
  0, //arguments count
  LiteDriver_methods_jdbcCompliant__Z_exceptions, // the declared exceptions
  LiteDriver_MetainfoWrapper::LiteDriver_method_jdbcCompliant__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LiteDriver_methods[] = 
{
  &LiteDriver_method_GetClass__L_acdk_lang_RClass_,
  &LiteDriver_method_LiteDriver__LRLiteDriver_,
  &LiteDriver_method_acceptsURL_INLRString__Z,
  &LiteDriver_method_connect_INLRString_INLacdk_util_RProperties__LRConnection_,
  &LiteDriver_method_getMajorVersionNumber__I,
  &LiteDriver_method_getMinorVersion__I,
  &LiteDriver_method_getPropertyInfo_INLRString_INLacdk_util_RProperties__LRDriverPropertyInfoArray_,
  &LiteDriver_method_jdbcCompliant__Z,
  0
};


struct LiteDriver_MetaInfoInitializer
{  LiteDriver_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LiteDriver::clazzInfo();
    ci->fields =  _LiteDriver_fields;
    ci->methods =  _LiteDriver_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LiteDriver_MetaInfoInitializer LiteDriver_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


namespace acdk { 
namespace sql { 
namespace sqlite { 


//static
::acdk::lang::RObject
LitePreparedStatement_create_array(int length)
{
  return new ObjectArrayImpl<RLitePreparedStatement>(length);
}

//static
::acdk::lang::RObject
LitePreparedStatement_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LitePreparedStatement_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LitePreparedStatement::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LitePreparedStatement((RLiteConnection)args[0].getObjectVar(), (RLiteTable)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_addBatch__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::addBatch();
    else
        This->addBatch();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_clearParameters__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::clearParameters();
    else
        This->clearParameters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_execute__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LitePreparedStatement::execute();
    else
      ret = This->execute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_executeQuery__LRResultSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LitePreparedStatement::executeQuery();
    else
        ret = (::acdk::lang::RObject)This->executeQuery();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_executeUpdate__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->LitePreparedStatement::executeUpdate();
    else
      ret = This->executeUpdate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_getMetaData__LRResultSetMetaData__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LitePreparedStatement::getMetaData();
    else
        ret = (::acdk::lang::RObject)This->getMetaData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setBlob_IINLRBlob__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setBlob(args[0].getIntVar(), (RBlob)args[1].getObjectVar());
    else
        This->setBlob(args[0].getIntVar(), (RBlob)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setBoolean_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setBoolean(args[0].getIntVar(), args[1].getBoolVar());
    else
        This->setBoolean(args[0].getIntVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setByte_IB_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setByte(args[0].getIntVar(), args[1].getByteVar());
    else
        This->setByte(args[0].getIntVar(), args[1].getByteVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setBytes_IINLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    else
        This->setBytes(args[0].getIntVar(), (RbyteArray)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setDate_IINLacdk_util_RDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar());
    else
        This->setDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    else
        This->setDate(args[0].getIntVar(), (acdk::util::RDate)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setDouble_ID_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setDouble(args[0].getIntVar(), args[1].getDoubleVar());
    else
        This->setDouble(args[0].getIntVar(), args[1].getDoubleVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setFloat_IF_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setFloat(args[0].getIntVar(), args[1].getFloatVar());
    else
        This->setFloat(args[0].getIntVar(), args[1].getFloatVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setInt_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setInt(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setInt(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setLong_IJ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setLong(args[0].getIntVar(), args[1].getLongVar());
    else
        This->setLong(args[0].getIntVar(), args[1].getLongVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setNull_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setNull(args[0].getIntVar(), args[1].getIntVar());
    else
        This->setNull(args[0].getIntVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setNull_IIINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setNull(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    else
        This->setNull(args[0].getIntVar(), args[1].getIntVar(), (RString)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setObject_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    else
        This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setObject_IINLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    else
        This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setObject_IINLRObject_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    else
        This->setObject(args[0].getIntVar(), (RObject)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setShort_IS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setShort(args[0].getIntVar(), args[1].getShortVar());
    else
        This->setShort(args[0].getIntVar(), args[1].getShortVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    else
        This->setString(args[0].getIntVar(), (RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setTime_IINLRTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    else
        This->setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setTime_IINLRTime_INLacdk_util_RCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    else
        This->setTime(args[0].getIntVar(), (RTime)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setTimestamp_IINLRTimestamp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    else
        This->setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LitePreparedStatement_method_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LitePreparedStatement::setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    else
        This->setTimestamp(args[0].getIntVar(), (RTimestamp)args[1].getObjectVar(), (acdk::util::RCalendar)args[2].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LitePreparedStatement_fields__table_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LitePreparedStatement* This = dmi_cast<LitePreparedStatement>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_table, flags);
    else
      This->_table = (RLiteTable)var.getObjectVar();
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LitePreparedStatement_fields__table = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_table", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteTable::clazzInfo(),
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_fields__table_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LitePreparedStatement_fields[] = 
{
  &LitePreparedStatement_fields__table,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_s_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__arg_con = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "con", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteConnection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__arg_table = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "table", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLiteTable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__args[] = 
{
  &LitePreparedStatement_methods_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__arg_con,
  &LitePreparedStatement_methods_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__arg_table,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LitePreparedStatement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LitePreparedStatement::clazzInfo(), // return type
  "_0_LitePreparedStatement", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_addBatch__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_addBatch__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_addBatch__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addBatch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_addBatch", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_addBatch__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_addBatch__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_addBatch__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_clearParameters__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_clearParameters__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_clearParameters__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearParameters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_clearParameters", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_clearParameters__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_clearParameters__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_clearParameters__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_execute__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_execute__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_execute__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_execute", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_execute__Z_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_execute__Z_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_execute__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_executeQuery__LRResultSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_executeQuery__LRResultSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_executeQuery__LRResultSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeQuery", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSet::clazzInfo(), // return type
  "_4_executeQuery", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_executeQuery__LRResultSet__args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_executeQuery__LRResultSet__exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_executeQuery__LRResultSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_executeUpdate__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_executeUpdate__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_executeUpdate__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "executeUpdate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_executeUpdate", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_executeUpdate__I_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_executeUpdate__I_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_executeUpdate__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_getMetaData__LRResultSetMetaData__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_getMetaData__LRResultSetMetaData__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_getMetaData__LRResultSetMetaData_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMetaData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResultSetMetaData::clazzInfo(), // return type
  "_6_getMetaData", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_getMetaData__LRResultSetMetaData__args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_getMetaData__LRResultSetMetaData__exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_getMetaData__LRResultSetMetaData__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setBlob_IINLRBlob__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setBlob_IINLRBlob__V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBlob::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setBlob_IINLRBlob__V_args[] = 
{
  &LitePreparedStatement_methods_setBlob_IINLRBlob__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setBlob_IINLRBlob__V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setBlob_IINLRBlob__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setBlob_IINLRBlob__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBlob", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_setBlob", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setBlob_IINLRBlob__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setBlob_IINLRBlob__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setBlob_IINLRBlob__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setBoolean_IZ_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setBoolean_IZ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setBoolean_IZ_V_args[] = 
{
  &LitePreparedStatement_methods_setBoolean_IZ_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setBoolean_IZ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setBoolean_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setBoolean_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setBoolean", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setBoolean_IZ_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setBoolean_IZ_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setBoolean_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setByte_IB_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setByte_IB_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setByte_IB_V_args[] = 
{
  &LitePreparedStatement_methods_setByte_IB_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setByte_IB_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setByte_IB_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setByte_IB_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setByte", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setByte_IB_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setByte_IB_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setByte_IB_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setBytes_IINLRbyteArray__V_args[] = 
{
  &LitePreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setBytes_IINLRbyteArray__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setBytes_IINLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setBytes_IINLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setBytes", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setBytes_IINLRbyteArray__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setBytes_IINLRbyteArray__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setBytes_IINLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setDate_IINLacdk_util_RDate__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setDate_IINLacdk_util_RDate__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setDate_IINLacdk_util_RDate__V_args[] = 
{
  &LitePreparedStatement_methods_setDate_IINLacdk_util_RDate__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setDate_IINLacdk_util_RDate__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setDate_IINLacdk_util_RDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setDate_IINLacdk_util_RDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setDate", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setDate_IINLacdk_util_RDate__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setDate_IINLacdk_util_RDate__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setDate_IINLacdk_util_RDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_args[] = 
{
  &LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_x,
  &LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setDate", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setDouble_ID_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setDouble_ID_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setDouble_ID_V_args[] = 
{
  &LitePreparedStatement_methods_setDouble_ID_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setDouble_ID_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setDouble_ID_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setDouble_ID_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setDouble", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setDouble_ID_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setDouble_ID_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setDouble_ID_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setFloat_IF_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setFloat_IF_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setFloat_IF_V_args[] = 
{
  &LitePreparedStatement_methods_setFloat_IF_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setFloat_IF_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setFloat_IF_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setFloat_IF_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setFloat", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setFloat_IF_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setFloat_IF_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setFloat_IF_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setInt_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setInt_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setInt_II_V_args[] = 
{
  &LitePreparedStatement_methods_setInt_II_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setInt_II_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setInt_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setInt_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setInt", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setInt_II_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setInt_II_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setInt_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setLong_IJ_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setLong_IJ_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setLong_IJ_V_args[] = 
{
  &LitePreparedStatement_methods_setLong_IJ_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setLong_IJ_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setLong_IJ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setLong_IJ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setLong", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setLong_IJ_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setLong_IJ_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setLong_IJ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setNull_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setNull_II_V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setNull_II_V_args[] = 
{
  &LitePreparedStatement_methods_setNull_II_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setNull_II_V_arg_sqlType,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setNull_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setNull_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setNull", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setNull_II_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setNull_II_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setNull_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setNull_IIINLRString__V_arg_paramIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "paramIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setNull_IIINLRString__V_arg_sqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setNull_IIINLRString__V_arg_typeName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "typeName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setNull_IIINLRString__V_args[] = 
{
  &LitePreparedStatement_methods_setNull_IIINLRString__V_arg_paramIndex,
  &LitePreparedStatement_methods_setNull_IIINLRString__V_arg_sqlType,
  &LitePreparedStatement_methods_setNull_IIINLRString__V_arg_typeName,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setNull_IIINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setNull_IIINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setNull", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_setNull", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setNull_IIINLRString__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setNull_IIINLRString__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setNull_IIINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setObject_IINLRObject__V_args[] = 
{
  &LitePreparedStatement_methods_setObject_IINLRObject__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setObject_IINLRObject__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setObject_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setObject_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_setObject", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setObject_IINLRObject__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setObject_IINLRObject__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setObject_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject_I_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject_I_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject_I_V_arg_targetSqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "targetSqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setObject_IINLRObject_I_V_args[] = 
{
  &LitePreparedStatement_methods_setObject_IINLRObject_I_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setObject_IINLRObject_I_V_arg_x,
  &LitePreparedStatement_methods_setObject_IINLRObject_I_V_arg_targetSqlType,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setObject_IINLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setObject_IINLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setObject", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setObject_IINLRObject_I_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setObject_IINLRObject_I_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setObject_IINLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject_II_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject_II_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject_II_V_arg_targetSqlType = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "targetSqlType", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setObject_IINLRObject_II_V_arg_scale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "scale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setObject_IINLRObject_II_V_args[] = 
{
  &LitePreparedStatement_methods_setObject_IINLRObject_II_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setObject_IINLRObject_II_V_arg_x,
  &LitePreparedStatement_methods_setObject_IINLRObject_II_V_arg_targetSqlType,
  &LitePreparedStatement_methods_setObject_IINLRObject_II_V_arg_scale,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setObject_IINLRObject_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setObject_IINLRObject_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_setObject", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setObject_IINLRObject_II_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setObject_IINLRObject_II_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setObject_IINLRObject_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setShort_IS_V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setShort_IS_V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setShort_IS_V_args[] = 
{
  &LitePreparedStatement_methods_setShort_IS_V_arg_parameterIndex,
  &LitePreparedStatement_methods_setShort_IS_V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setShort_IS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setShort_IS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setShort", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setShort_IS_V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setShort_IS_V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setShort_IS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setString_IINLRString__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setString_IINLRString__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setString_IINLRString__V_args[] = 
{
  &LitePreparedStatement_methods_setString_IINLRString__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setString_IINLRString__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_setString", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setString_IINLRString__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setString_IINLRString__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTime_IINLRTime__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTime_IINLRTime__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setTime_IINLRTime__V_args[] = 
{
  &LitePreparedStatement_methods_setTime_IINLRTime__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setTime_IINLRTime__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setTime_IINLRTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setTime_IINLRTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setTime", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setTime_IINLRTime__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setTime_IINLRTime__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setTime_IINLRTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTime::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_args[] = 
{
  &LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_x,
  &LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setTime_IINLRTime_INLacdk_util_RCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setTime", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setTime_IINLRTime_INLacdk_util_RCalendar__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setTime_IINLRTime_INLacdk_util_RCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setTimestamp_IINLRTimestamp__V_args[] = 
{
  &LitePreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setTimestamp_IINLRTimestamp__V_arg_x,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setTimestamp_IINLRTimestamp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setTimestamp_IINLRTimestamp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setTimestamp", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setTimestamp_IINLRTimestamp__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setTimestamp_IINLRTimestamp__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setTimestamp_IINLRTimestamp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_parameterIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "parameterIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_x = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "x", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimestamp::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_cal = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cal", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RCalendar::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_args[] = 
{
  &LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_parameterIndex,
  &LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_x,
  &LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_arg_cal,
  0
};

::acdk::lang::dmi::ClazzInfo* LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LitePreparedStatement_method_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimestamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setTimestamp", // alternative name of method
  -1, // altlabelHashCode
  LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_args, // the arguments
  0, //arguments count
  LitePreparedStatement_methods_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_exceptions, // the declared exceptions
  LitePreparedStatement_MetainfoWrapper::LitePreparedStatement_method_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LitePreparedStatement_methods[] = 
{
  &LitePreparedStatement_method_GetClass__L_acdk_lang_RClass_,
  &LitePreparedStatement_method_LitePreparedStatement_INLRLiteConnection_INLRLiteTable__LRLitePreparedStatement_,
  &LitePreparedStatement_method_addBatch__V,
  &LitePreparedStatement_method_clearParameters__V,
  &LitePreparedStatement_method_execute__Z,
  &LitePreparedStatement_method_executeQuery__LRResultSet_,
  &LitePreparedStatement_method_executeUpdate__I,
  &LitePreparedStatement_method_getMetaData__LRResultSetMetaData_,
  &LitePreparedStatement_method_setBlob_IINLRBlob__V,
  &LitePreparedStatement_method_setBoolean_IZ_V,
  &LitePreparedStatement_method_setByte_IB_V,
  &LitePreparedStatement_method_setBytes_IINLRbyteArray__V,
  &LitePreparedStatement_method_setDate_IINLacdk_util_RDate__V,
  &LitePreparedStatement_method_setDate_IINLacdk_util_RDate_INLacdk_util_RCalendar__V,
  &LitePreparedStatement_method_setDouble_ID_V,
  &LitePreparedStatement_method_setFloat_IF_V,
  &LitePreparedStatement_method_setInt_II_V,
  &LitePreparedStatement_method_setLong_IJ_V,
  &LitePreparedStatement_method_setNull_II_V,
  &LitePreparedStatement_method_setNull_IIINLRString__V,
  &LitePreparedStatement_method_setObject_IINLRObject__V,
  &LitePreparedStatement_method_setObject_IINLRObject_I_V,
  &LitePreparedStatement_method_setObject_IINLRObject_II_V,
  &LitePreparedStatement_method_setShort_IS_V,
  &LitePreparedStatement_method_setString_IINLRString__V,
  &LitePreparedStatement_method_setTime_IINLRTime__V,
  &LitePreparedStatement_method_setTime_IINLRTime_INLacdk_util_RCalendar__V,
  &LitePreparedStatement_method_setTimestamp_IINLRTimestamp__V,
  &LitePreparedStatement_method_setTimestamp_IINLRTimestamp_INLacdk_util_RCalendar__V,
  0
};


struct LitePreparedStatement_MetaInfoInitializer
{  LitePreparedStatement_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LitePreparedStatement::clazzInfo();
    ci->fields =  _LitePreparedStatement_fields;
    ci->methods =  _LitePreparedStatement_methods;
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LitePreparedStatement_MetaInfoInitializer LitePreparedStatement_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace sql
} // namespace sqlite


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) sqlite_dummyExportFunc() {}
#endif

