%id: acdk_core_io_reader_writer
%title: IO-Concept of ACDK
%shorttitle: Reader / Writer
%seealso: acdk::io=namespace_acdk__io
%body:
<htmlauto/>
<pageintro>
By introducing the IO concept, an insertable universal framework, 
ACDK distants itself even further from its model Java. 
</pageintro>

<jumptable/>

<jump1>The IO concept in Java</jump1>
In Java, there is not only one IO concept (Input/Output, appreviation IO), 
but several others as well. 



<jump1>Character of frameworks</jump1>
Frameworks with a good design are distinguished through: 
<fl>
<f> Their basic principles can be explained with only a few good interfaces 
<f> are relative easy to be implemented 
<f> are relative easy to be expanded 
<f> can be universally inputted 
</fl>



<jump2>Streams as Pipes</jump2>
When using input/output, there are several types of elements. 
Those, which read and write from a medium (like a file, console, TCP etc.)and those, which work as a filter with an existing stream. 
A well known example are the Unix command-line utilities, where pipes can be used for Standard-IN and Standard-OUT: 
<code> 
cat address.dat | cut -d ';' -f 2 | grep 'Kassel' | wc -l > erg.dat
</code>

Unix-Tools can also be seen as the nucleus of classical component technologies.

<image descr="Elemente von Streams"
       src="./Filter-Storage-Elements.gif">

These elements can now be put together, just like in a building set.

<image descr=""
       src="./Filter-Storage-combination.gif">


<jump1>Binary Reader and Writer classes in ACDK</jump1>
In ACDK, Stream classes are divided like this: 

<jump2>Reader</jump2>
%cref[acdk::io::Reader]places the base interface for 
readable accesson a stream. A Reader reads bytes (octets)
from the source.

<jump2>Writer</jump2>
%cref[acdk::io::Writer] places the basis interface for writable access on a stream.  
A Writer writes bytes (octets) to a target.

<jump2>Storage</jump2>
A %cref[acdk::io::Storage] represents the medium, from which one can read or write. Storage is usually a describer.

<image descr=""
       src="./Storage_Writer.gif">
<image descr=""
       src="./Storage_Reader.gif">
<image descr=""
       src="./Storage_ReaderWriter.gif">



<jump2>Filter</jump2>
Filters are again divided into readable and writable: 

<jump2>FilterReader</jump2>
A  %cref[acdk::io::FilterReader] reads from a given reader. 
This can further be a %cref[acdk::io::FilterReader] or a %cref[acdk::io::Storage] 
which implementates a %cref[acdk::io::Reader] interface. 


<image descr=""
       src="./class_acdk__io__FilterReader.gif">

<jump2>FilterWriter</jump2>
A  %cref[acdk::io::FilterWriter] reads from a given reader. 
This can further be a %cref[acdk::io::FilterWriter] or a %cref[acdk::io::Storage] which implementates a 
%cref[acdk::io::Writer] interface. 

<image descr=""
       src="./class_acdk__io__FilterWriter.gif">
     

<jump1>Formated Reader/Writer</jump1>
On top of the Reader/Writer interface formated filter Reader/Writer
provides an access to formated Data.
<fl>
<f> %cref[acdk::io::CharReader] and %cref[acdk::io::CharWriter] 
    reads/writes strings from/to a source/target.
    See also %ref[#Character Reader and Writer classes in ACDK].
    
<f> %cref[acdk::io::DataReader] and %cref[acdk::io::DataWriter]
    reads/writes basic types and Strings to/from a source/target.
    The format can be Binary (%cref[acdk::io::BinaryDataReader])
    or XML (%cref[acdk::xml::XMLObjectReader].
    
<f> %cref[acdk::io::ObjectReader] and %cref[acdk::io::ObjectWriter]
    is derived from DataReader/DataWriter and has the ability to 
    read/write Object from/to a source/target. 
    See also: %ref[Serialization, acdk_hb_mi_serialization].
    
</fl>


.
