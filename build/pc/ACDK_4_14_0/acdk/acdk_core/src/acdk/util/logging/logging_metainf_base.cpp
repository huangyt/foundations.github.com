// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AbstractLogConsumer.h"
#include "ConsoleConsumer.h"
#include "FileConsumer.h"
#include "Formatter.h"
#include "Level.h"
#include "Log.h"
#include "LogConsumer.h"
#include "Logger.h"
#include "logging.h"
#include "LogManager.h"
#include "LogRecord.h"
#include "MsgBoxConsumer.h"
#include "NamedLogArgs.h"
#include "RollingFileConsumer.h"
#include "SimpleFormatter.h"
#include "StdFormatter.h"
#include "TransactionConsumer.h"
#include "Win32DbgConsumer.h"
#include "WriterConsumer.h"

namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractLogConsumer_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractLogConsumer_super_LogConsumer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  LogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractLogConsumer_interfaces[] =
{
  &_AbstractLogConsumer_super___acdk__lang__Object,
  &_AbstractLogConsumer_super_LogConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractLogConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractLogConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractLogConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractLogConsumer(AbstractLogConsumer::clazzInfo());

::acdk::lang::RClass
AbstractLogConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractLogConsumer::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_formatter._ref_this()); // RFormatter _formatter 
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _ConsoleConsumer_super_AbstractLogConsumer =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractLogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConsoleConsumer_interfaces[] =
{
  &_ConsoleConsumer_super_AbstractLogConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ConsoleConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ConsoleConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ConsoleConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ConsoleConsumer(ConsoleConsumer::clazzInfo());

::acdk::lang::RClass
ConsoleConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ConsoleConsumer::getCollectableFields(FieldReferences& fields)
{
  AbstractLogConsumer::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _FileConsumer_super_AbstractLogConsumer =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractLogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileConsumer_interfaces[] =
{
  &_FileConsumer_super_AbstractLogConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileConsumer(FileConsumer::clazzInfo());

::acdk::lang::RClass
FileConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileConsumer::getCollectableFields(FieldReferences& fields)
{
  AbstractLogConsumer::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fname._ref_this()); // RString _fname 
  fields.push_back((::acdk::lang::RObject*)this->_writer._ref_this()); // ::acdk::io::RCharWriter _writer 
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo* _Formatter_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Formatter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Formatter", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Formatter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Formatter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Formatter(Formatter::clazzInfo());

::acdk::lang::RClass
Formatter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Formatter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_AllSys = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "AllSys", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::AllSys, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_TransBegin = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TransBegin", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::TransBegin, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_TransCommit = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TransCommit", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::TransCommit, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_TransRollback = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "TransRollback", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::TransRollback, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_All = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "All", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::All, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_SysDebug = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SysDebug", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::SysDebug, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Debug = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Debug", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Debug, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Debug100 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Debug100", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Debug100, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Debug200 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Debug200", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Debug200, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Debug300 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Debug300", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Debug300, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Debug400 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Debug400", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Debug400, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Trace = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Trace", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Trace, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Trace100 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Trace100", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Trace100, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Trace500 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Trace500", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Trace500, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Trace700 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Trace700", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Trace700, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Info = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Info", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Info, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Info100 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Info100", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Info100, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Info200 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Info200", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Info200, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Info300 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Info300", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Info300, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Info400 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Info400", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Info400, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Info500 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Info500", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Info500, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Info600 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Info600", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Info600, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Note = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Note", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Note, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Warn = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Warn", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Warn, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Error = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Error", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Error, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_Fatal = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Fatal", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::Fatal, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo LogLevel_None = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "None", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::logging::None, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* LogLevel_enumValues[] = {
  &LogLevel_AllSys,
  &LogLevel_TransBegin,
  &LogLevel_TransCommit,
  &LogLevel_TransRollback,
  &LogLevel_All,
  &LogLevel_SysDebug,
  &LogLevel_Debug,
  &LogLevel_Debug100,
  &LogLevel_Debug200,
  &LogLevel_Debug300,
  &LogLevel_Debug400,
  &LogLevel_Trace,
  &LogLevel_Trace100,
  &LogLevel_Trace500,
  &LogLevel_Trace700,
  &LogLevel_Info,
  &LogLevel_Info100,
  &LogLevel_Info200,
  &LogLevel_Info300,
  &LogLevel_Info400,
  &LogLevel_Info500,
  &LogLevel_Info600,
  &LogLevel_Note,
  &LogLevel_Warn,
  &LogLevel_Error,
  &LogLevel_Fatal,
  &LogLevel_None,
0
};

::acdk::lang::dmi::ClazzEnumInfo* LogLevelMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo LogLevel_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "LogLevel", // name
  -1, // hashCode
  "acdk/util/logging", // ns
  0, // _scopeParent
  0, // _nextSibling
  LogLevel_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_LogLevel(&LogLevel_enumInfo);

  return &LogLevel_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_LogLevelEnumInfo(LogLevelMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo* _LogConsumer_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "LogConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LogConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LogConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LogConsumer(LogConsumer::clazzInfo());

::acdk::lang::RClass
LogConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LogConsumer::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _Logger_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Logger_interfaces[] =
{
  &_Logger_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Logger", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Logger_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Logger::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Logger(Logger::clazzInfo());

::acdk::lang::RClass
Logger::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Logger::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_consumer._ref_this()); // RLogConsumerArray _consumer 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
  fields.push_back((::acdk::lang::RObject*)this->_parent._ref_this()); // RLogger _parent 
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _LogManager_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LogManager_interfaces[] =
{
  &_LogManager_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LogManager", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LogManager_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LogManager::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LogManager(LogManager::clazzInfo());

::acdk::lang::RClass
LogManager::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LogManager::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _LogRecord_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LogRecord_interfaces[] =
{
  &_LogRecord_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* LogRecord::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LogRecord", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LogRecord_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 6, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LogRecord::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LogRecord(LogRecord::clazzInfo());

::acdk::lang::RClass
LogRecord::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LogRecord::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->catName._ref_this()); // RString catName 
  fields.push_back((::acdk::lang::RObject*)this->ex._ref_this()); // RThrowable ex 
  fields.push_back((::acdk::lang::RObject*)this->file._ref_this()); // RString file 
  fields.push_back((::acdk::lang::RObject*)this->message._ref_this()); // RString message 
  fields.push_back((::acdk::lang::RObject*)this->namedParameters._ref_this()); // RNamedParameterArray namedParameters 
  fields.push_back((::acdk::lang::RObject*)this->parameters._ref_this()); // RObjectArray parameters 
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _MsgBoxConsumer_super_AbstractLogConsumer =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractLogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MsgBoxConsumer_interfaces[] =
{
  &_MsgBoxConsumer_super_AbstractLogConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* MsgBoxConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MsgBoxConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MsgBoxConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MsgBoxConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MsgBoxConsumer(MsgBoxConsumer::clazzInfo());

::acdk::lang::RClass
MsgBoxConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MsgBoxConsumer::getCollectableFields(FieldReferences& fields)
{
  AbstractLogConsumer::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _RollingFileConsumer_super_FileConsumer =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  FileConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RollingFileConsumer_interfaces[] =
{
  &_RollingFileConsumer_super_FileConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RollingFileConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RollingFileConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RollingFileConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RollingFileConsumer(RollingFileConsumer::clazzInfo());

::acdk::lang::RClass
RollingFileConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RollingFileConsumer::getCollectableFields(FieldReferences& fields)
{
  FileConsumer::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _SimpleFormatter_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SimpleFormatter_super_Formatter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SimpleFormatter_interfaces[] =
{
  &_SimpleFormatter_super_acdk__lang__Object,
  &_SimpleFormatter_super_Formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFormatter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SimpleFormatter", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SimpleFormatter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SimpleFormatter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SimpleFormatter(SimpleFormatter::clazzInfo());

::acdk::lang::RClass
SimpleFormatter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SimpleFormatter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _StdFormatter_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _StdFormatter_super_Formatter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StdFormatter_interfaces[] =
{
  &_StdFormatter_super_acdk__lang__Object,
  &_StdFormatter_super_Formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* StdFormatter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StdFormatter", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StdFormatter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StdFormatter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StdFormatter(StdFormatter::clazzInfo());

::acdk::lang::RClass
StdFormatter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StdFormatter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _TransactionConsumer_super_AbstractLogConsumer =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractLogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TransactionConsumer_interfaces[] =
{
  &_TransactionConsumer_super_AbstractLogConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* TransactionConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TransactionConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TransactionConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TransactionConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TransactionConsumer(TransactionConsumer::clazzInfo());

::acdk::lang::RClass
TransactionConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TransactionConsumer::getCollectableFields(FieldReferences& fields)
{
  AbstractLogConsumer::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_consumer._ref_this()); // RLogConsumer _consumer 
  fields.push_back((::acdk::lang::RObject*)this->_queues._ref_this()); // RLogRecordArrayArray _queues 
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _Win32DbgFormatter_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Win32DbgFormatter_super_Formatter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Win32DbgFormatter_interfaces[] =
{
  &_Win32DbgFormatter_super_acdk__lang__Object,
  &_Win32DbgFormatter_super_Formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgFormatter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Win32DbgFormatter", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Win32DbgFormatter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Win32DbgFormatter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Win32DbgFormatter(Win32DbgFormatter::clazzInfo());

::acdk::lang::RClass
Win32DbgFormatter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Win32DbgFormatter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _Win32DbgConsumer_super_WriterConsumer =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  WriterConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Win32DbgConsumer_interfaces[] =
{
  &_Win32DbgConsumer_super_WriterConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "Win32DbgConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Win32DbgConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Win32DbgConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Win32DbgConsumer(Win32DbgConsumer::clazzInfo());

::acdk::lang::RClass
Win32DbgConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Win32DbgConsumer::getCollectableFields(FieldReferences& fields)
{
  WriterConsumer::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

::acdk::lang::dmi::ClazzSuperInfo _WriterConsumer_super_AbstractLogConsumer =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractLogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _WriterConsumer_interfaces[] =
{
  &_WriterConsumer_super_AbstractLogConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* WriterConsumer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "WriterConsumer", // name of class
  -1, // hashCode
  "acdk/util/logging", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _WriterConsumer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    WriterConsumer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_WriterConsumer(WriterConsumer::clazzInfo());

::acdk::lang::RClass
WriterConsumer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
WriterConsumer::getCollectableFields(FieldReferences& fields)
{
  AbstractLogConsumer::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_writer._ref_this()); // ::acdk::io::RPrintWriter _writer 
}


} // namespace acdk
} // namespace util
} // namespace logging

