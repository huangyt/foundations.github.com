// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../util.h"
#include "../AbstractCollection.h"
#include "../AbstractList.h"
#include "../AbstractListIterator.h"
#include "../AbstractListListIterator.h"
#include "../AbstractListSubList.h"
#include "../AbstractMap.h"
#include "../AbstractSequentialList.h"
#include "../AbstractSet.h"
#include "../acdk_util_classes.h"
#include "../ArrayIterator.h"
#include "../ArrayList.h"
#include "../Arrays.h"
#include "../BasicMapEntry.h"
#include "../BitSet.h"
#include "../Bucket.h"
#include "../Calendar.h"
#include "../Collection.h"
#include "../Collections.h"
#include "../Comparator.h"
#include "../ConcurrentModificationException.h"
#include "../Date.h"
#include "../Dictionary.h"
#include "../DoubleIterator.h"
#include "../EmptyCollectionIterator.h"
#include "../Enumeration.h"
#include "../EventListener.h"
#include "../EventListenerProxy.h"
#include "../EventObject.h"
#include "../GregorianCalendar.h"
#include "../HashMap.h"
#include "../HashSet.h"
#include "../Hashtable.h"
#include "../IdentityHashMap.h"
#include "../Iterator.h"
#include "../LinkedList.h"
#include "../List.h"
#include "../ListIterator.h"
#include "../ListResourceBundle.h"
#include "../Locale.h"
#include "../Map.h"
#include "../MissingResourceException.h"
#include "../NoSuchElementException.h"
#include "../Properties.h"
#include "../PropertiesListener.h"
#include "../PropertyResourceBundle.h"
#include "../Random.h"
#include "../ResourceBundle.h"
#include "../Set.h"
#include "../SimpleCalendar.h"
#include "../SimpleListResourceBundle.h"
#include "../SimpleTimeZone.h"
#include "../SingleObjectIterator.h"
#include "../SortedMap.h"
#include "../SortedSet.h"
#include "../StringTokenizer.h"
#include "../SynchronizedCollections.h"
#include "../SysDate.h"
#include "../TAbstractCollection.h"
#include "../TAbstractList.h"
#include "../TAbstractListIterator.h"
#include "../TAbstractListListIterator.h"
#include "../TAbstractListSubList.h"
#include "../TAbstractMap.h"
#include "../TAbstractSet.h"
#include "../TArrayList.h"
#include "../TBasicMapEntry.h"
#include "../TBucket.h"
#include "../TCollection.h"
#include "../TComparator.h"
#include "../TDoubleIterator.h"
#include "../THashMap.h"
#include "../THashSet.h"
#include "../TimeZone.h"
#include "../TIterator.h"
#include "../TList.h"
#include "../TListIterator.h"
#include "../TMap.h"
#include "../TreeMap.h"
#include "../TreeSet.h"
#include "../TSet.h"
#include "../TSortedMap.h"
#include "../TTreeMap.h"
#include "../util.h"
#include "../util_all.h"
#include "../Vector.h"
#include "../WeakHashMap.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_util_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "util", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_util_unitInfo(&acdk_util_unitInfo);


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractCollection_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractCollection>(length);
}

//static
::acdk::lang::RObject
AbstractCollection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractCollection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractCollection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_addAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractCollection::addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractCollection::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_contains_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractCollection::contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_containsAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractCollection::containsAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->containsAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
  ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
  ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractCollection::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_remove_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractCollection::remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_removeAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractCollection::removeAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->removeAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_retainAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractCollection::retainAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->retainAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_toArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractCollection::toArray();
    else
        ret = (::acdk::lang::RObject)This->toArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_toArray_INLRObjectArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractCollection::toArray(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toArray(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractCollection_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractCollection* This = dmi_cast<AbstractCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractCollection::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractCollection_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractCollection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCollection_methods_addAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_addAll_INLRCollection__Z_args[] = 
{
  &AbstractCollection_methods_addAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_addAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_addAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_addAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_addAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_addAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_addAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_clear", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_clear__V_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_clear__V_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCollection_methods_contains_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_contains_INLRObject__Z_args[] = 
{
  &AbstractCollection_methods_contains_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_contains_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_contains_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_contains", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_contains_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_contains_INLRObject__Z_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_contains_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCollection_methods_containsAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_containsAll_INLRCollection__Z_args[] = 
{
  &AbstractCollection_methods_containsAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_containsAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_containsAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_containsAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_containsAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_containsAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_containsAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCollection_methods_equals_INLRObject__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_equals_INLRObject__Z_args[] = 
{
  &AbstractCollection_methods_equals_INLRObject__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_equals", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_hashCode", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_hashCode__I_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_hashCode__I_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_isEmpty__Z_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCollection_methods_remove_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_remove_INLRObject__Z_args[] = 
{
  &AbstractCollection_methods_remove_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_remove_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_remove_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_remove_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_remove_INLRObject__Z_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_remove_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCollection_methods_removeAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_removeAll_INLRCollection__Z_args[] = 
{
  &AbstractCollection_methods_removeAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_removeAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_removeAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_removeAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_removeAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_removeAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_removeAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCollection_methods_retainAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_retainAll_INLRCollection__Z_args[] = 
{
  &AbstractCollection_methods_retainAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_retainAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_retainAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "retainAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_retainAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_retainAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractCollection_methods_retainAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_retainAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_toArray__LRObjectArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_toArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_toArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_8_toArray", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_toArray__LRObjectArray__args, // the arguments
  0, //arguments count
  AbstractCollection_methods_toArray__LRObjectArray__exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_toArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractCollection_methods_toArray_INLRObjectArray__LRObjectArray__arg_a = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_toArray_INLRObjectArray__LRObjectArray__args[] = 
{
  &AbstractCollection_methods_toArray_INLRObjectArray__LRObjectArray__arg_a,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_toArray_INLRObjectArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_toArray_INLRObjectArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_9_toArray", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_toArray_INLRObjectArray__LRObjectArray__args, // the arguments
  0, //arguments count
  AbstractCollection_methods_toArray_INLRObjectArray__LRObjectArray__exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_toArray_INLRObjectArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractCollection_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractCollection_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_toString", // alternative name of method
  -1, // altlabelHashCode
  AbstractCollection_methods_toString__LRString__args, // the arguments
  0, //arguments count
  AbstractCollection_methods_toString__LRString__exceptions, // the declared exceptions
  AbstractCollection_MetainfoWrapper::AbstractCollection_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractCollection_methods[] = 
{
  &AbstractCollection_method_GetClass__L_acdk_lang_RClass_,
  &AbstractCollection_method_addAll_INLRCollection__Z,
  &AbstractCollection_method_clear__V,
  &AbstractCollection_method_contains_INLRObject__Z,
  &AbstractCollection_method_containsAll_INLRCollection__Z,
  &AbstractCollection_method_equals_INLRObject__Z,
  &AbstractCollection_method_hashCode__I,
  &AbstractCollection_method_isEmpty__Z,
  &AbstractCollection_method_remove_INLRObject__Z,
  &AbstractCollection_method_removeAll_INLRCollection__Z,
  &AbstractCollection_method_retainAll_INLRCollection__Z,
  &AbstractCollection_method_toArray__LRObjectArray_,
  &AbstractCollection_method_toArray_INLRObjectArray__LRObjectArray_,
  &AbstractCollection_method_toString__LRString_,
  0
};


struct AbstractCollection_MetaInfoInitializer
{  AbstractCollection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractCollection::clazzInfo();
    ci->fields =  _AbstractCollection_fields;
    ci->methods =  _AbstractCollection_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractCollection_MetaInfoInitializer AbstractCollection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractList_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractList>(length);
}

//static
::acdk::lang::RObject
AbstractList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_add_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractList::add(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->add(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_add_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_addAll_IINLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::addAll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RCollection>(args[1], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RCollection>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_addAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractList::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_contains_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_containsAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::containsAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->containsAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_indexOf_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::indexOf(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->indexOf(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_lastIndexOf_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::lastIndexOf(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->lastIndexOf(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_listIterator_I_LRListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::listIterator(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->listIterator(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_listIterator__LRListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::listIterator();
    else
        ret = (::acdk::lang::RObject)This->listIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_remove_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_remove_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_removeAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::removeAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->removeAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_removeRange_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractList::removeRange(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->removeRange(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_retainAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::retainAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->retainAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_set_IINLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractList::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_subList_II_LRList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::subList(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->subList(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_toArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::toArray();
    else
        ret = (::acdk::lang::RObject)This->toArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_toArray_INLRObjectArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::toArray(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toArray(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractList_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractList::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractList_fields__modCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractList* This = dmi_cast<AbstractList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_modCount, flags);
    else
      This->_modCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractList_fields__modCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_modCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractList_MetainfoWrapper::AbstractList_fields__modCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractList_fields[] = 
{
  &AbstractList_fields__modCount,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_AbstractList__LRAbstractList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_AbstractList__LRAbstractList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_AbstractList__LRAbstractList_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractList::clazzInfo(), // return type
  "_0_AbstractList", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_AbstractList__LRAbstractList__args, // the arguments
  0, //arguments count
  AbstractList_methods_AbstractList__LRAbstractList__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_r_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_add_IINLRObject__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_add_IINLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_add_IINLRObject__V_args[] = 
{
  &AbstractList_methods_add_IINLRObject__V_arg_index,
  &AbstractList_methods_add_IINLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_add_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_add_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_add", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_add_IINLRObject__V_args, // the arguments
  0, //arguments count
  AbstractList_methods_add_IINLRObject__V_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_add_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_add_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_add_INLRObject__Z_args[] = 
{
  &AbstractList_methods_add_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_add_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_add_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_add", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_add_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_add_INLRObject__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_add_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_addAll_IINLRCollection__Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_addAll_IINLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_addAll_IINLRCollection__Z_args[] = 
{
  &AbstractList_methods_addAll_IINLRCollection__Z_arg_index,
  &AbstractList_methods_addAll_IINLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_addAll_IINLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_addAll_IINLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_addAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_addAll_IINLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_addAll_IINLRCollection__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_addAll_IINLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_addAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_addAll_INLRCollection__Z_args[] = 
{
  &AbstractList_methods_addAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_addAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_addAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_addAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_addAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_addAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_addAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_clear", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_clear__V_args, // the arguments
  0, //arguments count
  AbstractList_methods_clear__V_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_contains_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_contains_INLRObject__Z_args[] = 
{
  &AbstractList_methods_contains_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_contains_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_contains_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_contains", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_contains_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_contains_INLRObject__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_contains_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_containsAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_containsAll_INLRCollection__Z_args[] = 
{
  &AbstractList_methods_containsAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_containsAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_containsAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_containsAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_containsAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_containsAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_containsAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_equals_INLRObject__Z_args[] = 
{
  &AbstractList_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_hashCode", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_hashCode__I_args, // the arguments
  0, //arguments count
  AbstractList_methods_hashCode__I_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_indexOf_INLRObject__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_indexOf_INLRObject__I_args[] = 
{
  &AbstractList_methods_indexOf_INLRObject__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_indexOf_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_indexOf_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_indexOf", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_indexOf_INLRObject__I_args, // the arguments
  0, //arguments count
  AbstractList_methods_indexOf_INLRObject__I_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_indexOf_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_isEmpty__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_8_iterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  AbstractList_methods_iterator__LRIterator__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_lastIndexOf_INLRObject__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_lastIndexOf_INLRObject__I_args[] = 
{
  &AbstractList_methods_lastIndexOf_INLRObject__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_lastIndexOf_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_lastIndexOf_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_lastIndexOf", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_lastIndexOf_INLRObject__I_args, // the arguments
  0, //arguments count
  AbstractList_methods_lastIndexOf_INLRObject__I_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_lastIndexOf_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_listIterator_I_LRListIterator__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_listIterator_I_LRListIterator__args[] = 
{
  &AbstractList_methods_listIterator_I_LRListIterator__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_listIterator_I_LRListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_listIterator_I_LRListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo(), // return type
  "_a_listIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_listIterator_I_LRListIterator__args, // the arguments
  0, //arguments count
  AbstractList_methods_listIterator_I_LRListIterator__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_listIterator_I_LRListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_listIterator__LRListIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_listIterator__LRListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_listIterator__LRListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "listIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo(), // return type
  "_b_listIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_listIterator__LRListIterator__args, // the arguments
  0, //arguments count
  AbstractList_methods_listIterator__LRListIterator__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_listIterator__LRListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_remove_I_LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_remove_I_LRObject__args[] = 
{
  &AbstractList_methods_remove_I_LRObject__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_remove_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_remove_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_c_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_remove_I_LRObject__args, // the arguments
  0, //arguments count
  AbstractList_methods_remove_I_LRObject__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_remove_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_remove_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_remove_INLRObject__Z_args[] = 
{
  &AbstractList_methods_remove_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_remove_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_remove_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_remove_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_remove_INLRObject__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_remove_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_removeAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_removeAll_INLRCollection__Z_args[] = 
{
  &AbstractList_methods_removeAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_removeAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_removeAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_removeAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_removeAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_removeAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_removeAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_removeRange_II_V_arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_removeRange_II_V_arg_toIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_removeRange_II_V_args[] = 
{
  &AbstractList_methods_removeRange_II_V_arg_fromIndex,
  &AbstractList_methods_removeRange_II_V_arg_toIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_removeRange_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_removeRange_II_V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_removeRange", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_removeRange_II_V_args, // the arguments
  0, //arguments count
  AbstractList_methods_removeRange_II_V_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_removeRange_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_retainAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_retainAll_INLRCollection__Z_args[] = 
{
  &AbstractList_methods_retainAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_retainAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_retainAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "retainAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_retainAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_retainAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractList_methods_retainAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_retainAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_set_IINLRObject__LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_set_IINLRObject__LRObject__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_set_IINLRObject__LRObject__args[] = 
{
  &AbstractList_methods_set_IINLRObject__LRObject__arg_index,
  &AbstractList_methods_set_IINLRObject__LRObject__arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_set_IINLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_set_IINLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_d_set", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_set_IINLRObject__LRObject__args, // the arguments
  0, //arguments count
  AbstractList_methods_set_IINLRObject__LRObject__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_set_IINLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_size", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_size__I_args, // the arguments
  0, //arguments count
  AbstractList_methods_size__I_exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_subList_II_LRList__arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_subList_II_LRList__arg_toIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_subList_II_LRList__args[] = 
{
  &AbstractList_methods_subList_II_LRList__arg_fromIndex,
  &AbstractList_methods_subList_II_LRList__arg_toIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_subList_II_LRList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_subList_II_LRList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RList::clazzInfo(), // return type
  "_f_subList", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_subList_II_LRList__args, // the arguments
  0, //arguments count
  AbstractList_methods_subList_II_LRList__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_subList_II_LRList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_toArray__LRObjectArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_toArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_toArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_n_toArray", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_toArray__LRObjectArray__args, // the arguments
  0, //arguments count
  AbstractList_methods_toArray__LRObjectArray__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_toArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractList_methods_toArray_INLRObjectArray__LRObjectArray__arg_a = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_toArray_INLRObjectArray__LRObjectArray__args[] = 
{
  &AbstractList_methods_toArray_INLRObjectArray__LRObjectArray__arg_a,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_toArray_INLRObjectArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_toArray_INLRObjectArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_o_toArray", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_toArray_INLRObjectArray__LRObjectArray__args, // the arguments
  0, //arguments count
  AbstractList_methods_toArray_INLRObjectArray__LRObjectArray__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_toArray_INLRObjectArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractList_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractList_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_p_toString", // alternative name of method
  -1, // altlabelHashCode
  AbstractList_methods_toString__LRString__args, // the arguments
  0, //arguments count
  AbstractList_methods_toString__LRString__exceptions, // the declared exceptions
  AbstractList_MetainfoWrapper::AbstractList_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractList_methods[] = 
{
  &AbstractList_method_AbstractList__LRAbstractList_,
  &AbstractList_method_GetClass__L_acdk_lang_RClass_,
  &AbstractList_method_add_IINLRObject__V,
  &AbstractList_method_add_INLRObject__Z,
  &AbstractList_method_addAll_IINLRCollection__Z,
  &AbstractList_method_addAll_INLRCollection__Z,
  &AbstractList_method_clear__V,
  &AbstractList_method_contains_INLRObject__Z,
  &AbstractList_method_containsAll_INLRCollection__Z,
  &AbstractList_method_equals_INLRObject__Z,
  &AbstractList_method_hashCode__I,
  &AbstractList_method_indexOf_INLRObject__I,
  &AbstractList_method_isEmpty__Z,
  &AbstractList_method_iterator__LRIterator_,
  &AbstractList_method_lastIndexOf_INLRObject__I,
  &AbstractList_method_listIterator_I_LRListIterator_,
  &AbstractList_method_listIterator__LRListIterator_,
  &AbstractList_method_remove_I_LRObject_,
  &AbstractList_method_remove_INLRObject__Z,
  &AbstractList_method_removeAll_INLRCollection__Z,
  &AbstractList_method_removeRange_II_V,
  &AbstractList_method_retainAll_INLRCollection__Z,
  &AbstractList_method_set_IINLRObject__LRObject_,
  &AbstractList_method_size__I,
  &AbstractList_method_subList_II_LRList_,
  &AbstractList_method_toArray__LRObjectArray_,
  &AbstractList_method_toArray_INLRObjectArray__LRObjectArray_,
  &AbstractList_method_toString__LRString_,
  0
};


struct AbstractList_MetaInfoInitializer
{  AbstractList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractList::clazzInfo();
    ci->fields =  _AbstractList_fields;
    ci->methods =  _AbstractList_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractList_MetaInfoInitializer AbstractList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractListIterator_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractListIterator>(length);
}

//static
::acdk::lang::RObject
AbstractListIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractListIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListIterator_method_AbstractListIterator_INLRAbstractList__LRAbstractListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractListIterator(::acdk::lang::dmi::castTo< RAbstractList>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractListIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListIterator_method__checkMod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractListIterator::_checkMod();
    else
        This->_checkMod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractListIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractListIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractListIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractListIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListIterator_fields__knownMod_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_knownMod, flags);
    else
      This->_knownMod = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListIterator_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = ::acdk::lang::dmi::castTo< RAbstractList>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListIterator_fields__position_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_position, flags);
    else
      This->_position = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListIterator_fields__removed_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListIterator* This = dmi_cast<AbstractListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_removed, flags);
    else
      This->_removed = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListIterator_fields__knownMod = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_knownMod", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_fields__knownMod_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListIterator_fields__list = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractList::clazzInfo(),
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListIterator_fields__position = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_position", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_fields__position_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListIterator_fields__removed = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_removed", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_fields__removed_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractListIterator_fields[] = 
{
  &AbstractListIterator_fields__knownMod,
  &AbstractListIterator_fields__list,
  &AbstractListIterator_fields__position,
  &AbstractListIterator_fields__removed,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListIterator_methods_AbstractListIterator_INLRAbstractList__LRAbstractListIterator__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListIterator_methods_AbstractListIterator_INLRAbstractList__LRAbstractListIterator__args[] = 
{
  &AbstractListIterator_methods_AbstractListIterator_INLRAbstractList__LRAbstractListIterator__arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListIterator_methods_AbstractListIterator_INLRAbstractList__LRAbstractListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListIterator_method_AbstractListIterator_INLRAbstractList__LRAbstractListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractListIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractListIterator::clazzInfo(), // return type
  "_1_AbstractListIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractListIterator_methods_AbstractListIterator_INLRAbstractList__LRAbstractListIterator__args, // the arguments
  0, //arguments count
  AbstractListIterator_methods_AbstractListIterator_INLRAbstractList__LRAbstractListIterator__exceptions, // the declared exceptions
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_method_AbstractListIterator_INLRAbstractList__LRAbstractListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractListIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListIterator_methods__checkMod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListIterator_methods__checkMod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListIterator_method__checkMod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkMod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0__checkMod", // alternative name of method
  -1, // altlabelHashCode
  AbstractListIterator_methods__checkMod__V_args, // the arguments
  0, //arguments count
  AbstractListIterator_methods__checkMod__V_exceptions, // the declared exceptions
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_method__checkMod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_element", // alternative name of method
  -1, // altlabelHashCode
  AbstractListIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  AbstractListIterator_methods_element__LRObject__exceptions, // the declared exceptions
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_hasNext", // alternative name of method
  -1, // altlabelHashCode
  AbstractListIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  AbstractListIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_next", // alternative name of method
  -1, // altlabelHashCode
  AbstractListIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  AbstractListIterator_methods_next__LRObject__exceptions, // the declared exceptions
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractListIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  AbstractListIterator_methods_remove__V_exceptions, // the declared exceptions
  AbstractListIterator_MetainfoWrapper::AbstractListIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractListIterator_methods[] = 
{
  &AbstractListIterator_method_AbstractListIterator_INLRAbstractList__LRAbstractListIterator_,
  &AbstractListIterator_method_GetClass__L_acdk_lang_RClass_,
  &AbstractListIterator_method__checkMod__V,
  &AbstractListIterator_method_element__LRObject_,
  &AbstractListIterator_method_hasNext__Z,
  &AbstractListIterator_method_next__LRObject_,
  &AbstractListIterator_method_remove__V,
  0
};


struct AbstractListIterator_MetaInfoInitializer
{  AbstractListIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractListIterator::clazzInfo();
    ci->fields =  _AbstractListIterator_fields;
    ci->methods =  _AbstractListIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractListIterator_MetaInfoInitializer AbstractListIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractListListIterator_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractListListIterator>(length);
}

//static
::acdk::lang::RObject
AbstractListListIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractListListIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListListIterator_method_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractListListIterator(::acdk::lang::dmi::castTo< RAbstractList>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListListIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractListListIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListListIterator_method__checkMod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListListIterator* This = dmi_cast<AbstractListListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractListListIterator::_checkMod();
    else
        This->_checkMod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListListIterator_fields__knownMod_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListListIterator* This = dmi_cast<AbstractListListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_knownMod, flags);
    else
      This->_knownMod = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListListIterator_fields__lastReturned_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListListIterator* This = dmi_cast<AbstractListListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lastReturned, flags);
    else
      This->_lastReturned = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListListIterator_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListListIterator* This = dmi_cast<AbstractListListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = ::acdk::lang::dmi::castTo< RAbstractList>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListListIterator_fields__position_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListListIterator* This = dmi_cast<AbstractListListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_position, flags);
    else
      This->_position = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListListIterator_fields__knownMod = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_knownMod", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListListIterator_MetainfoWrapper::AbstractListListIterator_fields__knownMod_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListListIterator_fields__lastReturned = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_lastReturned", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListListIterator_MetainfoWrapper::AbstractListListIterator_fields__lastReturned_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListListIterator_fields__list = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractList::clazzInfo(),
  AbstractListListIterator_MetainfoWrapper::AbstractListListIterator_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListListIterator_fields__position = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_position", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListListIterator_MetainfoWrapper::AbstractListListIterator_fields__position_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractListListIterator_fields[] = 
{
  &AbstractListListIterator_fields__knownMod,
  &AbstractListListIterator_fields__lastReturned,
  &AbstractListListIterator_fields__list,
  &AbstractListListIterator_fields__position,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListListIterator_methods_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListListIterator_methods_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListListIterator_methods_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__args[] = 
{
  &AbstractListListIterator_methods_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__arg_list,
  &AbstractListListIterator_methods_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListListIterator_methods_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListListIterator_method_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractListListIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractListListIterator::clazzInfo(), // return type
  "_1_AbstractListListIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractListListIterator_methods_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__args, // the arguments
  0, //arguments count
  AbstractListListIterator_methods_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__exceptions, // the declared exceptions
  AbstractListListIterator_MetainfoWrapper::AbstractListListIterator_method_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListListIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListListIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractListListIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractListListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractListListIterator_MetainfoWrapper::AbstractListListIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListListIterator_methods__checkMod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListListIterator_methods__checkMod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListListIterator_method__checkMod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkMod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0__checkMod", // alternative name of method
  -1, // altlabelHashCode
  AbstractListListIterator_methods__checkMod__V_args, // the arguments
  0, //arguments count
  AbstractListListIterator_methods__checkMod__V_exceptions, // the declared exceptions
  AbstractListListIterator_MetainfoWrapper::AbstractListListIterator_method__checkMod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractListListIterator_methods[] = 
{
  &AbstractListListIterator_method_AbstractListListIterator_INLRAbstractList_I_LRAbstractListListIterator_,
  &AbstractListListIterator_method_GetClass__L_acdk_lang_RClass_,
  &AbstractListListIterator_method__checkMod__V,
  0
};


struct AbstractListListIterator_MetaInfoInitializer
{  AbstractListListIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractListListIterator::clazzInfo();
    ci->fields =  _AbstractListListIterator_fields;
    ci->methods =  _AbstractListListIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractListListIterator_MetaInfoInitializer AbstractListListIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractListSubList_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractListSubList>(length);
}

//static
::acdk::lang::RObject
AbstractListSubList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractListSubList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractListSubList(::acdk::lang::dmi::castTo< RAbstractList>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractListSubList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method__checkBoundsExclusive_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractListSubList::_checkBoundsExclusive(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->_checkBoundsExclusive(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method__checkBoundsInclusive_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractListSubList::_checkBoundsInclusive(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->_checkBoundsInclusive(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method__checkMod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractListSubList::_checkMod();
    else
        This->_checkMod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method_add_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractListSubList::add(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->add(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method_addAll_IINLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractListSubList::addAll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RCollection>(args[1], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RCollection>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method_remove_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractListSubList::remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method_removeRange_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractListSubList::removeRange(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->removeRange(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubList_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractListSubList::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListSubList_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = ::acdk::lang::dmi::castTo< RAbstractList>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListSubList_fields__modCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_modCount, flags);
    else
      This->_modCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListSubList_fields__offset_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_offset, flags);
    else
      This->_offset = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListSubList_fields__size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListSubList* This = dmi_cast<AbstractListSubList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_size, flags);
    else
      This->_size = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListSubList_fields__list = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractList::clazzInfo(),
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListSubList_fields__modCount = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_modCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_fields__modCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListSubList_fields__offset = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_offset", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_fields__offset_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListSubList_fields__size = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_fields__size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractListSubList_fields[] = 
{
  &AbstractListSubList_fields__list,
  &AbstractListSubList_fields__modCount,
  &AbstractListSubList_fields__offset,
  &AbstractListSubList_fields__size,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__arg_toIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__args[] = 
{
  &AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__arg_list,
  &AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__arg_fromIndex,
  &AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__arg_toIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractListSubList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractListSubList::clazzInfo(), // return type
  "_0_AbstractListSubList", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__args, // the arguments
  0, //arguments count
  AbstractListSubList_methods_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractListSubList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods__checkBoundsExclusive_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods__checkBoundsExclusive_I_V_args[] = 
{
  &AbstractListSubList_methods__checkBoundsExclusive_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods__checkBoundsExclusive_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method__checkBoundsExclusive_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkBoundsExclusive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8__checkBoundsExclusive", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods__checkBoundsExclusive_I_V_args, // the arguments
  0, //arguments count
  AbstractListSubList_methods__checkBoundsExclusive_I_V_exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method__checkBoundsExclusive_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods__checkBoundsInclusive_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods__checkBoundsInclusive_I_V_args[] = 
{
  &AbstractListSubList_methods__checkBoundsInclusive_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods__checkBoundsInclusive_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method__checkBoundsInclusive_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkBoundsInclusive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7__checkBoundsInclusive", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods__checkBoundsInclusive_I_V_args, // the arguments
  0, //arguments count
  AbstractListSubList_methods__checkBoundsInclusive_I_V_exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method__checkBoundsInclusive_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods__checkMod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods__checkMod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method__checkMod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkMod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6__checkMod", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods__checkMod__V_args, // the arguments
  0, //arguments count
  AbstractListSubList_methods__checkMod__V_exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method__checkMod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_add_IINLRObject__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_add_IINLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods_add_IINLRObject__V_args[] = 
{
  &AbstractListSubList_methods_add_IINLRObject__V_arg_index,
  &AbstractListSubList_methods_add_IINLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods_add_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method_add_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_add", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods_add_IINLRObject__V_args, // the arguments
  0, //arguments count
  AbstractListSubList_methods_add_IINLRObject__V_exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method_add_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_addAll_IINLRCollection__Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_addAll_IINLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods_addAll_IINLRCollection__Z_args[] = 
{
  &AbstractListSubList_methods_addAll_IINLRCollection__Z_arg_index,
  &AbstractListSubList_methods_addAll_IINLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods_addAll_IINLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method_addAll_IINLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_addAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods_addAll_IINLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractListSubList_methods_addAll_IINLRCollection__Z_exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method_addAll_IINLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_remove_I_LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods_remove_I_LRObject__args[] = 
{
  &AbstractListSubList_methods_remove_I_LRObject__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods_remove_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method_remove_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods_remove_I_LRObject__args, // the arguments
  0, //arguments count
  AbstractListSubList_methods_remove_I_LRObject__exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method_remove_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_removeRange_II_V_arg_fromIndex2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromIndex2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubList_methods_removeRange_II_V_arg_toIndex2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toIndex2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods_removeRange_II_V_args[] = 
{
  &AbstractListSubList_methods_removeRange_II_V_arg_fromIndex2,
  &AbstractListSubList_methods_removeRange_II_V_arg_toIndex2,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods_removeRange_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method_removeRange_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_removeRange", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods_removeRange_II_V_args, // the arguments
  0, //arguments count
  AbstractListSubList_methods_removeRange_II_V_exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method_removeRange_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubList_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubList_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_size", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubList_methods_size__I_args, // the arguments
  0, //arguments count
  AbstractListSubList_methods_size__I_exceptions, // the declared exceptions
  AbstractListSubList_MetainfoWrapper::AbstractListSubList_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractListSubList_methods[] = 
{
  &AbstractListSubList_method_AbstractListSubList_INLRAbstractList_II_LRAbstractListSubList_,
  &AbstractListSubList_method_GetClass__L_acdk_lang_RClass_,
  &AbstractListSubList_method__checkBoundsExclusive_I_V,
  &AbstractListSubList_method__checkBoundsInclusive_I_V,
  &AbstractListSubList_method__checkMod__V,
  &AbstractListSubList_method_add_IINLRObject__V,
  &AbstractListSubList_method_addAll_IINLRCollection__Z,
  &AbstractListSubList_method_remove_I_LRObject_,
  &AbstractListSubList_method_removeRange_II_V,
  &AbstractListSubList_method_size__I,
  0
};


struct AbstractListSubList_MetaInfoInitializer
{  AbstractListSubList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractListSubList::clazzInfo();
    ci->fields =  _AbstractListSubList_fields;
    ci->methods =  _AbstractListSubList_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractListSubList_MetaInfoInitializer AbstractListSubList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractListSubListListIterator_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractListSubListListIterator>(length);
}

//static
::acdk::lang::RObject
AbstractListSubListListIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractListSubListListIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubListListIterator_method_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractListSubListListIterator(::acdk::lang::dmi::castTo< RAbstractListSubList>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractListSubListListIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractListSubListListIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListSubListListIterator_fields__it_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListSubListListIterator* This = dmi_cast<AbstractListSubListListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_it, flags);
    else
      This->_it = ::acdk::lang::dmi::castTo< RListIterator>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListSubListListIterator_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListSubListListIterator* This = dmi_cast<AbstractListSubListListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = ::acdk::lang::dmi::castTo< RAbstractListSubList>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractListSubListListIterator_fields__position_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractListSubListListIterator* This = dmi_cast<AbstractListSubListListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_position, flags);
    else
      This->_position = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListSubListListIterator_fields__it = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_it", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo(),
  AbstractListSubListListIterator_MetainfoWrapper::AbstractListSubListListIterator_fields__it_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListSubListListIterator_fields__list = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractListSubList::clazzInfo(),
  AbstractListSubListListIterator_MetainfoWrapper::AbstractListSubListListIterator_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractListSubListListIterator_fields__position = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_position", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractListSubListListIterator_MetainfoWrapper::AbstractListSubListListIterator_fields__position_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractListSubListListIterator_fields[] = 
{
  &AbstractListSubListListIterator_fields__it,
  &AbstractListSubListListIterator_fields__list,
  &AbstractListSubListListIterator_fields__position,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractListSubList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__args[] = 
{
  &AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__arg_list,
  &AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__arg_index,
  &AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubListListIterator_method_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractListSubListListIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractListSubListListIterator::clazzInfo(), // return type
  "_0_AbstractListSubListListIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__args, // the arguments
  0, //arguments count
  AbstractListSubListListIterator_methods_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__exceptions, // the declared exceptions
  AbstractListSubListListIterator_MetainfoWrapper::AbstractListSubListListIterator_method_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractListSubListListIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubListListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractListSubListListIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractListSubListListIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractListSubListListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractListSubListListIterator_MetainfoWrapper::AbstractListSubListListIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractListSubListListIterator_methods[] = 
{
  &AbstractListSubListListIterator_method_AbstractListSubListListIterator_INLRAbstractListSubList_II_LRAbstractListSubListListIterator_,
  &AbstractListSubListListIterator_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct AbstractListSubListListIterator_MetaInfoInitializer
{  AbstractListSubListListIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractListSubListListIterator::clazzInfo();
    ci->fields =  _AbstractListSubListListIterator_fields;
    ci->methods =  _AbstractListSubListListIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractListSubListListIterator_MetaInfoInitializer AbstractListSubListListIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractMap_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractMap>(length);
}

//static
::acdk::lang::RObject
AbstractMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractMap::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_containsKey_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMap::containsKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->containsKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_containsValue_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMap::containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_entrySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    ret = (::acdk::lang::RObject)This->entrySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMap::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_get_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMap::get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMap::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMap::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_keySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMap::keySet();
    else
        ret = (::acdk::lang::RObject)This->keySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_put_INLRObject_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMap::put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_putAll_INLRMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractMap::putAll(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    else
        This->putAll(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_remove_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMap::remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMap::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMap::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMap_method_values__LRCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMap* This = dmi_cast<AbstractMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMap::values();
    else
        ret = (::acdk::lang::RObject)This->values();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractMap_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_AbstractMap__LRAbstractMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_AbstractMap__LRAbstractMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_AbstractMap__LRAbstractMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractMap::clazzInfo(), // return type
  "_0_AbstractMap", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_AbstractMap__LRAbstractMap__args, // the arguments
  0, //arguments count
  AbstractMap_methods_AbstractMap__LRAbstractMap__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_clear", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_clear__V_args, // the arguments
  0, //arguments count
  AbstractMap_methods_clear__V_exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMap_methods_containsKey_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_containsKey_INLRObject__Z_args[] = 
{
  &AbstractMap_methods_containsKey_INLRObject__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_containsKey_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_containsKey_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_containsKey", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_containsKey_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractMap_methods_containsKey_INLRObject__Z_exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_containsKey_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMap_methods_containsValue_INLRObject__Z_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_containsValue_INLRObject__Z_args[] = 
{
  &AbstractMap_methods_containsValue_INLRObject__Z_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_containsValue_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_containsValue_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_containsValue", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_containsValue_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractMap_methods_containsValue_INLRObject__Z_exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_containsValue_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_entrySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_entrySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_entrySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "entrySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_4_entrySet", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_entrySet__LRSet__args, // the arguments
  0, //arguments count
  AbstractMap_methods_entrySet__LRSet__exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_entrySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMap_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_equals_INLRObject__Z_args[] = 
{
  &AbstractMap_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractMap_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMap_methods_get_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_get_INLRObject__LRObject__args[] = 
{
  &AbstractMap_methods_get_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_get_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_get_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_get", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_get_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  AbstractMap_methods_get_INLRObject__LRObject__exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_get_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_hashCode", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_hashCode__I_args, // the arguments
  0, //arguments count
  AbstractMap_methods_hashCode__I_exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  AbstractMap_methods_isEmpty__Z_exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_keySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_keySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_keySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_9_keySet", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_keySet__LRSet__args, // the arguments
  0, //arguments count
  AbstractMap_methods_keySet__LRSet__exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_keySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMap_methods_put_INLRObject_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMap_methods_put_INLRObject_INLRObject__LRObject__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_put_INLRObject_INLRObject__LRObject__args[] = 
{
  &AbstractMap_methods_put_INLRObject_INLRObject__LRObject__arg_key,
  &AbstractMap_methods_put_INLRObject_INLRObject__LRObject__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_put_INLRObject_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_put_INLRObject_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "put", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_a_put", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_put_INLRObject_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  AbstractMap_methods_put_INLRObject_INLRObject__LRObject__exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_put_INLRObject_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMap_methods_putAll_INLRMap__V_arg_m = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "m", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_putAll_INLRMap__V_args[] = 
{
  &AbstractMap_methods_putAll_INLRMap__V_arg_m,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_putAll_INLRMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_putAll_INLRMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "putAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_putAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_putAll_INLRMap__V_args, // the arguments
  0, //arguments count
  AbstractMap_methods_putAll_INLRMap__V_exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_putAll_INLRMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMap_methods_remove_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_remove_INLRObject__LRObject__args[] = 
{
  &AbstractMap_methods_remove_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_remove_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_remove_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_c_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_remove_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  AbstractMap_methods_remove_INLRObject__LRObject__exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_remove_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_size", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_size__I_args, // the arguments
  0, //arguments count
  AbstractMap_methods_size__I_exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_toString", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_toString__LRString__args, // the arguments
  0, //arguments count
  AbstractMap_methods_toString__LRString__exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMap_methods_values__LRCollection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap_methods_values__LRCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMap_method_values__LRCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "values", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo(), // return type
  "_f_values", // alternative name of method
  -1, // altlabelHashCode
  AbstractMap_methods_values__LRCollection__args, // the arguments
  0, //arguments count
  AbstractMap_methods_values__LRCollection__exceptions, // the declared exceptions
  AbstractMap_MetainfoWrapper::AbstractMap_method_values__LRCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractMap_methods[] = 
{
  &AbstractMap_method_AbstractMap__LRAbstractMap_,
  &AbstractMap_method_GetClass__L_acdk_lang_RClass_,
  &AbstractMap_method_clear__V,
  &AbstractMap_method_containsKey_INLRObject__Z,
  &AbstractMap_method_containsValue_INLRObject__Z,
  &AbstractMap_method_entrySet__LRSet_,
  &AbstractMap_method_equals_INLRObject__Z,
  &AbstractMap_method_get_INLRObject__LRObject_,
  &AbstractMap_method_hashCode__I,
  &AbstractMap_method_isEmpty__Z,
  &AbstractMap_method_keySet__LRSet_,
  &AbstractMap_method_put_INLRObject_INLRObject__LRObject_,
  &AbstractMap_method_putAll_INLRMap__V,
  &AbstractMap_method_remove_INLRObject__LRObject_,
  &AbstractMap_method_size__I,
  &AbstractMap_method_toString__LRString_,
  &AbstractMap_method_values__LRCollection_,
  0
};


struct AbstractMap_MetaInfoInitializer
{  AbstractMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractMap::clazzInfo();
    ci->fields =  _AbstractMap_fields;
    ci->methods =  _AbstractMap_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractMap_MetaInfoInitializer AbstractMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractMapCachedKeySet_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractMapCachedKeySet>(length);
}

//static
::acdk::lang::RObject
AbstractMapCachedKeySet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractMapCachedKeySet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySet_method_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractMapCachedKeySet(::acdk::lang::dmi::castTo< RAbstractMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractMapCachedKeySet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySet_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedKeySet* This = dmi_cast<AbstractMapCachedKeySet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMapCachedKeySet::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySet_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedKeySet* This = dmi_cast<AbstractMapCachedKeySet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMapCachedKeySet::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySet_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedKeySet* This = dmi_cast<AbstractMapCachedKeySet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMapCachedKeySet::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractMapCachedKeySet_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractMapCachedKeySet* This = dmi_cast<AbstractMapCachedKeySet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RAbstractMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractMapCachedKeySet_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractMap::clazzInfo(),
  AbstractMapCachedKeySet_MetainfoWrapper::AbstractMapCachedKeySet_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractMapCachedKeySet_fields[] = 
{
  &AbstractMapCachedKeySet_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMapCachedKeySet_methods_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySet_methods_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet__args[] = 
{
  &AbstractMapCachedKeySet_methods_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySet_methods_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySet_method_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractMapCachedKeySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractMapCachedKeySet::clazzInfo(), // return type
  "_0_AbstractMapCachedKeySet", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySet_methods_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet__args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySet_methods_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet__exceptions, // the declared exceptions
  AbstractMapCachedKeySet_MetainfoWrapper::AbstractMapCachedKeySet_method_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractMapCachedKeySet_MetainfoWrapper::AbstractMapCachedKeySet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySet_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySet_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySet_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySet_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySet_methods_isEmpty__Z_exceptions, // the declared exceptions
  AbstractMapCachedKeySet_MetainfoWrapper::AbstractMapCachedKeySet_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySet_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySet_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySet_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_3_iterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySet_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySet_methods_iterator__LRIterator__exceptions, // the declared exceptions
  AbstractMapCachedKeySet_MetainfoWrapper::AbstractMapCachedKeySet_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySet_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySet_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySet_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_size", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySet_methods_size__I_args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySet_methods_size__I_exceptions, // the declared exceptions
  AbstractMapCachedKeySet_MetainfoWrapper::AbstractMapCachedKeySet_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractMapCachedKeySet_methods[] = 
{
  &AbstractMapCachedKeySet_method_AbstractMapCachedKeySet_INLRAbstractMap__LRAbstractMapCachedKeySet_,
  &AbstractMapCachedKeySet_method_GetClass__L_acdk_lang_RClass_,
  &AbstractMapCachedKeySet_method_isEmpty__Z,
  &AbstractMapCachedKeySet_method_iterator__LRIterator_,
  &AbstractMapCachedKeySet_method_size__I,
  0
};


struct AbstractMapCachedKeySet_MetaInfoInitializer
{  AbstractMapCachedKeySet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractMapCachedKeySet::clazzInfo();
    ci->fields =  _AbstractMapCachedKeySet_fields;
    ci->methods =  _AbstractMapCachedKeySet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractMapCachedKeySet_MetaInfoInitializer AbstractMapCachedKeySet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractMapCachedKeySetIterator_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractMapCachedKeySetIterator>(length);
}

//static
::acdk::lang::RObject
AbstractMapCachedKeySetIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractMapCachedKeySetIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySetIterator_method_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractMapCachedKeySetIterator(::acdk::lang::dmi::castTo< RAbstractMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySetIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractMapCachedKeySetIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySetIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedKeySetIterator* This = dmi_cast<AbstractMapCachedKeySetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMapCachedKeySetIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySetIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedKeySetIterator* This = dmi_cast<AbstractMapCachedKeySetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMapCachedKeySetIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySetIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedKeySetIterator* This = dmi_cast<AbstractMapCachedKeySetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMapCachedKeySetIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedKeySetIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedKeySetIterator* This = dmi_cast<AbstractMapCachedKeySetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractMapCachedKeySetIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractMapCachedKeySetIterator_fields__it_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractMapCachedKeySetIterator* This = dmi_cast<AbstractMapCachedKeySetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_it, flags);
    else
      This->_it = ::acdk::lang::dmi::castTo< RIterator>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractMapCachedKeySetIterator_fields__it = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_it", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(),
  AbstractMapCachedKeySetIterator_MetainfoWrapper::AbstractMapCachedKeySetIterator_fields__it_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractMapCachedKeySetIterator_fields[] = 
{
  &AbstractMapCachedKeySetIterator_fields__it,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMapCachedKeySetIterator_methods_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySetIterator_methods_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator__args[] = 
{
  &AbstractMapCachedKeySetIterator_methods_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySetIterator_methods_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySetIterator_method_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractMapCachedKeySetIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractMapCachedKeySetIterator::clazzInfo(), // return type
  "_0_AbstractMapCachedKeySetIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySetIterator_methods_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator__args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySetIterator_methods_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator__exceptions, // the declared exceptions
  AbstractMapCachedKeySetIterator_MetainfoWrapper::AbstractMapCachedKeySetIterator_method_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySetIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySetIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySetIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySetIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySetIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractMapCachedKeySetIterator_MetainfoWrapper::AbstractMapCachedKeySetIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySetIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySetIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySetIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_element", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySetIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySetIterator_methods_element__LRObject__exceptions, // the declared exceptions
  AbstractMapCachedKeySetIterator_MetainfoWrapper::AbstractMapCachedKeySetIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySetIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySetIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySetIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySetIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySetIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  AbstractMapCachedKeySetIterator_MetainfoWrapper::AbstractMapCachedKeySetIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySetIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySetIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySetIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_next", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySetIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySetIterator_methods_next__LRObject__exceptions, // the declared exceptions
  AbstractMapCachedKeySetIterator_MetainfoWrapper::AbstractMapCachedKeySetIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedKeySetIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySetIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedKeySetIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedKeySetIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  AbstractMapCachedKeySetIterator_methods_remove__V_exceptions, // the declared exceptions
  AbstractMapCachedKeySetIterator_MetainfoWrapper::AbstractMapCachedKeySetIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractMapCachedKeySetIterator_methods[] = 
{
  &AbstractMapCachedKeySetIterator_method_AbstractMapCachedKeySetIterator_INLRAbstractMap__LRAbstractMapCachedKeySetIterator_,
  &AbstractMapCachedKeySetIterator_method_GetClass__L_acdk_lang_RClass_,
  &AbstractMapCachedKeySetIterator_method_element__LRObject_,
  &AbstractMapCachedKeySetIterator_method_hasNext__Z,
  &AbstractMapCachedKeySetIterator_method_next__LRObject_,
  &AbstractMapCachedKeySetIterator_method_remove__V,
  0
};


struct AbstractMapCachedKeySetIterator_MetaInfoInitializer
{  AbstractMapCachedKeySetIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractMapCachedKeySetIterator::clazzInfo();
    ci->fields =  _AbstractMapCachedKeySetIterator_fields;
    ci->methods =  _AbstractMapCachedKeySetIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractMapCachedKeySetIterator_MetaInfoInitializer AbstractMapCachedKeySetIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractMapCachedValuesCollection_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractMapCachedValuesCollection>(length);
}

//static
::acdk::lang::RObject
AbstractMapCachedValuesCollection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractMapCachedValuesCollection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollection_method_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractMapCachedValuesCollection(::acdk::lang::dmi::castTo< RAbstractMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractMapCachedValuesCollection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollection_method_entrySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollection* This = dmi_cast<AbstractMapCachedValuesCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMapCachedValuesCollection::entrySet();
    else
        ret = (::acdk::lang::RObject)This->entrySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollection_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollection* This = dmi_cast<AbstractMapCachedValuesCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMapCachedValuesCollection::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollection_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollection* This = dmi_cast<AbstractMapCachedValuesCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMapCachedValuesCollection::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollection_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollection* This = dmi_cast<AbstractMapCachedValuesCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMapCachedValuesCollection::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollection_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollection* This = dmi_cast<AbstractMapCachedValuesCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMapCachedValuesCollection::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollection_method_theMap__LRAbstractMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollection* This = dmi_cast<AbstractMapCachedValuesCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMapCachedValuesCollection::theMap();
    else
        ret = (::acdk::lang::RObject)This->theMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractMapCachedValuesCollection_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractMapCachedValuesCollection* This = dmi_cast<AbstractMapCachedValuesCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RAbstractMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractMapCachedValuesCollection_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractMap::clazzInfo(),
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractMapCachedValuesCollection_fields[] = 
{
  &AbstractMapCachedValuesCollection_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMapCachedValuesCollection_methods_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollection_methods_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection__args[] = 
{
  &AbstractMapCachedValuesCollection_methods_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection_methods_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollection_method_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractMapCachedValuesCollection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractMapCachedValuesCollection::clazzInfo(), // return type
  "_1_AbstractMapCachedValuesCollection", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollection_methods_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollection_methods_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_method_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollection_methods_entrySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection_methods_entrySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollection_method_entrySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "entrySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_3_entrySet", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollection_methods_entrySet__LRSet__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollection_methods_entrySet__LRSet__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_method_entrySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMapCachedValuesCollection_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollection_methods_equals_INLRObject__Z_args[] = 
{
  &AbstractMapCachedValuesCollection_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollection_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollection_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollection_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollection_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollection_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_hashCode", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollection_methods_hashCode__I_args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollection_methods_hashCode__I_exceptions, // the declared exceptions
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollection_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollection_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_4_iterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollection_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollection_methods_iterator__LRIterator__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollection_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollection_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_size", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollection_methods_size__I_args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollection_methods_size__I_exceptions, // the declared exceptions
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollection_methods_theMap__LRAbstractMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection_methods_theMap__LRAbstractMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollection_method_theMap__LRAbstractMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "theMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractMap::clazzInfo(), // return type
  "_0_theMap", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollection_methods_theMap__LRAbstractMap__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollection_methods_theMap__LRAbstractMap__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollection_MetainfoWrapper::AbstractMapCachedValuesCollection_method_theMap__LRAbstractMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractMapCachedValuesCollection_methods[] = 
{
  &AbstractMapCachedValuesCollection_method_AbstractMapCachedValuesCollection_LRAbstractMap__LRAbstractMapCachedValuesCollection_,
  &AbstractMapCachedValuesCollection_method_GetClass__L_acdk_lang_RClass_,
  &AbstractMapCachedValuesCollection_method_entrySet__LRSet_,
  &AbstractMapCachedValuesCollection_method_equals_INLRObject__Z,
  &AbstractMapCachedValuesCollection_method_hashCode__I,
  &AbstractMapCachedValuesCollection_method_iterator__LRIterator_,
  &AbstractMapCachedValuesCollection_method_size__I,
  &AbstractMapCachedValuesCollection_method_theMap__LRAbstractMap_,
  0
};


struct AbstractMapCachedValuesCollection_MetaInfoInitializer
{  AbstractMapCachedValuesCollection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractMapCachedValuesCollection::clazzInfo();
    ci->fields =  _AbstractMapCachedValuesCollection_fields;
    ci->methods =  _AbstractMapCachedValuesCollection_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractMapCachedValuesCollection_MetaInfoInitializer AbstractMapCachedValuesCollection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractMapCachedValuesCollectionIterator_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractMapCachedValuesCollectionIterator>(length);
}

//static
::acdk::lang::RObject
AbstractMapCachedValuesCollectionIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractMapCachedValuesCollectionIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollectionIterator_method_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractMapCachedValuesCollectionIterator(::acdk::lang::dmi::castTo< RAbstractMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollectionIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractMapCachedValuesCollectionIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollectionIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollectionIterator* This = dmi_cast<AbstractMapCachedValuesCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMapCachedValuesCollectionIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollectionIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollectionIterator* This = dmi_cast<AbstractMapCachedValuesCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractMapCachedValuesCollectionIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollectionIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollectionIterator* This = dmi_cast<AbstractMapCachedValuesCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractMapCachedValuesCollectionIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractMapCachedValuesCollectionIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractMapCachedValuesCollectionIterator* This = dmi_cast<AbstractMapCachedValuesCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractMapCachedValuesCollectionIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractMapCachedValuesCollectionIterator_fields__it_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractMapCachedValuesCollectionIterator* This = dmi_cast<AbstractMapCachedValuesCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_it, flags);
    else
      This->_it = ::acdk::lang::dmi::castTo< RIterator>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractMapCachedValuesCollectionIterator_fields__it = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_it", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(),
  AbstractMapCachedValuesCollectionIterator_MetainfoWrapper::AbstractMapCachedValuesCollectionIterator_fields__it_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractMapCachedValuesCollectionIterator_fields[] = 
{
  &AbstractMapCachedValuesCollectionIterator_fields__it,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractMapCachedValuesCollectionIterator_methods_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RAbstractMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollectionIterator_methods_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator__args[] = 
{
  &AbstractMapCachedValuesCollectionIterator_methods_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollectionIterator_methods_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollectionIterator_method_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractMapCachedValuesCollectionIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractMapCachedValuesCollectionIterator::clazzInfo(), // return type
  "_0_AbstractMapCachedValuesCollectionIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollectionIterator_methods_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollectionIterator_methods_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollectionIterator_MetainfoWrapper::AbstractMapCachedValuesCollectionIterator_method_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollectionIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollectionIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollectionIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollectionIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollectionIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollectionIterator_MetainfoWrapper::AbstractMapCachedValuesCollectionIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollectionIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollectionIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollectionIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_element", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollectionIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollectionIterator_methods_element__LRObject__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollectionIterator_MetainfoWrapper::AbstractMapCachedValuesCollectionIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollectionIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollectionIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollectionIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollectionIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollectionIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  AbstractMapCachedValuesCollectionIterator_MetainfoWrapper::AbstractMapCachedValuesCollectionIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollectionIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollectionIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollectionIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_next", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollectionIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollectionIterator_methods_next__LRObject__exceptions, // the declared exceptions
  AbstractMapCachedValuesCollectionIterator_MetainfoWrapper::AbstractMapCachedValuesCollectionIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractMapCachedValuesCollectionIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollectionIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractMapCachedValuesCollectionIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractMapCachedValuesCollectionIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  AbstractMapCachedValuesCollectionIterator_methods_remove__V_exceptions, // the declared exceptions
  AbstractMapCachedValuesCollectionIterator_MetainfoWrapper::AbstractMapCachedValuesCollectionIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractMapCachedValuesCollectionIterator_methods[] = 
{
  &AbstractMapCachedValuesCollectionIterator_method_AbstractMapCachedValuesCollectionIterator_INLRAbstractMap__LRAbstractMapCachedValuesCollectionIterator_,
  &AbstractMapCachedValuesCollectionIterator_method_GetClass__L_acdk_lang_RClass_,
  &AbstractMapCachedValuesCollectionIterator_method_element__LRObject_,
  &AbstractMapCachedValuesCollectionIterator_method_hasNext__Z,
  &AbstractMapCachedValuesCollectionIterator_method_next__LRObject_,
  &AbstractMapCachedValuesCollectionIterator_method_remove__V,
  0
};


struct AbstractMapCachedValuesCollectionIterator_MetaInfoInitializer
{  AbstractMapCachedValuesCollectionIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractMapCachedValuesCollectionIterator::clazzInfo();
    ci->fields =  _AbstractMapCachedValuesCollectionIterator_fields;
    ci->methods =  _AbstractMapCachedValuesCollectionIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractMapCachedValuesCollectionIterator_MetaInfoInitializer AbstractMapCachedValuesCollectionIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractSequentialList_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractSequentialList>(length);
}

//static
::acdk::lang::RObject
AbstractSequentialList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractSequentialList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractSequentialList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_add_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractSequentialList::add(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->add(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_add_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSequentialList::add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_addAll_IINLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSequentialList::addAll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RCollection>(args[1], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RCollection>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_addAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSequentialList::addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_get_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractSequentialList::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractSequentialList::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_listIterator_I_LRListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    ret = (::acdk::lang::RObject)This->listIterator(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_listIterator__LRListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    ret = (::acdk::lang::RObject)This->listIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_remove_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractSequentialList::remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_remove_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSequentialList::remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSequentialList_method_set_IINLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSequentialList* This = dmi_cast<AbstractSequentialList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractSequentialList::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractSequentialList_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_add_IINLRObject__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_add_IINLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_add_IINLRObject__V_args[] = 
{
  &AbstractSequentialList_methods_add_IINLRObject__V_arg_index,
  &AbstractSequentialList_methods_add_IINLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_add_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_add_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_add", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_add_IINLRObject__V_args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_add_IINLRObject__V_exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_add_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_add_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_add_INLRObject__Z_args[] = 
{
  &AbstractSequentialList_methods_add_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_add_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_add_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_add", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_add_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_add_INLRObject__Z_exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_add_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_addAll_IINLRCollection__Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_addAll_IINLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_addAll_IINLRCollection__Z_args[] = 
{
  &AbstractSequentialList_methods_addAll_IINLRCollection__Z_arg_index,
  &AbstractSequentialList_methods_addAll_IINLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_addAll_IINLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_addAll_IINLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_addAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_addAll_IINLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_addAll_IINLRCollection__Z_exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_addAll_IINLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_addAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_addAll_INLRCollection__Z_args[] = 
{
  &AbstractSequentialList_methods_addAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_addAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_addAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_addAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_addAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_addAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_addAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_get_I_LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_get_I_LRObject__args[] = 
{
  &AbstractSequentialList_methods_get_I_LRObject__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_get_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_get_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_get", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_get_I_LRObject__args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_get_I_LRObject__exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_get_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_7_iterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_iterator__LRIterator__exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_listIterator_I_LRListIterator__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_listIterator_I_LRListIterator__args[] = 
{
  &AbstractSequentialList_methods_listIterator_I_LRListIterator__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_listIterator_I_LRListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_listIterator_I_LRListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo(), // return type
  "_0_listIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_listIterator_I_LRListIterator__args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_listIterator_I_LRListIterator__exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_listIterator_I_LRListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_listIterator__LRListIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_listIterator__LRListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_listIterator__LRListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "listIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo(), // return type
  "_1_listIterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_listIterator__LRListIterator__args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_listIterator__LRListIterator__exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_listIterator__LRListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_remove_I_LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_remove_I_LRObject__args[] = 
{
  &AbstractSequentialList_methods_remove_I_LRObject__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_remove_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_remove_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_8_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_remove_I_LRObject__args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_remove_I_LRObject__exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_remove_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_remove_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_remove_INLRObject__Z_args[] = 
{
  &AbstractSequentialList_methods_remove_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_remove_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_remove_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_remove_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_remove_INLRObject__Z_exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_remove_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_set_IINLRObject__LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSequentialList_methods_set_IINLRObject__LRObject__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSequentialList_methods_set_IINLRObject__LRObject__args[] = 
{
  &AbstractSequentialList_methods_set_IINLRObject__LRObject__arg_index,
  &AbstractSequentialList_methods_set_IINLRObject__LRObject__arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList_methods_set_IINLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSequentialList_method_set_IINLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_a_set", // alternative name of method
  -1, // altlabelHashCode
  AbstractSequentialList_methods_set_IINLRObject__LRObject__args, // the arguments
  0, //arguments count
  AbstractSequentialList_methods_set_IINLRObject__LRObject__exceptions, // the declared exceptions
  AbstractSequentialList_MetainfoWrapper::AbstractSequentialList_method_set_IINLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractSequentialList_methods[] = 
{
  &AbstractSequentialList_method_GetClass__L_acdk_lang_RClass_,
  &AbstractSequentialList_method_add_IINLRObject__V,
  &AbstractSequentialList_method_add_INLRObject__Z,
  &AbstractSequentialList_method_addAll_IINLRCollection__Z,
  &AbstractSequentialList_method_addAll_INLRCollection__Z,
  &AbstractSequentialList_method_get_I_LRObject_,
  &AbstractSequentialList_method_iterator__LRIterator_,
  &AbstractSequentialList_method_listIterator_I_LRListIterator_,
  &AbstractSequentialList_method_listIterator__LRListIterator_,
  &AbstractSequentialList_method_remove_I_LRObject_,
  &AbstractSequentialList_method_remove_INLRObject__Z,
  &AbstractSequentialList_method_set_IINLRObject__LRObject_,
  0
};


struct AbstractSequentialList_MetaInfoInitializer
{  AbstractSequentialList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractSequentialList::clazzInfo();
    ci->fields =  _AbstractSequentialList_fields;
    ci->methods =  _AbstractSequentialList_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractSequentialList_MetaInfoInitializer AbstractSequentialList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
AbstractSet_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractSet>(length);
}

//static
::acdk::lang::RObject
AbstractSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_add_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_addAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractSet::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_contains_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_containsAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::containsAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->containsAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_remove_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_removeAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::removeAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->removeAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_retainAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractSet::retainAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->retainAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
  ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_toArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractSet::toArray();
    else
        ret = (::acdk::lang::RObject)This->toArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractSet_method_toArray_INLRObjectArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractSet* This = dmi_cast<AbstractSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractSet::toArray(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toArray(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractSet_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_add_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_add_INLRObject__Z_args[] = 
{
  &AbstractSet_methods_add_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_add_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_add_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_add", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_add_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_add_INLRObject__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_add_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_addAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_addAll_INLRCollection__Z_args[] = 
{
  &AbstractSet_methods_addAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_addAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_addAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_addAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_addAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_addAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_addAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_clear", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_clear__V_args, // the arguments
  0, //arguments count
  AbstractSet_methods_clear__V_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_contains_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_contains_INLRObject__Z_args[] = 
{
  &AbstractSet_methods_contains_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_contains_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_contains_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_contains", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_contains_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_contains_INLRObject__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_contains_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_containsAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_containsAll_INLRCollection__Z_args[] = 
{
  &AbstractSet_methods_containsAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_containsAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_containsAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_containsAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_containsAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_containsAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_containsAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_equals_INLRObject__Z_args[] = 
{
  &AbstractSet_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_equals", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_hashCode", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_hashCode__I_args, // the arguments
  0, //arguments count
  AbstractSet_methods_hashCode__I_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_isEmpty__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_8_iterator", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  AbstractSet_methods_iterator__LRIterator__exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_remove_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_remove_INLRObject__Z_args[] = 
{
  &AbstractSet_methods_remove_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_remove_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_remove_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_remove", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_remove_INLRObject__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_remove_INLRObject__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_remove_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_removeAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_removeAll_INLRCollection__Z_args[] = 
{
  &AbstractSet_methods_removeAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_removeAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_removeAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_removeAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_removeAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_removeAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_removeAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_retainAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_retainAll_INLRCollection__Z_args[] = 
{
  &AbstractSet_methods_retainAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_retainAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_retainAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "retainAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_retainAll", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_retainAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  AbstractSet_methods_retainAll_INLRCollection__Z_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_retainAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_size", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_size__I_args, // the arguments
  0, //arguments count
  AbstractSet_methods_size__I_exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_toArray__LRObjectArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_toArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_toArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_d_toArray", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_toArray__LRObjectArray__args, // the arguments
  0, //arguments count
  AbstractSet_methods_toArray__LRObjectArray__exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_toArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractSet_methods_toArray_INLRObjectArray__LRObjectArray__arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractSet_methods_toArray_INLRObjectArray__LRObjectArray__args[] = 
{
  &AbstractSet_methods_toArray_INLRObjectArray__LRObjectArray__arg_array,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet_methods_toArray_INLRObjectArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractSet_method_toArray_INLRObjectArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_e_toArray", // alternative name of method
  -1, // altlabelHashCode
  AbstractSet_methods_toArray_INLRObjectArray__LRObjectArray__args, // the arguments
  0, //arguments count
  AbstractSet_methods_toArray_INLRObjectArray__LRObjectArray__exceptions, // the declared exceptions
  AbstractSet_MetainfoWrapper::AbstractSet_method_toArray_INLRObjectArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractSet_methods[] = 
{
  &AbstractSet_method_GetClass__L_acdk_lang_RClass_,
  &AbstractSet_method_add_INLRObject__Z,
  &AbstractSet_method_addAll_INLRCollection__Z,
  &AbstractSet_method_clear__V,
  &AbstractSet_method_contains_INLRObject__Z,
  &AbstractSet_method_containsAll_INLRCollection__Z,
  &AbstractSet_method_equals_INLRObject__Z,
  &AbstractSet_method_hashCode__I,
  &AbstractSet_method_isEmpty__Z,
  &AbstractSet_method_iterator__LRIterator_,
  &AbstractSet_method_remove_INLRObject__Z,
  &AbstractSet_method_removeAll_INLRCollection__Z,
  &AbstractSet_method_retainAll_INLRCollection__Z,
  &AbstractSet_method_size__I,
  &AbstractSet_method_toArray__LRObjectArray_,
  &AbstractSet_method_toArray_INLRObjectArray__LRObjectArray_,
  0
};


struct AbstractSet_MetaInfoInitializer
{  AbstractSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractSet::clazzInfo();
    ci->fields =  _AbstractSet_fields;
    ci->methods =  _AbstractSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractSet_MetaInfoInitializer AbstractSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
ArrayIterator_create_array(int length)
{
  return new ObjectArrayImpl<RArrayIterator>(length);
}

//static
::acdk::lang::RObject
ArrayIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArrayIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_ArrayIterator_INLRObjectArray__LRArrayIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayIterator(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArrayIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_add_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ArrayIterator::add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_hasPrevious__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayIterator::hasPrevious();
    else
      ret = This->hasPrevious();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_nextIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayIterator::nextIndex();
    else
      ret = This->nextIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_previous__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ArrayIterator::previous();
    else
        ret = (::acdk::lang::RObject)This->previous();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_previousIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArrayIterator::previousIndex();
    else
      ret = This->previousIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ArrayIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayIterator_method_set_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ArrayIterator::set(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->set(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ArrayIterator_fields__array_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ArrayIterator* This = dmi_cast<ArrayIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_array, flags);
    else
      This->_array = ::acdk::lang::dmi::castTo< RObjectArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ArrayIterator_fields__array = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_array", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(),
  ArrayIterator_MetainfoWrapper::ArrayIterator_fields__array_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ArrayIterator_fields[] = 
{
  &ArrayIterator_fields__array,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayIterator_methods_ArrayIterator_INLRObjectArray__LRArrayIterator__arg_arr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "arr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_ArrayIterator_INLRObjectArray__LRArrayIterator__args[] = 
{
  &ArrayIterator_methods_ArrayIterator_INLRObjectArray__LRArrayIterator__arg_arr,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_ArrayIterator_INLRObjectArray__LRArrayIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_ArrayIterator_INLRObjectArray__LRArrayIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayIterator::clazzInfo(), // return type
  "_0_ArrayIterator", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_ArrayIterator_INLRObjectArray__LRArrayIterator__args, // the arguments
  0, //arguments count
  ArrayIterator_methods_ArrayIterator_INLRObjectArray__LRArrayIterator__exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_ArrayIterator_INLRObjectArray__LRArrayIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArrayIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayIterator_methods_add_INLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_add_INLRObject__V_args[] = 
{
  &ArrayIterator_methods_add_INLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_add_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_add_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_add", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_add_INLRObject__V_args, // the arguments
  0, //arguments count
  ArrayIterator_methods_add_INLRObject__V_exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_add_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_element", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  ArrayIterator_methods_element__LRObject__exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_hasNext", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  ArrayIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_hasPrevious__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_hasPrevious__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_hasPrevious__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasPrevious", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_hasPrevious", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_hasPrevious__Z_args, // the arguments
  0, //arguments count
  ArrayIterator_methods_hasPrevious__Z_exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_hasPrevious__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_next", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  ArrayIterator_methods_next__LRObject__exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_nextIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_nextIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_nextIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_nextIndex", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_nextIndex__I_args, // the arguments
  0, //arguments count
  ArrayIterator_methods_nextIndex__I_exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_nextIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_previous__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_previous__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_previous__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previous", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_previous", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_previous__LRObject__args, // the arguments
  0, //arguments count
  ArrayIterator_methods_previous__LRObject__exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_previous__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_previousIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_previousIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_previousIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previousIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_previousIndex", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_previousIndex__I_args, // the arguments
  0, //arguments count
  ArrayIterator_methods_previousIndex__I_exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_previousIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_remove", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  ArrayIterator_methods_remove__V_exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayIterator_methods_set_INLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayIterator_methods_set_INLRObject__V_args[] = 
{
  &ArrayIterator_methods_set_INLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator_methods_set_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayIterator_method_set_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_set", // alternative name of method
  -1, // altlabelHashCode
  ArrayIterator_methods_set_INLRObject__V_args, // the arguments
  0, //arguments count
  ArrayIterator_methods_set_INLRObject__V_exceptions, // the declared exceptions
  ArrayIterator_MetainfoWrapper::ArrayIterator_method_set_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArrayIterator_methods[] = 
{
  &ArrayIterator_method_ArrayIterator_INLRObjectArray__LRArrayIterator_,
  &ArrayIterator_method_GetClass__L_acdk_lang_RClass_,
  &ArrayIterator_method_add_INLRObject__V,
  &ArrayIterator_method_element__LRObject_,
  &ArrayIterator_method_hasNext__Z,
  &ArrayIterator_method_hasPrevious__Z,
  &ArrayIterator_method_next__LRObject_,
  &ArrayIterator_method_nextIndex__I,
  &ArrayIterator_method_previous__LRObject_,
  &ArrayIterator_method_previousIndex__I,
  &ArrayIterator_method_remove__V,
  &ArrayIterator_method_set_INLRObject__V,
  0
};


struct ArrayIterator_MetaInfoInitializer
{  ArrayIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArrayIterator::clazzInfo();
    ci->fields =  _ArrayIterator_fields;
    ci->methods =  _ArrayIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArrayIterator_MetaInfoInitializer ArrayIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ArrayList_create_array(int length)
{
  return new ObjectArrayImpl<RArrayList>(length);
}

//static
::acdk::lang::RObject
ArrayList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArrayList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayList_method_ArrayList__LRArrayList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayList_method_ArrayList_INLRCollection__LRArrayList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayList(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayList_method_ArrayList_I_LRArrayList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayList(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayList_method_ArrayList_INLRObjectArray_Z_LRArrayList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ArrayList(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArrayList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayList_method__isEqual_INLRObject_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ArrayList::_isEqual(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayList_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArrayList::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArrayList_method_ensureCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArrayList* This = dmi_cast<ArrayList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ArrayList::ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ArrayList_fields__data_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ArrayList* This = dmi_cast<ArrayList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_data, flags);
    else
      This->_data = ::acdk::lang::dmi::castTo< RObjectArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ArrayList_fields__size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ArrayList* This = dmi_cast<ArrayList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_size, flags);
    else
      This->_size = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ArrayList_fields__data = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_data", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(),
  ArrayList_MetainfoWrapper::ArrayList_fields__data_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ArrayList_fields__size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ArrayList_MetainfoWrapper::ArrayList_fields__size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ArrayList_fields[] = 
{
  &ArrayList_fields__data,
  &ArrayList_fields__size,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayList_methods_ArrayList__LRArrayList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList_methods_ArrayList__LRArrayList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayList_method_ArrayList__LRArrayList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayList::clazzInfo(), // return type
  "_2_ArrayList", // alternative name of method
  -1, // altlabelHashCode
  ArrayList_methods_ArrayList__LRArrayList__args, // the arguments
  0, //arguments count
  ArrayList_methods_ArrayList__LRArrayList__exceptions, // the declared exceptions
  ArrayList_MetainfoWrapper::ArrayList_method_ArrayList__LRArrayList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayList_methods_ArrayList_INLRCollection__LRArrayList__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayList_methods_ArrayList_INLRCollection__LRArrayList__args[] = 
{
  &ArrayList_methods_ArrayList_INLRCollection__LRArrayList__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList_methods_ArrayList_INLRCollection__LRArrayList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayList_method_ArrayList_INLRCollection__LRArrayList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayList::clazzInfo(), // return type
  "_3_ArrayList", // alternative name of method
  -1, // altlabelHashCode
  ArrayList_methods_ArrayList_INLRCollection__LRArrayList__args, // the arguments
  0, //arguments count
  ArrayList_methods_ArrayList_INLRCollection__LRArrayList__exceptions, // the declared exceptions
  ArrayList_MetainfoWrapper::ArrayList_method_ArrayList_INLRCollection__LRArrayList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayList_methods_ArrayList_I_LRArrayList__arg_capacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "capacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayList_methods_ArrayList_I_LRArrayList__args[] = 
{
  &ArrayList_methods_ArrayList_I_LRArrayList__arg_capacity,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList_methods_ArrayList_I_LRArrayList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayList_method_ArrayList_I_LRArrayList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayList::clazzInfo(), // return type
  "_1_ArrayList", // alternative name of method
  -1, // altlabelHashCode
  ArrayList_methods_ArrayList_I_LRArrayList__args, // the arguments
  0, //arguments count
  ArrayList_methods_ArrayList_I_LRArrayList__exceptions, // the declared exceptions
  ArrayList_MetainfoWrapper::ArrayList_method_ArrayList_I_LRArrayList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayList_methods_ArrayList_INLRObjectArray_Z_LRArrayList__arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayList_methods_ArrayList_INLRObjectArray_Z_LRArrayList__arg_copy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "copy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayList_methods_ArrayList_INLRObjectArray_Z_LRArrayList__args[] = 
{
  &ArrayList_methods_ArrayList_INLRObjectArray_Z_LRArrayList__arg_array,
  &ArrayList_methods_ArrayList_INLRObjectArray_Z_LRArrayList__arg_copy,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList_methods_ArrayList_INLRObjectArray_Z_LRArrayList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayList_method_ArrayList_INLRObjectArray_Z_LRArrayList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ArrayList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ArrayList::clazzInfo(), // return type
  "_4_ArrayList", // alternative name of method
  -1, // altlabelHashCode
  ArrayList_methods_ArrayList_INLRObjectArray_Z_LRArrayList__args, // the arguments
  0, //arguments count
  ArrayList_methods_ArrayList_INLRObjectArray_Z_LRArrayList__exceptions, // the declared exceptions
  ArrayList_MetainfoWrapper::ArrayList_method_ArrayList_INLRObjectArray_Z_LRArrayList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArrayList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArrayList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArrayList_MetainfoWrapper::ArrayList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayList_methods__isEqual_INLRObject_INLRObject__Z_arg_o1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayList_methods__isEqual_INLRObject_INLRObject__Z_arg_o2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayList_methods__isEqual_INLRObject_INLRObject__Z_args[] = 
{
  &ArrayList_methods__isEqual_INLRObject_INLRObject__Z_arg_o1,
  &ArrayList_methods__isEqual_INLRObject_INLRObject__Z_arg_o2,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList_methods__isEqual_INLRObject_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayList_method__isEqual_INLRObject_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_isEqual", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6__isEqual", // alternative name of method
  -1, // altlabelHashCode
  ArrayList_methods__isEqual_INLRObject_INLRObject__Z_args, // the arguments
  0, //arguments count
  ArrayList_methods__isEqual_INLRObject_INLRObject__Z_exceptions, // the declared exceptions
  ArrayList_MetainfoWrapper::ArrayList_method__isEqual_INLRObject_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayList_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayList_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  ArrayList_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  ArrayList_methods_create_instance__LRObject__exceptions, // the declared exceptions
  ArrayList_MetainfoWrapper::ArrayList_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArrayList_methods_ensureCapacity_I_V_arg_mincap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mincap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArrayList_methods_ensureCapacity_I_V_args[] = 
{
  &ArrayList_methods_ensureCapacity_I_V_arg_mincap,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList_methods_ensureCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArrayList_method_ensureCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_ensureCapacity", // alternative name of method
  -1, // altlabelHashCode
  ArrayList_methods_ensureCapacity_I_V_args, // the arguments
  0, //arguments count
  ArrayList_methods_ensureCapacity_I_V_exceptions, // the declared exceptions
  ArrayList_MetainfoWrapper::ArrayList_method_ensureCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArrayList_methods[] = 
{
  &ArrayList_method_ArrayList__LRArrayList_,
  &ArrayList_method_ArrayList_INLRCollection__LRArrayList_,
  &ArrayList_method_ArrayList_I_LRArrayList_,
  &ArrayList_method_ArrayList_INLRObjectArray_Z_LRArrayList_,
  &ArrayList_method_GetClass__L_acdk_lang_RClass_,
  &ArrayList_method__isEqual_INLRObject_INLRObject__Z,
  &ArrayList_method_create_instance__LRObject_,
  &ArrayList_method_ensureCapacity_I_V,
  0
};


struct ArrayList_MetaInfoInitializer
{  ArrayList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArrayList::clazzInfo();
    ci->fields =  _ArrayList_fields;
    ci->methods =  _ArrayList_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArrayList_MetaInfoInitializer ArrayList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ArraysImpl_create_array(int length)
{
  return new ObjectArrayImpl<RArraysImpl>(length);
}

//static
::acdk::lang::RObject
ArraysImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ArraysImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArraysImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method__compare_INLRObject_INLRObject_INLRComparator__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ArraysImpl::_compare(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RComparator>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method__mergeSort_INLRObjectArray_INLRComparator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArraysImpl::_mergeSort(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RComparator>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_asList_INLRObjectArray__LRList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArraysImpl::asList(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ArraysImpl::binarySearch(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RComparator>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_binarySearch_INLRObjectArray_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ArraysImpl::binarySearch(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArraysImpl* This = dmi_cast<ArraysImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ArraysImpl::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_equals_INLRObjectArray_INLRObjectArray__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ArraysImpl::equals(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RObjectArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_fill_INLRObjectArray_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArraysImpl::fill(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_fill_INLRObjectArray_IIINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArraysImpl::fill(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RObject>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_removeElement_INLRObjectArray_I_LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArraysImpl::removeElement(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ArraysImpl::removeFirstElement(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_sort_INLRObjectArray_INLRComparator__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArraysImpl::sort(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< RComparator>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_sort_INLRObjectArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArraysImpl::sort(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ArraysImpl_method_stripElement_INLRObjectArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ArraysImpl::stripElement(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ArraysImpl_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ArraysImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_arg_o1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_arg_o2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_args[] = 
{
  &ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_arg_o1,
  &ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_arg_o2,
  &ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method__compare_INLRObject_INLRObject_INLRComparator__I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_compare", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d__compare", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_args, // the arguments
  0, //arguments count
  ArraysImpl_methods__compare_INLRObject_INLRObject_INLRComparator__I_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method__compare_INLRObject_INLRObject_INLRComparator__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods__mergeSort_INLRObjectArray_INLRComparator__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods__mergeSort_INLRObjectArray_INLRComparator__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods__mergeSort_INLRObjectArray_INLRComparator__V_args[] = 
{
  &ArraysImpl_methods__mergeSort_INLRObjectArray_INLRComparator__V_arg_array,
  &ArraysImpl_methods__mergeSort_INLRObjectArray_INLRComparator__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods__mergeSort_INLRObjectArray_INLRComparator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method__mergeSort_INLRObjectArray_INLRComparator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_mergeSort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7__mergeSort", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods__mergeSort_INLRObjectArray_INLRComparator__V_args, // the arguments
  0, //arguments count
  ArraysImpl_methods__mergeSort_INLRObjectArray_INLRComparator__V_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method__mergeSort_INLRObjectArray_INLRComparator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_asList_INLRObjectArray__LRList__arg_a = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_asList_INLRObjectArray__LRList__args[] = 
{
  &ArraysImpl_methods_asList_INLRObjectArray__LRList__arg_a,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_asList_INLRObjectArray__LRList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_asList_INLRObjectArray__LRList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "asList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RList::clazzInfo(), // return type
  "_0_asList", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_asList_INLRObjectArray__LRList__args, // the arguments
  0, //arguments count
  ArraysImpl_methods_asList_INLRObjectArray__LRList__exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_asList_INLRObjectArray__LRList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_arg_a = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_args[] = 
{
  &ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_arg_a,
  &ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_arg_key,
  &ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "binarySearch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_binarySearch", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject__I_arg_a = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject__I_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject__I_args[] = 
{
  &ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject__I_arg_a,
  &ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject__I_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_binarySearch_INLRObjectArray_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "binarySearch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_binarySearch", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject__I_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_binarySearch_INLRObjectArray_INLRObject__I_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_binarySearch_INLRObjectArray_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_equals_INLRObject__Z_args[] = 
{
  &ArraysImpl_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_equals", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_equals_INLRObjectArray_INLRObjectArray__Z_arg_a1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_equals_INLRObjectArray_INLRObjectArray__Z_arg_a2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "a2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_equals_INLRObjectArray_INLRObjectArray__Z_args[] = 
{
  &ArraysImpl_methods_equals_INLRObjectArray_INLRObjectArray__Z_arg_a1,
  &ArraysImpl_methods_equals_INLRObjectArray_INLRObjectArray__Z_arg_a2,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_equals_INLRObjectArray_INLRObjectArray__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_equals_INLRObjectArray_INLRObjectArray__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_equals", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_equals_INLRObjectArray_INLRObjectArray__Z_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_equals_INLRObjectArray_INLRObjectArray__Z_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_equals_INLRObjectArray_INLRObjectArray__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_fill_INLRObjectArray_INLRObject__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_fill_INLRObjectArray_INLRObject__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_fill_INLRObjectArray_INLRObject__V_args[] = 
{
  &ArraysImpl_methods_fill_INLRObjectArray_INLRObject__V_arg_array,
  &ArraysImpl_methods_fill_INLRObjectArray_INLRObject__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_fill_INLRObjectArray_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_fill_INLRObjectArray_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fill", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_fill", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_fill_INLRObjectArray_INLRObject__V_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_fill_INLRObjectArray_INLRObject__V_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_fill_INLRObjectArray_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_arg_toIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_args[] = 
{
  &ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_arg_array,
  &ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_arg_fromIndex,
  &ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_arg_toIndex,
  &ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_fill_INLRObjectArray_IIINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fill", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_fill", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_fill_INLRObjectArray_IIINLRObject__V_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_fill_INLRObjectArray_IIINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_removeElement_INLRObjectArray_I_LRObjectArray__arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_removeElement_INLRObjectArray_I_LRObjectArray__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_removeElement_INLRObjectArray_I_LRObjectArray__args[] = 
{
  &ArraysImpl_methods_removeElement_INLRObjectArray_I_LRObjectArray__arg_array,
  &ArraysImpl_methods_removeElement_INLRObjectArray_I_LRObjectArray__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_removeElement_INLRObjectArray_I_LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_removeElement_INLRObjectArray_I_LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_a_removeElement", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_removeElement_INLRObjectArray_I_LRObjectArray__args, // the arguments
  0, //arguments count
  ArraysImpl_methods_removeElement_INLRObjectArray_I_LRObjectArray__exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_removeElement_INLRObjectArray_I_LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__args[] = 
{
  &ArraysImpl_methods_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__arg_array,
  &ArraysImpl_methods_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeFirstElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_b_removeFirstElement", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__args, // the arguments
  0, //arguments count
  ArraysImpl_methods_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_sort_INLRObjectArray_INLRComparator__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_sort_INLRObjectArray_INLRComparator__V_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_sort_INLRObjectArray_INLRComparator__V_args[] = 
{
  &ArraysImpl_methods_sort_INLRObjectArray_INLRComparator__V_arg_array,
  &ArraysImpl_methods_sort_INLRObjectArray_INLRComparator__V_arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_sort_INLRObjectArray_INLRComparator__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_sort_INLRObjectArray_INLRComparator__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_sort", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_sort_INLRObjectArray_INLRComparator__V_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_sort_INLRObjectArray_INLRComparator__V_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_sort_INLRObjectArray_INLRComparator__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_sort_INLRObjectArray__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_sort_INLRObjectArray__V_args[] = 
{
  &ArraysImpl_methods_sort_INLRObjectArray__V_arg_array,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_sort_INLRObjectArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_sort_INLRObjectArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "sort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_sort", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_sort_INLRObjectArray__V_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_sort_INLRObjectArray__V_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_sort_INLRObjectArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_stripElement_INLRObjectArray_I_V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ArraysImpl_methods_stripElement_INLRObjectArray_I_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ArraysImpl_methods_stripElement_INLRObjectArray_I_V_args[] = 
{
  &ArraysImpl_methods_stripElement_INLRObjectArray_I_V_arg_array,
  &ArraysImpl_methods_stripElement_INLRObjectArray_I_V_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl_methods_stripElement_INLRObjectArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ArraysImpl_method_stripElement_INLRObjectArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stripElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_stripElement", // alternative name of method
  -1, // altlabelHashCode
  ArraysImpl_methods_stripElement_INLRObjectArray_I_V_args, // the arguments
  0, //arguments count
  ArraysImpl_methods_stripElement_INLRObjectArray_I_V_exceptions, // the declared exceptions
  ArraysImpl_MetainfoWrapper::ArraysImpl_method_stripElement_INLRObjectArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ArraysImpl_methods[] = 
{
  &ArraysImpl_method_GetClass__L_acdk_lang_RClass_,
  &ArraysImpl_method__compare_INLRObject_INLRObject_INLRComparator__I,
  &ArraysImpl_method__mergeSort_INLRObjectArray_INLRComparator__V,
  &ArraysImpl_method_asList_INLRObjectArray__LRList_,
  &ArraysImpl_method_binarySearch_INLRObjectArray_INLRObject_INLRComparator__I,
  &ArraysImpl_method_binarySearch_INLRObjectArray_INLRObject__I,
  &ArraysImpl_method_equals_INLRObject__Z,
  &ArraysImpl_method_equals_INLRObjectArray_INLRObjectArray__Z,
  &ArraysImpl_method_fill_INLRObjectArray_INLRObject__V,
  &ArraysImpl_method_fill_INLRObjectArray_IIINLRObject__V,
  &ArraysImpl_method_removeElement_INLRObjectArray_I_LRObjectArray_,
  &ArraysImpl_method_removeFirstElement_INLRObjectArray_INLRObject__LRObjectArray_,
  &ArraysImpl_method_sort_INLRObjectArray_INLRComparator__V,
  &ArraysImpl_method_sort_INLRObjectArray__V,
  &ArraysImpl_method_stripElement_INLRObjectArray_I_V,
  0
};


struct ArraysImpl_MetaInfoInitializer
{  ArraysImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ArraysImpl::clazzInfo();
    ci->fields =  _ArraysImpl_fields;
    ci->methods =  _ArraysImpl_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ArraysImpl_MetaInfoInitializer ArraysImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
BasicMapEntry_create_array(int length)
{
  return new ObjectArrayImpl<RBasicMapEntry>(length);
}

//static
::acdk::lang::RObject
BasicMapEntry_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BasicMapEntry_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BasicMapEntry_method_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BasicMapEntry(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BasicMapEntry_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BasicMapEntry::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BasicMapEntry_fields__key_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BasicMapEntry* This = dmi_cast<BasicMapEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_key, flags);
    else
      This->_key = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BasicMapEntry_fields__value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BasicMapEntry* This = dmi_cast<BasicMapEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_value, flags);
    else
      This->_value = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BasicMapEntry_fields__key = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_key", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  BasicMapEntry_MetainfoWrapper::BasicMapEntry_fields__key_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BasicMapEntry_fields__value = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  BasicMapEntry_MetainfoWrapper::BasicMapEntry_fields__value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BasicMapEntry_fields[] = 
{
  &BasicMapEntry_fields__key,
  &BasicMapEntry_fields__value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BasicMapEntry_methods_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__arg_newKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BasicMapEntry_methods_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__arg_newValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BasicMapEntry_methods_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__args[] = 
{
  &BasicMapEntry_methods_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__arg_newKey,
  &BasicMapEntry_methods_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__arg_newValue,
  0
};

::acdk::lang::dmi::ClazzInfo* BasicMapEntry_methods_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BasicMapEntry_method_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BasicMapEntry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BasicMapEntry::clazzInfo(), // return type
  "_0_BasicMapEntry", // alternative name of method
  -1, // altlabelHashCode
  BasicMapEntry_methods_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__args, // the arguments
  0, //arguments count
  BasicMapEntry_methods_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__exceptions, // the declared exceptions
  BasicMapEntry_MetainfoWrapper::BasicMapEntry_method_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BasicMapEntry_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BasicMapEntry_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BasicMapEntry_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BasicMapEntry_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BasicMapEntry_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BasicMapEntry_MetainfoWrapper::BasicMapEntry_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BasicMapEntry_methods[] = 
{
  &BasicMapEntry_method_BasicMapEntry_INLRObject_INLRObject__LRBasicMapEntry_,
  &BasicMapEntry_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct BasicMapEntry_MetaInfoInitializer
{  BasicMapEntry_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BasicMapEntry::clazzInfo();
    ci->fields =  _BasicMapEntry_fields;
    ci->methods =  _BasicMapEntry_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BasicMapEntry_MetaInfoInitializer BasicMapEntry_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
BitSet_create_array(int length)
{
  return new ObjectArrayImpl<RBitSet>(length);
}

//static
::acdk::lang::RObject
BitSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BitSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_BitSet__LRBitSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_BitSet_I_LRBitSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BitSet(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BitSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_andNot_INLRBitSet__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitSet::andNot(::acdk::lang::dmi::castTo< RBitSet>(args[0], dc));
    else
        This->andNot(::acdk::lang::dmi::castTo< RBitSet>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_bit_and_INLRBitSet__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitSet::bit_and(::acdk::lang::dmi::castTo< RBitSet>(args[0], dc));
    else
        This->bit_and(::acdk::lang::dmi::castTo< RBitSet>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_bit_or_INLRBitSet__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitSet::bit_or(::acdk::lang::dmi::castTo< RBitSet>(args[0], dc));
    else
        This->bit_or(::acdk::lang::dmi::castTo< RBitSet>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_bit_xor_INLRBitSet__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitSet::bit_xor(::acdk::lang::dmi::castTo< RBitSet>(args[0], dc));
    else
        This->bit_xor(::acdk::lang::dmi::castTo< RBitSet>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_clear_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitSet::clear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->clear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BitSet::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BitSet::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_get_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BitSet::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_getBits__LRcharArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BitSet::getBits();
    else
        ret = (::acdk::lang::RObject)This->getBits();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_grow_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitSet::grow(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->grow(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BitSet::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BitSet::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_set_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BitSet::set(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BitSet::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BitSet_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BitSet::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BitSet_fields__bits_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BitSet* This = dmi_cast<BitSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bits, flags);
    else
      This->_bits = ::acdk::lang::dmi::castTo< RcharArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BitSet_fields__bits = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bits", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo(),
  BitSet_MetainfoWrapper::BitSet_fields__bits_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BitSet_fields[] = 
{
  &BitSet_fields__bits,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_BitSet__LRBitSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_BitSet__LRBitSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_BitSet__LRBitSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BitSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitSet::clazzInfo(), // return type
  "_0_BitSet", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_BitSet__LRBitSet__args, // the arguments
  0, //arguments count
  BitSet_methods_BitSet__LRBitSet__exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_BitSet__LRBitSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_BitSet_I_LRBitSet__arg_nBits = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nBits", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_BitSet_I_LRBitSet__args[] = 
{
  &BitSet_methods_BitSet_I_LRBitSet__arg_nBits,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_BitSet_I_LRBitSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_BitSet_I_LRBitSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BitSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BitSet::clazzInfo(), // return type
  "_1_BitSet", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_BitSet_I_LRBitSet__args, // the arguments
  0, //arguments count
  BitSet_methods_BitSet_I_LRBitSet__exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_BitSet_I_LRBitSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_h_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BitSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_andNot_INLRBitSet__V_arg_set = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "set", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_andNot_INLRBitSet__V_args[] = 
{
  &BitSet_methods_andNot_INLRBitSet__V_arg_set,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_andNot_INLRBitSet__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_andNot_INLRBitSet__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "andNot", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_andNot", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_andNot_INLRBitSet__V_args, // the arguments
  0, //arguments count
  BitSet_methods_andNot_INLRBitSet__V_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_andNot_INLRBitSet__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_bit_and_INLRBitSet__V_arg_set = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "set", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_bit_and_INLRBitSet__V_args[] = 
{
  &BitSet_methods_bit_and_INLRBitSet__V_arg_set,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_bit_and_INLRBitSet__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_bit_and_INLRBitSet__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bit_and", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_bit_and", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_bit_and_INLRBitSet__V_args, // the arguments
  0, //arguments count
  BitSet_methods_bit_and_INLRBitSet__V_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_bit_and_INLRBitSet__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_bit_or_INLRBitSet__V_arg_set = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "set", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_bit_or_INLRBitSet__V_args[] = 
{
  &BitSet_methods_bit_or_INLRBitSet__V_arg_set,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_bit_or_INLRBitSet__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_bit_or_INLRBitSet__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bit_or", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_bit_or", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_bit_or_INLRBitSet__V_args, // the arguments
  0, //arguments count
  BitSet_methods_bit_or_INLRBitSet__V_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_bit_or_INLRBitSet__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_bit_xor_INLRBitSet__V_arg_set = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "set", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBitSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_bit_xor_INLRBitSet__V_args[] = 
{
  &BitSet_methods_bit_xor_INLRBitSet__V_arg_set,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_bit_xor_INLRBitSet__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_bit_xor_INLRBitSet__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bit_xor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_bit_xor", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_bit_xor_INLRBitSet__V_args, // the arguments
  0, //arguments count
  BitSet_methods_bit_xor_INLRBitSet__V_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_bit_xor_INLRBitSet__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_clear_I_V_arg_bit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_clear_I_V_args[] = 
{
  &BitSet_methods_clear_I_V_arg_bit,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_clear_I_V_exceptions[] =
{
  RArrayIndexOutOfBoundsException::clazzInfo(), 
  0
};

void BitSet_clear_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ArrayIndexOutOfBoundsException) == true)
    THROW_INSTANCE( RArrayIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_clear_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_clear", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_clear_I_V_args, // the arguments
  0, //arguments count
  BitSet_methods_clear_I_V_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_clear_I_V_dispatch, // invoke this method
  BitSet_clear_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_7_clone", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  BitSet_methods_clone__LRObject__exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_equals_INLRObject__Z_args[] = 
{
  &BitSet_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_equals", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  BitSet_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_get_I_Z_arg_bitIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bitIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_get_I_Z_args[] = 
{
  &BitSet_methods_get_I_Z_arg_bitIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_get_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_get_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_get", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_get_I_Z_args, // the arguments
  0, //arguments count
  BitSet_methods_get_I_Z_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_get_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_getBits__LRcharArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_getBits__LRcharArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_getBits__LRcharArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo(), // return type
  "_f_getBits", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_getBits__LRcharArray__args, // the arguments
  0, //arguments count
  BitSet_methods_getBits__LRcharArray__exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_getBits__LRcharArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_grow_I_V_arg_toSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_grow_I_V_args[] = 
{
  &BitSet_methods_grow_I_V_arg_toSize,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_grow_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_grow_I_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "grow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_grow", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_grow_I_V_args, // the arguments
  0, //arguments count
  BitSet_methods_grow_I_V_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_grow_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_hashCode", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_hashCode__I_args, // the arguments
  0, //arguments count
  BitSet_methods_hashCode__I_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_length", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_length__I_args, // the arguments
  0, //arguments count
  BitSet_methods_length__I_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BitSet_methods_set_I_V_arg_bitIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bitIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_set_I_V_args[] = 
{
  &BitSet_methods_set_I_V_arg_bitIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_set_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_set_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_set", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_set_I_V_args, // the arguments
  0, //arguments count
  BitSet_methods_set_I_V_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_set_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_size", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_size__I_args, // the arguments
  0, //arguments count
  BitSet_methods_size__I_exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BitSet_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BitSet_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_toString", // alternative name of method
  -1, // altlabelHashCode
  BitSet_methods_toString__LRString__args, // the arguments
  0, //arguments count
  BitSet_methods_toString__LRString__exceptions, // the declared exceptions
  BitSet_MetainfoWrapper::BitSet_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BitSet_methods[] = 
{
  &BitSet_method_BitSet__LRBitSet_,
  &BitSet_method_BitSet_I_LRBitSet_,
  &BitSet_method_GetClass__L_acdk_lang_RClass_,
  &BitSet_method_andNot_INLRBitSet__V,
  &BitSet_method_bit_and_INLRBitSet__V,
  &BitSet_method_bit_or_INLRBitSet__V,
  &BitSet_method_bit_xor_INLRBitSet__V,
  &BitSet_method_clear_I_V,
  &BitSet_method_clone__LRObject_,
  &BitSet_method_equals_INLRObject__Z,
  &BitSet_method_get_I_Z,
  &BitSet_method_getBits__LRcharArray_,
  &BitSet_method_grow_I_V,
  &BitSet_method_hashCode__I,
  &BitSet_method_length__I,
  &BitSet_method_set_I_V,
  &BitSet_method_size__I,
  &BitSet_method_toString__LRString_,
  0
};


struct BitSet_MetaInfoInitializer
{  BitSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BitSet::clazzInfo();
    ci->fields =  _BitSet_fields;
    ci->methods =  _BitSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BitSet_MetaInfoInitializer BitSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
BucketNode_create_array(int length)
{
  return new ObjectArrayImpl<RBucketNode>(length);
}

//static
::acdk::lang::RObject
BucketNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BucketNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BucketNode_method_BucketNode_INLRObject_INLRObject__LRBucketNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BucketNode(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BucketNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BucketNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BucketNode_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BucketNode::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BucketNode_fields__next_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BucketNode* This = dmi_cast<BucketNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_next, flags);
    else
      This->_next = ::acdk::lang::dmi::castTo< RBucketNode>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BucketNode_fields__next = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_next", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBucketNode::clazzInfo(),
  BucketNode_MetainfoWrapper::BucketNode_fields__next_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BucketNode_fields[] = 
{
  &BucketNode_fields__next,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BucketNode_methods_BucketNode_INLRObject_INLRObject__LRBucketNode__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BucketNode_methods_BucketNode_INLRObject_INLRObject__LRBucketNode__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BucketNode_methods_BucketNode_INLRObject_INLRObject__LRBucketNode__args[] = 
{
  &BucketNode_methods_BucketNode_INLRObject_INLRObject__LRBucketNode__arg_key,
  &BucketNode_methods_BucketNode_INLRObject_INLRObject__LRBucketNode__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* BucketNode_methods_BucketNode_INLRObject_INLRObject__LRBucketNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BucketNode_method_BucketNode_INLRObject_INLRObject__LRBucketNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BucketNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BucketNode::clazzInfo(), // return type
  "_1_BucketNode", // alternative name of method
  -1, // altlabelHashCode
  BucketNode_methods_BucketNode_INLRObject_INLRObject__LRBucketNode__args, // the arguments
  0, //arguments count
  BucketNode_methods_BucketNode_INLRObject_INLRObject__LRBucketNode__exceptions, // the declared exceptions
  BucketNode_MetainfoWrapper::BucketNode_method_BucketNode_INLRObject_INLRObject__LRBucketNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BucketNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BucketNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BucketNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BucketNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BucketNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BucketNode_MetainfoWrapper::BucketNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BucketNode_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BucketNode_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BucketNode_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  BucketNode_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  BucketNode_methods_create_instance__LRObject__exceptions, // the declared exceptions
  BucketNode_MetainfoWrapper::BucketNode_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BucketNode_methods[] = 
{
  &BucketNode_method_BucketNode_INLRObject_INLRObject__LRBucketNode_,
  &BucketNode_method_GetClass__L_acdk_lang_RClass_,
  &BucketNode_method_create_instance__LRObject_,
  0
};


struct BucketNode_MetaInfoInitializer
{  BucketNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BucketNode::clazzInfo();
    ci->fields =  _BucketNode_fields;
    ci->methods =  _BucketNode_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BucketNode_MetaInfoInitializer BucketNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Bucket_create_array(int length)
{
  return new ObjectArrayImpl<RBucket>(length);
}

//static
::acdk::lang::RObject
Bucket_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Bucket_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bucket_method_Bucket__LRBucket__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Bucket();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bucket_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Bucket::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bucket_method_add_INLRBucketNode__LRMapEntry__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Bucket* This = dmi_cast<Bucket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Bucket::add(::acdk::lang::dmi::castTo< RBucketNode>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->add(::acdk::lang::dmi::castTo< RBucketNode>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bucket_method_containsValue_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Bucket* This = dmi_cast<Bucket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Bucket::containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bucket_method_first__LRBucketNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Bucket* This = dmi_cast<Bucket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Bucket::first();
    else
        ret = (::acdk::lang::RObject)This->first();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bucket_method_getEntryByKey_INLRObject__LRBucketNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Bucket* This = dmi_cast<Bucket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Bucket::getEntryByKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getEntryByKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bucket_method_getValueByKey_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Bucket* This = dmi_cast<Bucket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Bucket::getValueByKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getValueByKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Bucket_method_removeByKey_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Bucket* This = dmi_cast<Bucket>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Bucket::removeByKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->removeByKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Bucket_fields__first_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Bucket* This = dmi_cast<Bucket>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_first, flags);
    else
      This->_first = ::acdk::lang::dmi::castTo< RBucketNode>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Bucket_fields__first = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_first", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBucketNode::clazzInfo(),
  Bucket_MetainfoWrapper::Bucket_fields__first_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Bucket_fields[] = 
{
  &Bucket_fields__first,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bucket_methods_Bucket__LRBucket__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket_methods_Bucket__LRBucket__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bucket_method_Bucket__LRBucket_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Bucket", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Bucket::clazzInfo(), // return type
  "_0_Bucket", // alternative name of method
  -1, // altlabelHashCode
  Bucket_methods_Bucket__LRBucket__args, // the arguments
  0, //arguments count
  Bucket_methods_Bucket__LRBucket__exceptions, // the declared exceptions
  Bucket_MetainfoWrapper::Bucket_method_Bucket__LRBucket__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bucket_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bucket_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Bucket_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Bucket_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Bucket_MetainfoWrapper::Bucket_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bucket_methods_add_INLRBucketNode__LRMapEntry__arg_newNode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newNode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBucketNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bucket_methods_add_INLRBucketNode__LRMapEntry__args[] = 
{
  &Bucket_methods_add_INLRBucketNode__LRMapEntry__arg_newNode,
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket_methods_add_INLRBucketNode__LRMapEntry__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bucket_method_add_INLRBucketNode__LRMapEntry_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMapEntry::clazzInfo(), // return type
  "_1_add", // alternative name of method
  -1, // altlabelHashCode
  Bucket_methods_add_INLRBucketNode__LRMapEntry__args, // the arguments
  0, //arguments count
  Bucket_methods_add_INLRBucketNode__LRMapEntry__exceptions, // the declared exceptions
  Bucket_MetainfoWrapper::Bucket_method_add_INLRBucketNode__LRMapEntry__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bucket_methods_containsValue_INLRObject__Z_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bucket_methods_containsValue_INLRObject__Z_args[] = 
{
  &Bucket_methods_containsValue_INLRObject__Z_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket_methods_containsValue_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bucket_method_containsValue_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_containsValue", // alternative name of method
  -1, // altlabelHashCode
  Bucket_methods_containsValue_INLRObject__Z_args, // the arguments
  0, //arguments count
  Bucket_methods_containsValue_INLRObject__Z_exceptions, // the declared exceptions
  Bucket_MetainfoWrapper::Bucket_method_containsValue_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bucket_methods_first__LRBucketNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket_methods_first__LRBucketNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bucket_method_first__LRBucketNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "first", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBucketNode::clazzInfo(), // return type
  "_6_first", // alternative name of method
  -1, // altlabelHashCode
  Bucket_methods_first__LRBucketNode__args, // the arguments
  0, //arguments count
  Bucket_methods_first__LRBucketNode__exceptions, // the declared exceptions
  Bucket_MetainfoWrapper::Bucket_method_first__LRBucketNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bucket_methods_getEntryByKey_INLRObject__LRBucketNode__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bucket_methods_getEntryByKey_INLRObject__LRBucketNode__args[] = 
{
  &Bucket_methods_getEntryByKey_INLRObject__LRBucketNode__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket_methods_getEntryByKey_INLRObject__LRBucketNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bucket_method_getEntryByKey_INLRObject__LRBucketNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEntryByKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBucketNode::clazzInfo(), // return type
  "_4_getEntryByKey", // alternative name of method
  -1, // altlabelHashCode
  Bucket_methods_getEntryByKey_INLRObject__LRBucketNode__args, // the arguments
  0, //arguments count
  Bucket_methods_getEntryByKey_INLRObject__LRBucketNode__exceptions, // the declared exceptions
  Bucket_MetainfoWrapper::Bucket_method_getEntryByKey_INLRObject__LRBucketNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bucket_methods_getValueByKey_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bucket_methods_getValueByKey_INLRObject__LRObject__args[] = 
{
  &Bucket_methods_getValueByKey_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket_methods_getValueByKey_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bucket_method_getValueByKey_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValueByKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_getValueByKey", // alternative name of method
  -1, // altlabelHashCode
  Bucket_methods_getValueByKey_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Bucket_methods_getValueByKey_INLRObject__LRObject__exceptions, // the declared exceptions
  Bucket_MetainfoWrapper::Bucket_method_getValueByKey_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Bucket_methods_removeByKey_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Bucket_methods_removeByKey_INLRObject__LRObject__args[] = 
{
  &Bucket_methods_removeByKey_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket_methods_removeByKey_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Bucket_method_removeByKey_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeByKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_removeByKey", // alternative name of method
  -1, // altlabelHashCode
  Bucket_methods_removeByKey_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Bucket_methods_removeByKey_INLRObject__LRObject__exceptions, // the declared exceptions
  Bucket_MetainfoWrapper::Bucket_method_removeByKey_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Bucket_methods[] = 
{
  &Bucket_method_Bucket__LRBucket_,
  &Bucket_method_GetClass__L_acdk_lang_RClass_,
  &Bucket_method_add_INLRBucketNode__LRMapEntry_,
  &Bucket_method_containsValue_INLRObject__Z,
  &Bucket_method_first__LRBucketNode_,
  &Bucket_method_getEntryByKey_INLRObject__LRBucketNode_,
  &Bucket_method_getValueByKey_INLRObject__LRObject_,
  &Bucket_method_removeByKey_INLRObject__LRObject_,
  0
};


struct Bucket_MetaInfoInitializer
{  Bucket_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Bucket::clazzInfo();
    ci->fields =  _Bucket_fields;
    ci->methods =  _Bucket_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Bucket_MetaInfoInitializer Bucket_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
Calendar_create_array(int length)
{
  return new ObjectArrayImpl<RCalendar>(length);
}

//static
::acdk::lang::RObject
Calendar_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Calendar_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Calendar::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_add_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    This->add(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_after_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::after(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->after(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_before_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::before(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->before(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_clear_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::clear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->clear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Calendar::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_complete__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::complete();
    else
        This->complete();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_computeFields__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    This->computeFields();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_computeTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    This->computeTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_get_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getActualMaximum_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::getActualMaximum(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getActualMaximum(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getActualMinimum_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::getActualMinimum(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->getActualMinimum(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getAvailableLocales__LRLocaleArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Calendar::getAvailableLocales();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getFirstDayOfWeek__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::getFirstDayOfWeek();
    else
      ret = This->getFirstDayOfWeek();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getGreatestMinimum_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
  ret = This->getGreatestMinimum(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getInstance_INLRTimeZone__LRCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Calendar::getInstance(::acdk::lang::dmi::castTo< RTimeZone>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getInstance_INLRLocale__LRCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Calendar::getInstance(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getInstance__LRCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Calendar::getInstance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getInstance_INLRTimeZone_INLRLocale__LRCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Calendar::getInstance(::acdk::lang::dmi::castTo< RTimeZone>(args[0], dc), ::acdk::lang::dmi::castTo< RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getLeastMaximum_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
  ret = This->getLeastMaximum(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getLenient__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::getLenient();
    else
      ret = This->getLenient();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getMaximum_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
  ret = This->getMaximum(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getMinimalDaysInFirstWeek__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::getMinimalDaysInFirstWeek();
    else
      ret = This->getMinimalDaysInFirstWeek();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getMinimum_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
  ret = This->getMinimum(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getTime__LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Calendar::getTime();
    else
        ret = (::acdk::lang::RObject)This->getTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getTimeInMillis__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::getTimeInMillis();
    else
      ret = This->getTimeInMillis();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_getTimeZone__LRTimeZone__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Calendar::getTimeZone();
    else
        ret = (::acdk::lang::RObject)This->getTimeZone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_get_cachedLocaleData__LRHashtable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Calendar::get_cachedLocaleData();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_internalGet_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::internalGet(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->internalGet(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_internalSet_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::internalSet(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->internalSet(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_isLenient__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::isLenient();
    else
      ret = This->isLenient();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_isSet_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Calendar::isSet(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->isSet(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_roll_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    This->roll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_roll_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::roll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->roll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_set_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_set_III_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_set_IIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_set_IIIIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< int>(args[6], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< int>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_set_IIIIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    else
        This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_setFirstDayOfWeek_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::setFirstDayOfWeek(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setFirstDayOfWeek(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_setLenient_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::setLenient(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setLenient(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_setMinimalDaysInFirstWeek_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::setMinimalDaysInFirstWeek(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMinimalDaysInFirstWeek(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_setTime_INLRDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::setTime(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    else
        This->setTime(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_setTimeInMillis_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::setTimeInMillis(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        This->setTimeInMillis(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_setTimeZone_LRTimeZone__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Calendar::setTimeZone(::acdk::lang::dmi::castTo< RTimeZone>(args[0], dc));
    else
        This->setTimeZone(::acdk::lang::dmi::castTo< RTimeZone>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Calendar_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Calendar::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_AM_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::AM, flags);
    else
      Calendar::AM = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_AM_PM_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::AM_PM, flags);
    else
      Calendar::AM_PM = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_APRIL_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::APRIL, flags);
    else
      Calendar::APRIL = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_AUGUST_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::AUGUST, flags);
    else
      Calendar::AUGUST = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_DATE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::DATE, flags);
    else
      Calendar::DATE = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_DAY_OF_MONTH_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::DAY_OF_MONTH, flags);
    else
      Calendar::DAY_OF_MONTH = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_DAY_OF_WEEK_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::DAY_OF_WEEK, flags);
    else
      Calendar::DAY_OF_WEEK = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_DAY_OF_WEEK_IN_MONTH_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::DAY_OF_WEEK_IN_MONTH, flags);
    else
      Calendar::DAY_OF_WEEK_IN_MONTH = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_DAY_OF_YEAR_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::DAY_OF_YEAR, flags);
    else
      Calendar::DAY_OF_YEAR = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_DECEMBER_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::DECEMBER, flags);
    else
      Calendar::DECEMBER = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_DST_OFFSET_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::DST_OFFSET, flags);
    else
      Calendar::DST_OFFSET = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_ERA_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::ERA, flags);
    else
      Calendar::ERA = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_FEBRUARY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::FEBRUARY, flags);
    else
      Calendar::FEBRUARY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_FIELD_COUNT_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::FIELD_COUNT, flags);
    else
      Calendar::FIELD_COUNT = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_FRIDAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::FRIDAY, flags);
    else
      Calendar::FRIDAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_HOUR_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::HOUR, flags);
    else
      Calendar::HOUR = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_HOUR_OF_DAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::HOUR_OF_DAY, flags);
    else
      Calendar::HOUR_OF_DAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_INTERNALLY_SET_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::INTERNALLY_SET, flags);
    else
      Calendar::INTERNALLY_SET = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_JANUARY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::JANUARY, flags);
    else
      Calendar::JANUARY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_JULY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::JULY, flags);
    else
      Calendar::JULY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_JUNE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::JUNE, flags);
    else
      Calendar::JUNE = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_MARCH_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::MARCH, flags);
    else
      Calendar::MARCH = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_MAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::MAY, flags);
    else
      Calendar::MAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_MILLISECOND_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::MILLISECOND, flags);
    else
      Calendar::MILLISECOND = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_MINIMUM_USER_STAMP_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::MINIMUM_USER_STAMP, flags);
    else
      Calendar::MINIMUM_USER_STAMP = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_MINUTE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::MINUTE, flags);
    else
      Calendar::MINUTE = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_MONDAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::MONDAY, flags);
    else
      Calendar::MONDAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_MONTH_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::MONTH, flags);
    else
      Calendar::MONTH = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_NOVEMBER_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::NOVEMBER, flags);
    else
      Calendar::NOVEMBER = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_OCTOBER_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::OCTOBER, flags);
    else
      Calendar::OCTOBER = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_PM_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::PM, flags);
    else
      Calendar::PM = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_SATURDAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::SATURDAY, flags);
    else
      Calendar::SATURDAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_SECOND_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::SECOND, flags);
    else
      Calendar::SECOND = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_SEPTEMBER_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::SEPTEMBER, flags);
    else
      Calendar::SEPTEMBER = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_SUNDAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::SUNDAY, flags);
    else
      Calendar::SUNDAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_THURSDAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::THURSDAY, flags);
    else
      Calendar::THURSDAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_TUESDAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::TUESDAY, flags);
    else
      Calendar::TUESDAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_UNDECIMBER_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::UNDECIMBER, flags);
    else
      Calendar::UNDECIMBER = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_UNSET_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::UNSET, flags);
    else
      Calendar::UNSET = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_WEDNESDAY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::WEDNESDAY, flags);
    else
      Calendar::WEDNESDAY = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_WEEK_OF_MONTH_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::WEEK_OF_MONTH, flags);
    else
      Calendar::WEEK_OF_MONTH = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_WEEK_OF_YEAR_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::WEEK_OF_YEAR, flags);
    else
      Calendar::WEEK_OF_YEAR = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_YEAR_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::YEAR, flags);
    else
      Calendar::YEAR = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields_ZONE_OFFSET_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::ZONE_OFFSET, flags);
    else
      Calendar::ZONE_OFFSET = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__areAllFieldsSet_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_areAllFieldsSet, flags);
    else
      This->_areAllFieldsSet = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__areFieldsSet_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_areFieldsSet, flags);
    else
      This->_areFieldsSet = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__cachedLocaleData_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Calendar::_cachedLocaleData, flags);
    else
      Calendar::_cachedLocaleData = ::acdk::lang::dmi::castTo< RHashtable>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__fields_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fields, flags);
    else
      This->_fields = ::acdk::lang::dmi::castTo< RintArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__firstDayOfWeek_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_firstDayOfWeek, flags);
    else
      This->_firstDayOfWeek = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__isSet_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isSet, flags);
    else
      This->_isSet = ::acdk::lang::dmi::castTo< RboolArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__isTimeSet_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isTimeSet, flags);
    else
      This->_isTimeSet = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__lenient_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lenient, flags);
    else
      This->_lenient = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__minimalDaysInFirstWeek_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minimalDaysInFirstWeek, flags);
    else
      This->_minimalDaysInFirstWeek = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__nextStamp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nextStamp, flags);
    else
      This->_nextStamp = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__stamp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stamp, flags);
    else
      This->_stamp = ::acdk::lang::dmi::castTo< RintArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__time_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_time, flags);
    else
      This->_time = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Calendar_fields__zone_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Calendar* This = dmi_cast<Calendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_zone, flags);
    else
      This->_zone = ::acdk::lang::dmi::castTo< RTimeZone>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_AM = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "AM", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_AM_accessor, // read/write access to this fields
  (void*)&Calendar::AM // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_AM_PM = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "AM_PM", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_AM_PM_accessor, // read/write access to this fields
  (void*)&Calendar::AM_PM // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_APRIL = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "APRIL", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_APRIL_accessor, // read/write access to this fields
  (void*)&Calendar::APRIL // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_AUGUST = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "AUGUST", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_AUGUST_accessor, // read/write access to this fields
  (void*)&Calendar::AUGUST // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_DATE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DATE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_DATE_accessor, // read/write access to this fields
  (void*)&Calendar::DATE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_DAY_OF_MONTH = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DAY_OF_MONTH", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_DAY_OF_MONTH_accessor, // read/write access to this fields
  (void*)&Calendar::DAY_OF_MONTH // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_DAY_OF_WEEK = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DAY_OF_WEEK", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_DAY_OF_WEEK_accessor, // read/write access to this fields
  (void*)&Calendar::DAY_OF_WEEK // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_DAY_OF_WEEK_IN_MONTH = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DAY_OF_WEEK_IN_MONTH", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_DAY_OF_WEEK_IN_MONTH_accessor, // read/write access to this fields
  (void*)&Calendar::DAY_OF_WEEK_IN_MONTH // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_DAY_OF_YEAR = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DAY_OF_YEAR", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_DAY_OF_YEAR_accessor, // read/write access to this fields
  (void*)&Calendar::DAY_OF_YEAR // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_DECEMBER = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DECEMBER", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_DECEMBER_accessor, // read/write access to this fields
  (void*)&Calendar::DECEMBER // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_DST_OFFSET = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DST_OFFSET", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_DST_OFFSET_accessor, // read/write access to this fields
  (void*)&Calendar::DST_OFFSET // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_ERA = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ERA", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_ERA_accessor, // read/write access to this fields
  (void*)&Calendar::ERA // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_FEBRUARY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FEBRUARY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_FEBRUARY_accessor, // read/write access to this fields
  (void*)&Calendar::FEBRUARY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_FIELD_COUNT = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FIELD_COUNT", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_FIELD_COUNT_accessor, // read/write access to this fields
  (void*)&Calendar::FIELD_COUNT // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_FRIDAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FRIDAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_FRIDAY_accessor, // read/write access to this fields
  (void*)&Calendar::FRIDAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_HOUR = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "HOUR", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_HOUR_accessor, // read/write access to this fields
  (void*)&Calendar::HOUR // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_HOUR_OF_DAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "HOUR_OF_DAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_HOUR_OF_DAY_accessor, // read/write access to this fields
  (void*)&Calendar::HOUR_OF_DAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_INTERNALLY_SET = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "INTERNALLY_SET", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_INTERNALLY_SET_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_JANUARY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "JANUARY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_JANUARY_accessor, // read/write access to this fields
  (void*)&Calendar::JANUARY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_JULY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "JULY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_JULY_accessor, // read/write access to this fields
  (void*)&Calendar::JULY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_JUNE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "JUNE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_JUNE_accessor, // read/write access to this fields
  (void*)&Calendar::JUNE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_MARCH = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MARCH", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_MARCH_accessor, // read/write access to this fields
  (void*)&Calendar::MARCH // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_MAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_MAY_accessor, // read/write access to this fields
  (void*)&Calendar::MAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_MILLISECOND = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MILLISECOND", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_MILLISECOND_accessor, // read/write access to this fields
  (void*)&Calendar::MILLISECOND // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_MINIMUM_USER_STAMP = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MINIMUM_USER_STAMP", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_MINIMUM_USER_STAMP_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_MINUTE = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MINUTE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_MINUTE_accessor, // read/write access to this fields
  (void*)&Calendar::MINUTE // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_MONDAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MONDAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_MONDAY_accessor, // read/write access to this fields
  (void*)&Calendar::MONDAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_MONTH = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MONTH", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_MONTH_accessor, // read/write access to this fields
  (void*)&Calendar::MONTH // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_NOVEMBER = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "NOVEMBER", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_NOVEMBER_accessor, // read/write access to this fields
  (void*)&Calendar::NOVEMBER // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_OCTOBER = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "OCTOBER", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_OCTOBER_accessor, // read/write access to this fields
  (void*)&Calendar::OCTOBER // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_PM = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "PM", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_PM_accessor, // read/write access to this fields
  (void*)&Calendar::PM // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_SATURDAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "SATURDAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_SATURDAY_accessor, // read/write access to this fields
  (void*)&Calendar::SATURDAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_SECOND = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "SECOND", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_SECOND_accessor, // read/write access to this fields
  (void*)&Calendar::SECOND // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_SEPTEMBER = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "SEPTEMBER", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_SEPTEMBER_accessor, // read/write access to this fields
  (void*)&Calendar::SEPTEMBER // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_SUNDAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "SUNDAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_SUNDAY_accessor, // read/write access to this fields
  (void*)&Calendar::SUNDAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_THURSDAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "THURSDAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_THURSDAY_accessor, // read/write access to this fields
  (void*)&Calendar::THURSDAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_TUESDAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TUESDAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_TUESDAY_accessor, // read/write access to this fields
  (void*)&Calendar::TUESDAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_UNDECIMBER = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "UNDECIMBER", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_UNDECIMBER_accessor, // read/write access to this fields
  (void*)&Calendar::UNDECIMBER // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_UNSET = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "UNSET", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_UNSET_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_WEDNESDAY = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "WEDNESDAY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_WEDNESDAY_accessor, // read/write access to this fields
  (void*)&Calendar::WEDNESDAY // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_WEEK_OF_MONTH = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "WEEK_OF_MONTH", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_WEEK_OF_MONTH_accessor, // read/write access to this fields
  (void*)&Calendar::WEEK_OF_MONTH // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_WEEK_OF_YEAR = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "WEEK_OF_YEAR", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_WEEK_OF_YEAR_accessor, // read/write access to this fields
  (void*)&Calendar::WEEK_OF_YEAR // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_YEAR = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "YEAR", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_YEAR_accessor, // read/write access to this fields
  (void*)&Calendar::YEAR // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields_ZONE_OFFSET = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ZONE_OFFSET", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields_ZONE_OFFSET_accessor, // read/write access to this fields
  (void*)&Calendar::ZONE_OFFSET // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__areAllFieldsSet = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_areAllFieldsSet", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Calendar_MetainfoWrapper::Calendar_fields__areAllFieldsSet_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__areFieldsSet = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_areFieldsSet", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Calendar_MetainfoWrapper::Calendar_fields__areFieldsSet_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__cachedLocaleData = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cachedLocaleData", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashtable::clazzInfo(),
  Calendar_MetainfoWrapper::Calendar_fields__cachedLocaleData_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__fields = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fields", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo(),
  Calendar_MetainfoWrapper::Calendar_fields__fields_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__firstDayOfWeek = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_firstDayOfWeek", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields__firstDayOfWeek_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__isSet = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isSet", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RboolArray::clazzInfo(),
  Calendar_MetainfoWrapper::Calendar_fields__isSet_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__isTimeSet = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isTimeSet", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Calendar_MetainfoWrapper::Calendar_fields__isTimeSet_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__lenient = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lenient", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Calendar_MetainfoWrapper::Calendar_fields__lenient_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__minimalDaysInFirstWeek = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minimalDaysInFirstWeek", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields__minimalDaysInFirstWeek_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__nextStamp = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nextStamp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Calendar_MetainfoWrapper::Calendar_fields__nextStamp_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__stamp = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_stamp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo(),
  Calendar_MetainfoWrapper::Calendar_fields__stamp_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__time = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_time", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  Calendar_MetainfoWrapper::Calendar_fields__time_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Calendar_fields__zone = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_zone", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo(),
  Calendar_MetainfoWrapper::Calendar_fields__zone_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Calendar_fields[] = 
{
  &Calendar_fields_AM,
  &Calendar_fields_AM_PM,
  &Calendar_fields_APRIL,
  &Calendar_fields_AUGUST,
  &Calendar_fields_DATE,
  &Calendar_fields_DAY_OF_MONTH,
  &Calendar_fields_DAY_OF_WEEK,
  &Calendar_fields_DAY_OF_WEEK_IN_MONTH,
  &Calendar_fields_DAY_OF_YEAR,
  &Calendar_fields_DECEMBER,
  &Calendar_fields_DST_OFFSET,
  &Calendar_fields_ERA,
  &Calendar_fields_FEBRUARY,
  &Calendar_fields_FIELD_COUNT,
  &Calendar_fields_FRIDAY,
  &Calendar_fields_HOUR,
  &Calendar_fields_HOUR_OF_DAY,
  &Calendar_fields_INTERNALLY_SET,
  &Calendar_fields_JANUARY,
  &Calendar_fields_JULY,
  &Calendar_fields_JUNE,
  &Calendar_fields_MARCH,
  &Calendar_fields_MAY,
  &Calendar_fields_MILLISECOND,
  &Calendar_fields_MINIMUM_USER_STAMP,
  &Calendar_fields_MINUTE,
  &Calendar_fields_MONDAY,
  &Calendar_fields_MONTH,
  &Calendar_fields_NOVEMBER,
  &Calendar_fields_OCTOBER,
  &Calendar_fields_PM,
  &Calendar_fields_SATURDAY,
  &Calendar_fields_SECOND,
  &Calendar_fields_SEPTEMBER,
  &Calendar_fields_SUNDAY,
  &Calendar_fields_THURSDAY,
  &Calendar_fields_TUESDAY,
  &Calendar_fields_UNDECIMBER,
  &Calendar_fields_UNSET,
  &Calendar_fields_WEDNESDAY,
  &Calendar_fields_WEEK_OF_MONTH,
  &Calendar_fields_WEEK_OF_YEAR,
  &Calendar_fields_YEAR,
  &Calendar_fields_ZONE_OFFSET,
  &Calendar_fields__areAllFieldsSet,
  &Calendar_fields__areFieldsSet,
  &Calendar_fields__cachedLocaleData,
  &Calendar_fields__fields,
  &Calendar_fields__firstDayOfWeek,
  &Calendar_fields__isSet,
  &Calendar_fields__isTimeSet,
  &Calendar_fields__lenient,
  &Calendar_fields__minimalDaysInFirstWeek,
  &Calendar_fields__nextStamp,
  &Calendar_fields__stamp,
  &Calendar_fields__time,
  &Calendar_fields__zone,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_Calendar__LRCalendar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_Calendar__LRCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_Calendar__LRCalendar_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Calendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Calendar::clazzInfo(), // return type
  "_F_Calendar", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_Calendar__LRCalendar__args, // the arguments
  0, //arguments count
  Calendar_methods_Calendar__LRCalendar__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_Calendar_INLRTimeZone_INLRLocale__LRCalendar__arg_zone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "zone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_Calendar_INLRTimeZone_INLRLocale__LRCalendar__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_Calendar_INLRTimeZone_INLRLocale__LRCalendar__args[] = 
{
  &Calendar_methods_Calendar_INLRTimeZone_INLRLocale__LRCalendar__arg_zone,
  &Calendar_methods_Calendar_INLRTimeZone_INLRLocale__LRCalendar__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_Calendar_INLRTimeZone_INLRLocale__LRCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_Calendar_INLRTimeZone_INLRLocale__LRCalendar_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Calendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Calendar::clazzInfo(), // return type
  "_G_Calendar", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_Calendar_INLRTimeZone_INLRLocale__LRCalendar__args, // the arguments
  0, //arguments count
  Calendar_methods_Calendar_INLRTimeZone_INLRLocale__LRCalendar__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_O_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Calendar_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_add_II_V_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_add_II_V_arg_amount = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "amount", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_add_II_V_args[] = 
{
  &Calendar_methods_add_II_V_arg_field,
  &Calendar_methods_add_II_V_arg_amount,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_add_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_add_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_add", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_add_II_V_args, // the arguments
  0, //arguments count
  Calendar_methods_add_II_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_add_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_after_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_after_INLRObject__Z_args[] = 
{
  &Calendar_methods_after_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_after_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_after_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "after", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_after", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_after_INLRObject__Z_args, // the arguments
  0, //arguments count
  Calendar_methods_after_INLRObject__Z_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_after_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_before_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_before_INLRObject__Z_args[] = 
{
  &Calendar_methods_before_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_before_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_before_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "before", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_before", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_before_INLRObject__Z_args, // the arguments
  0, //arguments count
  Calendar_methods_before_INLRObject__Z_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_before_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_clear", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_clear__V_args, // the arguments
  0, //arguments count
  Calendar_methods_clear__V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_clear_I_V_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_clear_I_V_args[] = 
{
  &Calendar_methods_clear_I_V_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_clear_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_clear_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_clear", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_clear_I_V_args, // the arguments
  0, //arguments count
  Calendar_methods_clear_I_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_clear_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_D_clone", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  Calendar_methods_clone__LRObject__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_complete__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_complete__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_complete__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "complete", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_N_complete", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_complete__V_args, // the arguments
  0, //arguments count
  Calendar_methods_complete__V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_complete__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_computeFields__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_computeFields__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_computeFields__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "computeFields", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_computeFields", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_computeFields__V_args, // the arguments
  0, //arguments count
  Calendar_methods_computeFields__V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_computeFields__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_computeTime__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_computeTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_computeTime__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "computeTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_computeTime", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_computeTime__V_args, // the arguments
  0, //arguments count
  Calendar_methods_computeTime__V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_computeTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_equals_INLRObject__Z_args[] = 
{
  &Calendar_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_equals", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Calendar_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_get_I_I_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_get_I_I_args[] = 
{
  &Calendar_methods_get_I_I_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_get_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_get_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_get", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_get_I_I_args, // the arguments
  0, //arguments count
  Calendar_methods_get_I_I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_get_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getActualMaximum_I_I_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getActualMaximum_I_I_args[] = 
{
  &Calendar_methods_getActualMaximum_I_I_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getActualMaximum_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getActualMaximum_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getActualMaximum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_getActualMaximum", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getActualMaximum_I_I_args, // the arguments
  0, //arguments count
  Calendar_methods_getActualMaximum_I_I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getActualMaximum_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getActualMinimum_I_I_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getActualMinimum_I_I_args[] = 
{
  &Calendar_methods_getActualMinimum_I_I_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getActualMinimum_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getActualMinimum_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getActualMinimum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_getActualMinimum", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getActualMinimum_I_I_args, // the arguments
  0, //arguments count
  Calendar_methods_getActualMinimum_I_I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getActualMinimum_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getAvailableLocales__LRLocaleArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getAvailableLocales__LRLocaleArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getAvailableLocales__LRLocaleArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableLocales", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocaleArray::clazzInfo(), // return type
  "_5_getAvailableLocales", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getAvailableLocales__LRLocaleArray__args, // the arguments
  0, //arguments count
  Calendar_methods_getAvailableLocales__LRLocaleArray__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getAvailableLocales__LRLocaleArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getFirstDayOfWeek__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getFirstDayOfWeek__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getFirstDayOfWeek__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFirstDayOfWeek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_t_getFirstDayOfWeek", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getFirstDayOfWeek__I_args, // the arguments
  0, //arguments count
  Calendar_methods_getFirstDayOfWeek__I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getFirstDayOfWeek__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getGreatestMinimum_I_I_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getGreatestMinimum_I_I_args[] = 
{
  &Calendar_methods_getGreatestMinimum_I_I_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getGreatestMinimum_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getGreatestMinimum_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGreatestMinimum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_y_getGreatestMinimum", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getGreatestMinimum_I_I_args, // the arguments
  0, //arguments count
  Calendar_methods_getGreatestMinimum_I_I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getGreatestMinimum_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getInstance_INLRTimeZone__LRCalendar__arg_zone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "zone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getInstance_INLRTimeZone__LRCalendar__args[] = 
{
  &Calendar_methods_getInstance_INLRTimeZone__LRCalendar__arg_zone,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getInstance_INLRTimeZone__LRCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getInstance_INLRTimeZone__LRCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo(), // return type
  "_2_getInstance", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getInstance_INLRTimeZone__LRCalendar__args, // the arguments
  0, //arguments count
  Calendar_methods_getInstance_INLRTimeZone__LRCalendar__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getInstance_INLRTimeZone__LRCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getInstance_INLRLocale__LRCalendar__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getInstance_INLRLocale__LRCalendar__args[] = 
{
  &Calendar_methods_getInstance_INLRLocale__LRCalendar__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getInstance_INLRLocale__LRCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getInstance_INLRLocale__LRCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo(), // return type
  "_3_getInstance", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getInstance_INLRLocale__LRCalendar__args, // the arguments
  0, //arguments count
  Calendar_methods_getInstance_INLRLocale__LRCalendar__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getInstance_INLRLocale__LRCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getInstance__LRCalendar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getInstance__LRCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getInstance__LRCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo(), // return type
  "_1_getInstance", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getInstance__LRCalendar__args, // the arguments
  0, //arguments count
  Calendar_methods_getInstance__LRCalendar__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getInstance__LRCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getInstance_INLRTimeZone_INLRLocale__LRCalendar__arg_zone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "zone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getInstance_INLRTimeZone_INLRLocale__LRCalendar__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getInstance_INLRTimeZone_INLRLocale__LRCalendar__args[] = 
{
  &Calendar_methods_getInstance_INLRTimeZone_INLRLocale__LRCalendar__arg_zone,
  &Calendar_methods_getInstance_INLRTimeZone_INLRLocale__LRCalendar__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getInstance_INLRTimeZone_INLRLocale__LRCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getInstance_INLRTimeZone_INLRLocale__LRCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCalendar::clazzInfo(), // return type
  "_4_getInstance", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getInstance_INLRTimeZone_INLRLocale__LRCalendar__args, // the arguments
  0, //arguments count
  Calendar_methods_getInstance_INLRTimeZone_INLRLocale__LRCalendar__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getInstance_INLRTimeZone_INLRLocale__LRCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getLeastMaximum_I_I_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getLeastMaximum_I_I_args[] = 
{
  &Calendar_methods_getLeastMaximum_I_I_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getLeastMaximum_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getLeastMaximum_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLeastMaximum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_z_getLeastMaximum", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getLeastMaximum_I_I_args, // the arguments
  0, //arguments count
  Calendar_methods_getLeastMaximum_I_I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getLeastMaximum_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getLenient__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getLenient__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getLenient__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLenient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_getLenient", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getLenient__Z_args, // the arguments
  0, //arguments count
  Calendar_methods_getLenient__Z_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getLenient__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getMaximum_I_I_arg_max = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "max", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getMaximum_I_I_args[] = 
{
  &Calendar_methods_getMaximum_I_I_arg_max,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getMaximum_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getMaximum_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaximum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_x_getMaximum", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getMaximum_I_I_args, // the arguments
  0, //arguments count
  Calendar_methods_getMaximum_I_I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getMaximum_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getMinimalDaysInFirstWeek__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getMinimalDaysInFirstWeek__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getMinimalDaysInFirstWeek__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinimalDaysInFirstWeek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_v_getMinimalDaysInFirstWeek", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getMinimalDaysInFirstWeek__I_args, // the arguments
  0, //arguments count
  Calendar_methods_getMinimalDaysInFirstWeek__I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getMinimalDaysInFirstWeek__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_getMinimum_I_I_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getMinimum_I_I_args[] = 
{
  &Calendar_methods_getMinimum_I_I_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getMinimum_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getMinimum_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinimum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_w_getMinimum", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getMinimum_I_I_args, // the arguments
  0, //arguments count
  Calendar_methods_getMinimum_I_I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getMinimum_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getTime__LRDate__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getTime__LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getTime__LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo(), // return type
  "_6_getTime", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getTime__LRDate__args, // the arguments
  0, //arguments count
  Calendar_methods_getTime__LRDate__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getTime__LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getTimeInMillis__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getTimeInMillis__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getTimeInMillis__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeInMillis", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_J_getTimeInMillis", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getTimeInMillis__J_args, // the arguments
  0, //arguments count
  Calendar_methods_getTimeInMillis__J_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getTimeInMillis__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_getTimeZone__LRTimeZone__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_getTimeZone__LRTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_getTimeZone__LRTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo(), // return type
  "_p_getTimeZone", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_getTimeZone__LRTimeZone__args, // the arguments
  0, //arguments count
  Calendar_methods_getTimeZone__LRTimeZone__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_getTimeZone__LRTimeZone__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_get_cachedLocaleData__LRHashtable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_get_cachedLocaleData__LRHashtable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_get_cachedLocaleData__LRHashtable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_cachedLocaleData", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashtable::clazzInfo(), // return type
  "_0_get_cachedLocaleData", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_get_cachedLocaleData__LRHashtable__args, // the arguments
  0, //arguments count
  Calendar_methods_get_cachedLocaleData__LRHashtable__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_get_cachedLocaleData__LRHashtable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Calendar_methods_hashCode__I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_internalGet_I_I_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_internalGet_I_I_args[] = 
{
  &Calendar_methods_internalGet_I_I_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_internalGet_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_internalGet_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "internalGet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_L_internalGet", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_internalGet_I_I_args, // the arguments
  0, //arguments count
  Calendar_methods_internalGet_I_I_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_internalGet_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_internalSet_II_V_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_internalSet_II_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_internalSet_II_V_args[] = 
{
  &Calendar_methods_internalSet_II_V_arg_field,
  &Calendar_methods_internalSet_II_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_internalSet_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_internalSet_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "internalSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_M_internalSet", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_internalSet_II_V_args, // the arguments
  0, //arguments count
  Calendar_methods_internalSet_II_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_internalSet_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_isLenient__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_isLenient__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_isLenient__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLenient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_C_isLenient", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_isLenient__Z_args, // the arguments
  0, //arguments count
  Calendar_methods_isLenient__Z_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_isLenient__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_isSet_I_Z_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_isSet_I_Z_args[] = 
{
  &Calendar_methods_isSet_I_Z_arg_field,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_isSet_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_isSet_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isSet", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_isSet_I_Z_args, // the arguments
  0, //arguments count
  Calendar_methods_isSet_I_Z_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_isSet_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_roll_IZ_V_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_roll_IZ_V_arg_up = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "up", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_roll_IZ_V_args[] = 
{
  &Calendar_methods_roll_IZ_V_arg_field,
  &Calendar_methods_roll_IZ_V_arg_up,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_roll_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_roll_IZ_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "roll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_roll", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_roll_IZ_V_args, // the arguments
  0, //arguments count
  Calendar_methods_roll_IZ_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_roll_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_roll_II_V_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_roll_II_V_arg_amount = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "amount", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_roll_II_V_args[] = 
{
  &Calendar_methods_roll_II_V_arg_field,
  &Calendar_methods_roll_II_V_arg_amount,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_roll_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_roll_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "roll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_roll", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_roll_II_V_args, // the arguments
  0, //arguments count
  Calendar_methods_roll_II_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_roll_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_II_V_arg_field = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "field", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_II_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_set_II_V_args[] = 
{
  &Calendar_methods_set_II_V_arg_field,
  &Calendar_methods_set_II_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_set_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_set_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_set", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_set_II_V_args, // the arguments
  0, //arguments count
  Calendar_methods_set_II_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_set_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_III_V_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_III_V_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_III_V_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_set_III_V_args[] = 
{
  &Calendar_methods_set_III_V_arg_year,
  &Calendar_methods_set_III_V_arg_month,
  &Calendar_methods_set_III_V_arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_set_III_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_set_III_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_set", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_set_III_V_args, // the arguments
  0, //arguments count
  Calendar_methods_set_III_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_set_III_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIII_V_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIII_V_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIII_V_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIII_V_arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIII_V_arg_minute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_set_IIIII_V_args[] = 
{
  &Calendar_methods_set_IIIII_V_arg_year,
  &Calendar_methods_set_IIIII_V_arg_month,
  &Calendar_methods_set_IIIII_V_arg_date,
  &Calendar_methods_set_IIIII_V_arg_hour,
  &Calendar_methods_set_IIIII_V_arg_minute,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_set_IIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_set_IIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_set", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_set_IIIII_V_args, // the arguments
  0, //arguments count
  Calendar_methods_set_IIIII_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_set_IIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIIII_V_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIIII_V_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIIII_V_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIIII_V_arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIIII_V_arg_minute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIIII_V_arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIIII_V_arg_millisecond = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "millisecond", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_set_IIIIIII_V_args[] = 
{
  &Calendar_methods_set_IIIIIII_V_arg_year,
  &Calendar_methods_set_IIIIIII_V_arg_month,
  &Calendar_methods_set_IIIIIII_V_arg_date,
  &Calendar_methods_set_IIIIIII_V_arg_hour,
  &Calendar_methods_set_IIIIIII_V_arg_minute,
  &Calendar_methods_set_IIIIIII_V_arg_second,
  &Calendar_methods_set_IIIIIII_V_arg_millisecond,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_set_IIIIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_set_IIIIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_set", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_set_IIIIIII_V_args, // the arguments
  0, //arguments count
  Calendar_methods_set_IIIIIII_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_set_IIIIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIII_V_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIII_V_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIII_V_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIII_V_arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIII_V_arg_minute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_set_IIIIII_V_arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_set_IIIIII_V_args[] = 
{
  &Calendar_methods_set_IIIIII_V_arg_year,
  &Calendar_methods_set_IIIIII_V_arg_month,
  &Calendar_methods_set_IIIIII_V_arg_date,
  &Calendar_methods_set_IIIIII_V_arg_hour,
  &Calendar_methods_set_IIIIII_V_arg_minute,
  &Calendar_methods_set_IIIIII_V_arg_second,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_set_IIIIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_set_IIIIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_set", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_set_IIIIII_V_args, // the arguments
  0, //arguments count
  Calendar_methods_set_IIIIII_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_set_IIIIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_setFirstDayOfWeek_I_V_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_setFirstDayOfWeek_I_V_args[] = 
{
  &Calendar_methods_setFirstDayOfWeek_I_V_arg_day,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_setFirstDayOfWeek_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_setFirstDayOfWeek_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFirstDayOfWeek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setFirstDayOfWeek", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_setFirstDayOfWeek_I_V_args, // the arguments
  0, //arguments count
  Calendar_methods_setFirstDayOfWeek_I_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_setFirstDayOfWeek_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_setLenient_Z_V_arg_lenient = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lenient", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_setLenient_Z_V_args[] = 
{
  &Calendar_methods_setLenient_Z_V_arg_lenient,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_setLenient_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_setLenient_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLenient", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setLenient", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_setLenient_Z_V_args, // the arguments
  0, //arguments count
  Calendar_methods_setLenient_Z_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_setLenient_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_setMinimalDaysInFirstWeek_I_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_setMinimalDaysInFirstWeek_I_V_args[] = 
{
  &Calendar_methods_setMinimalDaysInFirstWeek_I_V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_setMinimalDaysInFirstWeek_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_setMinimalDaysInFirstWeek_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinimalDaysInFirstWeek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setMinimalDaysInFirstWeek", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_setMinimalDaysInFirstWeek_I_V_args, // the arguments
  0, //arguments count
  Calendar_methods_setMinimalDaysInFirstWeek_I_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_setMinimalDaysInFirstWeek_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_setTime_INLRDate__V_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_setTime_INLRDate__V_args[] = 
{
  &Calendar_methods_setTime_INLRDate__V_arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_setTime_INLRDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_setTime_INLRDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setTime", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_setTime_INLRDate__V_args, // the arguments
  0, //arguments count
  Calendar_methods_setTime_INLRDate__V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_setTime_INLRDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_setTimeInMillis_J_V_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_setTimeInMillis_J_V_args[] = 
{
  &Calendar_methods_setTimeInMillis_J_V_arg_millis,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_setTimeInMillis_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_setTimeInMillis_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimeInMillis", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_K_setTimeInMillis", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_setTimeInMillis_J_V_args, // the arguments
  0, //arguments count
  Calendar_methods_setTimeInMillis_J_V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_setTimeInMillis_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Calendar_methods_setTimeZone_LRTimeZone__V_arg_zone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "zone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_setTimeZone_LRTimeZone__V_args[] = 
{
  &Calendar_methods_setTimeZone_LRTimeZone__V_arg_zone,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_setTimeZone_LRTimeZone__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_setTimeZone_LRTimeZone__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setTimeZone", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_setTimeZone_LRTimeZone__V_args, // the arguments
  0, //arguments count
  Calendar_methods_setTimeZone_LRTimeZone__V_exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_setTimeZone_LRTimeZone__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Calendar_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Calendar_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_E_toString", // alternative name of method
  -1, // altlabelHashCode
  Calendar_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Calendar_methods_toString__LRString__exceptions, // the declared exceptions
  Calendar_MetainfoWrapper::Calendar_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Calendar_methods[] = 
{
  &Calendar_method_Calendar__LRCalendar_,
  &Calendar_method_Calendar_INLRTimeZone_INLRLocale__LRCalendar_,
  &Calendar_method_GetClass__L_acdk_lang_RClass_,
  &Calendar_method_add_II_V,
  &Calendar_method_after_INLRObject__Z,
  &Calendar_method_before_INLRObject__Z,
  &Calendar_method_clear__V,
  &Calendar_method_clear_I_V,
  &Calendar_method_clone__LRObject_,
  &Calendar_method_complete__V,
  &Calendar_method_computeFields__V,
  &Calendar_method_computeTime__V,
  &Calendar_method_equals_INLRObject__Z,
  &Calendar_method_get_I_I,
  &Calendar_method_getActualMaximum_I_I,
  &Calendar_method_getActualMinimum_I_I,
  &Calendar_method_getAvailableLocales__LRLocaleArray_,
  &Calendar_method_getFirstDayOfWeek__I,
  &Calendar_method_getGreatestMinimum_I_I,
  &Calendar_method_getInstance_INLRTimeZone__LRCalendar_,
  &Calendar_method_getInstance_INLRLocale__LRCalendar_,
  &Calendar_method_getInstance__LRCalendar_,
  &Calendar_method_getInstance_INLRTimeZone_INLRLocale__LRCalendar_,
  &Calendar_method_getLeastMaximum_I_I,
  &Calendar_method_getLenient__Z,
  &Calendar_method_getMaximum_I_I,
  &Calendar_method_getMinimalDaysInFirstWeek__I,
  &Calendar_method_getMinimum_I_I,
  &Calendar_method_getTime__LRDate_,
  &Calendar_method_getTimeInMillis__J,
  &Calendar_method_getTimeZone__LRTimeZone_,
  &Calendar_method_get_cachedLocaleData__LRHashtable_,
  &Calendar_method_hashCode__I,
  &Calendar_method_internalGet_I_I,
  &Calendar_method_internalSet_II_V,
  &Calendar_method_isLenient__Z,
  &Calendar_method_isSet_I_Z,
  &Calendar_method_roll_IZ_V,
  &Calendar_method_roll_II_V,
  &Calendar_method_set_II_V,
  &Calendar_method_set_III_V,
  &Calendar_method_set_IIIII_V,
  &Calendar_method_set_IIIIIII_V,
  &Calendar_method_set_IIIIII_V,
  &Calendar_method_setFirstDayOfWeek_I_V,
  &Calendar_method_setLenient_Z_V,
  &Calendar_method_setMinimalDaysInFirstWeek_I_V,
  &Calendar_method_setTime_INLRDate__V,
  &Calendar_method_setTimeInMillis_J_V,
  &Calendar_method_setTimeZone_LRTimeZone__V,
  &Calendar_method_toString__LRString_,
  0
};


struct Calendar_MetaInfoInitializer
{  Calendar_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Calendar::clazzInfo();
    ci->fields =  _Calendar_fields;
    ci->methods =  _Calendar_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Calendar_MetaInfoInitializer Calendar_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) util_dummyExportFunc() {}
#endif

