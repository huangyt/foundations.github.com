// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../util.h"
#include "../AbstractCollection.h"
#include "../AbstractList.h"
#include "../AbstractListIterator.h"
#include "../AbstractListListIterator.h"
#include "../AbstractListSubList.h"
#include "../AbstractMap.h"
#include "../AbstractSequentialList.h"
#include "../AbstractSet.h"
#include "../acdk_util_classes.h"
#include "../ArrayIterator.h"
#include "../ArrayList.h"
#include "../Arrays.h"
#include "../BasicMapEntry.h"
#include "../BitSet.h"
#include "../Bucket.h"
#include "../Calendar.h"
#include "../Collection.h"
#include "../Collections.h"
#include "../Comparator.h"
#include "../ConcurrentModificationException.h"
#include "../Date.h"
#include "../Dictionary.h"
#include "../DoubleIterator.h"
#include "../EmptyCollectionIterator.h"
#include "../Enumeration.h"
#include "../EventListener.h"
#include "../EventListenerProxy.h"
#include "../EventObject.h"
#include "../GregorianCalendar.h"
#include "../HashMap.h"
#include "../HashSet.h"
#include "../Hashtable.h"
#include "../IdentityHashMap.h"
#include "../Iterator.h"
#include "../LinkedList.h"
#include "../List.h"
#include "../ListIterator.h"
#include "../ListResourceBundle.h"
#include "../Locale.h"
#include "../Map.h"
#include "../MissingResourceException.h"
#include "../NoSuchElementException.h"
#include "../Properties.h"
#include "../PropertiesListener.h"
#include "../PropertyResourceBundle.h"
#include "../Random.h"
#include "../ResourceBundle.h"
#include "../Set.h"
#include "../SimpleCalendar.h"
#include "../SimpleListResourceBundle.h"
#include "../SimpleTimeZone.h"
#include "../SingleObjectIterator.h"
#include "../SortedMap.h"
#include "../SortedSet.h"
#include "../StringTokenizer.h"
#include "../SynchronizedCollections.h"
#include "../SysDate.h"
#include "../TAbstractCollection.h"
#include "../TAbstractList.h"
#include "../TAbstractListIterator.h"
#include "../TAbstractListListIterator.h"
#include "../TAbstractListSubList.h"
#include "../TAbstractMap.h"
#include "../TAbstractSet.h"
#include "../TArrayList.h"
#include "../TBasicMapEntry.h"
#include "../TBucket.h"
#include "../TCollection.h"
#include "../TComparator.h"
#include "../TDoubleIterator.h"
#include "../THashMap.h"
#include "../THashSet.h"
#include "../TimeZone.h"
#include "../TIterator.h"
#include "../TList.h"
#include "../TListIterator.h"
#include "../TMap.h"
#include "../TreeMap.h"
#include "../TreeSet.h"
#include "../TSet.h"
#include "../TSortedMap.h"
#include "../TTreeMap.h"
#include "../util.h"
#include "../util_all.h"
#include "../Vector.h"
#include "../WeakHashMap.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
SysDate_create_array(int length)
{
  return new ObjectArrayImpl<RSysDate>(length);
}

//static
::acdk::lang::RObject
SysDate_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SysDate_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SysDate::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_SysDate__LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SysDate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_SysDate_J_LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SysDate(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_SysDate_INLRString_INLRString__LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SysDate(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_SysDate_INLRString__LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SysDate(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_SysDate_III_LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SysDate(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_SysDate_IIIII_LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SysDate(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_SysDate_IIIIII_LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SysDate(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_SysDate_II_LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SysDate(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_UTC_IIIIII_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = SysDate::UTC(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_addMilliseconds_J_LRSysDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SysDate::addMilliseconds(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->addMilliseconds(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_after_INLRSysDate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::after(::acdk::lang::dmi::castTo< RSysDate>(args[0], dc));
    else
      ret = This->after(::acdk::lang::dmi::castTo< RSysDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_before_INLRSysDate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::before(::acdk::lang::dmi::castTo< RSysDate>(args[0], dc));
    else
      ret = This->before(::acdk::lang::dmi::castTo< RSysDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_compareTo_INLRSysDate__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::compareTo(::acdk::lang::dmi::castTo< RSysDate>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RSysDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SysDate::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_diffMilliseconds_INLRSysDate__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::diffMilliseconds(::acdk::lang::dmi::castTo< RSysDate>(args[0], dc));
    else
      ret = This->diffMilliseconds(::acdk::lang::dmi::castTo< RSysDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getDate__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getDate();
    else
      ret = This->getDate();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getDay__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getDay();
    else
      ret = This->getDay();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getHours__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getHours();
    else
      ret = This->getHours();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getMinutes__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getMinutes();
    else
      ret = This->getMinutes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getMonth__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getMonth();
    else
      ret = This->getMonth();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getSeconds__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getSeconds();
    else
      ret = This->getSeconds();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getSecs__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getSecs();
    else
      ret = This->getSecs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getTickCount__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = SysDate::getTickCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getTime__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getTime();
    else
      ret = This->getTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getTimeStamp_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SysDate::getTimeStamp(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getTimeStamp(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getTimeStamp__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SysDate::getTimeStamp();
    else
        ret = (::acdk::lang::RObject)This->getTimeStamp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getTimezoneOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getTimezoneOffset();
    else
      ret = This->getTimezoneOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getUSecs__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getUSecs();
    else
      ret = This->getUSecs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_getYear__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SysDate::getYear();
    else
      ret = This->getYear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_parse_INLRString_INLRString__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = SysDate::parse(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_parse_INLRString__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = SysDate::parse(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_setDate_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::setDate(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setDate(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_setDay_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::setDay(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setDay(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_setHours_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::setHours(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setHours(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_setMinutes_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::setMinutes(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMinutes(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_setMonth_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::setMonth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMonth(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_setSeconds_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::setSeconds(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSeconds(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_setYear_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::setYear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setYear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_syncFields__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::syncFields();
    else
        This->syncFields();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_syncTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SysDate::syncTime();
    else
        This->syncTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_toGMTString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SysDate::toGMTString();
    else
        ret = (::acdk::lang::RObject)This->toGMTString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SysDate_method_toLocaleString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SysDate::toLocaleString();
    else
        ret = (::acdk::lang::RObject)This->toLocaleString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SysDate_fields__isSyncFields_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isSyncFields, flags);
    else
      This->_isSyncFields = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SysDate_fields__isSyncTime_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_isSyncTime, flags);
    else
      This->_isSyncTime = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SysDate_fields__seconds_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_seconds, flags);
    else
      This->_seconds = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SysDate_fields__useconds_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SysDate* This = dmi_cast<SysDate>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_useconds, flags);
    else
      This->_useconds = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SysDate_fields__isSyncFields = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isSyncFields", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  SysDate_MetainfoWrapper::SysDate_fields__isSyncFields_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SysDate_fields__isSyncTime = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_isSyncTime", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  SysDate_MetainfoWrapper::SysDate_fields__isSyncTime_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SysDate_fields__seconds = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_seconds", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SysDate_MetainfoWrapper::SysDate_fields__seconds_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SysDate_fields__useconds = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_useconds", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SysDate_MetainfoWrapper::SysDate_fields__useconds_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SysDate_fields[] = 
{
  &SysDate_fields__isSyncFields,
  &SysDate_fields__isSyncTime,
  &SysDate_fields__seconds,
  &SysDate_fields__useconds,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_G_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SysDate_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_SysDate__LRSysDate__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_SysDate__LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_SysDate__LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SysDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SysDate::clazzInfo(), // return type
  "_4_SysDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_SysDate__LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_SysDate__LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_SysDate__LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_J_LRSysDate__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_SysDate_J_LRSysDate__args[] = 
{
  &SysDate_methods_SysDate_J_LRSysDate__arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_SysDate_J_LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_SysDate_J_LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SysDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SysDate::clazzInfo(), // return type
  "_5_SysDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_SysDate_J_LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_SysDate_J_LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_SysDate_J_LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_INLRString_INLRString__LRSysDate__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_INLRString_INLRString__LRSysDate__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_SysDate_INLRString_INLRString__LRSysDate__args[] = 
{
  &SysDate_methods_SysDate_INLRString_INLRString__LRSysDate__arg_s,
  &SysDate_methods_SysDate_INLRString_INLRString__LRSysDate__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_SysDate_INLRString_INLRString__LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_SysDate_INLRString_INLRString__LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SysDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SysDate::clazzInfo(), // return type
  "_6_SysDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_SysDate_INLRString_INLRString__LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_SysDate_INLRString_INLRString__LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_SysDate_INLRString_INLRString__LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_INLRString__LRSysDate__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_SysDate_INLRString__LRSysDate__args[] = 
{
  &SysDate_methods_SysDate_INLRString__LRSysDate__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_SysDate_INLRString__LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_SysDate_INLRString__LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SysDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SysDate::clazzInfo(), // return type
  "_7_SysDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_SysDate_INLRString__LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_SysDate_INLRString__LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_SysDate_INLRString__LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_III_LRSysDate__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_III_LRSysDate__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_III_LRSysDate__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_SysDate_III_LRSysDate__args[] = 
{
  &SysDate_methods_SysDate_III_LRSysDate__arg_year,
  &SysDate_methods_SysDate_III_LRSysDate__arg_month,
  &SysDate_methods_SysDate_III_LRSysDate__arg_day,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_SysDate_III_LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_SysDate_III_LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SysDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SysDate::clazzInfo(), // return type
  "_8_SysDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_SysDate_III_LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_SysDate_III_LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_SysDate_III_LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIII_LRSysDate__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIII_LRSysDate__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIII_LRSysDate__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIII_LRSysDate__arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIII_LRSysDate__arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_SysDate_IIIII_LRSysDate__args[] = 
{
  &SysDate_methods_SysDate_IIIII_LRSysDate__arg_year,
  &SysDate_methods_SysDate_IIIII_LRSysDate__arg_month,
  &SysDate_methods_SysDate_IIIII_LRSysDate__arg_day,
  &SysDate_methods_SysDate_IIIII_LRSysDate__arg_hour,
  &SysDate_methods_SysDate_IIIII_LRSysDate__arg_min,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_SysDate_IIIII_LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_SysDate_IIIII_LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SysDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SysDate::clazzInfo(), // return type
  "_9_SysDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_SysDate_IIIII_LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_SysDate_IIIII_LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_SysDate_IIIII_LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIIII_LRSysDate__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIIII_LRSysDate__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIIII_LRSysDate__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIIII_LRSysDate__arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIIII_LRSysDate__arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_IIIIII_LRSysDate__arg_sec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_SysDate_IIIIII_LRSysDate__args[] = 
{
  &SysDate_methods_SysDate_IIIIII_LRSysDate__arg_year,
  &SysDate_methods_SysDate_IIIIII_LRSysDate__arg_month,
  &SysDate_methods_SysDate_IIIIII_LRSysDate__arg_day,
  &SysDate_methods_SysDate_IIIIII_LRSysDate__arg_hour,
  &SysDate_methods_SysDate_IIIIII_LRSysDate__arg_min,
  &SysDate_methods_SysDate_IIIIII_LRSysDate__arg_sec,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_SysDate_IIIIII_LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_SysDate_IIIIII_LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SysDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SysDate::clazzInfo(), // return type
  "_a_SysDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_SysDate_IIIIII_LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_SysDate_IIIIII_LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_SysDate_IIIIII_LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_II_LRSysDate__arg_sec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_SysDate_II_LRSysDate__arg_usec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "usec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_SysDate_II_LRSysDate__args[] = 
{
  &SysDate_methods_SysDate_II_LRSysDate__arg_sec,
  &SysDate_methods_SysDate_II_LRSysDate__arg_usec,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_SysDate_II_LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_SysDate_II_LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SysDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SysDate::clazzInfo(), // return type
  "_b_SysDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_SysDate_II_LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_SysDate_II_LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_SysDate_II_LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_UTC_IIIIII_J_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_UTC_IIIIII_J_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_UTC_IIIIII_J_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_UTC_IIIIII_J_arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_UTC_IIIIII_J_arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_UTC_IIIIII_J_arg_sec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_UTC_IIIIII_J_args[] = 
{
  &SysDate_methods_UTC_IIIIII_J_arg_year,
  &SysDate_methods_UTC_IIIIII_J_arg_month,
  &SysDate_methods_UTC_IIIIII_J_arg_day,
  &SysDate_methods_UTC_IIIIII_J_arg_hour,
  &SysDate_methods_UTC_IIIIII_J_arg_min,
  &SysDate_methods_UTC_IIIIII_J_arg_sec,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_UTC_IIIIII_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_UTC_IIIIII_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UTC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_0_UTC", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_UTC_IIIIII_J_args, // the arguments
  0, //arguments count
  SysDate_methods_UTC_IIIIII_J_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_UTC_IIIIII_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_addMilliseconds_J_LRSysDate__arg_millies = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millies", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_addMilliseconds_J_LRSysDate__args[] = 
{
  &SysDate_methods_addMilliseconds_J_LRSysDate__arg_millies,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_addMilliseconds_J_LRSysDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_addMilliseconds_J_LRSysDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addMilliseconds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSysDate::clazzInfo(), // return type
  "_C_addMilliseconds", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_addMilliseconds_J_LRSysDate__args, // the arguments
  0, //arguments count
  SysDate_methods_addMilliseconds_J_LRSysDate__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_addMilliseconds_J_LRSysDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_after_INLRSysDate__Z_arg_when = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "when", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSysDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_after_INLRSysDate__Z_args[] = 
{
  &SysDate_methods_after_INLRSysDate__Z_arg_when,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_after_INLRSysDate__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_after_INLRSysDate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "after", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_after", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_after_INLRSysDate__Z_args, // the arguments
  0, //arguments count
  SysDate_methods_after_INLRSysDate__Z_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_after_INLRSysDate__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_before_INLRSysDate__Z_arg_when = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "when", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSysDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_before_INLRSysDate__Z_args[] = 
{
  &SysDate_methods_before_INLRSysDate__Z_arg_when,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_before_INLRSysDate__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_before_INLRSysDate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "before", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_before", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_before_INLRSysDate__Z_args, // the arguments
  0, //arguments count
  SysDate_methods_before_INLRSysDate__Z_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_before_INLRSysDate__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_compareTo_INLRSysDate__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSysDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_compareTo_INLRSysDate__I_args[] = 
{
  &SysDate_methods_compareTo_INLRSysDate__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_compareTo_INLRSysDate__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_compareTo_INLRSysDate__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_compareTo", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_compareTo_INLRSysDate__I_args, // the arguments
  0, //arguments count
  SysDate_methods_compareTo_INLRSysDate__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_compareTo_INLRSysDate__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_create_instance", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  SysDate_methods_create_instance__LRObject__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_diffMilliseconds_INLRSysDate__J_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSysDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_diffMilliseconds_INLRSysDate__J_args[] = 
{
  &SysDate_methods_diffMilliseconds_INLRSysDate__J_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_diffMilliseconds_INLRSysDate__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_diffMilliseconds_INLRSysDate__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "diffMilliseconds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_D_diffMilliseconds", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_diffMilliseconds_INLRSysDate__J_args, // the arguments
  0, //arguments count
  SysDate_methods_diffMilliseconds_INLRSysDate__J_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_diffMilliseconds_INLRSysDate__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getDate__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getDate__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getDate__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getDate__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getDate__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getDate__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getDay__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getDay__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getDay__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getDay", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getDay__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getDay__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getDay__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getHours__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getHours__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getHours__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHours", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getHours", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getHours__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getHours__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getHours__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getMinutes__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getMinutes__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getMinutes__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinutes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_getMinutes", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getMinutes__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getMinutes__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getMinutes__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getMonth__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getMonth__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getMonth__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMonth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_getMonth", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getMonth__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getMonth__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getMonth__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getSeconds__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getSeconds__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getSeconds__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSeconds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_l_getSeconds", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getSeconds__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getSeconds__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getSeconds__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getSecs__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getSecs__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getSecs__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSecs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_B_getSecs", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getSecs__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getSecs__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getSecs__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getTickCount__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getTickCount__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getTickCount__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTickCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_x_getTickCount", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getTickCount__J_args, // the arguments
  0, //arguments count
  SysDate_methods_getTickCount__J_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getTickCount__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getTime__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getTime__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getTime__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_f_getTime", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getTime__J_args, // the arguments
  0, //arguments count
  SysDate_methods_getTime__J_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getTime__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_getTimeStamp_INLRString__LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getTimeStamp_INLRString__LRString__args[] = 
{
  &SysDate_methods_getTimeStamp_INLRString__LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getTimeStamp_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getTimeStamp_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeStamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_y_getTimeStamp", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getTimeStamp_INLRString__LRString__args, // the arguments
  0, //arguments count
  SysDate_methods_getTimeStamp_INLRString__LRString__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getTimeStamp_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getTimeStamp__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getTimeStamp__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getTimeStamp__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeStamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_z_getTimeStamp", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getTimeStamp__LRString__args, // the arguments
  0, //arguments count
  SysDate_methods_getTimeStamp__LRString__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getTimeStamp__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getTimezoneOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getTimezoneOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getTimezoneOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimezoneOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getTimezoneOffset", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getTimezoneOffset__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getTimezoneOffset__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getTimezoneOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getUSecs__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getUSecs__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getUSecs__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUSecs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_A_getUSecs", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getUSecs__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getUSecs__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getUSecs__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_getYear__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_getYear__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_getYear__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getYear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_getYear", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_getYear__I_args, // the arguments
  0, //arguments count
  SysDate_methods_getYear__I_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_getYear__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_parse_INLRString_INLRString__J_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_parse_INLRString_INLRString__J_arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_parse_INLRString_INLRString__J_args[] = 
{
  &SysDate_methods_parse_INLRString_INLRString__J_arg_s,
  &SysDate_methods_parse_INLRString_INLRString__J_arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_parse_INLRString_INLRString__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_parse_INLRString_INLRString__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_1_parse", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_parse_INLRString_INLRString__J_args, // the arguments
  0, //arguments count
  SysDate_methods_parse_INLRString_INLRString__J_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_parse_INLRString_INLRString__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_parse_INLRString__J_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_parse_INLRString__J_args[] = 
{
  &SysDate_methods_parse_INLRString__J_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_parse_INLRString__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_parse_INLRString__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_2_parse", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_parse_INLRString__J_args, // the arguments
  0, //arguments count
  SysDate_methods_parse_INLRString__J_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_parse_INLRString__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_setDate_I_V_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_setDate_I_V_args[] = 
{
  &SysDate_methods_setDate_I_V_arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_setDate_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_setDate_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setDate", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_setDate_I_V_args, // the arguments
  0, //arguments count
  SysDate_methods_setDate_I_V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_setDate_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_setDay_I_V_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_setDay_I_V_args[] = 
{
  &SysDate_methods_setDay_I_V_arg_day,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_setDay_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_setDay_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_setDay", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_setDay_I_V_args, // the arguments
  0, //arguments count
  SysDate_methods_setDay_I_V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_setDay_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_setHours_I_V_arg_hours = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hours", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_setHours_I_V_args[] = 
{
  &SysDate_methods_setHours_I_V_arg_hours,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_setHours_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_setHours_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setHours", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_setHours", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_setHours_I_V_args, // the arguments
  0, //arguments count
  SysDate_methods_setHours_I_V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_setHours_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_setMinutes_I_V_arg_minutes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minutes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_setMinutes_I_V_args[] = 
{
  &SysDate_methods_setMinutes_I_V_arg_minutes,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_setMinutes_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_setMinutes_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinutes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_setMinutes", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_setMinutes_I_V_args, // the arguments
  0, //arguments count
  SysDate_methods_setMinutes_I_V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_setMinutes_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_setMonth_I_V_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_setMonth_I_V_args[] = 
{
  &SysDate_methods_setMonth_I_V_arg_month,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_setMonth_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_setMonth_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMonth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_setMonth", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_setMonth_I_V_args, // the arguments
  0, //arguments count
  SysDate_methods_setMonth_I_V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_setMonth_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_setSeconds_I_V_arg_seconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_setSeconds_I_V_args[] = 
{
  &SysDate_methods_setSeconds_I_V_arg_seconds,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_setSeconds_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_setSeconds_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSeconds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_setSeconds", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_setSeconds_I_V_args, // the arguments
  0, //arguments count
  SysDate_methods_setSeconds_I_V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_setSeconds_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SysDate_methods_setYear_I_V_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_setYear_I_V_args[] = 
{
  &SysDate_methods_setYear_I_V_arg_year,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_setYear_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_setYear_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setYear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setYear", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_setYear_I_V_args, // the arguments
  0, //arguments count
  SysDate_methods_setYear_I_V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_setYear_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_syncFields__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_syncFields__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_syncFields__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "syncFields", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_syncFields", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_syncFields__V_args, // the arguments
  0, //arguments count
  SysDate_methods_syncFields__V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_syncFields__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_syncTime__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_syncTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_syncTime__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "syncTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_syncTime", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_syncTime__V_args, // the arguments
  0, //arguments count
  SysDate_methods_syncTime__V_exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_syncTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_toGMTString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_toGMTString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_toGMTString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toGMTString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_v_toGMTString", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_toGMTString__LRString__args, // the arguments
  0, //arguments count
  SysDate_methods_toGMTString__LRString__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_toGMTString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SysDate_methods_toLocaleString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate_methods_toLocaleString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SysDate_method_toLocaleString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toLocaleString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_w_toLocaleString", // alternative name of method
  -1, // altlabelHashCode
  SysDate_methods_toLocaleString__LRString__args, // the arguments
  0, //arguments count
  SysDate_methods_toLocaleString__LRString__exceptions, // the declared exceptions
  SysDate_MetainfoWrapper::SysDate_method_toLocaleString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SysDate_methods[] = 
{
  &SysDate_method_GetClass__L_acdk_lang_RClass_,
  &SysDate_method_SysDate__LRSysDate_,
  &SysDate_method_SysDate_J_LRSysDate_,
  &SysDate_method_SysDate_INLRString_INLRString__LRSysDate_,
  &SysDate_method_SysDate_INLRString__LRSysDate_,
  &SysDate_method_SysDate_III_LRSysDate_,
  &SysDate_method_SysDate_IIIII_LRSysDate_,
  &SysDate_method_SysDate_IIIIII_LRSysDate_,
  &SysDate_method_SysDate_II_LRSysDate_,
  &SysDate_method_UTC_IIIIII_J,
  &SysDate_method_addMilliseconds_J_LRSysDate_,
  &SysDate_method_after_INLRSysDate__Z,
  &SysDate_method_before_INLRSysDate__Z,
  &SysDate_method_compareTo_INLRSysDate__I,
  &SysDate_method_create_instance__LRObject_,
  &SysDate_method_diffMilliseconds_INLRSysDate__J,
  &SysDate_method_getDate__I,
  &SysDate_method_getDay__I,
  &SysDate_method_getHours__I,
  &SysDate_method_getMinutes__I,
  &SysDate_method_getMonth__I,
  &SysDate_method_getSeconds__I,
  &SysDate_method_getSecs__I,
  &SysDate_method_getTickCount__J,
  &SysDate_method_getTime__J,
  &SysDate_method_getTimeStamp_INLRString__LRString_,
  &SysDate_method_getTimeStamp__LRString_,
  &SysDate_method_getTimezoneOffset__I,
  &SysDate_method_getUSecs__I,
  &SysDate_method_getYear__I,
  &SysDate_method_parse_INLRString_INLRString__J,
  &SysDate_method_parse_INLRString__J,
  &SysDate_method_setDate_I_V,
  &SysDate_method_setDay_I_V,
  &SysDate_method_setHours_I_V,
  &SysDate_method_setMinutes_I_V,
  &SysDate_method_setMonth_I_V,
  &SysDate_method_setSeconds_I_V,
  &SysDate_method_setYear_I_V,
  &SysDate_method_syncFields__V,
  &SysDate_method_syncTime__V,
  &SysDate_method_toGMTString__LRString_,
  &SysDate_method_toLocaleString__LRString_,
  0
};


struct SysDate_MetaInfoInitializer
{  SysDate_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SysDate::clazzInfo();
    ci->fields =  _SysDate_fields;
    ci->methods =  _SysDate_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SysDate_MetaInfoInitializer SysDate_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
TimeZone_create_array(int length)
{
  return new ObjectArrayImpl<RTimeZone>(length);
}

//static
::acdk::lang::RObject
TimeZone_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TimeZone_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TimeZone::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getAvailableIDs_I_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TimeZone::getAvailableIDs(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getAvailableIDs__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TimeZone::getAvailableIDs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getDefault__LRTimeZone__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TimeZone::getDefault();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getDisplayName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TimeZone::getDisplayName();
    else
        ret = (::acdk::lang::RObject)This->getDisplayName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getDisplayName_INLRLocale__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TimeZone::getDisplayName(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDisplayName(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getDisplayName_ZI_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TimeZone::getDisplayName(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getDisplayName(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getDisplayName_ZIINLRLocale__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TimeZone::getDisplayName(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RLocale>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->getDisplayName(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RLocale>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getID__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TimeZone::getID();
    else
        ret = (::acdk::lang::RObject)This->getID();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getOffset_IIIIII_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
  ret = This->getOffset(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getRawOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
  ret = This->getRawOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_getTimeZone_INLRString__LRTimeZone__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TimeZone::getTimeZone(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_get_timeZone__LRTimeZoneArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TimeZone::get_timeZone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_get_zoneAlliases__LRStringArrayArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TimeZone::get_zoneAlliases();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_inDaylightTime_INLRDate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
  ret = This->inDaylightTime(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_setDefault_LRTimeZone__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone::setDefault(::acdk::lang::dmi::castTo< RTimeZone>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_setID_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TimeZone::setID(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setID(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TimeZone_method_useDaylightTime__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
  ret = This->useDaylightTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TimeZone_fields_LONG_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TimeZone::LONG, flags);
    else
      TimeZone::LONG = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TimeZone_fields_SHORT_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TimeZone::SHORT, flags);
    else
      TimeZone::SHORT = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TimeZone_fields__defaulZone_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TimeZone::_defaulZone, flags);
    else
      TimeZone::_defaulZone = ::acdk::lang::dmi::castTo< RTimeZone>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TimeZone_fields__id_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TimeZone* This = dmi_cast<TimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_id, flags);
    else
      This->_id = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TimeZone_fields__timeZone_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TimeZone::_timeZone, flags);
    else
      TimeZone::_timeZone = ::acdk::lang::dmi::castTo< RTimeZoneArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TimeZone_fields__zoneAlliases_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TimeZone::_zoneAlliases, flags);
    else
      TimeZone::_zoneAlliases = ::acdk::lang::dmi::castTo< RStringArrayArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TimeZone_fields_LONG = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "LONG", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TimeZone_MetainfoWrapper::TimeZone_fields_LONG_accessor, // read/write access to this fields
  (void*)&TimeZone::LONG // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TimeZone_fields_SHORT = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "SHORT", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TimeZone_MetainfoWrapper::TimeZone_fields_SHORT_accessor, // read/write access to this fields
  (void*)&TimeZone::SHORT // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TimeZone_fields__defaulZone = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_defaulZone", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo(),
  TimeZone_MetainfoWrapper::TimeZone_fields__defaulZone_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TimeZone_fields__id = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_id", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TimeZone_MetainfoWrapper::TimeZone_fields__id_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TimeZone_fields__timeZone = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_timeZone", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZoneArray::clazzInfo(),
  TimeZone_MetainfoWrapper::TimeZone_fields__timeZone_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TimeZone_fields__zoneAlliases = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_zoneAlliases", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArrayArray::clazzInfo(),
  TimeZone_MetainfoWrapper::TimeZone_fields__zoneAlliases_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TimeZone_fields[] = 
{
  &TimeZone_fields_LONG,
  &TimeZone_fields_SHORT,
  &TimeZone_fields__defaulZone,
  &TimeZone_fields__id,
  &TimeZone_fields__timeZone,
  &TimeZone_fields__zoneAlliases,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_j_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TimeZone_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_TimeZone__LRTimeZone__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_TimeZone__LRTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_TimeZone__LRTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TimeZone::clazzInfo(), // return type
  "_0_TimeZone", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_TimeZone__LRTimeZone__args, // the arguments
  0, //arguments count
  TimeZone_methods_TimeZone__LRTimeZone__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_TimeZone_INLRString__LRTimeZone__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_TimeZone_INLRString__LRTimeZone__args[] = 
{
  &TimeZone_methods_TimeZone_INLRString__LRTimeZone__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_TimeZone_INLRString__LRTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_TimeZone_INLRString__LRTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TimeZone::clazzInfo(), // return type
  "_1_TimeZone", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_TimeZone_INLRString__LRTimeZone__args, // the arguments
  0, //arguments count
  TimeZone_methods_TimeZone_INLRString__LRTimeZone__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getAvailableIDs_I_LRStringArray__arg_rawOffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rawOffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getAvailableIDs_I_LRStringArray__args[] = 
{
  &TimeZone_methods_getAvailableIDs_I_LRStringArray__arg_rawOffset,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getAvailableIDs_I_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getAvailableIDs_I_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableIDs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_d_getAvailableIDs", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getAvailableIDs_I_LRStringArray__args, // the arguments
  0, //arguments count
  TimeZone_methods_getAvailableIDs_I_LRStringArray__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getAvailableIDs_I_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getAvailableIDs__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getAvailableIDs__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getAvailableIDs__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableIDs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_e_getAvailableIDs", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getAvailableIDs__LRStringArray__args, // the arguments
  0, //arguments count
  TimeZone_methods_getAvailableIDs__LRStringArray__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getAvailableIDs__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getDefault__LRTimeZone__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getDefault__LRTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getDefault__LRTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefault", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo(), // return type
  "_f_getDefault", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getDefault__LRTimeZone__args, // the arguments
  0, //arguments count
  TimeZone_methods_getDefault__LRTimeZone__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getDefault__LRTimeZone__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getDisplayName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getDisplayName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getDisplayName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getDisplayName", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getDisplayName__LRString__args, // the arguments
  0, //arguments count
  TimeZone_methods_getDisplayName__LRString__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getDisplayName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getDisplayName_INLRLocale__LRString__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getDisplayName_INLRLocale__LRString__args[] = 
{
  &TimeZone_methods_getDisplayName_INLRLocale__LRString__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getDisplayName_INLRLocale__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getDisplayName_INLRLocale__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getDisplayName", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getDisplayName_INLRLocale__LRString__args, // the arguments
  0, //arguments count
  TimeZone_methods_getDisplayName_INLRLocale__LRString__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getDisplayName_INLRLocale__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getDisplayName_ZI_LRString__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getDisplayName_ZI_LRString__arg_st = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "st", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getDisplayName_ZI_LRString__args[] = 
{
  &TimeZone_methods_getDisplayName_ZI_LRString__arg_b,
  &TimeZone_methods_getDisplayName_ZI_LRString__arg_st,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getDisplayName_ZI_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getDisplayName_ZI_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getDisplayName", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getDisplayName_ZI_LRString__args, // the arguments
  0, //arguments count
  TimeZone_methods_getDisplayName_ZI_LRString__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getDisplayName_ZI_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__arg_st = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "st", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__args[] = 
{
  &TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__arg_b,
  &TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__arg_st,
  &TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getDisplayName_ZIINLRLocale__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getDisplayName", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__args, // the arguments
  0, //arguments count
  TimeZone_methods_getDisplayName_ZIINLRLocale__LRString__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getDisplayName_ZIINLRLocale__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getID__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getID__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getID__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getID", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getID__LRString__args, // the arguments
  0, //arguments count
  TimeZone_methods_getID__LRString__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getID__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getOffset_IIIIII_I_arg_era = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "era", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getOffset_IIIIII_I_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getOffset_IIIIII_I_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getOffset_IIIIII_I_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getOffset_IIIIII_I_arg_dayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getOffset_IIIIII_I_arg_milliseconds = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "milliseconds", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getOffset_IIIIII_I_args[] = 
{
  &TimeZone_methods_getOffset_IIIIII_I_arg_era,
  &TimeZone_methods_getOffset_IIIIII_I_arg_year,
  &TimeZone_methods_getOffset_IIIIII_I_arg_month,
  &TimeZone_methods_getOffset_IIIIII_I_arg_day,
  &TimeZone_methods_getOffset_IIIIII_I_arg_dayOfWeek,
  &TimeZone_methods_getOffset_IIIIII_I_arg_milliseconds,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getOffset_IIIIII_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getOffset_IIIIII_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getOffset", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getOffset_IIIIII_I_args, // the arguments
  0, //arguments count
  TimeZone_methods_getOffset_IIIIII_I_exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getOffset_IIIIII_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getRawOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getRawOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getRawOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRawOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getRawOffset", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getRawOffset__I_args, // the arguments
  0, //arguments count
  TimeZone_methods_getRawOffset__I_exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getRawOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_getTimeZone_INLRString__LRTimeZone__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_getTimeZone_INLRString__LRTimeZone__args[] = 
{
  &TimeZone_methods_getTimeZone_INLRString__LRTimeZone__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_getTimeZone_INLRString__LRTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_getTimeZone_INLRString__LRTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo(), // return type
  "_c_getTimeZone", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_getTimeZone_INLRString__LRTimeZone__args, // the arguments
  0, //arguments count
  TimeZone_methods_getTimeZone_INLRString__LRTimeZone__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_getTimeZone_INLRString__LRTimeZone__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_get_timeZone__LRTimeZoneArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_get_timeZone__LRTimeZoneArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_get_timeZone__LRTimeZoneArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_timeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZoneArray::clazzInfo(), // return type
  "_i_get_timeZone", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_get_timeZone__LRTimeZoneArray__args, // the arguments
  0, //arguments count
  TimeZone_methods_get_timeZone__LRTimeZoneArray__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_get_timeZone__LRTimeZoneArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_get_zoneAlliases__LRStringArrayArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_get_zoneAlliases__LRStringArrayArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_get_zoneAlliases__LRStringArrayArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get_zoneAlliases", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArrayArray::clazzInfo(), // return type
  "_h_get_zoneAlliases", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_get_zoneAlliases__LRStringArrayArray__args, // the arguments
  0, //arguments count
  TimeZone_methods_get_zoneAlliases__LRStringArrayArray__exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_get_zoneAlliases__LRStringArrayArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_inDaylightTime_INLRDate__Z_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_inDaylightTime_INLRDate__Z_args[] = 
{
  &TimeZone_methods_inDaylightTime_INLRDate__Z_arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_inDaylightTime_INLRDate__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_inDaylightTime_INLRDate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "inDaylightTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_inDaylightTime", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_inDaylightTime_INLRDate__Z_args, // the arguments
  0, //arguments count
  TimeZone_methods_inDaylightTime_INLRDate__Z_exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_inDaylightTime_INLRDate__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_setDefault_LRTimeZone__V_arg_zone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "zone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_setDefault_LRTimeZone__V_args[] = 
{
  &TimeZone_methods_setDefault_LRTimeZone__V_arg_zone,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_setDefault_LRTimeZone__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_setDefault_LRTimeZone__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefault", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_setDefault", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_setDefault_LRTimeZone__V_args, // the arguments
  0, //arguments count
  TimeZone_methods_setDefault_LRTimeZone__V_exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_setDefault_LRTimeZone__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TimeZone_methods_setID_INLRString__V_arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_setID_INLRString__V_args[] = 
{
  &TimeZone_methods_setID_INLRString__V_arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_setID_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_setID_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setID", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_setID_INLRString__V_args, // the arguments
  0, //arguments count
  TimeZone_methods_setID_INLRString__V_exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_setID_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TimeZone_methods_useDaylightTime__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone_methods_useDaylightTime__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TimeZone_method_useDaylightTime__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "useDaylightTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_useDaylightTime", // alternative name of method
  -1, // altlabelHashCode
  TimeZone_methods_useDaylightTime__Z_args, // the arguments
  0, //arguments count
  TimeZone_methods_useDaylightTime__Z_exceptions, // the declared exceptions
  TimeZone_MetainfoWrapper::TimeZone_method_useDaylightTime__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TimeZone_methods[] = 
{
  &TimeZone_method_GetClass__L_acdk_lang_RClass_,
  &TimeZone_method_TimeZone__LRTimeZone_,
  &TimeZone_method_TimeZone_INLRString__LRTimeZone_,
  &TimeZone_method_getAvailableIDs_I_LRStringArray_,
  &TimeZone_method_getAvailableIDs__LRStringArray_,
  &TimeZone_method_getDefault__LRTimeZone_,
  &TimeZone_method_getDisplayName__LRString_,
  &TimeZone_method_getDisplayName_INLRLocale__LRString_,
  &TimeZone_method_getDisplayName_ZI_LRString_,
  &TimeZone_method_getDisplayName_ZIINLRLocale__LRString_,
  &TimeZone_method_getID__LRString_,
  &TimeZone_method_getOffset_IIIIII_I,
  &TimeZone_method_getRawOffset__I,
  &TimeZone_method_getTimeZone_INLRString__LRTimeZone_,
  &TimeZone_method_get_timeZone__LRTimeZoneArray_,
  &TimeZone_method_get_zoneAlliases__LRStringArrayArray_,
  &TimeZone_method_inDaylightTime_INLRDate__Z,
  &TimeZone_method_setDefault_LRTimeZone__V,
  &TimeZone_method_setID_INLRString__V,
  &TimeZone_method_useDaylightTime__Z,
  0
};


struct TimeZone_MetaInfoInitializer
{  TimeZone_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TimeZone::clazzInfo();
    ci->fields =  _TimeZone_fields;
    ci->methods =  _TimeZone_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TimeZone_MetaInfoInitializer TimeZone_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
RedBlackNode_create_array(int length)
{
  return new ObjectArrayImpl<RRedBlackNode>(length);
}

//static
::acdk::lang::RObject
RedBlackNode_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RedBlackNode_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RedBlackNode_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RedBlackNode::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RedBlackNode_method_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RedBlackNode(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RedBlackNode_method__clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RedBlackNode* This = dmi_cast<RedBlackNode>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RedBlackNode::_clear();
    else
        This->_clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RedBlackNode_method_nilNode__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RedBlackNode::nilNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RedBlackNode_fields__color_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RedBlackNode* This = dmi_cast<RedBlackNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_color), flags);
    else
      This->_color = (NodeType)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RedBlackNode_fields__left_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RedBlackNode* This = dmi_cast<RedBlackNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_left, flags);
    else
      This->_left = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RedBlackNode_fields__nilNode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(RedBlackNode::_nilNode, flags);
    else
      RedBlackNode::_nilNode = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RedBlackNode_fields__parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RedBlackNode* This = dmi_cast<RedBlackNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parent, flags);
    else
      This->_parent = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RedBlackNode_fields__right_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RedBlackNode* This = dmi_cast<RedBlackNode>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_right, flags);
    else
      This->_right = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RedBlackNode_fields__color = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_color", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RedBlackNode_MetainfoWrapper::RedBlackNode_fields__color_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RedBlackNode_fields__left = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_left", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  RedBlackNode_MetainfoWrapper::RedBlackNode_fields__left_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RedBlackNode_fields__nilNode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nilNode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  RedBlackNode_MetainfoWrapper::RedBlackNode_fields__nilNode_accessor, // read/write access to this fields
  (void*)RedBlackNode::_nilNode._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RedBlackNode_fields__parent = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  RedBlackNode_MetainfoWrapper::RedBlackNode_fields__parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RedBlackNode_fields__right = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_right", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  RedBlackNode_MetainfoWrapper::RedBlackNode_fields__right_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RedBlackNode_fields[] = 
{
  &RedBlackNode_fields__color,
  &RedBlackNode_fields__left,
  &RedBlackNode_fields__nilNode,
  &RedBlackNode_fields__parent,
  &RedBlackNode_fields__right,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RedBlackNode_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RedBlackNode_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RedBlackNode_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RedBlackNode_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RedBlackNode_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RedBlackNode_MetainfoWrapper::RedBlackNode_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RedBlackNode_methods_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RedBlackNode_methods_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RedBlackNode_methods_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__args[] = 
{
  &RedBlackNode_methods_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__arg_key,
  &RedBlackNode_methods_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* RedBlackNode_methods_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RedBlackNode_method_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RedBlackNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RedBlackNode::clazzInfo(), // return type
  "_0_RedBlackNode", // alternative name of method
  -1, // altlabelHashCode
  RedBlackNode_methods_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__args, // the arguments
  0, //arguments count
  RedBlackNode_methods_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__exceptions, // the declared exceptions
  RedBlackNode_MetainfoWrapper::RedBlackNode_method_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RedBlackNode_methods__clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RedBlackNode_methods__clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RedBlackNode_method__clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2__clear", // alternative name of method
  -1, // altlabelHashCode
  RedBlackNode_methods__clear__V_args, // the arguments
  0, //arguments count
  RedBlackNode_methods__clear__V_exceptions, // the declared exceptions
  RedBlackNode_MetainfoWrapper::RedBlackNode_method__clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RedBlackNode_methods_nilNode__LRRedBlackNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RedBlackNode_methods_nilNode__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RedBlackNode_method_nilNode__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nilNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_1_nilNode", // alternative name of method
  -1, // altlabelHashCode
  RedBlackNode_methods_nilNode__LRRedBlackNode__args, // the arguments
  0, //arguments count
  RedBlackNode_methods_nilNode__LRRedBlackNode__exceptions, // the declared exceptions
  RedBlackNode_MetainfoWrapper::RedBlackNode_method_nilNode__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RedBlackNode_methods[] = 
{
  &RedBlackNode_method_GetClass__L_acdk_lang_RClass_,
  &RedBlackNode_method_RedBlackNode_INLRObject_INLRObject__LRRedBlackNode_,
  &RedBlackNode_method__clear__V,
  &RedBlackNode_method_nilNode__LRRedBlackNode_,
  0
};


struct RedBlackNode_MetaInfoInitializer
{  RedBlackNode_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RedBlackNode::clazzInfo();
    ci->fields =  _RedBlackNode_fields;
    ci->methods =  _RedBlackNode_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RedBlackNode_MetaInfoInitializer RedBlackNode_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TreeMap_create_array(int length)
{
  return new ObjectArrayImpl<RTreeMap>(length);
}

//static
::acdk::lang::RObject
TreeMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_TreeMap__LRTreeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_TreeMap_INLRMap__LRTreeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeMap(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_TreeMap_INLRComparator__LRTreeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeMap(::acdk::lang::dmi::castTo< RComparator>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_TreeMap_INLRSortedMap__LRTreeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeMap(::acdk::lang::dmi::castTo< RSortedMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMap::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_comparator__LRComparator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::comparator();
    else
        ret = (::acdk::lang::RObject)This->comparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_compare_INLRComparator_INLRObject_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = TreeMap::compare(::acdk::lang::dmi::castTo< RComparator>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_containsKey_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMap::containsKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->containsKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_containsValue_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMap::containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_entrySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::entrySet();
    else
        ret = (::acdk::lang::RObject)This->entrySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMap::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_firstKey__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::firstKey();
    else
        ret = (::acdk::lang::RObject)This->firstKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_get_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMap::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_headMap_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::headMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->headMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMap::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = TreeMap::keyInClosedMaxRange(::acdk::lang::dmi::castTo< RComparator>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = TreeMap::keyInClosedRange(::acdk::lang::dmi::castTo< RComparator>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc), ::acdk::lang::dmi::castTo< RObject>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = TreeMap::keyInMaxRange(::acdk::lang::dmi::castTo< RComparator>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = TreeMap::keyInMinRange(::acdk::lang::dmi::castTo< RComparator>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = TreeMap::keyInRange(::acdk::lang::dmi::castTo< RComparator>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc), ::acdk::lang::dmi::castTo< RObject>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_keySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::keySet();
    else
        ret = (::acdk::lang::RObject)This->keySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_lastKey__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::lastKey();
    else
        ret = (::acdk::lang::RObject)This->lastKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_leftRotate_INLRTreeMap_INLRRedBlackNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap::leftRotate(::acdk::lang::dmi::castTo< RTreeMap>(args[0], dc), ::acdk::lang::dmi::castTo< RRedBlackNode>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::lowerBound(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc), ::acdk::lang::dmi::castTo< RComparator>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc), ::acdk::lang::dmi::castTo< RObject>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_nilNode__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::nilNode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_put_INLRObject_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_putAll_INLRMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMap::putAll(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    else
        This->putAll(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_putAllLinear_INLRMapEntryArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMap::putAllLinear(::acdk::lang::dmi::castTo< RMapEntryArray>(args[0], dc));
    else
        This->putAllLinear(::acdk::lang::dmi::castTo< RMapEntryArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap::rbDeleteFixup(::acdk::lang::dmi::castTo< RTreeMap>(args[0], dc), ::acdk::lang::dmi::castTo< RRedBlackNode>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::rbInsert(::acdk::lang::dmi::castTo< RTreeMap>(args[0], dc), ::acdk::lang::dmi::castTo< RComparator>(args[1], dc), ::acdk::lang::dmi::castTo< RRedBlackNode>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_remove_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_rightRotate_INLRTreeMap_INLRRedBlackNode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap::rightRotate(::acdk::lang::dmi::castTo< RTreeMap>(args[0], dc), ::acdk::lang::dmi::castTo< RRedBlackNode>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMap::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_subMap_INLRObject_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::subMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->subMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_tailMap_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::tailMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->tailMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_treeMax_INLRRedBlackNode__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::treeMax(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::treeMaxConstrained(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc), ::acdk::lang::dmi::castTo< RComparator>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc), ::acdk::lang::dmi::castTo< RObject>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_treeMin_INLRRedBlackNode__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::treeMin(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::treeMinConstrained(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc), ::acdk::lang::dmi::castTo< RComparator>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc), ::acdk::lang::dmi::castTo< RObject>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_treePredecessor_INLRRedBlackNode__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::treePredecessor(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::treeSearch(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc), ::acdk::lang::dmi::castTo< RComparator>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_treeSuccessor_INLRRedBlackNode__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::treeSuccessor(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMap::upperBound(::acdk::lang::dmi::castTo< RRedBlackNode>(args[0], dc), ::acdk::lang::dmi::castTo< RComparator>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc), ::acdk::lang::dmi::castTo< RObject>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMap_method_values__LRCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMap::values();
    else
        ret = (::acdk::lang::RObject)This->values();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMap_fields__comparator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_comparator, flags);
    else
      This->_comparator = ::acdk::lang::dmi::castTo< RComparator>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMap_fields__modCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_modCount, flags);
    else
      This->_modCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMap_fields__root_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_root, flags);
    else
      This->_root = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMap_fields__size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMap* This = dmi_cast<TreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_size, flags);
    else
      This->_size = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TreeMap_fields__comparator = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_comparator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo(),
  TreeMap_MetainfoWrapper::TreeMap_fields__comparator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMap_fields__modCount = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_modCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeMap_MetainfoWrapper::TreeMap_fields__modCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMap_fields__root = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_root", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  TreeMap_MetainfoWrapper::TreeMap_fields__root_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMap_fields__size = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeMap_MetainfoWrapper::TreeMap_fields__size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeMap_fields[] = 
{
  &TreeMap_fields__comparator,
  &TreeMap_fields__modCount,
  &TreeMap_fields__root,
  &TreeMap_fields__size,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_L_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_TreeMap__LRTreeMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_TreeMap__LRTreeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_TreeMap__LRTreeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeMap::clazzInfo(), // return type
  "_2_TreeMap", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_TreeMap__LRTreeMap__args, // the arguments
  0, //arguments count
  TreeMap_methods_TreeMap__LRTreeMap__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_TreeMap__LRTreeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_TreeMap_INLRMap__LRTreeMap__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_TreeMap_INLRMap__LRTreeMap__args[] = 
{
  &TreeMap_methods_TreeMap_INLRMap__LRTreeMap__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_TreeMap_INLRMap__LRTreeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_TreeMap_INLRMap__LRTreeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeMap::clazzInfo(), // return type
  "_3_TreeMap", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_TreeMap_INLRMap__LRTreeMap__args, // the arguments
  0, //arguments count
  TreeMap_methods_TreeMap_INLRMap__LRTreeMap__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_TreeMap_INLRMap__LRTreeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_TreeMap_INLRComparator__LRTreeMap__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_TreeMap_INLRComparator__LRTreeMap__args[] = 
{
  &TreeMap_methods_TreeMap_INLRComparator__LRTreeMap__arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_TreeMap_INLRComparator__LRTreeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_TreeMap_INLRComparator__LRTreeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeMap::clazzInfo(), // return type
  "_1_TreeMap", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_TreeMap_INLRComparator__LRTreeMap__args, // the arguments
  0, //arguments count
  TreeMap_methods_TreeMap_INLRComparator__LRTreeMap__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_TreeMap_INLRComparator__LRTreeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_TreeMap_INLRSortedMap__LRTreeMap__arg_sortedMap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sortedMap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_TreeMap_INLRSortedMap__LRTreeMap__args[] = 
{
  &TreeMap_methods_TreeMap_INLRSortedMap__LRTreeMap__arg_sortedMap,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_TreeMap_INLRSortedMap__LRTreeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_TreeMap_INLRSortedMap__LRTreeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeMap::clazzInfo(), // return type
  "_4_TreeMap", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_TreeMap_INLRSortedMap__LRTreeMap__args, // the arguments
  0, //arguments count
  TreeMap_methods_TreeMap_INLRSortedMap__LRTreeMap__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_TreeMap_INLRSortedMap__LRTreeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_clear", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_clear__V_args, // the arguments
  0, //arguments count
  TreeMap_methods_clear__V_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_clone", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  TreeMap_methods_clone__LRObject__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_comparator__LRComparator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_comparator__LRComparator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_comparator__LRComparator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "comparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo(), // return type
  "_7_comparator", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_comparator__LRComparator__args, // the arguments
  0, //arguments count
  TreeMap_methods_comparator__LRComparator__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_comparator__LRComparator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_arg_o1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_arg_o2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_args[] = 
{
  &TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_arg_comp,
  &TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_arg_o1,
  &TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_arg_o2,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_compare_INLRComparator_INLRObject_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compare", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_r_compare", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_args, // the arguments
  0, //arguments count
  TreeMap_methods_compare_INLRComparator_INLRObject_INLRObject__I_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_compare_INLRComparator_INLRObject_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_containsKey_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_containsKey_INLRObject__Z_args[] = 
{
  &TreeMap_methods_containsKey_INLRObject__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_containsKey_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_containsKey_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_containsKey", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_containsKey_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_containsKey_INLRObject__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_containsKey_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_containsValue_INLRObject__Z_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_containsValue_INLRObject__Z_args[] = 
{
  &TreeMap_methods_containsValue_INLRObject__Z_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_containsValue_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_containsValue_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_containsValue", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_containsValue_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_containsValue_INLRObject__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_containsValue_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  TreeMap_methods_create_instance__LRObject__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_entrySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_entrySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_entrySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "entrySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_a_entrySet", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_entrySet__LRSet__args, // the arguments
  0, //arguments count
  TreeMap_methods_entrySet__LRSet__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_entrySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_equals_INLRObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_equals_INLRObject__Z_args[] = 
{
  &TreeMap_methods_equals_INLRObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_equals", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_firstKey__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_firstKey__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_firstKey__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "firstKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_b_firstKey", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_firstKey__LRObject__args, // the arguments
  0, //arguments count
  TreeMap_methods_firstKey__LRObject__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_firstKey__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_get_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_get_INLRObject__LRObject__args[] = 
{
  &TreeMap_methods_get_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_get_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_get_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_c_get", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_get_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  TreeMap_methods_get_INLRObject__LRObject__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_get_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_o_hashCode", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_hashCode__I_args, // the arguments
  0, //arguments count
  TreeMap_methods_hashCode__I_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_headMap_INLRObject__LRSortedMap__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_headMap_INLRObject__LRSortedMap__args[] = 
{
  &TreeMap_methods_headMap_INLRObject__LRSortedMap__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_headMap_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_headMap_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "headMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_d_headMap", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_headMap_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  TreeMap_methods_headMap_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_headMap_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_isEmpty__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_args[] = 
{
  &TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_comp,
  &TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_key,
  &TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keyInClosedMaxRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_keyInClosedMaxRange", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_minKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "minKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_args[] = 
{
  &TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_comp,
  &TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_key,
  &TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_minKey,
  &TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keyInClosedRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_keyInClosedRange", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_args[] = 
{
  &TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_comp,
  &TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_key,
  &TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keyInMaxRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_keyInMaxRange", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_arg_minKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "minKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_args[] = 
{
  &TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_arg_comp,
  &TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_arg_key,
  &TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_arg_minKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keyInMinRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_keyInMinRange", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_minKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "minKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_args[] = 
{
  &TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_comp,
  &TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_key,
  &TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_minKey,
  &TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keyInRange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_keyInRange", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMap_methods_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_keySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_keySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_keySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_e_keySet", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_keySet__LRSet__args, // the arguments
  0, //arguments count
  TreeMap_methods_keySet__LRSet__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_keySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_lastKey__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_lastKey__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_lastKey__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_f_lastKey", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_lastKey__LRObject__args, // the arguments
  0, //arguments count
  TreeMap_methods_lastKey__LRObject__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_lastKey__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_leftRotate_INLRTreeMap_INLRRedBlackNode__V_arg_tree = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tree", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_leftRotate_INLRTreeMap_INLRRedBlackNode__V_arg_nod = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nod", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_leftRotate_INLRTreeMap_INLRRedBlackNode__V_args[] = 
{
  &TreeMap_methods_leftRotate_INLRTreeMap_INLRRedBlackNode__V_arg_tree,
  &TreeMap_methods_leftRotate_INLRTreeMap_INLRRedBlackNode__V_arg_nod,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_leftRotate_INLRTreeMap_INLRRedBlackNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_leftRotate_INLRTreeMap_INLRRedBlackNode__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "leftRotate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_leftRotate", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_leftRotate_INLRTreeMap_INLRRedBlackNode__V_args, // the arguments
  0, //arguments count
  TreeMap_methods_leftRotate_INLRTreeMap_INLRRedBlackNode__V_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_leftRotate_INLRTreeMap_INLRRedBlackNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_minKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "minKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_root,
  &TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_comp,
  &TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_minKey,
  &TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lowerBound", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_C_lowerBound", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_nilNode__LRRedBlackNode__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_nilNode__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_nilNode__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nilNode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_K_nilNode", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_nilNode__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_nilNode__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_nilNode__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_put_INLRObject_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_put_INLRObject_INLRObject__LRObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_put_INLRObject_INLRObject__LRObject__args[] = 
{
  &TreeMap_methods_put_INLRObject_INLRObject__LRObject__arg_key,
  &TreeMap_methods_put_INLRObject_INLRObject__LRObject__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_put_INLRObject_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_put_INLRObject_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "put", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_g_put", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_put_INLRObject_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  TreeMap_methods_put_INLRObject_INLRObject__LRObject__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_put_INLRObject_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_putAll_INLRMap__V_arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_putAll_INLRMap__V_args[] = 
{
  &TreeMap_methods_putAll_INLRMap__V_arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_putAll_INLRMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_putAll_INLRMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "putAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_putAll", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_putAll_INLRMap__V_args, // the arguments
  0, //arguments count
  TreeMap_methods_putAll_INLRMap__V_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_putAll_INLRMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_putAllLinear_INLRMapEntryArray__V_arg_entries = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "entries", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMapEntryArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_putAllLinear_INLRMapEntryArray__V_args[] = 
{
  &TreeMap_methods_putAllLinear_INLRMapEntryArray__V_arg_entries,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_putAllLinear_INLRMapEntryArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_putAllLinear_INLRMapEntryArray__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "putAllLinear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_putAllLinear", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_putAllLinear_INLRMapEntryArray__V_args, // the arguments
  0, //arguments count
  TreeMap_methods_putAllLinear_INLRMapEntryArray__V_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_putAllLinear_INLRMapEntryArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_arg_tree = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tree", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_arg_nod = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nod", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_args[] = 
{
  &TreeMap_methods_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_arg_tree,
  &TreeMap_methods_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_arg_nod,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rbDeleteFixup", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_rbDeleteFixup", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_args, // the arguments
  0, //arguments count
  TreeMap_methods_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__arg_tree = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tree", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__arg_nod = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nod", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__arg_tree,
  &TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__arg_comp,
  &TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__arg_nod,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rbInsert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_I_rbInsert", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_remove_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_remove_INLRObject__LRObject__args[] = 
{
  &TreeMap_methods_remove_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_remove_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_remove_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_i_remove", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_remove_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  TreeMap_methods_remove_INLRObject__LRObject__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_remove_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_rightRotate_INLRTreeMap_INLRRedBlackNode__V_arg_tree = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tree", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_rightRotate_INLRTreeMap_INLRRedBlackNode__V_arg_nod = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nod", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_rightRotate_INLRTreeMap_INLRRedBlackNode__V_args[] = 
{
  &TreeMap_methods_rightRotate_INLRTreeMap_INLRRedBlackNode__V_arg_tree,
  &TreeMap_methods_rightRotate_INLRTreeMap_INLRRedBlackNode__V_arg_nod,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_rightRotate_INLRTreeMap_INLRRedBlackNode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_rightRotate_INLRTreeMap_INLRRedBlackNode__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rightRotate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_rightRotate", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_rightRotate_INLRTreeMap_INLRRedBlackNode__V_args, // the arguments
  0, //arguments count
  TreeMap_methods_rightRotate_INLRTreeMap_INLRRedBlackNode__V_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_rightRotate_INLRTreeMap_INLRRedBlackNode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_size", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_size__I_args, // the arguments
  0, //arguments count
  TreeMap_methods_size__I_exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__args[] = 
{
  &TreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_from,
  &TreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_subMap_INLRObject_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_k_subMap", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  TreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_subMap_INLRObject_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_tailMap_INLRObject__LRSortedMap__arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_tailMap_INLRObject__LRSortedMap__args[] = 
{
  &TreeMap_methods_tailMap_INLRObject__LRSortedMap__arg_from,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_tailMap_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_tailMap_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tailMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_l_tailMap", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_tailMap_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  TreeMap_methods_tailMap_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_tailMap_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMax_INLRRedBlackNode__LRRedBlackNode__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_treeMax_INLRRedBlackNode__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_treeMax_INLRRedBlackNode__LRRedBlackNode__arg_root,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_treeMax_INLRRedBlackNode__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_treeMax_INLRRedBlackNode__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "treeMax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_A_treeMax", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_treeMax_INLRRedBlackNode__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_treeMax_INLRRedBlackNode__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_treeMax_INLRRedBlackNode__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_minKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "minKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_root,
  &TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_comp,
  &TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_minKey,
  &TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "treeMaxConstrained", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_B_treeMaxConstrained", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMin_INLRRedBlackNode__LRRedBlackNode__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_treeMin_INLRRedBlackNode__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_treeMin_INLRRedBlackNode__LRRedBlackNode__arg_root,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_treeMin_INLRRedBlackNode__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_treeMin_INLRRedBlackNode__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "treeMin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_y_treeMin", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_treeMin_INLRRedBlackNode__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_treeMin_INLRRedBlackNode__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_treeMin_INLRRedBlackNode__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_minKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "minKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_root,
  &TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_comp,
  &TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_minKey,
  &TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "treeMinConstrained", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_z_treeMinConstrained", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treePredecessor_INLRRedBlackNode__LRRedBlackNode__arg_nod = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nod", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_treePredecessor_INLRRedBlackNode__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_treePredecessor_INLRRedBlackNode__LRRedBlackNode__arg_nod,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_treePredecessor_INLRRedBlackNode__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_treePredecessor_INLRRedBlackNode__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "treePredecessor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_F_treePredecessor", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_treePredecessor_INLRRedBlackNode__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_treePredecessor_INLRRedBlackNode__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_treePredecessor_INLRRedBlackNode__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__arg_root,
  &TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__arg_comp,
  &TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "treeSearch", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_x_treeSearch", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_treeSuccessor_INLRRedBlackNode__LRRedBlackNode__arg_nod = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nod", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_treeSuccessor_INLRRedBlackNode__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_treeSuccessor_INLRRedBlackNode__LRRedBlackNode__arg_nod,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_treeSuccessor_INLRRedBlackNode__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_treeSuccessor_INLRRedBlackNode__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "treeSuccessor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_E_treeSuccessor", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_treeSuccessor_INLRRedBlackNode__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_treeSuccessor_INLRRedBlackNode__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_treeSuccessor_INLRRedBlackNode__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__arg_root = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "root", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__arg_minKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__args[] = 
{
  &TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__arg_root,
  &TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__arg_comp,
  &TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__arg_minKey,
  &TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "upperBound", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(), // return type
  "_D_upperBound", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__args, // the arguments
  0, //arguments count
  TreeMap_methods_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMap_methods_values__LRCollection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap_methods_values__LRCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMap_method_values__LRCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "values", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo(), // return type
  "_m_values", // alternative name of method
  -1, // altlabelHashCode
  TreeMap_methods_values__LRCollection__args, // the arguments
  0, //arguments count
  TreeMap_methods_values__LRCollection__exceptions, // the declared exceptions
  TreeMap_MetainfoWrapper::TreeMap_method_values__LRCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeMap_methods[] = 
{
  &TreeMap_method_GetClass__L_acdk_lang_RClass_,
  &TreeMap_method_TreeMap__LRTreeMap_,
  &TreeMap_method_TreeMap_INLRMap__LRTreeMap_,
  &TreeMap_method_TreeMap_INLRComparator__LRTreeMap_,
  &TreeMap_method_TreeMap_INLRSortedMap__LRTreeMap_,
  &TreeMap_method_clear__V,
  &TreeMap_method_clone__LRObject_,
  &TreeMap_method_comparator__LRComparator_,
  &TreeMap_method_compare_INLRComparator_INLRObject_INLRObject__I,
  &TreeMap_method_containsKey_INLRObject__Z,
  &TreeMap_method_containsValue_INLRObject__Z,
  &TreeMap_method_create_instance__LRObject_,
  &TreeMap_method_entrySet__LRSet_,
  &TreeMap_method_equals_INLRObject__Z,
  &TreeMap_method_firstKey__LRObject_,
  &TreeMap_method_get_INLRObject__LRObject_,
  &TreeMap_method_hashCode__I,
  &TreeMap_method_headMap_INLRObject__LRSortedMap_,
  &TreeMap_method_isEmpty__Z,
  &TreeMap_method_keyInClosedMaxRange_INLRComparator_INLRObject_INLRObject__Z,
  &TreeMap_method_keyInClosedRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z,
  &TreeMap_method_keyInMaxRange_INLRComparator_INLRObject_INLRObject__Z,
  &TreeMap_method_keyInMinRange_INLRComparator_INLRObject_INLRObject__Z,
  &TreeMap_method_keyInRange_INLRComparator_INLRObject_INLRObject_INLRObject__Z,
  &TreeMap_method_keySet__LRSet_,
  &TreeMap_method_lastKey__LRObject_,
  &TreeMap_method_leftRotate_INLRTreeMap_INLRRedBlackNode__V,
  &TreeMap_method_lowerBound_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode_,
  &TreeMap_method_nilNode__LRRedBlackNode_,
  &TreeMap_method_put_INLRObject_INLRObject__LRObject_,
  &TreeMap_method_putAll_INLRMap__V,
  &TreeMap_method_putAllLinear_INLRMapEntryArray__V,
  &TreeMap_method_rbDeleteFixup_INLRTreeMap_INLRRedBlackNode__V,
  &TreeMap_method_rbInsert_INLRTreeMap_INLRComparator_INLRRedBlackNode__LRRedBlackNode_,
  &TreeMap_method_remove_INLRObject__LRObject_,
  &TreeMap_method_rightRotate_INLRTreeMap_INLRRedBlackNode__V,
  &TreeMap_method_size__I,
  &TreeMap_method_subMap_INLRObject_INLRObject__LRSortedMap_,
  &TreeMap_method_tailMap_INLRObject__LRSortedMap_,
  &TreeMap_method_treeMax_INLRRedBlackNode__LRRedBlackNode_,
  &TreeMap_method_treeMaxConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode_,
  &TreeMap_method_treeMin_INLRRedBlackNode__LRRedBlackNode_,
  &TreeMap_method_treeMinConstrained_INLRRedBlackNode_INLRComparator_INLRObject_INLRObject__LRRedBlackNode_,
  &TreeMap_method_treePredecessor_INLRRedBlackNode__LRRedBlackNode_,
  &TreeMap_method_treeSearch_INLRRedBlackNode_INLRComparator_INLRObject__LRRedBlackNode_,
  &TreeMap_method_treeSuccessor_INLRRedBlackNode__LRRedBlackNode_,
  &TreeMap_method_upperBound_LRRedBlackNode_LRComparator_LRObject_LRObject__LRRedBlackNode_,
  &TreeMap_method_values__LRCollection_,
  0
};


struct TreeMap_MetaInfoInitializer
{  TreeMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeMap::clazzInfo();
    ci->fields =  _TreeMap_fields;
    ci->methods =  _TreeMap_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeMap_MetaInfoInitializer TreeMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TreeMapIterator_create_array(int length)
{
  return new ObjectArrayImpl<RTreeMapIterator>(length);
}

//static
::acdk::lang::RObject
TreeMapIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeMapIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMapIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapIterator_method_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeMapIterator(::acdk::lang::dmi::castTo< RTreeMap>(args[0], dc), (MapEntryTyp)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapIterator_method__checkMod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMapIterator::_checkMod();
    else
        This->_checkMod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMapIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMapIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMapIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapIterator_fields__first_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_first, flags);
    else
      This->_first = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapIterator_fields__knownMods_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_knownMods, flags);
    else
      This->_knownMods = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapIterator_fields__last_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_last, flags);
    else
      This->_last = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapIterator_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RTreeMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapIterator_fields__prev_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_prev, flags);
    else
      This->_prev = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapIterator_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapIterator* This = dmi_cast<TreeMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_type), flags);
    else
      This->_type = (MapEntryTyp)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapIterator_fields__first = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_first", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_fields__first_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapIterator_fields__knownMods = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_knownMods", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_fields__knownMods_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapIterator_fields__last = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_last", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_fields__last_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapIterator_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo(),
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapIterator_fields__prev = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_prev", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_fields__prev_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapIterator_fields__type = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeMapIterator_fields[] = 
{
  &TreeMapIterator_fields__first,
  &TreeMapIterator_fields__knownMods,
  &TreeMapIterator_fields__last,
  &TreeMapIterator_fields__map,
  &TreeMapIterator_fields__prev,
  &TreeMapIterator_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeMapIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeMapIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__args[] = 
{
  &TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__arg_map,
  &TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapIterator_method_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeMapIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeMapIterator::clazzInfo(), // return type
  "_0_TreeMapIterator", // alternative name of method
  -1, // altlabelHashCode
  TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__args, // the arguments
  0, //arguments count
  TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__exceptions, // the declared exceptions
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_method_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapIterator_methods__checkMod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapIterator_methods__checkMod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapIterator_method__checkMod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkMod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5__checkMod", // alternative name of method
  -1, // altlabelHashCode
  TreeMapIterator_methods__checkMod__V_args, // the arguments
  0, //arguments count
  TreeMapIterator_methods__checkMod__V_exceptions, // the declared exceptions
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_method__checkMod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_element", // alternative name of method
  -1, // altlabelHashCode
  TreeMapIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  TreeMapIterator_methods_element__LRObject__exceptions, // the declared exceptions
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  TreeMapIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  TreeMapIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_next", // alternative name of method
  -1, // altlabelHashCode
  TreeMapIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  TreeMapIterator_methods_next__LRObject__exceptions, // the declared exceptions
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  TreeMapIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  TreeMapIterator_methods_remove__V_exceptions, // the declared exceptions
  TreeMapIterator_MetainfoWrapper::TreeMapIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeMapIterator_methods[] = 
{
  &TreeMapIterator_method_GetClass__L_acdk_lang_RClass_,
  &TreeMapIterator_method_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator_,
  &TreeMapIterator_method__checkMod__V,
  &TreeMapIterator_method_element__LRObject_,
  &TreeMapIterator_method_hasNext__Z,
  &TreeMapIterator_method_next__LRObject_,
  &TreeMapIterator_method_remove__V,
  0
};


struct TreeMapIterator_MetaInfoInitializer
{  TreeMapIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeMapIterator::clazzInfo();
    ci->fields =  _TreeMapIterator_fields;
    ci->methods =  _TreeMapIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeMapIterator_MetaInfoInitializer TreeMapIterator_MetaInfoInitializer_staticinstance__;


struct TreeMapIterator_clazzInfo_ClazzAttributesResInitializer8
{
  TreeMapIterator_clazzInfo_ClazzAttributesResInitializer8()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TreeMapIterator_methods_TreeMapIterator_INLRTreeMap_INI_LRTreeMapIterator__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)MapEntryTypMetaInf::GetEnumInfo()));
  }
};

TreeMapIterator_clazzInfo_ClazzAttributesResInitializer8 TreeMapIterator_clazzInfo_ClazzAttributesResInitializer8_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TreeMapCollection_create_array(int length)
{
  return new ObjectArrayImpl<RTreeMapCollection>(length);
}

//static
::acdk::lang::RObject
TreeMapCollection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeMapCollection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMapCollection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_TreeMapCollection_INLRSortedMap__LRTreeMapCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeMapCollection(::acdk::lang::dmi::castTo< RSortedMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_add_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapCollection::add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_addAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapCollection::addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMapCollection::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_contains_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapCollection::contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapCollection::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapCollection::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapCollection::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMapCollection::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapCollection_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapCollection::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapCollection_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapCollection* This = dmi_cast<TreeMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RSortedMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapCollection_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(),
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeMapCollection_fields[] = 
{
  &TreeMapCollection_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapCollection_methods_TreeMapCollection_INLRSortedMap__LRTreeMapCollection__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_TreeMapCollection_INLRSortedMap__LRTreeMapCollection__args[] = 
{
  &TreeMapCollection_methods_TreeMapCollection_INLRSortedMap__LRTreeMapCollection__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_TreeMapCollection_INLRSortedMap__LRTreeMapCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_TreeMapCollection_INLRSortedMap__LRTreeMapCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeMapCollection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeMapCollection::clazzInfo(), // return type
  "_0_TreeMapCollection", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_TreeMapCollection_INLRSortedMap__LRTreeMapCollection__args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_TreeMapCollection_INLRSortedMap__LRTreeMapCollection__exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_TreeMapCollection_INLRSortedMap__LRTreeMapCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapCollection_methods_add_INLRObject__Z_arg_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_add_INLRObject__Z_args[] = 
{
  &TreeMapCollection_methods_add_INLRObject__Z_arg_object,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_add_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_add_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_add", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_add_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_add_INLRObject__Z_exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_add_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapCollection_methods_addAll_INLRCollection__Z_arg_coll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "coll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_addAll_INLRCollection__Z_args[] = 
{
  &TreeMapCollection_methods_addAll_INLRCollection__Z_arg_coll,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_addAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_addAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_addAll", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_addAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_addAll_INLRCollection__Z_exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_addAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_clear", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_clear__V_args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_clear__V_exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapCollection_methods_contains_INLRObject__Z_arg_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_contains_INLRObject__Z_args[] = 
{
  &TreeMapCollection_methods_contains_INLRObject__Z_arg_object,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_contains_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_contains_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_contains", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_contains_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_contains_INLRObject__Z_exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_contains_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapCollection_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_equals_INLRObject__Z_args[] = 
{
  &TreeMapCollection_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_equals", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_hashCode", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_hashCode__I_args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_hashCode__I_exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_isEmpty__Z_exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_7_iterator", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_iterator__LRIterator__exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapCollection_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapCollection_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_size", // alternative name of method
  -1, // altlabelHashCode
  TreeMapCollection_methods_size__I_args, // the arguments
  0, //arguments count
  TreeMapCollection_methods_size__I_exceptions, // the declared exceptions
  TreeMapCollection_MetainfoWrapper::TreeMapCollection_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeMapCollection_methods[] = 
{
  &TreeMapCollection_method_GetClass__L_acdk_lang_RClass_,
  &TreeMapCollection_method_TreeMapCollection_INLRSortedMap__LRTreeMapCollection_,
  &TreeMapCollection_method_add_INLRObject__Z,
  &TreeMapCollection_method_addAll_INLRCollection__Z,
  &TreeMapCollection_method_clear__V,
  &TreeMapCollection_method_contains_INLRObject__Z,
  &TreeMapCollection_method_equals_INLRObject__Z,
  &TreeMapCollection_method_hashCode__I,
  &TreeMapCollection_method_isEmpty__Z,
  &TreeMapCollection_method_iterator__LRIterator_,
  &TreeMapCollection_method_size__I,
  0
};


struct TreeMapCollection_MetaInfoInitializer
{  TreeMapCollection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeMapCollection::clazzInfo();
    ci->fields =  _TreeMapCollection_fields;
    ci->methods =  _TreeMapCollection_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeMapCollection_MetaInfoInitializer TreeMapCollection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TreeMapSet_create_array(int length)
{
  return new ObjectArrayImpl<RTreeMapSet>(length);
}

//static
::acdk::lang::RObject
TreeMapSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeMapSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMapSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeMapSet(::acdk::lang::dmi::castTo< RSortedMap>(args[0], dc), ::acdk::lang::dmi::castTo< RTreeMap>(args[1], dc), (MapEntryTyp)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_add_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapSet::add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_addAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapSet::addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    else
      ret = This->addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMapSet::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_contains_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapSet::contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapSet::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMapSet::iterator();
    else
        ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_remove_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapSet::remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSet_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapSet::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSet_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RSortedMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSet_fields__treeMap_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_treeMap, flags);
    else
      This->_treeMap = ::acdk::lang::dmi::castTo< RTreeMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSet_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSet* This = dmi_cast<TreeMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_type), flags);
    else
      This->_type = (MapEntryTyp)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSet_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(),
  TreeMapSet_MetainfoWrapper::TreeMapSet_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSet_fields__treeMap = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_treeMap", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo(),
  TreeMapSet_MetainfoWrapper::TreeMapSet_fields__treeMap_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSet_fields__type = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeMapSet_MetainfoWrapper::TreeMapSet_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeMapSet_fields[] = 
{
  &TreeMapSet_fields__map,
  &TreeMapSet_fields__treeMap,
  &TreeMapSet_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeMapSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__arg_sortedmap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sortedmap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__arg_treeMap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "treeMap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__args[] = 
{
  &TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__arg_sortedmap,
  &TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__arg_treeMap,
  &TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeMapSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeMapSet::clazzInfo(), // return type
  "_0_TreeMapSet", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__args, // the arguments
  0, //arguments count
  TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSet_methods_add_INLRObject__Z_arg_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_add_INLRObject__Z_args[] = 
{
  &TreeMapSet_methods_add_INLRObject__Z_arg_object,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_add_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_add_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_add", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_add_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMapSet_methods_add_INLRObject__Z_exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_add_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSet_methods_addAll_INLRCollection__Z_arg_coll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "coll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_addAll_INLRCollection__Z_args[] = 
{
  &TreeMapSet_methods_addAll_INLRCollection__Z_arg_coll,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_addAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_addAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_addAll", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_addAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  TreeMapSet_methods_addAll_INLRCollection__Z_exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_addAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_clear", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_clear__V_args, // the arguments
  0, //arguments count
  TreeMapSet_methods_clear__V_exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSet_methods_contains_INLRObject__Z_arg_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_contains_INLRObject__Z_args[] = 
{
  &TreeMapSet_methods_contains_INLRObject__Z_arg_object,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_contains_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_contains_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_contains", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_contains_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMapSet_methods_contains_INLRObject__Z_exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_contains_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  TreeMapSet_methods_isEmpty__Z_exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_8_iterator", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  TreeMapSet_methods_iterator__LRIterator__exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSet_methods_remove_INLRObject__Z_arg_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_remove_INLRObject__Z_args[] = 
{
  &TreeMapSet_methods_remove_INLRObject__Z_arg_object,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_remove_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_remove_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_remove", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_remove_INLRObject__Z_args, // the arguments
  0, //arguments count
  TreeMapSet_methods_remove_INLRObject__Z_exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_remove_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSet_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSet_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_size", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSet_methods_size__I_args, // the arguments
  0, //arguments count
  TreeMapSet_methods_size__I_exceptions, // the declared exceptions
  TreeMapSet_MetainfoWrapper::TreeMapSet_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeMapSet_methods[] = 
{
  &TreeMapSet_method_GetClass__L_acdk_lang_RClass_,
  &TreeMapSet_method_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet_,
  &TreeMapSet_method_add_INLRObject__Z,
  &TreeMapSet_method_addAll_INLRCollection__Z,
  &TreeMapSet_method_clear__V,
  &TreeMapSet_method_contains_INLRObject__Z,
  &TreeMapSet_method_isEmpty__Z,
  &TreeMapSet_method_iterator__LRIterator_,
  &TreeMapSet_method_remove_INLRObject__Z,
  &TreeMapSet_method_size__I,
  0
};


struct TreeMapSet_MetaInfoInitializer
{  TreeMapSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeMapSet::clazzInfo();
    ci->fields =  _TreeMapSet_fields;
    ci->methods =  _TreeMapSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeMapSet_MetaInfoInitializer TreeMapSet_MetaInfoInitializer_staticinstance__;


struct TreeMapSet_clazzInfo_ClazzAttributesResInitializer9
{
  TreeMapSet_clazzInfo_ClazzAttributesResInitializer9()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TreeMapSet_methods_TreeMapSet_INLRSortedMap_INLRTreeMap_INI_LRTreeMapSet__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)MapEntryTypMetaInf::GetEnumInfo()));
  }
};

TreeMapSet_clazzInfo_ClazzAttributesResInitializer9 TreeMapSet_clazzInfo_ClazzAttributesResInitializer9_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TreeMapSetIterator_create_array(int length)
{
  return new ObjectArrayImpl<RTreeMapSetIterator>(length);
}

//static
::acdk::lang::RObject
TreeMapSetIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeMapSetIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSetIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeMapSetIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSetIterator_method_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeMapSetIterator(::acdk::lang::dmi::castTo< RSortedMap>(args[0], dc), ::acdk::lang::dmi::castTo< RTreeMap>(args[1], dc), (MapEntryTyp)::acdk::lang::dmi::castTo<int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSetIterator_method__checkMod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMapSetIterator::_checkMod();
    else
        This->_checkMod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSetIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMapSetIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSetIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TreeMapSetIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSetIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TreeMapSetIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeMapSetIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeMapSetIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSetIterator_fields__first_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_first, flags);
    else
      This->_first = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSetIterator_fields__knownMods_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_knownMods, flags);
    else
      This->_knownMods = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSetIterator_fields__last_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_last, flags);
    else
      This->_last = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSetIterator_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RSortedMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSetIterator_fields__prev_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_prev, flags);
    else
      This->_prev = ::acdk::lang::dmi::castTo< RRedBlackNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSetIterator_fields__treeMap_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_treeMap, flags);
    else
      This->_treeMap = ::acdk::lang::dmi::castTo< RTreeMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeMapSetIterator_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeMapSetIterator* This = dmi_cast<TreeMapSetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_type), flags);
    else
      This->_type = (MapEntryTyp)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSetIterator_fields__first = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_first", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_fields__first_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSetIterator_fields__knownMods = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_knownMods", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_fields__knownMods_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSetIterator_fields__last = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_last", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_fields__last_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSetIterator_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(),
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSetIterator_fields__prev = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_prev", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRedBlackNode::clazzInfo(),
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_fields__prev_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSetIterator_fields__treeMap = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_treeMap", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo(),
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_fields__treeMap_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TreeMapSetIterator_fields__type = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeMapSetIterator_fields[] = 
{
  &TreeMapSetIterator_fields__first,
  &TreeMapSetIterator_fields__knownMods,
  &TreeMapSetIterator_fields__last,
  &TreeMapSetIterator_fields__map,
  &TreeMapSetIterator_fields__prev,
  &TreeMapSetIterator_fields__treeMap,
  &TreeMapSetIterator_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSetIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSetIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSetIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSetIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeMapSetIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__arg_treemap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "treemap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__args[] = 
{
  &TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__arg_map,
  &TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__arg_treemap,
  &TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSetIterator_method_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeMapSetIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeMapSetIterator::clazzInfo(), // return type
  "_0_TreeMapSetIterator", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__args, // the arguments
  0, //arguments count
  TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__exceptions, // the declared exceptions
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_method_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSetIterator_methods__checkMod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSetIterator_methods__checkMod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSetIterator_method__checkMod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkMod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5__checkMod", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSetIterator_methods__checkMod__V_args, // the arguments
  0, //arguments count
  TreeMapSetIterator_methods__checkMod__V_exceptions, // the declared exceptions
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_method__checkMod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSetIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSetIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSetIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_element", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSetIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  TreeMapSetIterator_methods_element__LRObject__exceptions, // the declared exceptions
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSetIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSetIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSetIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSetIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  TreeMapSetIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSetIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSetIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSetIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_next", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSetIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  TreeMapSetIterator_methods_next__LRObject__exceptions, // the declared exceptions
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeMapSetIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSetIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeMapSetIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  TreeMapSetIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  TreeMapSetIterator_methods_remove__V_exceptions, // the declared exceptions
  TreeMapSetIterator_MetainfoWrapper::TreeMapSetIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeMapSetIterator_methods[] = 
{
  &TreeMapSetIterator_method_GetClass__L_acdk_lang_RClass_,
  &TreeMapSetIterator_method_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator_,
  &TreeMapSetIterator_method__checkMod__V,
  &TreeMapSetIterator_method_element__LRObject_,
  &TreeMapSetIterator_method_hasNext__Z,
  &TreeMapSetIterator_method_next__LRObject_,
  &TreeMapSetIterator_method_remove__V,
  0
};


struct TreeMapSetIterator_MetaInfoInitializer
{  TreeMapSetIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeMapSetIterator::clazzInfo();
    ci->fields =  _TreeMapSetIterator_fields;
    ci->methods =  _TreeMapSetIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeMapSetIterator_MetaInfoInitializer TreeMapSetIterator_MetaInfoInitializer_staticinstance__;


struct TreeMapSetIterator_clazzInfo_ClazzAttributesResInitializer10
{
  TreeMapSetIterator_clazzInfo_ClazzAttributesResInitializer10()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&TreeMapSetIterator_methods_TreeMapSetIterator_INLRSortedMap_INLRTreeMap_I_LRTreeMapSetIterator__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)MapEntryTypMetaInf::GetEnumInfo()));
  }
};

TreeMapSetIterator_clazzInfo_ClazzAttributesResInitializer10 TreeMapSetIterator_clazzInfo_ClazzAttributesResInitializer10_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
SubTreeMap_create_array(int length)
{
  return new ObjectArrayImpl<RSubTreeMap>(length);
}

//static
::acdk::lang::RObject
SubTreeMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SubTreeMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SubTreeMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SubTreeMap(::acdk::lang::dmi::castTo< RTreeMap>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SubTreeMap::clear();
    else
        This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_comparator__LRComparator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::comparator();
    else
        ret = (::acdk::lang::RObject)This->comparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_containsKey_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SubTreeMap::containsKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->containsKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_containsValue_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SubTreeMap::containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_entrySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::entrySet();
    else
        ret = (::acdk::lang::RObject)This->entrySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SubTreeMap::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_firstKey__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::firstKey();
    else
        ret = (::acdk::lang::RObject)This->firstKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_get_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SubTreeMap::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_headMap_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::headMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->headMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SubTreeMap::isEmpty();
    else
      ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_keySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::keySet();
    else
        ret = (::acdk::lang::RObject)This->keySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_lastKey__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::lastKey();
    else
        ret = (::acdk::lang::RObject)This->lastKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_parentTreeMap__LRTreeMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::parentTreeMap();
    else
        ret = (::acdk::lang::RObject)This->parentTreeMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_put_INLRObject_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_putAll_INLRMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SubTreeMap::putAll(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    else
        This->putAll(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_remove_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SubTreeMap::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_subMap_INLRObject_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::subMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->subMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_tailMap_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::tailMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->tailMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubTreeMap_method_values__LRCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SubTreeMap::values();
    else
        ret = (::acdk::lang::RObject)This->values();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubTreeMap_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RTreeMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubTreeMap_fields__maxKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxKey, flags);
    else
      This->_maxKey = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubTreeMap_fields__minKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubTreeMap* This = dmi_cast<SubTreeMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minKey, flags);
    else
      This->_minKey = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SubTreeMap_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo(),
  SubTreeMap_MetainfoWrapper::SubTreeMap_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SubTreeMap_fields__maxKey = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  SubTreeMap_MetainfoWrapper::SubTreeMap_fields__maxKey_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SubTreeMap_fields__minKey = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  SubTreeMap_MetainfoWrapper::SubTreeMap_fields__minKey_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SubTreeMap_fields[] = 
{
  &SubTreeMap_fields__map,
  &SubTreeMap_fields__maxKey,
  &SubTreeMap_fields__minKey,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_m_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__arg_minKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "minKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__arg_maxKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "maxKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__args[] = 
{
  &SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__arg_map,
  &SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__arg_minKey,
  &SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__arg_maxKey,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SubTreeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SubTreeMap::clazzInfo(), // return type
  "_0_SubTreeMap", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_clear", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_clear__V_args, // the arguments
  0, //arguments count
  SubTreeMap_methods_clear__V_exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_comparator__LRComparator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_comparator__LRComparator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_comparator__LRComparator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "comparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo(), // return type
  "_c_comparator", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_comparator__LRComparator__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_comparator__LRComparator__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_comparator__LRComparator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_containsKey_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_containsKey_INLRObject__Z_args[] = 
{
  &SubTreeMap_methods_containsKey_INLRObject__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_containsKey_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_containsKey_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_containsKey", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_containsKey_INLRObject__Z_args, // the arguments
  0, //arguments count
  SubTreeMap_methods_containsKey_INLRObject__Z_exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_containsKey_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_containsValue_INLRObject__Z_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_containsValue_INLRObject__Z_args[] = 
{
  &SubTreeMap_methods_containsValue_INLRObject__Z_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_containsValue_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_containsValue_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_containsValue", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_containsValue_INLRObject__Z_args, // the arguments
  0, //arguments count
  SubTreeMap_methods_containsValue_INLRObject__Z_exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_containsValue_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_entrySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_entrySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_entrySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "entrySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_9_entrySet", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_entrySet__LRSet__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_entrySet__LRSet__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_entrySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_equals_INLRObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_equals_INLRObject__Z_args[] = 
{
  &SubTreeMap_methods_equals_INLRObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_equals", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  SubTreeMap_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_firstKey__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_firstKey__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_firstKey__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "firstKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_d_firstKey", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_firstKey__LRObject__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_firstKey__LRObject__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_firstKey__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_get_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_get_INLRObject__LRObject__args[] = 
{
  &SubTreeMap_methods_get_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_get_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_get_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_get", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_get_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_get_INLRObject__LRObject__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_get_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_hashCode", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_hashCode__I_args, // the arguments
  0, //arguments count
  SubTreeMap_methods_hashCode__I_exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_headMap_INLRObject__LRSortedMap__arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_headMap_INLRObject__LRSortedMap__args[] = 
{
  &SubTreeMap_methods_headMap_INLRObject__LRSortedMap__arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_headMap_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_headMap_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "headMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_g_headMap", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_headMap_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_headMap_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_headMap_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  SubTreeMap_methods_isEmpty__Z_exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_keySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_keySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_keySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_a_keySet", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_keySet__LRSet__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_keySet__LRSet__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_keySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_lastKey__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_lastKey__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_lastKey__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_e_lastKey", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_lastKey__LRObject__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_lastKey__LRObject__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_lastKey__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_parentTreeMap__LRTreeMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_parentTreeMap__LRTreeMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_parentTreeMap__LRTreeMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parentTreeMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTreeMap::clazzInfo(), // return type
  "_l_parentTreeMap", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_parentTreeMap__LRTreeMap__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_parentTreeMap__LRTreeMap__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_parentTreeMap__LRTreeMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_put_INLRObject_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_put_INLRObject_INLRObject__LRObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_put_INLRObject_INLRObject__LRObject__args[] = 
{
  &SubTreeMap_methods_put_INLRObject_INLRObject__LRObject__arg_key,
  &SubTreeMap_methods_put_INLRObject_INLRObject__LRObject__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_put_INLRObject_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_put_INLRObject_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "put", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_put", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_put_INLRObject_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_put_INLRObject_INLRObject__LRObject__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_put_INLRObject_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_putAll_INLRMap__V_arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_putAll_INLRMap__V_args[] = 
{
  &SubTreeMap_methods_putAll_INLRMap__V_arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_putAll_INLRMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_putAll_INLRMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "putAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_putAll", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_putAll_INLRMap__V_args, // the arguments
  0, //arguments count
  SubTreeMap_methods_putAll_INLRMap__V_exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_putAll_INLRMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_remove_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_remove_INLRObject__LRObject__args[] = 
{
  &SubTreeMap_methods_remove_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_remove_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_remove_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_7_remove", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_remove_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_remove_INLRObject__LRObject__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_remove_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_size", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_size__I_args, // the arguments
  0, //arguments count
  SubTreeMap_methods_size__I_exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__args[] = 
{
  &SubTreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_from,
  &SubTreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_subMap_INLRObject_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_f_subMap", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_subMap_INLRObject_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubTreeMap_methods_tailMap_INLRObject__LRSortedMap__arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_tailMap_INLRObject__LRSortedMap__args[] = 
{
  &SubTreeMap_methods_tailMap_INLRObject__LRSortedMap__arg_from,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_tailMap_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_tailMap_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tailMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_h_tailMap", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_tailMap_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_tailMap_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_tailMap_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubTreeMap_methods_values__LRCollection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap_methods_values__LRCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubTreeMap_method_values__LRCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "values", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo(), // return type
  "_b_values", // alternative name of method
  -1, // altlabelHashCode
  SubTreeMap_methods_values__LRCollection__args, // the arguments
  0, //arguments count
  SubTreeMap_methods_values__LRCollection__exceptions, // the declared exceptions
  SubTreeMap_MetainfoWrapper::SubTreeMap_method_values__LRCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SubTreeMap_methods[] = 
{
  &SubTreeMap_method_GetClass__L_acdk_lang_RClass_,
  &SubTreeMap_method_SubTreeMap_INLRTreeMap_INLRObject_INLRObject__LRSubTreeMap_,
  &SubTreeMap_method_clear__V,
  &SubTreeMap_method_comparator__LRComparator_,
  &SubTreeMap_method_containsKey_INLRObject__Z,
  &SubTreeMap_method_containsValue_INLRObject__Z,
  &SubTreeMap_method_entrySet__LRSet_,
  &SubTreeMap_method_equals_INLRObject__Z,
  &SubTreeMap_method_firstKey__LRObject_,
  &SubTreeMap_method_get_INLRObject__LRObject_,
  &SubTreeMap_method_hashCode__I,
  &SubTreeMap_method_headMap_INLRObject__LRSortedMap_,
  &SubTreeMap_method_isEmpty__Z,
  &SubTreeMap_method_keySet__LRSet_,
  &SubTreeMap_method_lastKey__LRObject_,
  &SubTreeMap_method_parentTreeMap__LRTreeMap_,
  &SubTreeMap_method_put_INLRObject_INLRObject__LRObject_,
  &SubTreeMap_method_putAll_INLRMap__V,
  &SubTreeMap_method_remove_INLRObject__LRObject_,
  &SubTreeMap_method_size__I,
  &SubTreeMap_method_subMap_INLRObject_INLRObject__LRSortedMap_,
  &SubTreeMap_method_tailMap_INLRObject__LRSortedMap_,
  &SubTreeMap_method_values__LRCollection_,
  0
};


struct SubTreeMap_MetaInfoInitializer
{  SubTreeMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SubTreeMap::clazzInfo();
    ci->fields =  _SubTreeMap_fields;
    ci->methods =  _SubTreeMap_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SubTreeMap_MetaInfoInitializer SubTreeMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TreeSet_create_array(int length)
{
  return new ObjectArrayImpl<RTreeSet>(length);
}

//static
::acdk::lang::RObject
TreeSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TreeSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeSet_method_TreeSet__LRTreeSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeSet_method_TreeSet_INLRCollection__LRTreeSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeSet(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeSet_method_TreeSet_INLRComparator__LRTreeSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeSet(::acdk::lang::dmi::castTo< RComparator>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeSet_method_TreeSet_INLRSortedSet__LRTreeSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeSet(::acdk::lang::dmi::castTo< RSortedSet>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeSet_method_TreeSet_INLRSortedMap__LRTreeSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TreeSet(::acdk::lang::dmi::castTo< RSortedMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeSet_method__add_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TreeSet* This = dmi_cast<TreeSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TreeSet::_add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->_add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TreeSet_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TreeSet::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TreeSet_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TreeSet* This = dmi_cast<TreeSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RSortedMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TreeSet_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(),
  TreeSet_MetainfoWrapper::TreeSet_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TreeSet_fields[] = 
{
  &TreeSet_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TreeSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TreeSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TreeSet_MetainfoWrapper::TreeSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeSet_methods_TreeSet__LRTreeSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet_methods_TreeSet__LRTreeSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeSet_method_TreeSet__LRTreeSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeSet::clazzInfo(), // return type
  "_2_TreeSet", // alternative name of method
  -1, // altlabelHashCode
  TreeSet_methods_TreeSet__LRTreeSet__args, // the arguments
  0, //arguments count
  TreeSet_methods_TreeSet__LRTreeSet__exceptions, // the declared exceptions
  TreeSet_MetainfoWrapper::TreeSet_method_TreeSet__LRTreeSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeSet_methods_TreeSet_INLRCollection__LRTreeSet__arg_coll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "coll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeSet_methods_TreeSet_INLRCollection__LRTreeSet__args[] = 
{
  &TreeSet_methods_TreeSet_INLRCollection__LRTreeSet__arg_coll,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet_methods_TreeSet_INLRCollection__LRTreeSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeSet_method_TreeSet_INLRCollection__LRTreeSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeSet::clazzInfo(), // return type
  "_3_TreeSet", // alternative name of method
  -1, // altlabelHashCode
  TreeSet_methods_TreeSet_INLRCollection__LRTreeSet__args, // the arguments
  0, //arguments count
  TreeSet_methods_TreeSet_INLRCollection__LRTreeSet__exceptions, // the declared exceptions
  TreeSet_MetainfoWrapper::TreeSet_method_TreeSet_INLRCollection__LRTreeSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeSet_methods_TreeSet_INLRComparator__LRTreeSet__arg_comp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "comp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeSet_methods_TreeSet_INLRComparator__LRTreeSet__args[] = 
{
  &TreeSet_methods_TreeSet_INLRComparator__LRTreeSet__arg_comp,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet_methods_TreeSet_INLRComparator__LRTreeSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeSet_method_TreeSet_INLRComparator__LRTreeSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeSet::clazzInfo(), // return type
  "_1_TreeSet", // alternative name of method
  -1, // altlabelHashCode
  TreeSet_methods_TreeSet_INLRComparator__LRTreeSet__args, // the arguments
  0, //arguments count
  TreeSet_methods_TreeSet_INLRComparator__LRTreeSet__exceptions, // the declared exceptions
  TreeSet_MetainfoWrapper::TreeSet_method_TreeSet_INLRComparator__LRTreeSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeSet_methods_TreeSet_INLRSortedSet__LRTreeSet__arg_sortedSet = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sortedSet", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeSet_methods_TreeSet_INLRSortedSet__LRTreeSet__args[] = 
{
  &TreeSet_methods_TreeSet_INLRSortedSet__LRTreeSet__arg_sortedSet,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet_methods_TreeSet_INLRSortedSet__LRTreeSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeSet_method_TreeSet_INLRSortedSet__LRTreeSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeSet::clazzInfo(), // return type
  "_4_TreeSet", // alternative name of method
  -1, // altlabelHashCode
  TreeSet_methods_TreeSet_INLRSortedSet__LRTreeSet__args, // the arguments
  0, //arguments count
  TreeSet_methods_TreeSet_INLRSortedSet__LRTreeSet__exceptions, // the declared exceptions
  TreeSet_MetainfoWrapper::TreeSet_method_TreeSet_INLRSortedSet__LRTreeSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeSet_methods_TreeSet_INLRSortedMap__LRTreeSet__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeSet_methods_TreeSet_INLRSortedMap__LRTreeSet__args[] = 
{
  &TreeSet_methods_TreeSet_INLRSortedMap__LRTreeSet__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet_methods_TreeSet_INLRSortedMap__LRTreeSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeSet_method_TreeSet_INLRSortedMap__LRTreeSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TreeSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TreeSet::clazzInfo(), // return type
  "_5_TreeSet", // alternative name of method
  -1, // altlabelHashCode
  TreeSet_methods_TreeSet_INLRSortedMap__LRTreeSet__args, // the arguments
  0, //arguments count
  TreeSet_methods_TreeSet_INLRSortedMap__LRTreeSet__exceptions, // the declared exceptions
  TreeSet_MetainfoWrapper::TreeSet_method_TreeSet_INLRSortedMap__LRTreeSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TreeSet_methods__add_INLRObject__V_arg_object = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "object", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeSet_methods__add_INLRObject__V_args[] = 
{
  &TreeSet_methods__add_INLRObject__V_arg_object,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet_methods__add_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeSet_method__add_INLRObject__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6__add", // alternative name of method
  -1, // altlabelHashCode
  TreeSet_methods__add_INLRObject__V_args, // the arguments
  0, //arguments count
  TreeSet_methods__add_INLRObject__V_exceptions, // the declared exceptions
  TreeSet_MetainfoWrapper::TreeSet_method__add_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TreeSet_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TreeSet_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  TreeSet_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  TreeSet_methods_create_instance__LRObject__exceptions, // the declared exceptions
  TreeSet_MetainfoWrapper::TreeSet_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TreeSet_methods[] = 
{
  &TreeSet_method_GetClass__L_acdk_lang_RClass_,
  &TreeSet_method_TreeSet__LRTreeSet_,
  &TreeSet_method_TreeSet_INLRCollection__LRTreeSet_,
  &TreeSet_method_TreeSet_INLRComparator__LRTreeSet_,
  &TreeSet_method_TreeSet_INLRSortedSet__LRTreeSet_,
  &TreeSet_method_TreeSet_INLRSortedMap__LRTreeSet_,
  &TreeSet_method__add_INLRObject__V,
  &TreeSet_method_create_instance__LRObject_,
  0
};


struct TreeSet_MetaInfoInitializer
{  TreeSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TreeSet::clazzInfo();
    ci->fields =  _TreeSet_fields;
    ci->methods =  _TreeSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TreeSet_MetaInfoInitializer TreeSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::io;

//static
::acdk::lang::RObject
Vector_create_array(int length)
{
  return new ObjectArrayImpl<RVector>(length);
}

//static
::acdk::lang::RObject
Vector_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Vector_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Vector::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_Vector__LRVector__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Vector();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_Vector_I_LRVector__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Vector(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_Vector_II_LRVector__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Vector(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_Vector_INLRCollection__LRVector__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Vector(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_addElement_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::addElement(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->addElement(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_capacity__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Vector::capacity();
    else
      ret = This->capacity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_copyInto_INLRObjectArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::copyInto(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    else
        This->copyInto(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Vector::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_ensureCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_firstElement__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Vector::firstElement();
    else
        ret = (::acdk::lang::RObject)This->firstElement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_insertElementAt_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::insertElementAt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->insertElementAt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_lastElement__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Vector::lastElement();
    else
        ret = (::acdk::lang::RObject)This->lastElement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_removeAllElements__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::removeAllElements();
    else
        This->removeAllElements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_removeElement_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Vector::removeElement(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->removeElement(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_removeElementAt_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::removeElementAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->removeElementAt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_set_IINLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Vector::set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_setElementAt_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::setElementAt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setElementAt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_setSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::setSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Vector_method_trimToSize__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Vector::trimToSize();
    else
        This->trimToSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Vector_fields__capacityIncrement_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_capacityIncrement, flags);
    else
      This->_capacityIncrement = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Vector_fields__elementCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_elementCount, flags);
    else
      This->_elementCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Vector_fields__elementData_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_elementData, flags);
    else
      This->_elementData = ::acdk::lang::dmi::castTo< RObjectArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Vector_fields__modCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Vector* This = dmi_cast<Vector>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_modCount, flags);
    else
      This->_modCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Vector_fields__capacityIncrement = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_capacityIncrement", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Vector_MetainfoWrapper::Vector_fields__capacityIncrement_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Vector_fields__elementCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_elementCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Vector_MetainfoWrapper::Vector_fields__elementCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Vector_fields__elementData = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_elementData", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(),
  Vector_MetainfoWrapper::Vector_fields__elementData_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Vector_fields__modCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_modCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Vector_MetainfoWrapper::Vector_fields__modCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Vector_fields[] = 
{
  &Vector_fields__capacityIncrement,
  &Vector_fields__elementCount,
  &Vector_fields__elementData,
  &Vector_fields__modCount,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_j_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Vector_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_Vector__LRVector__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_Vector__LRVector__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_Vector__LRVector_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Vector", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Vector::clazzInfo(), // return type
  "_2_Vector", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_Vector__LRVector__args, // the arguments
  0, //arguments count
  Vector_methods_Vector__LRVector__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_Vector__LRVector__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_Vector_I_LRVector__arg_initcapac = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initcapac", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_Vector_I_LRVector__args[] = 
{
  &Vector_methods_Vector_I_LRVector__arg_initcapac,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_Vector_I_LRVector__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_Vector_I_LRVector_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Vector", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Vector::clazzInfo(), // return type
  "_3_Vector", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_Vector_I_LRVector__args, // the arguments
  0, //arguments count
  Vector_methods_Vector_I_LRVector__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_Vector_I_LRVector__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_Vector_II_LRVector__arg_initcapac = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initcapac", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_Vector_II_LRVector__arg_capacInc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "capacInc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_Vector_II_LRVector__args[] = 
{
  &Vector_methods_Vector_II_LRVector__arg_initcapac,
  &Vector_methods_Vector_II_LRVector__arg_capacInc,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_Vector_II_LRVector__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_Vector_II_LRVector_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Vector", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Vector::clazzInfo(), // return type
  "_1_Vector", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_Vector_II_LRVector__args, // the arguments
  0, //arguments count
  Vector_methods_Vector_II_LRVector__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_Vector_II_LRVector__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_Vector_INLRCollection__LRVector__arg_col = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "col", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_Vector_INLRCollection__LRVector__args[] = 
{
  &Vector_methods_Vector_INLRCollection__LRVector__arg_col,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_Vector_INLRCollection__LRVector__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_Vector_INLRCollection__LRVector_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Vector", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Vector::clazzInfo(), // return type
  "_4_Vector", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_Vector_INLRCollection__LRVector__args, // the arguments
  0, //arguments count
  Vector_methods_Vector_INLRCollection__LRVector__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_Vector_INLRCollection__LRVector__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_addElement_INLRObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_addElement_INLRObject__V_args[] = 
{
  &Vector_methods_addElement_INLRObject__V_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_addElement_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_addElement_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_addElement", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_addElement_INLRObject__V_args, // the arguments
  0, //arguments count
  Vector_methods_addElement_INLRObject__V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_addElement_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_capacity__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_capacity__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_capacity__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "capacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_capacity", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_capacity__I_args, // the arguments
  0, //arguments count
  Vector_methods_capacity__I_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_capacity__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_copyInto_INLRObjectArray__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_copyInto_INLRObjectArray__V_args[] = 
{
  &Vector_methods_copyInto_INLRObjectArray__V_arg_array,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_copyInto_INLRObjectArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_copyInto_INLRObjectArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "copyInto", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_copyInto", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_copyInto_INLRObjectArray__V_args, // the arguments
  0, //arguments count
  Vector_methods_copyInto_INLRObjectArray__V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_copyInto_INLRObjectArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Vector_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_ensureCapacity_I_V_arg_minCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_ensureCapacity_I_V_args[] = 
{
  &Vector_methods_ensureCapacity_I_V_arg_minCapacity,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_ensureCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_ensureCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_ensureCapacity", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_ensureCapacity_I_V_args, // the arguments
  0, //arguments count
  Vector_methods_ensureCapacity_I_V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_ensureCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_firstElement__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_firstElement__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_firstElement__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "firstElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_8_firstElement", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_firstElement__LRObject__args, // the arguments
  0, //arguments count
  Vector_methods_firstElement__LRObject__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_firstElement__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_insertElementAt_INLRObject_I_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_insertElementAt_INLRObject_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_insertElementAt_INLRObject_I_V_args[] = 
{
  &Vector_methods_insertElementAt_INLRObject_I_V_arg_obj,
  &Vector_methods_insertElementAt_INLRObject_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_insertElementAt_INLRObject_I_V_exceptions[] =
{
  RArrayIndexOutOfBoundsException::clazzInfo(), 
  0
};

void Vector_insertElementAt_INLRObject_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ArrayIndexOutOfBoundsException) == true)
    THROW_INSTANCE( RArrayIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Vector_method_insertElementAt_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "insertElementAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_insertElementAt", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_insertElementAt_INLRObject_I_V_args, // the arguments
  0, //arguments count
  Vector_methods_insertElementAt_INLRObject_I_V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_insertElementAt_INLRObject_I_V_dispatch, // invoke this method
  Vector_insertElementAt_INLRObject_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_lastElement__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_lastElement__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_lastElement__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_9_lastElement", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_lastElement__LRObject__args, // the arguments
  0, //arguments count
  Vector_methods_lastElement__LRObject__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_lastElement__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_removeAllElements__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_removeAllElements__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_removeAllElements__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAllElements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_removeAllElements", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_removeAllElements__V_args, // the arguments
  0, //arguments count
  Vector_methods_removeAllElements__V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_removeAllElements__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_removeElement_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_removeElement_INLRObject__Z_args[] = 
{
  &Vector_methods_removeElement_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_removeElement_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_removeElement_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_removeElement", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_removeElement_INLRObject__Z_args, // the arguments
  0, //arguments count
  Vector_methods_removeElement_INLRObject__Z_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_removeElement_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_removeElementAt_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_removeElementAt_I_V_args[] = 
{
  &Vector_methods_removeElementAt_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_removeElementAt_I_V_exceptions[] =
{
  RArrayIndexOutOfBoundsException::clazzInfo(), 
  0
};

void Vector_removeElementAt_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ArrayIndexOutOfBoundsException) == true)
    THROW_INSTANCE( RArrayIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Vector_method_removeElementAt_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeElementAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_removeElementAt", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_removeElementAt_I_V_args, // the arguments
  0, //arguments count
  Vector_methods_removeElementAt_I_V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_removeElementAt_I_V_dispatch, // invoke this method
  Vector_removeElementAt_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_set_IINLRObject__LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_set_IINLRObject__LRObject__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_set_IINLRObject__LRObject__args[] = 
{
  &Vector_methods_set_IINLRObject__LRObject__arg_index,
  &Vector_methods_set_IINLRObject__LRObject__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_set_IINLRObject__LRObject__exceptions[] =
{
  RArrayIndexOutOfBoundsException::clazzInfo(), 
  0
};

void Vector_set_IINLRObject__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ArrayIndexOutOfBoundsException) == true)
    THROW_INSTANCE( RArrayIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Vector_method_set_IINLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_b_set", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_set_IINLRObject__LRObject__args, // the arguments
  0, //arguments count
  Vector_methods_set_IINLRObject__LRObject__exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_set_IINLRObject__LRObject__dispatch, // invoke this method
  Vector_set_IINLRObject__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_setElementAt_INLRObject_I_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_setElementAt_INLRObject_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_setElementAt_INLRObject_I_V_args[] = 
{
  &Vector_methods_setElementAt_INLRObject_I_V_arg_obj,
  &Vector_methods_setElementAt_INLRObject_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_setElementAt_INLRObject_I_V_exceptions[] =
{
  RArrayIndexOutOfBoundsException::clazzInfo(), 
  0
};

void Vector_setElementAt_INLRObject_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ArrayIndexOutOfBoundsException) == true)
    THROW_INSTANCE( RArrayIndexOutOfBoundsException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Vector_method_setElementAt_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setElementAt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setElementAt", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_setElementAt_INLRObject_I_V_args, // the arguments
  0, //arguments count
  Vector_methods_setElementAt_INLRObject_I_V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_setElementAt_INLRObject_I_V_dispatch, // invoke this method
  Vector_setElementAt_INLRObject_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Vector_methods_setSize_I_V_arg_newSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_setSize_I_V_args[] = 
{
  &Vector_methods_setSize_I_V_arg_newSize,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_setSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_setSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setSize", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_setSize_I_V_args, // the arguments
  0, //arguments count
  Vector_methods_setSize_I_V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_setSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Vector_methods_trimToSize__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Vector_methods_trimToSize__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Vector_method_trimToSize__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trimToSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_trimToSize", // alternative name of method
  -1, // altlabelHashCode
  Vector_methods_trimToSize__V_args, // the arguments
  0, //arguments count
  Vector_methods_trimToSize__V_exceptions, // the declared exceptions
  Vector_MetainfoWrapper::Vector_method_trimToSize__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Vector_methods[] = 
{
  &Vector_method_GetClass__L_acdk_lang_RClass_,
  &Vector_method_Vector__LRVector_,
  &Vector_method_Vector_I_LRVector_,
  &Vector_method_Vector_II_LRVector_,
  &Vector_method_Vector_INLRCollection__LRVector_,
  &Vector_method_addElement_INLRObject__V,
  &Vector_method_capacity__I,
  &Vector_method_copyInto_INLRObjectArray__V,
  &Vector_method_create_instance__LRObject_,
  &Vector_method_ensureCapacity_I_V,
  &Vector_method_firstElement__LRObject_,
  &Vector_method_insertElementAt_INLRObject_I_V,
  &Vector_method_lastElement__LRObject_,
  &Vector_method_removeAllElements__V,
  &Vector_method_removeElement_INLRObject__Z,
  &Vector_method_removeElementAt_I_V,
  &Vector_method_set_IINLRObject__LRObject_,
  &Vector_method_setElementAt_INLRObject_I_V,
  &Vector_method_setSize_I_V,
  &Vector_method_trimToSize__V,
  0
};


struct Vector_MetaInfoInitializer
{  Vector_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Vector::clazzInfo();
    ci->fields =  _Vector_fields;
    ci->methods =  _Vector_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Vector_MetaInfoInitializer Vector_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util

