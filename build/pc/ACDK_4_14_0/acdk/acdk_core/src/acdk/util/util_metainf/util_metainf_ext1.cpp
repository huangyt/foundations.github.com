// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../util.h"
#include "../AbstractCollection.h"
#include "../AbstractList.h"
#include "../AbstractListIterator.h"
#include "../AbstractListListIterator.h"
#include "../AbstractListSubList.h"
#include "../AbstractMap.h"
#include "../AbstractSequentialList.h"
#include "../AbstractSet.h"
#include "../acdk_util_classes.h"
#include "../ArrayIterator.h"
#include "../ArrayList.h"
#include "../Arrays.h"
#include "../BasicMapEntry.h"
#include "../BitSet.h"
#include "../Bucket.h"
#include "../Calendar.h"
#include "../Collection.h"
#include "../Collections.h"
#include "../Comparator.h"
#include "../ConcurrentModificationException.h"
#include "../Date.h"
#include "../Dictionary.h"
#include "../DoubleIterator.h"
#include "../EmptyCollectionIterator.h"
#include "../Enumeration.h"
#include "../EventListener.h"
#include "../EventListenerProxy.h"
#include "../EventObject.h"
#include "../GregorianCalendar.h"
#include "../HashMap.h"
#include "../HashSet.h"
#include "../Hashtable.h"
#include "../IdentityHashMap.h"
#include "../Iterator.h"
#include "../LinkedList.h"
#include "../List.h"
#include "../ListIterator.h"
#include "../ListResourceBundle.h"
#include "../Locale.h"
#include "../Map.h"
#include "../MissingResourceException.h"
#include "../NoSuchElementException.h"
#include "../Properties.h"
#include "../PropertiesListener.h"
#include "../PropertyResourceBundle.h"
#include "../Random.h"
#include "../ResourceBundle.h"
#include "../Set.h"
#include "../SimpleCalendar.h"
#include "../SimpleListResourceBundle.h"
#include "../SimpleTimeZone.h"
#include "../SingleObjectIterator.h"
#include "../SortedMap.h"
#include "../SortedSet.h"
#include "../StringTokenizer.h"
#include "../SynchronizedCollections.h"
#include "../SysDate.h"
#include "../TAbstractCollection.h"
#include "../TAbstractList.h"
#include "../TAbstractListIterator.h"
#include "../TAbstractListListIterator.h"
#include "../TAbstractListSubList.h"
#include "../TAbstractMap.h"
#include "../TAbstractSet.h"
#include "../TArrayList.h"
#include "../TBasicMapEntry.h"
#include "../TBucket.h"
#include "../TCollection.h"
#include "../TComparator.h"
#include "../TDoubleIterator.h"
#include "../THashMap.h"
#include "../THashSet.h"
#include "../TimeZone.h"
#include "../TIterator.h"
#include "../TList.h"
#include "../TListIterator.h"
#include "../TMap.h"
#include "../TreeMap.h"
#include "../TreeSet.h"
#include "../TSet.h"
#include "../TSortedMap.h"
#include "../TTreeMap.h"
#include "../util.h"
#include "../util_all.h"
#include "../Vector.h"
#include "../WeakHashMap.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Collection_create_array(int length)
{
  return new ObjectArrayImpl<RCollection>(length);
}

//static
::acdk::lang::RObject
Collection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Collection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Collection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_add_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_addAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
    This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_contains_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_containsAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->containsAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
    ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_remove_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_removeAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->removeAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_retainAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->retainAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
  ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_toArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
    ret = (::acdk::lang::RObject)This->toArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Collection_method_toArray_INLRObjectArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Collection* This = dmi_cast<Collection>(This_);
    ret = (::acdk::lang::RObject)This->toArray(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Collection_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Collection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_add_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_add_INLRObject__Z_args[] = 
{
  &Collection_methods_add_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_add_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_add_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_add", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_add_INLRObject__Z_args, // the arguments
  0, //arguments count
  Collection_methods_add_INLRObject__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_add_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_addAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_addAll_INLRCollection__Z_args[] = 
{
  &Collection_methods_addAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_addAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_addAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_addAll", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_addAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  Collection_methods_addAll_INLRCollection__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_addAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_clear", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_clear__V_args, // the arguments
  0, //arguments count
  Collection_methods_clear__V_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_contains_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_contains_INLRObject__Z_args[] = 
{
  &Collection_methods_contains_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_contains_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_contains_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_contains", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_contains_INLRObject__Z_args, // the arguments
  0, //arguments count
  Collection_methods_contains_INLRObject__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_contains_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_containsAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_containsAll_INLRCollection__Z_args[] = 
{
  &Collection_methods_containsAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_containsAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_containsAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_containsAll", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_containsAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  Collection_methods_containsAll_INLRCollection__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_containsAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_equals_INLRObject__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_equals_INLRObject__Z_args[] = 
{
  &Collection_methods_equals_INLRObject__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_equals", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Collection_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Collection_methods_hashCode__I_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  Collection_methods_isEmpty__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_7_iterator", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  Collection_methods_iterator__LRIterator__exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_remove_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_remove_INLRObject__Z_args[] = 
{
  &Collection_methods_remove_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_remove_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_remove_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_remove", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_remove_INLRObject__Z_args, // the arguments
  0, //arguments count
  Collection_methods_remove_INLRObject__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_remove_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_removeAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_removeAll_INLRCollection__Z_args[] = 
{
  &Collection_methods_removeAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_removeAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_removeAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_removeAll", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_removeAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  Collection_methods_removeAll_INLRCollection__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_removeAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_retainAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_retainAll_INLRCollection__Z_args[] = 
{
  &Collection_methods_retainAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_retainAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_retainAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "retainAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_retainAll", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_retainAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  Collection_methods_retainAll_INLRCollection__Z_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_retainAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_size", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_size__I_args, // the arguments
  0, //arguments count
  Collection_methods_size__I_exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_toArray__LRObjectArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_toArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_toArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_d_toArray", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_toArray__LRObjectArray__args, // the arguments
  0, //arguments count
  Collection_methods_toArray__LRObjectArray__exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_toArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Collection_methods_toArray_INLRObjectArray__LRObjectArray__arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Collection_methods_toArray_INLRObjectArray__LRObjectArray__args[] = 
{
  &Collection_methods_toArray_INLRObjectArray__LRObjectArray__arg_array,
  0
};

::acdk::lang::dmi::ClazzInfo* Collection_methods_toArray_INLRObjectArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Collection_method_toArray_INLRObjectArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_e_toArray", // alternative name of method
  -1, // altlabelHashCode
  Collection_methods_toArray_INLRObjectArray__LRObjectArray__args, // the arguments
  0, //arguments count
  Collection_methods_toArray_INLRObjectArray__LRObjectArray__exceptions, // the declared exceptions
  Collection_MetainfoWrapper::Collection_method_toArray_INLRObjectArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Collection_methods[] = 
{
  &Collection_method_GetClass__L_acdk_lang_RClass_,
  &Collection_method_add_INLRObject__Z,
  &Collection_method_addAll_INLRCollection__Z,
  &Collection_method_clear__V,
  &Collection_method_contains_INLRObject__Z,
  &Collection_method_containsAll_INLRCollection__Z,
  &Collection_method_equals_INLRObject__Z,
  &Collection_method_hashCode__I,
  &Collection_method_isEmpty__Z,
  &Collection_method_iterator__LRIterator_,
  &Collection_method_remove_INLRObject__Z,
  &Collection_method_removeAll_INLRCollection__Z,
  &Collection_method_retainAll_INLRCollection__Z,
  &Collection_method_size__I,
  &Collection_method_toArray__LRObjectArray_,
  &Collection_method_toArray_INLRObjectArray__LRObjectArray_,
  0
};


struct Collection_MetaInfoInitializer
{  Collection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Collection::clazzInfo();
    ci->fields =  _Collection_fields;
    ci->methods =  _Collection_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Collection_MetaInfoInitializer Collection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
IteratorEnumeration_create_array(int length)
{
  return new ObjectArrayImpl<RIteratorEnumeration>(length);
}

//static
::acdk::lang::RObject
IteratorEnumeration_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IteratorEnumeration_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IteratorEnumeration_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IteratorEnumeration::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IteratorEnumeration_method_IteratorEnumeration_INLRIterator__LRIteratorEnumeration__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IteratorEnumeration(::acdk::lang::dmi::castTo< RIterator>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IteratorEnumeration_method_hasMoreElements__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IteratorEnumeration* This = dmi_cast<IteratorEnumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->IteratorEnumeration::hasMoreElements();
    else
      ret = This->hasMoreElements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IteratorEnumeration_method_nextElement__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IteratorEnumeration* This = dmi_cast<IteratorEnumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IteratorEnumeration::nextElement();
    else
        ret = (::acdk::lang::RObject)This->nextElement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  IteratorEnumeration_fields__it_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    IteratorEnumeration* This = dmi_cast<IteratorEnumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_it, flags);
    else
      This->_it = ::acdk::lang::dmi::castTo< RIterator>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo IteratorEnumeration_fields__it = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_it", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(),
  IteratorEnumeration_MetainfoWrapper::IteratorEnumeration_fields__it_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _IteratorEnumeration_fields[] = 
{
  &IteratorEnumeration_fields__it,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IteratorEnumeration_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IteratorEnumeration_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IteratorEnumeration_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IteratorEnumeration_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IteratorEnumeration_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IteratorEnumeration_MetainfoWrapper::IteratorEnumeration_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IteratorEnumeration_methods_IteratorEnumeration_INLRIterator__LRIteratorEnumeration__arg_it = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "it", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IteratorEnumeration_methods_IteratorEnumeration_INLRIterator__LRIteratorEnumeration__args[] = 
{
  &IteratorEnumeration_methods_IteratorEnumeration_INLRIterator__LRIteratorEnumeration__arg_it,
  0
};

::acdk::lang::dmi::ClazzInfo* IteratorEnumeration_methods_IteratorEnumeration_INLRIterator__LRIteratorEnumeration__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IteratorEnumeration_method_IteratorEnumeration_INLRIterator__LRIteratorEnumeration_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IteratorEnumeration", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IteratorEnumeration::clazzInfo(), // return type
  "_0_IteratorEnumeration", // alternative name of method
  -1, // altlabelHashCode
  IteratorEnumeration_methods_IteratorEnumeration_INLRIterator__LRIteratorEnumeration__args, // the arguments
  0, //arguments count
  IteratorEnumeration_methods_IteratorEnumeration_INLRIterator__LRIteratorEnumeration__exceptions, // the declared exceptions
  IteratorEnumeration_MetainfoWrapper::IteratorEnumeration_method_IteratorEnumeration_INLRIterator__LRIteratorEnumeration__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IteratorEnumeration_methods_hasMoreElements__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IteratorEnumeration_methods_hasMoreElements__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IteratorEnumeration_method_hasMoreElements__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasMoreElements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasMoreElements", // alternative name of method
  -1, // altlabelHashCode
  IteratorEnumeration_methods_hasMoreElements__Z_args, // the arguments
  0, //arguments count
  IteratorEnumeration_methods_hasMoreElements__Z_exceptions, // the declared exceptions
  IteratorEnumeration_MetainfoWrapper::IteratorEnumeration_method_hasMoreElements__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IteratorEnumeration_methods_nextElement__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IteratorEnumeration_methods_nextElement__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IteratorEnumeration_method_nextElement__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_nextElement", // alternative name of method
  -1, // altlabelHashCode
  IteratorEnumeration_methods_nextElement__LRObject__args, // the arguments
  0, //arguments count
  IteratorEnumeration_methods_nextElement__LRObject__exceptions, // the declared exceptions
  IteratorEnumeration_MetainfoWrapper::IteratorEnumeration_method_nextElement__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IteratorEnumeration_methods[] = 
{
  &IteratorEnumeration_method_GetClass__L_acdk_lang_RClass_,
  &IteratorEnumeration_method_IteratorEnumeration_INLRIterator__LRIteratorEnumeration_,
  &IteratorEnumeration_method_hasMoreElements__Z,
  &IteratorEnumeration_method_nextElement__LRObject_,
  0
};


struct IteratorEnumeration_MetaInfoInitializer
{  IteratorEnumeration_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IteratorEnumeration::clazzInfo();
    ci->fields =  _IteratorEnumeration_fields;
    ci->methods =  _IteratorEnumeration_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IteratorEnumeration_MetaInfoInitializer IteratorEnumeration_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Comparator_create_array(int length)
{
  return new ObjectArrayImpl<RComparator>(length);
}

//static
::acdk::lang::RObject
Comparator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Comparator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Comparator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Comparator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Comparator_method_compare_INLRObject_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Comparator* This = dmi_cast<Comparator>(This_);
  ret = This->compare(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Comparator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Comparator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Comparator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Comparator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Comparator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Comparator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Comparator_MetainfoWrapper::Comparator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Comparator_methods_compare_INLRObject_INLRObject__I_arg_o1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Comparator_methods_compare_INLRObject_INLRObject__I_arg_o2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Comparator_methods_compare_INLRObject_INLRObject__I_args[] = 
{
  &Comparator_methods_compare_INLRObject_INLRObject__I_arg_o1,
  &Comparator_methods_compare_INLRObject_INLRObject__I_arg_o2,
  0
};

::acdk::lang::dmi::ClazzInfo* Comparator_methods_compare_INLRObject_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Comparator_method_compare_INLRObject_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compare", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_compare", // alternative name of method
  -1, // altlabelHashCode
  Comparator_methods_compare_INLRObject_INLRObject__I_args, // the arguments
  0, //arguments count
  Comparator_methods_compare_INLRObject_INLRObject__I_exceptions, // the declared exceptions
  Comparator_MetainfoWrapper::Comparator_method_compare_INLRObject_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Comparator_methods[] = 
{
  &Comparator_method_GetClass__L_acdk_lang_RClass_,
  &Comparator_method_compare_INLRObject_INLRObject__I,
  0
};


struct Comparator_MetaInfoInitializer
{  Comparator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Comparator::clazzInfo();
    ci->fields =  _Comparator_fields;
    ci->methods =  _Comparator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Comparator_MetaInfoInitializer Comparator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ConcurrentModificationException_create_array(int length)
{
  return new ObjectArrayImpl<RConcurrentModificationException>(length);
}

//static
::acdk::lang::RObject
ConcurrentModificationException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ConcurrentModificationException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConcurrentModificationException_method_ConcurrentModificationException__LRConcurrentModificationException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConcurrentModificationException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConcurrentModificationException_method_ConcurrentModificationException_INLRString__LRConcurrentModificationException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConcurrentModificationException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConcurrentModificationException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ConcurrentModificationException::GetClass();
    return methinf;
  }
};


void ThrowException_ConcurrentModificationException(IN(::acdk::lang::RThrowable) ex)
{
  throw RConcurrentModificationException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ConcurrentModificationException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConcurrentModificationException_methods_ConcurrentModificationException__LRConcurrentModificationException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConcurrentModificationException_methods_ConcurrentModificationException__LRConcurrentModificationException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConcurrentModificationException_method_ConcurrentModificationException__LRConcurrentModificationException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConcurrentModificationException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConcurrentModificationException::clazzInfo(), // return type
  "_0_ConcurrentModificationException", // alternative name of method
  -1, // altlabelHashCode
  ConcurrentModificationException_methods_ConcurrentModificationException__LRConcurrentModificationException__args, // the arguments
  0, //arguments count
  ConcurrentModificationException_methods_ConcurrentModificationException__LRConcurrentModificationException__exceptions, // the declared exceptions
  ConcurrentModificationException_MetainfoWrapper::ConcurrentModificationException_method_ConcurrentModificationException__LRConcurrentModificationException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConcurrentModificationException_methods_ConcurrentModificationException_INLRString__LRConcurrentModificationException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConcurrentModificationException_methods_ConcurrentModificationException_INLRString__LRConcurrentModificationException__args[] = 
{
  &ConcurrentModificationException_methods_ConcurrentModificationException_INLRString__LRConcurrentModificationException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* ConcurrentModificationException_methods_ConcurrentModificationException_INLRString__LRConcurrentModificationException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConcurrentModificationException_method_ConcurrentModificationException_INLRString__LRConcurrentModificationException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConcurrentModificationException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConcurrentModificationException::clazzInfo(), // return type
  "_1_ConcurrentModificationException", // alternative name of method
  -1, // altlabelHashCode
  ConcurrentModificationException_methods_ConcurrentModificationException_INLRString__LRConcurrentModificationException__args, // the arguments
  0, //arguments count
  ConcurrentModificationException_methods_ConcurrentModificationException_INLRString__LRConcurrentModificationException__exceptions, // the declared exceptions
  ConcurrentModificationException_MetainfoWrapper::ConcurrentModificationException_method_ConcurrentModificationException_INLRString__LRConcurrentModificationException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConcurrentModificationException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConcurrentModificationException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConcurrentModificationException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ConcurrentModificationException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ConcurrentModificationException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ConcurrentModificationException_MetainfoWrapper::ConcurrentModificationException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ConcurrentModificationException_methods[] = 
{
  &ConcurrentModificationException_method_ConcurrentModificationException__LRConcurrentModificationException_,
  &ConcurrentModificationException_method_ConcurrentModificationException_INLRString__LRConcurrentModificationException_,
  &ConcurrentModificationException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ConcurrentModificationException_MetaInfoInitializer
{  ConcurrentModificationException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ConcurrentModificationException::clazzInfo();
    ci->fields =  _ConcurrentModificationException_fields;
    ci->methods =  _ConcurrentModificationException_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ConcurrentModificationException_MetaInfoInitializer ConcurrentModificationException_MetaInfoInitializer_staticinstance__;


struct ConcurrentModificationException_clazzInfo_ClazzAttributesResInitializer1
{
  ConcurrentModificationException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ConcurrentModificationException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ConcurrentModificationException));
  }
};

ConcurrentModificationException_clazzInfo_ClazzAttributesResInitializer1 ConcurrentModificationException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
Date_create_array(int length)
{
  return new ObjectArrayImpl<RDate>(length);
}

//static
::acdk::lang::RObject
Date_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Date_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_Date_II_LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Date(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_Date_III_LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Date(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_Date_IIIII_LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Date(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_Date_IIIIII_LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Date(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_Date_J_LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Date(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_Date_INLRString__LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Date(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_Date__LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Date();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Date::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_after_INLRDate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Date::after(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    else
      ret = This->after(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_before_INLRDate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Date::before(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    else
      ret = This->before(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_compareTo_INLRDate__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Date::compareTo(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Date::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_getSecs__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Date::getSecs();
    else
      ret = This->getSecs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_getTickCount__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = Date::getTickCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_getTime__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Date::getTime();
    else
      ret = This->getTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_getTimeStamp__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Date::getTimeStamp();
    else
        ret = (::acdk::lang::RObject)This->getTimeStamp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_getUSecs__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Date::getUSecs();
    else
      ret = This->getUSecs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Date_method_getYear__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Date::getYear();
    else
      ret = This->getYear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Date_fields__date_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Date* This = dmi_cast<Date>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_date, flags);
    else
      This->_date = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Date_fields__date = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_date", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  Date_MetainfoWrapper::Date_fields__date_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Date_fields[] = 
{
  &Date_fields__date,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_II_LRDate__arg_sec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_II_LRDate__arg_usec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "usec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_Date_II_LRDate__args[] = 
{
  &Date_methods_Date_II_LRDate__arg_sec,
  &Date_methods_Date_II_LRDate__arg_usec,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_Date_II_LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_Date_II_LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Date", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Date::clazzInfo(), // return type
  "_4_Date", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_Date_II_LRDate__args, // the arguments
  0, //arguments count
  Date_methods_Date_II_LRDate__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_Date_II_LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_III_LRDate__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_III_LRDate__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_III_LRDate__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_Date_III_LRDate__args[] = 
{
  &Date_methods_Date_III_LRDate__arg_year,
  &Date_methods_Date_III_LRDate__arg_month,
  &Date_methods_Date_III_LRDate__arg_day,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_Date_III_LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_Date_III_LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Date", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Date::clazzInfo(), // return type
  "_5_Date", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_Date_III_LRDate__args, // the arguments
  0, //arguments count
  Date_methods_Date_III_LRDate__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_Date_III_LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIII_LRDate__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIII_LRDate__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIII_LRDate__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIII_LRDate__arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIII_LRDate__arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_Date_IIIII_LRDate__args[] = 
{
  &Date_methods_Date_IIIII_LRDate__arg_year,
  &Date_methods_Date_IIIII_LRDate__arg_month,
  &Date_methods_Date_IIIII_LRDate__arg_day,
  &Date_methods_Date_IIIII_LRDate__arg_hour,
  &Date_methods_Date_IIIII_LRDate__arg_min,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_Date_IIIII_LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_Date_IIIII_LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Date", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Date::clazzInfo(), // return type
  "_6_Date", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_Date_IIIII_LRDate__args, // the arguments
  0, //arguments count
  Date_methods_Date_IIIII_LRDate__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_Date_IIIII_LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIIII_LRDate__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIIII_LRDate__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIIII_LRDate__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIIII_LRDate__arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIIII_LRDate__arg_min = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "min", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_IIIIII_LRDate__arg_sec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_Date_IIIIII_LRDate__args[] = 
{
  &Date_methods_Date_IIIIII_LRDate__arg_year,
  &Date_methods_Date_IIIIII_LRDate__arg_month,
  &Date_methods_Date_IIIIII_LRDate__arg_day,
  &Date_methods_Date_IIIIII_LRDate__arg_hour,
  &Date_methods_Date_IIIIII_LRDate__arg_min,
  &Date_methods_Date_IIIIII_LRDate__arg_sec,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_Date_IIIIII_LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_Date_IIIIII_LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Date", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Date::clazzInfo(), // return type
  "_7_Date", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_Date_IIIIII_LRDate__args, // the arguments
  0, //arguments count
  Date_methods_Date_IIIIII_LRDate__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_Date_IIIIII_LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_J_LRDate__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_Date_J_LRDate__args[] = 
{
  &Date_methods_Date_J_LRDate__arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_Date_J_LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_Date_J_LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Date", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Date::clazzInfo(), // return type
  "_2_Date", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_Date_J_LRDate__args, // the arguments
  0, //arguments count
  Date_methods_Date_J_LRDate__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_Date_J_LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_Date_INLRString__LRDate__arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_Date_INLRString__LRDate__args[] = 
{
  &Date_methods_Date_INLRString__LRDate__arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_Date_INLRString__LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_Date_INLRString__LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Date", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Date::clazzInfo(), // return type
  "_3_Date", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_Date_INLRString__LRDate__args, // the arguments
  0, //arguments count
  Date_methods_Date_INLRString__LRDate__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_Date_INLRString__LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_Date__LRDate__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_Date__LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_Date__LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Date", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Date::clazzInfo(), // return type
  "_1_Date", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_Date__LRDate__args, // the arguments
  0, //arguments count
  Date_methods_Date__LRDate__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_Date__LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_h_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Date_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_after_INLRDate__Z_arg_when = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "when", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_after_INLRDate__Z_args[] = 
{
  &Date_methods_after_INLRDate__Z_arg_when,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_after_INLRDate__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_after_INLRDate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "after", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_after", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_after_INLRDate__Z_args, // the arguments
  0, //arguments count
  Date_methods_after_INLRDate__Z_exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_after_INLRDate__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_before_INLRDate__Z_arg_when = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "when", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_before_INLRDate__Z_args[] = 
{
  &Date_methods_before_INLRDate__Z_arg_when,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_before_INLRDate__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_before_INLRDate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "before", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_before", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_before_INLRDate__Z_args, // the arguments
  0, //arguments count
  Date_methods_before_INLRDate__Z_exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_before_INLRDate__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Date_methods_compareTo_INLRDate__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_compareTo_INLRDate__I_args[] = 
{
  &Date_methods_compareTo_INLRDate__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_compareTo_INLRDate__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_compareTo_INLRDate__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_compareTo_INLRDate__I_args, // the arguments
  0, //arguments count
  Date_methods_compareTo_INLRDate__I_exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_compareTo_INLRDate__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Date_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_getSecs__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_getSecs__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_getSecs__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSecs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_f_getSecs", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_getSecs__I_args, // the arguments
  0, //arguments count
  Date_methods_getSecs__I_exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_getSecs__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_getTickCount__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_getTickCount__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_getTickCount__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTickCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_c_getTickCount", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_getTickCount__J_args, // the arguments
  0, //arguments count
  Date_methods_getTickCount__J_exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_getTickCount__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_getTime__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_getTime__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_getTime__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_b_getTime", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_getTime__J_args, // the arguments
  0, //arguments count
  Date_methods_getTime__J_exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_getTime__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_getTimeStamp__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_getTimeStamp__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_getTimeStamp__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeStamp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getTimeStamp", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_getTimeStamp__LRString__args, // the arguments
  0, //arguments count
  Date_methods_getTimeStamp__LRString__exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_getTimeStamp__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_getUSecs__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_getUSecs__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_getUSecs__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUSecs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getUSecs", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_getUSecs__I_args, // the arguments
  0, //arguments count
  Date_methods_getUSecs__I_exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_getUSecs__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Date_methods_getYear__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Date_methods_getYear__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Date_method_getYear__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getYear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_g_getYear", // alternative name of method
  -1, // altlabelHashCode
  Date_methods_getYear__I_args, // the arguments
  0, //arguments count
  Date_methods_getYear__I_exceptions, // the declared exceptions
  Date_MetainfoWrapper::Date_method_getYear__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Date_methods[] = 
{
  &Date_method_Date_II_LRDate_,
  &Date_method_Date_III_LRDate_,
  &Date_method_Date_IIIII_LRDate_,
  &Date_method_Date_IIIIII_LRDate_,
  &Date_method_Date_J_LRDate_,
  &Date_method_Date_INLRString__LRDate_,
  &Date_method_Date__LRDate_,
  &Date_method_GetClass__L_acdk_lang_RClass_,
  &Date_method_after_INLRDate__Z,
  &Date_method_before_INLRDate__Z,
  &Date_method_compareTo_INLRDate__I,
  &Date_method_create_instance__LRObject_,
  &Date_method_getSecs__I,
  &Date_method_getTickCount__J,
  &Date_method_getTime__J,
  &Date_method_getTimeStamp__LRString_,
  &Date_method_getUSecs__I,
  &Date_method_getYear__I,
  0
};


struct Date_MetaInfoInitializer
{  Date_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Date::clazzInfo();
    ci->fields =  _Date_fields;
    ci->methods =  _Date_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Date_MetaInfoInitializer Date_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
Dictionary_create_array(int length)
{
  return new ObjectArrayImpl<RDictionary>(length);
}

//static
::acdk::lang::RObject
Dictionary_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Dictionary_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dictionary_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Dictionary::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dictionary_method_elements__LREnumeration__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dictionary* This = dmi_cast<Dictionary>(This_);
    ret = (::acdk::lang::RObject)This->elements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dictionary_method_get_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dictionary* This = dmi_cast<Dictionary>(This_);
    ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dictionary_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dictionary* This = dmi_cast<Dictionary>(This_);
  ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dictionary_method_keys__LREnumeration__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dictionary* This = dmi_cast<Dictionary>(This_);
    ret = (::acdk::lang::RObject)This->keys();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dictionary_method_put_INLRObject_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dictionary* This = dmi_cast<Dictionary>(This_);
    ret = (::acdk::lang::RObject)This->put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dictionary_method_remove_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dictionary* This = dmi_cast<Dictionary>(This_);
    ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Dictionary_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Dictionary* This = dmi_cast<Dictionary>(This_);
  ret = This->size();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Dictionary_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_Dictionary__LRDictionary__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_Dictionary__LRDictionary__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_Dictionary__LRDictionary_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Dictionary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Dictionary::clazzInfo(), // return type
  "_0_Dictionary", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_Dictionary__LRDictionary__args, // the arguments
  0, //arguments count
  Dictionary_methods_Dictionary__LRDictionary__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Dictionary_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Dictionary_MetainfoWrapper::Dictionary_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_elements__LREnumeration__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_elements__LREnumeration__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_elements__LREnumeration_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "elements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumeration::clazzInfo(), // return type
  "_4_elements", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_elements__LREnumeration__args, // the arguments
  0, //arguments count
  Dictionary_methods_elements__LREnumeration__exceptions, // the declared exceptions
  Dictionary_MetainfoWrapper::Dictionary_method_elements__LREnumeration__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dictionary_methods_get_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_get_INLRObject__LRObject__args[] = 
{
  &Dictionary_methods_get_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_get_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_get_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_get", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_get_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Dictionary_methods_get_INLRObject__LRObject__exceptions, // the declared exceptions
  Dictionary_MetainfoWrapper::Dictionary_method_get_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  Dictionary_methods_isEmpty__Z_exceptions, // the declared exceptions
  Dictionary_MetainfoWrapper::Dictionary_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_keys__LREnumeration__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_keys__LREnumeration__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_keys__LREnumeration_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumeration::clazzInfo(), // return type
  "_3_keys", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_keys__LREnumeration__args, // the arguments
  0, //arguments count
  Dictionary_methods_keys__LREnumeration__exceptions, // the declared exceptions
  Dictionary_MetainfoWrapper::Dictionary_method_keys__LREnumeration__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dictionary_methods_put_INLRObject_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Dictionary_methods_put_INLRObject_INLRObject__LRObject__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_put_INLRObject_INLRObject__LRObject__args[] = 
{
  &Dictionary_methods_put_INLRObject_INLRObject__LRObject__arg_key,
  &Dictionary_methods_put_INLRObject_INLRObject__LRObject__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_put_INLRObject_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_put_INLRObject_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "put", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_put", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_put_INLRObject_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Dictionary_methods_put_INLRObject_INLRObject__LRObject__exceptions, // the declared exceptions
  Dictionary_MetainfoWrapper::Dictionary_method_put_INLRObject_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Dictionary_methods_remove_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_remove_INLRObject__LRObject__args[] = 
{
  &Dictionary_methods_remove_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_remove_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_remove_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_7_remove", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_remove_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Dictionary_methods_remove_INLRObject__LRObject__exceptions, // the declared exceptions
  Dictionary_MetainfoWrapper::Dictionary_method_remove_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Dictionary_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Dictionary_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_size", // alternative name of method
  -1, // altlabelHashCode
  Dictionary_methods_size__I_args, // the arguments
  0, //arguments count
  Dictionary_methods_size__I_exceptions, // the declared exceptions
  Dictionary_MetainfoWrapper::Dictionary_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Dictionary_methods[] = 
{
  &Dictionary_method_Dictionary__LRDictionary_,
  &Dictionary_method_GetClass__L_acdk_lang_RClass_,
  &Dictionary_method_elements__LREnumeration_,
  &Dictionary_method_get_INLRObject__LRObject_,
  &Dictionary_method_isEmpty__Z,
  &Dictionary_method_keys__LREnumeration_,
  &Dictionary_method_put_INLRObject_INLRObject__LRObject_,
  &Dictionary_method_remove_INLRObject__LRObject_,
  &Dictionary_method_size__I,
  0
};


struct Dictionary_MetaInfoInitializer
{  Dictionary_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Dictionary::clazzInfo();
    ci->fields =  _Dictionary_fields;
    ci->methods =  _Dictionary_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Dictionary_MetaInfoInitializer Dictionary_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace ::acdk::lang;

//static
::acdk::lang::RObject
DoubleIterator_create_array(int length)
{
  return new ObjectArrayImpl<RDoubleIterator>(length);
}

//static
::acdk::lang::RObject
DoubleIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DoubleIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DoubleIterator_method_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DoubleIterator(::acdk::lang::dmi::castTo< RIterator>(args[0], dc), ::acdk::lang::dmi::castTo< RIterator>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DoubleIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DoubleIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DoubleIterator_fields__checkinin1_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DoubleIterator* This = dmi_cast<DoubleIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_checkinin1, flags);
    else
      This->_checkinin1 = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DoubleIterator_fields__in1_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DoubleIterator* This = dmi_cast<DoubleIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in1, flags);
    else
      This->_in1 = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DoubleIterator_fields__it1_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DoubleIterator* This = dmi_cast<DoubleIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_it1, flags);
    else
      This->_it1 = ::acdk::lang::dmi::castTo< RIterator>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DoubleIterator_fields__it2_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DoubleIterator* This = dmi_cast<DoubleIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_it2, flags);
    else
      This->_it2 = ::acdk::lang::dmi::castTo< RIterator>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DoubleIterator_fields__checkinin1 = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_checkinin1", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DoubleIterator_MetainfoWrapper::DoubleIterator_fields__checkinin1_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DoubleIterator_fields__in1 = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_in1", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DoubleIterator_MetainfoWrapper::DoubleIterator_fields__in1_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DoubleIterator_fields__it1 = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_it1", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(),
  DoubleIterator_MetainfoWrapper::DoubleIterator_fields__it1_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DoubleIterator_fields__it2 = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_it2", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(),
  DoubleIterator_MetainfoWrapper::DoubleIterator_fields__it2_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DoubleIterator_fields[] = 
{
  &DoubleIterator_fields__checkinin1,
  &DoubleIterator_fields__in1,
  &DoubleIterator_fields__it1,
  &DoubleIterator_fields__it2,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DoubleIterator_methods_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__arg_it1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "it1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DoubleIterator_methods_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__arg_it2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "it2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DoubleIterator_methods_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__args[] = 
{
  &DoubleIterator_methods_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__arg_it1,
  &DoubleIterator_methods_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__arg_it2,
  0
};

::acdk::lang::dmi::ClazzInfo* DoubleIterator_methods_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DoubleIterator_method_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DoubleIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DoubleIterator::clazzInfo(), // return type
  "_0_DoubleIterator", // alternative name of method
  -1, // altlabelHashCode
  DoubleIterator_methods_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__args, // the arguments
  0, //arguments count
  DoubleIterator_methods_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__exceptions, // the declared exceptions
  DoubleIterator_MetainfoWrapper::DoubleIterator_method_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DoubleIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DoubleIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DoubleIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DoubleIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DoubleIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DoubleIterator_MetainfoWrapper::DoubleIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DoubleIterator_methods[] = 
{
  &DoubleIterator_method_DoubleIterator_INLRIterator_INLRIterator__LRDoubleIterator_,
  &DoubleIterator_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DoubleIterator_MetaInfoInitializer
{  DoubleIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DoubleIterator::clazzInfo();
    ci->fields =  _DoubleIterator_fields;
    ci->methods =  _DoubleIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DoubleIterator_MetaInfoInitializer DoubleIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
EmptyCollectionIterator_create_array(int length)
{
  return new ObjectArrayImpl<REmptyCollectionIterator>(length);
}

//static
::acdk::lang::RObject
EmptyCollectionIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EmptyCollectionIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EmptyCollectionIterator_method_EmptyCollectionIterator__LREmptyCollectionIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EmptyCollectionIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EmptyCollectionIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EmptyCollectionIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EmptyCollectionIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EmptyCollectionIterator* This = dmi_cast<EmptyCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EmptyCollectionIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EmptyCollectionIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EmptyCollectionIterator* This = dmi_cast<EmptyCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->EmptyCollectionIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EmptyCollectionIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EmptyCollectionIterator* This = dmi_cast<EmptyCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EmptyCollectionIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EmptyCollectionIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EmptyCollectionIterator* This = dmi_cast<EmptyCollectionIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->EmptyCollectionIterator::remove();
    else
        This->remove();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _EmptyCollectionIterator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* EmptyCollectionIterator_methods_EmptyCollectionIterator__LREmptyCollectionIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EmptyCollectionIterator_methods_EmptyCollectionIterator__LREmptyCollectionIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EmptyCollectionIterator_method_EmptyCollectionIterator__LREmptyCollectionIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "EmptyCollectionIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EmptyCollectionIterator::clazzInfo(), // return type
  "_0_EmptyCollectionIterator", // alternative name of method
  -1, // altlabelHashCode
  EmptyCollectionIterator_methods_EmptyCollectionIterator__LREmptyCollectionIterator__args, // the arguments
  0, //arguments count
  EmptyCollectionIterator_methods_EmptyCollectionIterator__LREmptyCollectionIterator__exceptions, // the declared exceptions
  EmptyCollectionIterator_MetainfoWrapper::EmptyCollectionIterator_method_EmptyCollectionIterator__LREmptyCollectionIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EmptyCollectionIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EmptyCollectionIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EmptyCollectionIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EmptyCollectionIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EmptyCollectionIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EmptyCollectionIterator_MetainfoWrapper::EmptyCollectionIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EmptyCollectionIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EmptyCollectionIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EmptyCollectionIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_element", // alternative name of method
  -1, // altlabelHashCode
  EmptyCollectionIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  EmptyCollectionIterator_methods_element__LRObject__exceptions, // the declared exceptions
  EmptyCollectionIterator_MetainfoWrapper::EmptyCollectionIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EmptyCollectionIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EmptyCollectionIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EmptyCollectionIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  EmptyCollectionIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  EmptyCollectionIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  EmptyCollectionIterator_MetainfoWrapper::EmptyCollectionIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EmptyCollectionIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EmptyCollectionIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EmptyCollectionIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_next", // alternative name of method
  -1, // altlabelHashCode
  EmptyCollectionIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  EmptyCollectionIterator_methods_next__LRObject__exceptions, // the declared exceptions
  EmptyCollectionIterator_MetainfoWrapper::EmptyCollectionIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EmptyCollectionIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EmptyCollectionIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EmptyCollectionIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  EmptyCollectionIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  EmptyCollectionIterator_methods_remove__V_exceptions, // the declared exceptions
  EmptyCollectionIterator_MetainfoWrapper::EmptyCollectionIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EmptyCollectionIterator_methods[] = 
{
  &EmptyCollectionIterator_method_EmptyCollectionIterator__LREmptyCollectionIterator_,
  &EmptyCollectionIterator_method_GetClass__L_acdk_lang_RClass_,
  &EmptyCollectionIterator_method_element__LRObject_,
  &EmptyCollectionIterator_method_hasNext__Z,
  &EmptyCollectionIterator_method_next__LRObject_,
  &EmptyCollectionIterator_method_remove__V,
  0
};


struct EmptyCollectionIterator_MetaInfoInitializer
{  EmptyCollectionIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EmptyCollectionIterator::clazzInfo();
    ci->fields =  _EmptyCollectionIterator_fields;
    ci->methods =  _EmptyCollectionIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EmptyCollectionIterator_MetaInfoInitializer EmptyCollectionIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Enumeration_create_array(int length)
{
  return new ObjectArrayImpl<REnumeration>(length);
}

//static
::acdk::lang::RObject
Enumeration_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Enumeration_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Enumeration::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_hasMoreElements__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
  ret = This->hasMoreElements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Enumeration::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Enumeration::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_nextElement__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    ret = (::acdk::lang::RObject)This->nextElement();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Enumeration_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Enumeration_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_hasMoreElements__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_hasMoreElements__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_hasMoreElements__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasMoreElements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_hasMoreElements", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_hasMoreElements__Z_args, // the arguments
  0, //arguments count
  Enumeration_methods_hasMoreElements__Z_exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_hasMoreElements__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  Enumeration_methods_hasNext__Z_exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_next", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_next__LRObject__args, // the arguments
  0, //arguments count
  Enumeration_methods_next__LRObject__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_nextElement__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_nextElement__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_nextElement__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_nextElement", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_nextElement__LRObject__args, // the arguments
  0, //arguments count
  Enumeration_methods_nextElement__LRObject__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_nextElement__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Enumeration_methods[] = 
{
  &Enumeration_method_GetClass__L_acdk_lang_RClass_,
  &Enumeration_method_hasMoreElements__Z,
  &Enumeration_method_hasNext__Z,
  &Enumeration_method_next__LRObject_,
  &Enumeration_method_nextElement__LRObject_,
  0
};


struct Enumeration_MetaInfoInitializer
{  Enumeration_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Enumeration::clazzInfo();
    ci->fields =  _Enumeration_fields;
    ci->methods =  _Enumeration_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Enumeration_MetaInfoInitializer Enumeration_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
EventListener_create_array(int length)
{
  return new ObjectArrayImpl<REventListener>(length);
}

//static
::acdk::lang::RObject
EventListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EventListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EventListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EventListener::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _EventListener_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* EventListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EventListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EventListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EventListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EventListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EventListener_MetainfoWrapper::EventListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EventListener_methods[] = 
{
  &EventListener_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct EventListener_MetaInfoInitializer
{  EventListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EventListener::clazzInfo();
    ci->fields =  _EventListener_fields;
    ci->methods =  _EventListener_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EventListener_MetaInfoInitializer EventListener_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
EventListenerProxy_create_array(int length)
{
  return new ObjectArrayImpl<REventListenerProxy>(length);
}

//static
::acdk::lang::RObject
EventListenerProxy_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EventListenerProxy_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EventListenerProxy_method_EventListenerProxy_INLREventListener__LREventListenerProxy__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EventListenerProxy(::acdk::lang::dmi::castTo< REventListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EventListenerProxy_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EventListenerProxy::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EventListenerProxy_method_getListener__LREventListener__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EventListenerProxy* This = dmi_cast<EventListenerProxy>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EventListenerProxy::getListener();
    else
        ret = (::acdk::lang::RObject)This->getListener();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  EventListenerProxy_fields__listener_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    EventListenerProxy* This = dmi_cast<EventListenerProxy>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_listener, flags);
    else
      This->_listener = ::acdk::lang::dmi::castTo< REventListener>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo EventListenerProxy_fields__listener = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_listener", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REventListener::clazzInfo(),
  EventListenerProxy_MetainfoWrapper::EventListenerProxy_fields__listener_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _EventListenerProxy_fields[] = 
{
  &EventListenerProxy_fields__listener,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo EventListenerProxy_methods_EventListenerProxy_INLREventListener__LREventListenerProxy__arg_listener = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listener", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REventListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EventListenerProxy_methods_EventListenerProxy_INLREventListener__LREventListenerProxy__args[] = 
{
  &EventListenerProxy_methods_EventListenerProxy_INLREventListener__LREventListenerProxy__arg_listener,
  0
};

::acdk::lang::dmi::ClazzInfo* EventListenerProxy_methods_EventListenerProxy_INLREventListener__LREventListenerProxy__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EventListenerProxy_method_EventListenerProxy_INLREventListener__LREventListenerProxy_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "EventListenerProxy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EventListenerProxy::clazzInfo(), // return type
  "_0_EventListenerProxy", // alternative name of method
  -1, // altlabelHashCode
  EventListenerProxy_methods_EventListenerProxy_INLREventListener__LREventListenerProxy__args, // the arguments
  0, //arguments count
  EventListenerProxy_methods_EventListenerProxy_INLREventListener__LREventListenerProxy__exceptions, // the declared exceptions
  EventListenerProxy_MetainfoWrapper::EventListenerProxy_method_EventListenerProxy_INLREventListener__LREventListenerProxy__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EventListenerProxy_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EventListenerProxy_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EventListenerProxy_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EventListenerProxy_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EventListenerProxy_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EventListenerProxy_MetainfoWrapper::EventListenerProxy_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EventListenerProxy_methods_getListener__LREventListener__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EventListenerProxy_methods_getListener__LREventListener__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EventListenerProxy_method_getListener__LREventListener_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REventListener::clazzInfo(), // return type
  "_1_getListener", // alternative name of method
  -1, // altlabelHashCode
  EventListenerProxy_methods_getListener__LREventListener__args, // the arguments
  0, //arguments count
  EventListenerProxy_methods_getListener__LREventListener__exceptions, // the declared exceptions
  EventListenerProxy_MetainfoWrapper::EventListenerProxy_method_getListener__LREventListener__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EventListenerProxy_methods[] = 
{
  &EventListenerProxy_method_EventListenerProxy_INLREventListener__LREventListenerProxy_,
  &EventListenerProxy_method_GetClass__L_acdk_lang_RClass_,
  &EventListenerProxy_method_getListener__LREventListener_,
  0
};


struct EventListenerProxy_MetaInfoInitializer
{  EventListenerProxy_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EventListenerProxy::clazzInfo();
    ci->fields =  _EventListenerProxy_fields;
    ci->methods =  _EventListenerProxy_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EventListenerProxy_MetaInfoInitializer EventListenerProxy_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
EventObject_create_array(int length)
{
  return new ObjectArrayImpl<REventObject>(length);
}

//static
::acdk::lang::RObject
EventObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EventObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EventObject_method_EventObject_INLRObject__LREventObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EventObject(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EventObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EventObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EventObject_method_getSource__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EventObject* This = dmi_cast<EventObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EventObject::getSource();
    else
        ret = (::acdk::lang::RObject)This->getSource();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EventObject_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EventObject* This = dmi_cast<EventObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EventObject::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  EventObject_fields__source_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    EventObject* This = dmi_cast<EventObject>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_source, flags);
    else
      This->_source = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo EventObject_fields__source = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_source", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  EventObject_MetainfoWrapper::EventObject_fields__source_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _EventObject_fields[] = 
{
  &EventObject_fields__source,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo EventObject_methods_EventObject_INLRObject__LREventObject__arg_source = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "source", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EventObject_methods_EventObject_INLRObject__LREventObject__args[] = 
{
  &EventObject_methods_EventObject_INLRObject__LREventObject__arg_source,
  0
};

::acdk::lang::dmi::ClazzInfo* EventObject_methods_EventObject_INLRObject__LREventObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EventObject_method_EventObject_INLRObject__LREventObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "EventObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EventObject::clazzInfo(), // return type
  "_0_EventObject", // alternative name of method
  -1, // altlabelHashCode
  EventObject_methods_EventObject_INLRObject__LREventObject__args, // the arguments
  0, //arguments count
  EventObject_methods_EventObject_INLRObject__LREventObject__exceptions, // the declared exceptions
  EventObject_MetainfoWrapper::EventObject_method_EventObject_INLRObject__LREventObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EventObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EventObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EventObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EventObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EventObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EventObject_MetainfoWrapper::EventObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EventObject_methods_getSource__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EventObject_methods_getSource__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EventObject_method_getSource__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_getSource", // alternative name of method
  -1, // altlabelHashCode
  EventObject_methods_getSource__LRObject__args, // the arguments
  0, //arguments count
  EventObject_methods_getSource__LRObject__exceptions, // the declared exceptions
  EventObject_MetainfoWrapper::EventObject_method_getSource__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EventObject_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EventObject_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EventObject_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_toString", // alternative name of method
  -1, // altlabelHashCode
  EventObject_methods_toString__LRString__args, // the arguments
  0, //arguments count
  EventObject_methods_toString__LRString__exceptions, // the declared exceptions
  EventObject_MetainfoWrapper::EventObject_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EventObject_methods[] = 
{
  &EventObject_method_EventObject_INLRObject__LREventObject_,
  &EventObject_method_GetClass__L_acdk_lang_RClass_,
  &EventObject_method_getSource__LRObject_,
  &EventObject_method_toString__LRString_,
  0
};


struct EventObject_MetaInfoInitializer
{  EventObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EventObject::clazzInfo();
    ci->fields =  _EventObject_fields;
    ci->methods =  _EventObject_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EventObject_MetaInfoInitializer EventObject_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
GregorianCalendar_create_array(int length)
{
  return new ObjectArrayImpl<RGregorianCalendar>(length);
}

//static
::acdk::lang::RObject
GregorianCalendar_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class GregorianCalendar_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)GregorianCalendar::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_GregorianCalendar__LRGregorianCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GregorianCalendar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_GregorianCalendar_INLRTimeZone__LRGregorianCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GregorianCalendar(::acdk::lang::dmi::castTo< RTimeZone>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_GregorianCalendar_INLRLocale__LRGregorianCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GregorianCalendar(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GregorianCalendar(::acdk::lang::dmi::castTo< RTimeZone>(args[0], dc), ::acdk::lang::dmi::castTo< RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_GregorianCalendar_III_LRGregorianCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GregorianCalendar(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_GregorianCalendar_IIIII_LRGregorianCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GregorianCalendar(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_GregorianCalendar_IIIIII_LRGregorianCalendar__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new GregorianCalendar(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_calculateDay_IZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GregorianCalendar::calculateDay(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->calculateDay(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_computeFields__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GregorianCalendar::computeFields();
    else
        This->computeFields();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_computeTime__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GregorianCalendar::computeTime();
    else
        This->computeTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_getGregorianChange_INLRDate__LRDate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->GregorianCalendar::getGregorianChange(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getGregorianChange(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_getLinearDay_IIZ_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->GregorianCalendar::getLinearDay(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
      ret = This->getLinearDay(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_getLinearTime_III_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->GregorianCalendar::getLinearTime(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->getLinearTime(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_getWeekDay_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->GregorianCalendar::getWeekDay(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getWeekDay(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_isLeapYear_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->GregorianCalendar::isLeapYear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->isLeapYear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  GregorianCalendar_method_setGregorianChange_INLRDate__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->GregorianCalendar::setGregorianChange(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    else
        This->setGregorianChange(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  GregorianCalendar_fields_AD_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(GregorianCalendar::AD, flags);
    else
      GregorianCalendar::AD = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  GregorianCalendar_fields_BC_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(GregorianCalendar::BC, flags);
    else
      GregorianCalendar::BC = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  GregorianCalendar_fields__gregorianCutover_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    GregorianCalendar* This = dmi_cast<GregorianCalendar>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_gregorianCutover, flags);
    else
      This->_gregorianCutover = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo GregorianCalendar_fields_AD = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "AD", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_fields_AD_accessor, // read/write access to this fields
  (void*)&GregorianCalendar::AD // address of field
};

::acdk::lang::dmi::ClazzFieldInfo GregorianCalendar_fields_BC = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "BC", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_fields_BC_accessor, // read/write access to this fields
  (void*)&GregorianCalendar::BC // address of field
};

::acdk::lang::dmi::ClazzFieldInfo GregorianCalendar_fields__gregorianCutover = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_gregorianCutover", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_fields__gregorianCutover_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _GregorianCalendar_fields[] = 
{
  &GregorianCalendar_fields_AD,
  &GregorianCalendar_fields_BC,
  &GregorianCalendar_fields__gregorianCutover,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_GregorianCalendar__LRGregorianCalendar__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_GregorianCalendar__LRGregorianCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_GregorianCalendar__LRGregorianCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GregorianCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GregorianCalendar::clazzInfo(), // return type
  "_0_GregorianCalendar", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_GregorianCalendar__LRGregorianCalendar__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_GregorianCalendar__LRGregorianCalendar__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_GregorianCalendar__LRGregorianCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_INLRTimeZone__LRGregorianCalendar__arg_zone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "zone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_GregorianCalendar_INLRTimeZone__LRGregorianCalendar__args[] = 
{
  &GregorianCalendar_methods_GregorianCalendar_INLRTimeZone__LRGregorianCalendar__arg_zone,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_GregorianCalendar_INLRTimeZone__LRGregorianCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_GregorianCalendar_INLRTimeZone__LRGregorianCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GregorianCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GregorianCalendar::clazzInfo(), // return type
  "_1_GregorianCalendar", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_GregorianCalendar_INLRTimeZone__LRGregorianCalendar__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_GregorianCalendar_INLRTimeZone__LRGregorianCalendar__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_GregorianCalendar_INLRTimeZone__LRGregorianCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_INLRLocale__LRGregorianCalendar__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_GregorianCalendar_INLRLocale__LRGregorianCalendar__args[] = 
{
  &GregorianCalendar_methods_GregorianCalendar_INLRLocale__LRGregorianCalendar__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_GregorianCalendar_INLRLocale__LRGregorianCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_GregorianCalendar_INLRLocale__LRGregorianCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GregorianCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GregorianCalendar::clazzInfo(), // return type
  "_2_GregorianCalendar", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_GregorianCalendar_INLRLocale__LRGregorianCalendar__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_GregorianCalendar_INLRLocale__LRGregorianCalendar__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_GregorianCalendar_INLRLocale__LRGregorianCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__arg_zone = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "zone", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTimeZone::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__args[] = 
{
  &GregorianCalendar_methods_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__arg_zone,
  &GregorianCalendar_methods_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GregorianCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GregorianCalendar::clazzInfo(), // return type
  "_3_GregorianCalendar", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__args[] = 
{
  &GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__arg_year,
  &GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__arg_month,
  &GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__arg_day,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_GregorianCalendar_III_LRGregorianCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GregorianCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GregorianCalendar::clazzInfo(), // return type
  "_4_GregorianCalendar", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_GregorianCalendar_III_LRGregorianCalendar__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_GregorianCalendar_III_LRGregorianCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_minute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__args[] = 
{
  &GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_year,
  &GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_month,
  &GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_day,
  &GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_hour,
  &GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__arg_minute,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_GregorianCalendar_IIIII_LRGregorianCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GregorianCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GregorianCalendar::clazzInfo(), // return type
  "_5_GregorianCalendar", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_GregorianCalendar_IIIII_LRGregorianCalendar__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_GregorianCalendar_IIIII_LRGregorianCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_hour = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hour", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_minute = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minute", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__args[] = 
{
  &GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_year,
  &GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_month,
  &GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_day,
  &GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_hour,
  &GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_minute,
  &GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__arg_second,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_GregorianCalendar_IIIIII_LRGregorianCalendar_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "GregorianCalendar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  GregorianCalendar::clazzInfo(), // return type
  "_6_GregorianCalendar", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_GregorianCalendar_IIIIII_LRGregorianCalendar__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_GregorianCalendar_IIIIII_LRGregorianCalendar__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_calculateDay_IZ_V_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_calculateDay_IZ_V_arg_gregorian = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "gregorian", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_calculateDay_IZ_V_args[] = 
{
  &GregorianCalendar_methods_calculateDay_IZ_V_arg_day,
  &GregorianCalendar_methods_calculateDay_IZ_V_arg_gregorian,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_calculateDay_IZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_calculateDay_IZ_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "calculateDay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_calculateDay", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_calculateDay_IZ_V_args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_calculateDay_IZ_V_exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_calculateDay_IZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_computeFields__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_computeFields__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_computeFields__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "computeFields", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_computeFields", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_computeFields__V_args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_computeFields__V_exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_computeFields__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_computeTime__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_computeTime__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_computeTime__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "computeTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_computeTime", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_computeTime__V_args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_computeTime__V_exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_computeTime__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getGregorianChange_INLRDate__LRDate__arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_getGregorianChange_INLRDate__LRDate__args[] = 
{
  &GregorianCalendar_methods_getGregorianChange_INLRDate__LRDate__arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_getGregorianChange_INLRDate__LRDate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_getGregorianChange_INLRDate__LRDate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGregorianChange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo(), // return type
  "_8_getGregorianChange", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_getGregorianChange_INLRDate__LRDate__args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_getGregorianChange_INLRDate__LRDate__exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_getGregorianChange_INLRDate__LRDate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getLinearDay_IIZ_I_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getLinearDay_IIZ_I_arg_dayOfYear = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dayOfYear", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getLinearDay_IIZ_I_arg_gregorian = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "gregorian", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_getLinearDay_IIZ_I_args[] = 
{
  &GregorianCalendar_methods_getLinearDay_IIZ_I_arg_year,
  &GregorianCalendar_methods_getLinearDay_IIZ_I_arg_dayOfYear,
  &GregorianCalendar_methods_getLinearDay_IIZ_I_arg_gregorian,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_getLinearDay_IIZ_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_getLinearDay_IIZ_I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLinearDay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getLinearDay", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_getLinearDay_IIZ_I_args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_getLinearDay_IIZ_I_exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_getLinearDay_IIZ_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getLinearTime_III_J_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getLinearTime_III_J_arg_dayOfYear = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dayOfYear", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getLinearTime_III_J_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_getLinearTime_III_J_args[] = 
{
  &GregorianCalendar_methods_getLinearTime_III_J_arg_year,
  &GregorianCalendar_methods_getLinearTime_III_J_arg_dayOfYear,
  &GregorianCalendar_methods_getLinearTime_III_J_arg_millis,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_getLinearTime_III_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_getLinearTime_III_J = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLinearTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_b_getLinearTime", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_getLinearTime_III_J_args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_getLinearTime_III_J_exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_getLinearTime_III_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getWeekDay_II_I_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_getWeekDay_II_I_arg_dayOfYear = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dayOfYear", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_getWeekDay_II_I_args[] = 
{
  &GregorianCalendar_methods_getWeekDay_II_I_arg_year,
  &GregorianCalendar_methods_getWeekDay_II_I_arg_dayOfYear,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_getWeekDay_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_getWeekDay_II_I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWeekDay", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getWeekDay", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_getWeekDay_II_I_args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_getWeekDay_II_I_exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_getWeekDay_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_isLeapYear_I_Z_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_isLeapYear_I_Z_args[] = 
{
  &GregorianCalendar_methods_isLeapYear_I_Z_arg_year,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_isLeapYear_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_isLeapYear_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isLeapYear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isLeapYear", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_isLeapYear_I_Z_args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_isLeapYear_I_Z_exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_isLeapYear_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo GregorianCalendar_methods_setGregorianChange_INLRDate__V_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* GregorianCalendar_methods_setGregorianChange_INLRDate__V_args[] = 
{
  &GregorianCalendar_methods_setGregorianChange_INLRDate__V_arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar_methods_setGregorianChange_INLRDate__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo GregorianCalendar_method_setGregorianChange_INLRDate__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setGregorianChange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setGregorianChange", // alternative name of method
  -1, // altlabelHashCode
  GregorianCalendar_methods_setGregorianChange_INLRDate__V_args, // the arguments
  0, //arguments count
  GregorianCalendar_methods_setGregorianChange_INLRDate__V_exceptions, // the declared exceptions
  GregorianCalendar_MetainfoWrapper::GregorianCalendar_method_setGregorianChange_INLRDate__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _GregorianCalendar_methods[] = 
{
  &GregorianCalendar_method_GetClass__L_acdk_lang_RClass_,
  &GregorianCalendar_method_GregorianCalendar__LRGregorianCalendar_,
  &GregorianCalendar_method_GregorianCalendar_INLRTimeZone__LRGregorianCalendar_,
  &GregorianCalendar_method_GregorianCalendar_INLRLocale__LRGregorianCalendar_,
  &GregorianCalendar_method_GregorianCalendar_INLRTimeZone_INLRLocale__LRGregorianCalendar_,
  &GregorianCalendar_method_GregorianCalendar_III_LRGregorianCalendar_,
  &GregorianCalendar_method_GregorianCalendar_IIIII_LRGregorianCalendar_,
  &GregorianCalendar_method_GregorianCalendar_IIIIII_LRGregorianCalendar_,
  &GregorianCalendar_method_calculateDay_IZ_V,
  &GregorianCalendar_method_computeFields__V,
  &GregorianCalendar_method_computeTime__V,
  &GregorianCalendar_method_getGregorianChange_INLRDate__LRDate_,
  &GregorianCalendar_method_getLinearDay_IIZ_I,
  &GregorianCalendar_method_getLinearTime_III_J,
  &GregorianCalendar_method_getWeekDay_II_I,
  &GregorianCalendar_method_isLeapYear_I_Z,
  &GregorianCalendar_method_setGregorianChange_INLRDate__V,
  0
};


struct GregorianCalendar_MetaInfoInitializer
{  GregorianCalendar_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = GregorianCalendar::clazzInfo();
    ci->fields =  _GregorianCalendar_fields;
    ci->methods =  _GregorianCalendar_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
GregorianCalendar_MetaInfoInitializer GregorianCalendar_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
HashMap_create_array(int length)
{
  return new ObjectArrayImpl<RHashMap>(length);
}

//static
::acdk::lang::RObject
HashMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HashMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_HashMap__LRHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_HashMap_I_LRHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashMap(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_HashMap_IF_LRHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashMap(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_HashMap_INLRMap__LRHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashMap(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method__containsEntry_INLRMapEntry__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HashMap::_containsEntry(::acdk::lang::dmi::castTo< RMapEntry>(args[0], dc));
    else
      ret = This->_containsEntry(::acdk::lang::dmi::castTo< RMapEntry>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method__get_INLRObject__LRMapEntry__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HashMap::_get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->_get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method__hash_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HashMap::_hash(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->_hash(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method__init_IF_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HashMap::_init(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    else
        This->_init(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method__put_INLRObject_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->HashMap::_put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->_put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method__rehash__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HashMap::_rehash();
    else
        This->_rehash();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_capacity__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HashMap::capacity();
    else
      ret = This->capacity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashMap::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_loadFactor__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->HashMap::loadFactor();
    else
      ret = This->loadFactor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMap_method_nilEntry__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashMap::nilEntry();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMap_fields__buckets_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buckets, flags);
    else
      This->_buckets = ::acdk::lang::dmi::castTo< RBucketArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMap_fields__capacity_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_capacity, flags);
    else
      This->_capacity = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMap_fields__loadFactor_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_loadFactor, flags);
    else
      This->_loadFactor = ::acdk::lang::dmi::castTo< float>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMap_fields__modCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_modCount, flags);
    else
      This->_modCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMap_fields__nilEntry_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(HashMap::_nilEntry, flags);
    else
      HashMap::_nilEntry = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMap_fields__size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_size, flags);
    else
      This->_size = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMap_fields__threshold_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMap* This = dmi_cast<HashMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_threshold, flags);
    else
      This->_threshold = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HashMap_fields__buckets = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buckets", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBucketArray::clazzInfo(),
  HashMap_MetainfoWrapper::HashMap_fields__buckets_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMap_fields__capacity = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_capacity", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMap_MetainfoWrapper::HashMap_fields__capacity_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMap_fields__loadFactor = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_loadFactor", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(),
  HashMap_MetainfoWrapper::HashMap_fields__loadFactor_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMap_fields__modCount = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_modCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMap_MetainfoWrapper::HashMap_fields__modCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMap_fields__nilEntry = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nilEntry", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  HashMap_MetainfoWrapper::HashMap_fields__nilEntry_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMap_fields__size = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMap_MetainfoWrapper::HashMap_fields__size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMap_fields__threshold = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_threshold", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMap_MetainfoWrapper::HashMap_fields__threshold_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HashMap_fields[] = 
{
  &HashMap_fields__buckets,
  &HashMap_fields__capacity,
  &HashMap_fields__loadFactor,
  &HashMap_fields__modCount,
  &HashMap_fields__nilEntry,
  &HashMap_fields__size,
  &HashMap_fields__threshold,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HashMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_HashMap__LRHashMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_HashMap__LRHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_HashMap__LRHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HashMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMap::clazzInfo(), // return type
  "_2_HashMap", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_HashMap__LRHashMap__args, // the arguments
  0, //arguments count
  HashMap_methods_HashMap__LRHashMap__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_HashMap__LRHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods_HashMap_I_LRHashMap__arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_HashMap_I_LRHashMap__args[] = 
{
  &HashMap_methods_HashMap_I_LRHashMap__arg_initialCapacity,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_HashMap_I_LRHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_HashMap_I_LRHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HashMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMap::clazzInfo(), // return type
  "_3_HashMap", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_HashMap_I_LRHashMap__args, // the arguments
  0, //arguments count
  HashMap_methods_HashMap_I_LRHashMap__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_HashMap_I_LRHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods_HashMap_IF_LRHashMap__arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods_HashMap_IF_LRHashMap__arg_initialLoadFactor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialLoadFactor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_HashMap_IF_LRHashMap__args[] = 
{
  &HashMap_methods_HashMap_IF_LRHashMap__arg_initialCapacity,
  &HashMap_methods_HashMap_IF_LRHashMap__arg_initialLoadFactor,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_HashMap_IF_LRHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_HashMap_IF_LRHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HashMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMap::clazzInfo(), // return type
  "_1_HashMap", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_HashMap_IF_LRHashMap__args, // the arguments
  0, //arguments count
  HashMap_methods_HashMap_IF_LRHashMap__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_HashMap_IF_LRHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods_HashMap_INLRMap__LRHashMap__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_HashMap_INLRMap__LRHashMap__args[] = 
{
  &HashMap_methods_HashMap_INLRMap__LRHashMap__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_HashMap_INLRMap__LRHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_HashMap_INLRMap__LRHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HashMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMap::clazzInfo(), // return type
  "_4_HashMap", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_HashMap_INLRMap__LRHashMap__args, // the arguments
  0, //arguments count
  HashMap_methods_HashMap_INLRMap__LRHashMap__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_HashMap_INLRMap__LRHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods__containsEntry_INLRMapEntry__Z_arg_entry = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "entry", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMapEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods__containsEntry_INLRMapEntry__Z_args[] = 
{
  &HashMap_methods__containsEntry_INLRMapEntry__Z_arg_entry,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods__containsEntry_INLRMapEntry__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method__containsEntry_INLRMapEntry__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_containsEntry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c__containsEntry", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods__containsEntry_INLRMapEntry__Z_args, // the arguments
  0, //arguments count
  HashMap_methods__containsEntry_INLRMapEntry__Z_exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method__containsEntry_INLRMapEntry__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods__get_INLRObject__LRMapEntry__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods__get_INLRObject__LRMapEntry__args[] = 
{
  &HashMap_methods__get_INLRObject__LRMapEntry__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods__get_INLRObject__LRMapEntry__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method__get_INLRObject__LRMapEntry_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMapEntry::clazzInfo(), // return type
  "_b__get", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods__get_INLRObject__LRMapEntry__args, // the arguments
  0, //arguments count
  HashMap_methods__get_INLRObject__LRMapEntry__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method__get_INLRObject__LRMapEntry__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods__hash_INLRObject__I_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods__hash_INLRObject__I_args[] = 
{
  &HashMap_methods__hash_INLRObject__I_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods__hash_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method__hash_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_hash", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8__hash", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods__hash_INLRObject__I_args, // the arguments
  0, //arguments count
  HashMap_methods__hash_INLRObject__I_exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method__hash_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods__init_IF_V_arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods__init_IF_V_arg_initialLoadFactor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "initialLoadFactor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods__init_IF_V_args[] = 
{
  &HashMap_methods__init_IF_V_arg_initialCapacity,
  &HashMap_methods__init_IF_V_arg_initialLoadFactor,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods__init_IF_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method__init_IF_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7__init", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods__init_IF_V_args, // the arguments
  0, //arguments count
  HashMap_methods__init_IF_V_exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method__init_IF_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods__put_INLRObject_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMap_methods__put_INLRObject_INLRObject__LRObject__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods__put_INLRObject_INLRObject__LRObject__args[] = 
{
  &HashMap_methods__put_INLRObject_INLRObject__LRObject__arg_key,
  &HashMap_methods__put_INLRObject_INLRObject__LRObject__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods__put_INLRObject_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method__put_INLRObject_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_put", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_9__put", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods__put_INLRObject_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  HashMap_methods__put_INLRObject_INLRObject__LRObject__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method__put_INLRObject_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods__rehash__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods__rehash__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method__rehash__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_rehash", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a__rehash", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods__rehash__V_args, // the arguments
  0, //arguments count
  HashMap_methods__rehash__V_exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method__rehash__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_capacity__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_capacity__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_capacity__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "capacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_capacity", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_capacity__I_args, // the arguments
  0, //arguments count
  HashMap_methods_capacity__I_exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_capacity__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  HashMap_methods_create_instance__LRObject__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_loadFactor__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_loadFactor__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_loadFactor__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFactor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_6_loadFactor", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_loadFactor__F_args, // the arguments
  0, //arguments count
  HashMap_methods_loadFactor__F_exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_loadFactor__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMap_methods_nilEntry__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap_methods_nilEntry__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMap_method_nilEntry__LRObject_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nilEntry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_d_nilEntry", // alternative name of method
  -1, // altlabelHashCode
  HashMap_methods_nilEntry__LRObject__args, // the arguments
  0, //arguments count
  HashMap_methods_nilEntry__LRObject__exceptions, // the declared exceptions
  HashMap_MetainfoWrapper::HashMap_method_nilEntry__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HashMap_methods[] = 
{
  &HashMap_method_GetClass__L_acdk_lang_RClass_,
  &HashMap_method_HashMap__LRHashMap_,
  &HashMap_method_HashMap_I_LRHashMap_,
  &HashMap_method_HashMap_IF_LRHashMap_,
  &HashMap_method_HashMap_INLRMap__LRHashMap_,
  &HashMap_method__containsEntry_INLRMapEntry__Z,
  &HashMap_method__get_INLRObject__LRMapEntry_,
  &HashMap_method__hash_INLRObject__I,
  &HashMap_method__init_IF_V,
  &HashMap_method__put_INLRObject_INLRObject__LRObject_,
  &HashMap_method__rehash__V,
  &HashMap_method_capacity__I,
  &HashMap_method_create_instance__LRObject_,
  &HashMap_method_loadFactor__F,
  &HashMap_method_nilEntry__LRObject_,
  0
};


struct HashMap_MetaInfoInitializer
{  HashMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HashMap::clazzInfo();
    ci->fields =  _HashMap_fields;
    ci->methods =  _HashMap_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HashMap_MetaInfoInitializer HashMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
HashMapKey_create_array(int length)
{
  return new ObjectArrayImpl<RHashMapKey>(length);
}

//static
::acdk::lang::RObject
HashMapKey_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HashMapKey_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapKey_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashMapKey::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapKey_method_HashMapKey_INLRObject_INLRObject__LRHashMapKey__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashMapKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _HashMapKey_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapKey_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapKey_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapKey_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HashMapKey_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HashMapKey_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HashMapKey_MetainfoWrapper::HashMapKey_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMapKey_methods_HashMapKey_INLRObject_INLRObject__LRHashMapKey__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMapKey_methods_HashMapKey_INLRObject_INLRObject__LRHashMapKey__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapKey_methods_HashMapKey_INLRObject_INLRObject__LRHashMapKey__args[] = 
{
  &HashMapKey_methods_HashMapKey_INLRObject_INLRObject__LRHashMapKey__arg_key,
  &HashMapKey_methods_HashMapKey_INLRObject_INLRObject__LRHashMapKey__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapKey_methods_HashMapKey_INLRObject_INLRObject__LRHashMapKey__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapKey_method_HashMapKey_INLRObject_INLRObject__LRHashMapKey_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HashMapKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMapKey::clazzInfo(), // return type
  "_0_HashMapKey", // alternative name of method
  -1, // altlabelHashCode
  HashMapKey_methods_HashMapKey_INLRObject_INLRObject__LRHashMapKey__args, // the arguments
  0, //arguments count
  HashMapKey_methods_HashMapKey_INLRObject_INLRObject__LRHashMapKey__exceptions, // the declared exceptions
  HashMapKey_MetainfoWrapper::HashMapKey_method_HashMapKey_INLRObject_INLRObject__LRHashMapKey__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HashMapKey_methods[] = 
{
  &HashMapKey_method_GetClass__L_acdk_lang_RClass_,
  &HashMapKey_method_HashMapKey_INLRObject_INLRObject__LRHashMapKey_,
  0
};


struct HashMapKey_MetaInfoInitializer
{  HashMapKey_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HashMapKey::clazzInfo();
    ci->fields =  _HashMapKey_fields;
    ci->methods =  _HashMapKey_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HashMapKey_MetaInfoInitializer HashMapKey_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
HashMapIterator_create_array(int length)
{
  return new ObjectArrayImpl<RHashMapIterator>(length);
}

//static
::acdk::lang::RObject
HashMapIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HashMapIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashMapIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapIterator_method_HashMapIterator_INLRHashMap_I_LRHashMapIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashMapIterator(::acdk::lang::dmi::castTo< RHashMap>(args[0], dc), (HashMapSetType)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapIterator_method__checkMod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashMapIterator* This = dmi_cast<HashMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HashMapIterator::_checkMod();
    else
        This->_checkMod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapIterator_fields__bucketIndex_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapIterator* This = dmi_cast<HashMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bucketIndex, flags);
    else
      This->_bucketIndex = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapIterator_fields__currentKey_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapIterator* This = dmi_cast<HashMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_currentKey, flags);
    else
      This->_currentKey = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapIterator_fields__currentNode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapIterator* This = dmi_cast<HashMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_currentNode, flags);
    else
      This->_currentNode = ::acdk::lang::dmi::castTo< RBucketNode>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapIterator_fields__hashMap_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapIterator* This = dmi_cast<HashMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_hashMap, flags);
    else
      This->_hashMap = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapIterator_fields__knownMods_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapIterator* This = dmi_cast<HashMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_knownMods, flags);
    else
      This->_knownMods = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapIterator_fields__position_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapIterator* This = dmi_cast<HashMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_position, flags);
    else
      This->_position = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapIterator_fields__type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapIterator* This = dmi_cast<HashMapIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_type), flags);
    else
      This->_type = (HashMapSetType)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HashMapIterator_fields__bucketIndex = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bucketIndex", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMapIterator_MetainfoWrapper::HashMapIterator_fields__bucketIndex_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMapIterator_fields__currentKey = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_currentKey", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  HashMapIterator_MetainfoWrapper::HashMapIterator_fields__currentKey_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMapIterator_fields__currentNode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_currentNode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RBucketNode::clazzInfo(),
  HashMapIterator_MetainfoWrapper::HashMapIterator_fields__currentNode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMapIterator_fields__hashMap = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_hashMap", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  HashMapIterator_MetainfoWrapper::HashMapIterator_fields__hashMap_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMapIterator_fields__knownMods = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_knownMods", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMapIterator_MetainfoWrapper::HashMapIterator_fields__knownMods_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMapIterator_fields__position = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_position", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMapIterator_MetainfoWrapper::HashMapIterator_fields__position_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMapIterator_fields__type = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMapIterator_MetainfoWrapper::HashMapIterator_fields__type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HashMapIterator_fields[] = 
{
  &HashMapIterator_fields__bucketIndex,
  &HashMapIterator_fields__currentKey,
  &HashMapIterator_fields__currentNode,
  &HashMapIterator_fields__hashMap,
  &HashMapIterator_fields__knownMods,
  &HashMapIterator_fields__position,
  &HashMapIterator_fields__type,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HashMapIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HashMapIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HashMapIterator_MetainfoWrapper::HashMapIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__arg_hashMap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "hashMap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__args[] = 
{
  &HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__arg_hashMap,
  &HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapIterator_method_HashMapIterator_INLRHashMap_I_LRHashMapIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HashMapIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMapIterator::clazzInfo(), // return type
  "_0_HashMapIterator", // alternative name of method
  -1, // altlabelHashCode
  HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__args, // the arguments
  0, //arguments count
  HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__exceptions, // the declared exceptions
  HashMapIterator_MetainfoWrapper::HashMapIterator_method_HashMapIterator_INLRHashMap_I_LRHashMapIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapIterator_methods__checkMod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapIterator_methods__checkMod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapIterator_method__checkMod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkMod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1__checkMod", // alternative name of method
  -1, // altlabelHashCode
  HashMapIterator_methods__checkMod__V_args, // the arguments
  0, //arguments count
  HashMapIterator_methods__checkMod__V_exceptions, // the declared exceptions
  HashMapIterator_MetainfoWrapper::HashMapIterator_method__checkMod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HashMapIterator_methods[] = 
{
  &HashMapIterator_method_GetClass__L_acdk_lang_RClass_,
  &HashMapIterator_method_HashMapIterator_INLRHashMap_I_LRHashMapIterator_,
  &HashMapIterator_method__checkMod__V,
  0
};


struct HashMapIterator_MetaInfoInitializer
{  HashMapIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HashMapIterator::clazzInfo();
    ci->fields =  _HashMapIterator_fields;
    ci->methods =  _HashMapIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HashMapIterator_MetaInfoInitializer HashMapIterator_MetaInfoInitializer_staticinstance__;


struct HashMapIterator_clazzInfo_ClazzAttributesResInitializer2
{
  HashMapIterator_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&HashMapIterator_methods_HashMapIterator_INLRHashMap_I_LRHashMapIterator__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)HashMapSetTypeMetaInf::GetEnumInfo()));
  }
};

HashMapIterator_clazzInfo_ClazzAttributesResInitializer2 HashMapIterator_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
HashMapSet_create_array(int length)
{
  return new ObjectArrayImpl<RHashMapSet>(length);
}

//static
::acdk::lang::RObject
HashMapSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HashMapSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashMapSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapSet_method_HashMapSet_INLRHashMap_I_LRHashMapSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashMapSet(::acdk::lang::dmi::castTo< RHashMap>(args[0], dc), (HashMapSetType)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapSet_fields__hashMap_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapSet* This = dmi_cast<HashMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_hashMap, flags);
    else
      This->_hashMap = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapSet_fields__setType_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapSet* This = dmi_cast<HashMapSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_setType), flags);
    else
      This->_setType = (HashMapSetType)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HashMapSet_fields__hashMap = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_hashMap", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  HashMapSet_MetainfoWrapper::HashMapSet_fields__hashMap_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo HashMapSet_fields__setType = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_setType", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  HashMapSet_MetainfoWrapper::HashMapSet_fields__setType_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HashMapSet_fields[] = 
{
  &HashMapSet_fields__hashMap,
  &HashMapSet_fields__setType,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HashMapSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HashMapSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HashMapSet_MetainfoWrapper::HashMapSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__arg_hashMap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "hashMap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__arg_type = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "type", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__args[] = 
{
  &HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__arg_hashMap,
  &HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__arg_type,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapSet_method_HashMapSet_INLRHashMap_I_LRHashMapSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HashMapSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMapSet::clazzInfo(), // return type
  "_0_HashMapSet", // alternative name of method
  -1, // altlabelHashCode
  HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__args, // the arguments
  0, //arguments count
  HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__exceptions, // the declared exceptions
  HashMapSet_MetainfoWrapper::HashMapSet_method_HashMapSet_INLRHashMap_I_LRHashMapSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HashMapSet_methods[] = 
{
  &HashMapSet_method_GetClass__L_acdk_lang_RClass_,
  &HashMapSet_method_HashMapSet_INLRHashMap_I_LRHashMapSet_,
  0
};


struct HashMapSet_MetaInfoInitializer
{  HashMapSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HashMapSet::clazzInfo();
    ci->fields =  _HashMapSet_fields;
    ci->methods =  _HashMapSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HashMapSet_MetaInfoInitializer HashMapSet_MetaInfoInitializer_staticinstance__;


struct HashMapSet_clazzInfo_ClazzAttributesResInitializer3
{
  HashMapSet_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&HashMapSet_methods_HashMapSet_INLRHashMap_I_LRHashMapSet__arg_type, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)HashMapSetTypeMetaInf::GetEnumInfo()));
  }
};

HashMapSet_clazzInfo_ClazzAttributesResInitializer3 HashMapSet_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
HashMapCollection_create_array(int length)
{
  return new ObjectArrayImpl<RHashMapCollection>(length);
}

//static
::acdk::lang::RObject
HashMapCollection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HashMapCollection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapCollection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashMapCollection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashMapCollection_method_HashMapCollection_INLRHashMap__LRHashMapCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashMapCollection(::acdk::lang::dmi::castTo< RHashMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashMapCollection_fields__hashMap_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashMapCollection* This = dmi_cast<HashMapCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_hashMap, flags);
    else
      This->_hashMap = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HashMapCollection_fields__hashMap = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_hashMap", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  HashMapCollection_MetainfoWrapper::HashMapCollection_fields__hashMap_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HashMapCollection_fields[] = 
{
  &HashMapCollection_fields__hashMap,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapCollection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapCollection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapCollection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HashMapCollection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HashMapCollection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HashMapCollection_MetainfoWrapper::HashMapCollection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashMapCollection_methods_HashMapCollection_INLRHashMap__LRHashMapCollection__arg_hashMap = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "hashMap", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashMapCollection_methods_HashMapCollection_INLRHashMap__LRHashMapCollection__args[] = 
{
  &HashMapCollection_methods_HashMapCollection_INLRHashMap__LRHashMapCollection__arg_hashMap,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapCollection_methods_HashMapCollection_INLRHashMap__LRHashMapCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashMapCollection_method_HashMapCollection_INLRHashMap__LRHashMapCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HashMapCollection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMapCollection::clazzInfo(), // return type
  "_0_HashMapCollection", // alternative name of method
  -1, // altlabelHashCode
  HashMapCollection_methods_HashMapCollection_INLRHashMap__LRHashMapCollection__args, // the arguments
  0, //arguments count
  HashMapCollection_methods_HashMapCollection_INLRHashMap__LRHashMapCollection__exceptions, // the declared exceptions
  HashMapCollection_MetainfoWrapper::HashMapCollection_method_HashMapCollection_INLRHashMap__LRHashMapCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HashMapCollection_methods[] = 
{
  &HashMapCollection_method_GetClass__L_acdk_lang_RClass_,
  &HashMapCollection_method_HashMapCollection_INLRHashMap__LRHashMapCollection_,
  0
};


struct HashMapCollection_MetaInfoInitializer
{  HashMapCollection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HashMapCollection::clazzInfo();
    ci->fields =  _HashMapCollection_fields;
    ci->methods =  _HashMapCollection_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HashMapCollection_MetaInfoInitializer HashMapCollection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
HashSet_create_array(int length)
{
  return new ObjectArrayImpl<RHashSet>(length);
}

//static
::acdk::lang::RObject
HashSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class HashSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashSet_method_HashSet__LRHashSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashSet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashSet_method_HashSet_I_LRHashSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashSet(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashSet_method_HashSet_IF_LRHashSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new HashSet(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashSet_method__add_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    HashSet* This = dmi_cast<HashSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->HashSet::_add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        This->_add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  HashSet_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)HashSet::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  HashSet_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    HashSet* This = dmi_cast<HashSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo HashSet_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  HashSet_MetainfoWrapper::HashSet_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _HashSet_fields[] = 
{
  &HashSet_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  HashSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  HashSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  HashSet_MetainfoWrapper::HashSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashSet_methods_HashSet__LRHashSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashSet_methods_HashSet__LRHashSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashSet_method_HashSet__LRHashSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HashSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashSet::clazzInfo(), // return type
  "_2_HashSet", // alternative name of method
  -1, // altlabelHashCode
  HashSet_methods_HashSet__LRHashSet__args, // the arguments
  0, //arguments count
  HashSet_methods_HashSet__LRHashSet__exceptions, // the declared exceptions
  HashSet_MetainfoWrapper::HashSet_method_HashSet__LRHashSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashSet_methods_HashSet_I_LRHashSet__arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashSet_methods_HashSet_I_LRHashSet__args[] = 
{
  &HashSet_methods_HashSet_I_LRHashSet__arg_initialCapacity,
  0
};

::acdk::lang::dmi::ClazzInfo* HashSet_methods_HashSet_I_LRHashSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashSet_method_HashSet_I_LRHashSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "HashSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashSet::clazzInfo(), // return type
  "_3_HashSet", // alternative name of method
  -1, // altlabelHashCode
  HashSet_methods_HashSet_I_LRHashSet__args, // the arguments
  0, //arguments count
  HashSet_methods_HashSet_I_LRHashSet__exceptions, // the declared exceptions
  HashSet_MetainfoWrapper::HashSet_method_HashSet_I_LRHashSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashSet_methods_HashSet_IF_LRHashSet__arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo HashSet_methods_HashSet_IF_LRHashSet__arg_initialLoadFactor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialLoadFactor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashSet_methods_HashSet_IF_LRHashSet__args[] = 
{
  &HashSet_methods_HashSet_IF_LRHashSet__arg_initialCapacity,
  &HashSet_methods_HashSet_IF_LRHashSet__arg_initialLoadFactor,
  0
};

::acdk::lang::dmi::ClazzInfo* HashSet_methods_HashSet_IF_LRHashSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashSet_method_HashSet_IF_LRHashSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "HashSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashSet::clazzInfo(), // return type
  "_1_HashSet", // alternative name of method
  -1, // altlabelHashCode
  HashSet_methods_HashSet_IF_LRHashSet__args, // the arguments
  0, //arguments count
  HashSet_methods_HashSet_IF_LRHashSet__exceptions, // the declared exceptions
  HashSet_MetainfoWrapper::HashSet_method_HashSet_IF_LRHashSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo HashSet_methods__add_INLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashSet_methods__add_INLRObject__V_args[] = 
{
  &HashSet_methods__add_INLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* HashSet_methods__add_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashSet_method__add_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4__add", // alternative name of method
  -1, // altlabelHashCode
  HashSet_methods__add_INLRObject__V_args, // the arguments
  0, //arguments count
  HashSet_methods__add_INLRObject__V_exceptions, // the declared exceptions
  HashSet_MetainfoWrapper::HashSet_method__add_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* HashSet_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* HashSet_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo HashSet_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  HashSet_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  HashSet_methods_create_instance__LRObject__exceptions, // the declared exceptions
  HashSet_MetainfoWrapper::HashSet_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _HashSet_methods[] = 
{
  &HashSet_method_GetClass__L_acdk_lang_RClass_,
  &HashSet_method_HashSet__LRHashSet_,
  &HashSet_method_HashSet_I_LRHashSet_,
  &HashSet_method_HashSet_IF_LRHashSet_,
  &HashSet_method__add_INLRObject__V,
  &HashSet_method_create_instance__LRObject_,
  0
};


struct HashSet_MetaInfoInitializer
{  HashSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = HashSet::clazzInfo();
    ci->fields =  _HashSet_fields;
    ci->methods =  _HashSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
HashSet_MetaInfoInitializer HashSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
Hashtable_create_array(int length)
{
  return new ObjectArrayImpl<RHashtable>(length);
}

//static
::acdk::lang::RObject
Hashtable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Hashtable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Hashtable::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_Hashtable__LRHashtable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Hashtable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_Hashtable_IF_LRHashtable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Hashtable(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_Hashtable_I_LRHashtable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Hashtable(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_Hashtable_INLRMap__LRHashtable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Hashtable(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_capacity__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Hashtable* This = dmi_cast<Hashtable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Hashtable::capacity();
    else
      ret = This->capacity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_elements__LREnumeration__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Hashtable* This = dmi_cast<Hashtable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Hashtable::elements();
    else
        ret = (::acdk::lang::RObject)This->elements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_keys__LREnumeration__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Hashtable* This = dmi_cast<Hashtable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Hashtable::keys();
    else
        ret = (::acdk::lang::RObject)This->keys();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Hashtable_method_loadFactor__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Hashtable* This = dmi_cast<Hashtable>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Hashtable::loadFactor();
    else
      ret = This->loadFactor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Hashtable_fields__table_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Hashtable* This = dmi_cast<Hashtable>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_table, flags);
    else
      This->_table = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Hashtable_fields__table = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_table", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  Hashtable_MetainfoWrapper::Hashtable_fields__table_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Hashtable_fields[] = 
{
  &Hashtable_fields__table,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Hashtable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_Hashtable__LRHashtable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_Hashtable__LRHashtable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_Hashtable__LRHashtable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Hashtable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Hashtable::clazzInfo(), // return type
  "_0_Hashtable", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_Hashtable__LRHashtable__args, // the arguments
  0, //arguments count
  Hashtable_methods_Hashtable__LRHashtable__exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_Hashtable__LRHashtable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Hashtable_methods_Hashtable_IF_LRHashtable__arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Hashtable_methods_Hashtable_IF_LRHashtable__arg_loadFactor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "loadFactor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_Hashtable_IF_LRHashtable__args[] = 
{
  &Hashtable_methods_Hashtable_IF_LRHashtable__arg_initialCapacity,
  &Hashtable_methods_Hashtable_IF_LRHashtable__arg_loadFactor,
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_Hashtable_IF_LRHashtable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_Hashtable_IF_LRHashtable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Hashtable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Hashtable::clazzInfo(), // return type
  "_1_Hashtable", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_Hashtable_IF_LRHashtable__args, // the arguments
  0, //arguments count
  Hashtable_methods_Hashtable_IF_LRHashtable__exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_Hashtable_IF_LRHashtable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Hashtable_methods_Hashtable_I_LRHashtable__arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_Hashtable_I_LRHashtable__args[] = 
{
  &Hashtable_methods_Hashtable_I_LRHashtable__arg_initialCapacity,
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_Hashtable_I_LRHashtable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_Hashtable_I_LRHashtable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Hashtable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Hashtable::clazzInfo(), // return type
  "_2_Hashtable", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_Hashtable_I_LRHashtable__args, // the arguments
  0, //arguments count
  Hashtable_methods_Hashtable_I_LRHashtable__exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_Hashtable_I_LRHashtable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Hashtable_methods_Hashtable_INLRMap__LRHashtable__arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_Hashtable_INLRMap__LRHashtable__args[] = 
{
  &Hashtable_methods_Hashtable_INLRMap__LRHashtable__arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_Hashtable_INLRMap__LRHashtable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_Hashtable_INLRMap__LRHashtable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Hashtable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Hashtable::clazzInfo(), // return type
  "_3_Hashtable", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_Hashtable_INLRMap__LRHashtable__args, // the arguments
  0, //arguments count
  Hashtable_methods_Hashtable_INLRMap__LRHashtable__exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_Hashtable_INLRMap__LRHashtable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_capacity__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_capacity__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_capacity__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "capacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_capacity", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_capacity__I_args, // the arguments
  0, //arguments count
  Hashtable_methods_capacity__I_exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_capacity__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_elements__LREnumeration__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_elements__LREnumeration__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_elements__LREnumeration_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "elements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumeration::clazzInfo(), // return type
  "_7_elements", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_elements__LREnumeration__args, // the arguments
  0, //arguments count
  Hashtable_methods_elements__LREnumeration__exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_elements__LREnumeration__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_keys__LREnumeration__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_keys__LREnumeration__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_keys__LREnumeration_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumeration::clazzInfo(), // return type
  "_6_keys", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_keys__LREnumeration__args, // the arguments
  0, //arguments count
  Hashtable_methods_keys__LREnumeration__exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_keys__LREnumeration__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Hashtable_methods_loadFactor__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable_methods_loadFactor__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Hashtable_method_loadFactor__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadFactor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_5_loadFactor", // alternative name of method
  -1, // altlabelHashCode
  Hashtable_methods_loadFactor__F_args, // the arguments
  0, //arguments count
  Hashtable_methods_loadFactor__F_exceptions, // the declared exceptions
  Hashtable_MetainfoWrapper::Hashtable_method_loadFactor__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Hashtable_methods[] = 
{
  &Hashtable_method_GetClass__L_acdk_lang_RClass_,
  &Hashtable_method_Hashtable__LRHashtable_,
  &Hashtable_method_Hashtable_IF_LRHashtable_,
  &Hashtable_method_Hashtable_I_LRHashtable_,
  &Hashtable_method_Hashtable_INLRMap__LRHashtable_,
  &Hashtable_method_capacity__I,
  &Hashtable_method_elements__LREnumeration_,
  &Hashtable_method_keys__LREnumeration_,
  &Hashtable_method_loadFactor__F,
  0
};


struct Hashtable_MetaInfoInitializer
{  Hashtable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Hashtable::clazzInfo();
    ci->fields =  _Hashtable_fields;
    ci->methods =  _Hashtable_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Hashtable_MetaInfoInitializer Hashtable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
IdentityHashMap_create_array(int length)
{
  return new ObjectArrayImpl<RIdentityHashMap>(length);
}

//static
::acdk::lang::RObject
IdentityHashMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IdentityHashMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentityHashMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IdentityHashMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentityHashMap_method_IdentityHashMap__LRIdentityHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IdentityHashMap();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentityHashMap_method_IdentityHashMap_I_LRIdentityHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IdentityHashMap(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentityHashMap_method_IdentityHashMap_IF_LRIdentityHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IdentityHashMap(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IdentityHashMap_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IdentityHashMap::create_instance();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _IdentityHashMap_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentityHashMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentityHashMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentityHashMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IdentityHashMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IdentityHashMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IdentityHashMap_MetainfoWrapper::IdentityHashMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentityHashMap_methods_IdentityHashMap__LRIdentityHashMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentityHashMap_methods_IdentityHashMap__LRIdentityHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentityHashMap_method_IdentityHashMap__LRIdentityHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "IdentityHashMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IdentityHashMap::clazzInfo(), // return type
  "_2_IdentityHashMap", // alternative name of method
  -1, // altlabelHashCode
  IdentityHashMap_methods_IdentityHashMap__LRIdentityHashMap__args, // the arguments
  0, //arguments count
  IdentityHashMap_methods_IdentityHashMap__LRIdentityHashMap__exceptions, // the declared exceptions
  IdentityHashMap_MetainfoWrapper::IdentityHashMap_method_IdentityHashMap__LRIdentityHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentityHashMap_methods_IdentityHashMap_I_LRIdentityHashMap__arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentityHashMap_methods_IdentityHashMap_I_LRIdentityHashMap__args[] = 
{
  &IdentityHashMap_methods_IdentityHashMap_I_LRIdentityHashMap__arg_initialCapacity,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentityHashMap_methods_IdentityHashMap_I_LRIdentityHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentityHashMap_method_IdentityHashMap_I_LRIdentityHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "IdentityHashMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IdentityHashMap::clazzInfo(), // return type
  "_3_IdentityHashMap", // alternative name of method
  -1, // altlabelHashCode
  IdentityHashMap_methods_IdentityHashMap_I_LRIdentityHashMap__args, // the arguments
  0, //arguments count
  IdentityHashMap_methods_IdentityHashMap_I_LRIdentityHashMap__exceptions, // the declared exceptions
  IdentityHashMap_MetainfoWrapper::IdentityHashMap_method_IdentityHashMap_I_LRIdentityHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentityHashMap_methods_IdentityHashMap_IF_LRIdentityHashMap__arg_initialCapacity = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialCapacity", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IdentityHashMap_methods_IdentityHashMap_IF_LRIdentityHashMap__arg_initialLoadFactor = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialLoadFactor", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentityHashMap_methods_IdentityHashMap_IF_LRIdentityHashMap__args[] = 
{
  &IdentityHashMap_methods_IdentityHashMap_IF_LRIdentityHashMap__arg_initialCapacity,
  &IdentityHashMap_methods_IdentityHashMap_IF_LRIdentityHashMap__arg_initialLoadFactor,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentityHashMap_methods_IdentityHashMap_IF_LRIdentityHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentityHashMap_method_IdentityHashMap_IF_LRIdentityHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IdentityHashMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IdentityHashMap::clazzInfo(), // return type
  "_1_IdentityHashMap", // alternative name of method
  -1, // altlabelHashCode
  IdentityHashMap_methods_IdentityHashMap_IF_LRIdentityHashMap__args, // the arguments
  0, //arguments count
  IdentityHashMap_methods_IdentityHashMap_IF_LRIdentityHashMap__exceptions, // the declared exceptions
  IdentityHashMap_MetainfoWrapper::IdentityHashMap_method_IdentityHashMap_IF_LRIdentityHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IdentityHashMap_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IdentityHashMap_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IdentityHashMap_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  IdentityHashMap_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  IdentityHashMap_methods_create_instance__LRObject__exceptions, // the declared exceptions
  IdentityHashMap_MetainfoWrapper::IdentityHashMap_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IdentityHashMap_methods[] = 
{
  &IdentityHashMap_method_GetClass__L_acdk_lang_RClass_,
  &IdentityHashMap_method_IdentityHashMap__LRIdentityHashMap_,
  &IdentityHashMap_method_IdentityHashMap_I_LRIdentityHashMap_,
  &IdentityHashMap_method_IdentityHashMap_IF_LRIdentityHashMap_,
  &IdentityHashMap_method_create_instance__LRObject_,
  0
};


struct IdentityHashMap_MetaInfoInitializer
{  IdentityHashMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IdentityHashMap::clazzInfo();
    ci->fields =  _IdentityHashMap_fields;
    ci->methods =  _IdentityHashMap_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IdentityHashMap_MetaInfoInitializer IdentityHashMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Iterator_create_array(int length)
{
  return new ObjectArrayImpl<RIterator>(length);
}

//static
::acdk::lang::RObject
Iterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Iterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Iterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Iterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Iterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Iterator* This = dmi_cast<Iterator>(This_);
    ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Iterator_method_hasMoreElements__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Iterator* This = dmi_cast<Iterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Iterator::hasMoreElements();
    else
      ret = This->hasMoreElements();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Iterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Iterator* This = dmi_cast<Iterator>(This_);
  ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Iterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Iterator* This = dmi_cast<Iterator>(This_);
    ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Iterator_method_nextElement__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Iterator* This = dmi_cast<Iterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Iterator::nextElement();
    else
        ret = (::acdk::lang::RObject)This->nextElement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Iterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Iterator* This = dmi_cast<Iterator>(This_);
    This->remove();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Iterator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Iterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Iterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Iterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Iterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Iterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Iterator_MetainfoWrapper::Iterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Iterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Iterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Iterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_element", // alternative name of method
  -1, // altlabelHashCode
  Iterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  Iterator_methods_element__LRObject__exceptions, // the declared exceptions
  Iterator_MetainfoWrapper::Iterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Iterator_methods_hasMoreElements__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Iterator_methods_hasMoreElements__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Iterator_method_hasMoreElements__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasMoreElements", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_hasMoreElements", // alternative name of method
  -1, // altlabelHashCode
  Iterator_methods_hasMoreElements__Z_args, // the arguments
  0, //arguments count
  Iterator_methods_hasMoreElements__Z_exceptions, // the declared exceptions
  Iterator_MetainfoWrapper::Iterator_method_hasMoreElements__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Iterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Iterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Iterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_hasNext", // alternative name of method
  -1, // altlabelHashCode
  Iterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  Iterator_methods_hasNext__Z_exceptions, // the declared exceptions
  Iterator_MetainfoWrapper::Iterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Iterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Iterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Iterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_next", // alternative name of method
  -1, // altlabelHashCode
  Iterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  Iterator_methods_next__LRObject__exceptions, // the declared exceptions
  Iterator_MetainfoWrapper::Iterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Iterator_methods_nextElement__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Iterator_methods_nextElement__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Iterator_method_nextElement__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextElement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_nextElement", // alternative name of method
  -1, // altlabelHashCode
  Iterator_methods_nextElement__LRObject__args, // the arguments
  0, //arguments count
  Iterator_methods_nextElement__LRObject__exceptions, // the declared exceptions
  Iterator_MetainfoWrapper::Iterator_method_nextElement__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Iterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Iterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Iterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_remove", // alternative name of method
  -1, // altlabelHashCode
  Iterator_methods_remove__V_args, // the arguments
  0, //arguments count
  Iterator_methods_remove__V_exceptions, // the declared exceptions
  Iterator_MetainfoWrapper::Iterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Iterator_methods[] = 
{
  &Iterator_method_GetClass__L_acdk_lang_RClass_,
  &Iterator_method_element__LRObject_,
  &Iterator_method_hasMoreElements__Z,
  &Iterator_method_hasNext__Z,
  &Iterator_method_next__LRObject_,
  &Iterator_method_nextElement__LRObject_,
  &Iterator_method_remove__V,
  0
};


struct Iterator_MetaInfoInitializer
{  Iterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Iterator::clazzInfo();
    ci->fields =  _Iterator_fields;
    ci->methods =  _Iterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Iterator_MetaInfoInitializer Iterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
LinkedListEntry_create_array(int length)
{
  return new ObjectArrayImpl<RLinkedListEntry>(length);
}

//static
::acdk::lang::RObject
LinkedListEntry_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LinkedListEntry_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedListEntry_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LinkedListEntry::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedListEntry_method_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LinkedListEntry(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RLinkedListEntry>(args[1], dc), ::acdk::lang::dmi::castTo< RLinkedListEntry>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedListEntry_method_LinkedListEntry__LRLinkedListEntry__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LinkedListEntry();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedListEntry_method_remove__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LinkedListEntry* This = dmi_cast<LinkedListEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->LinkedListEntry::remove();
    else
        ret = (::acdk::lang::RObject)This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListEntry_fields_data_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListEntry* This = dmi_cast<LinkedListEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->data, flags);
    else
      This->data = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListEntry_fields_next_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListEntry* This = dmi_cast<LinkedListEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->next, flags);
    else
      This->next = ::acdk::lang::dmi::castTo< RLinkedListEntry>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListEntry_fields_previous_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListEntry* This = dmi_cast<LinkedListEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->previous, flags);
    else
      This->previous = ::acdk::lang::dmi::castTo< RLinkedListEntry>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListEntry_fields_data = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "data", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  LinkedListEntry_MetainfoWrapper::LinkedListEntry_fields_data_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListEntry_fields_next = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "next", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(),
  LinkedListEntry_MetainfoWrapper::LinkedListEntry_fields_next_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListEntry_fields_previous = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "previous", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(),
  LinkedListEntry_MetainfoWrapper::LinkedListEntry_fields_previous_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LinkedListEntry_fields[] = 
{
  &LinkedListEntry_fields_data,
  &LinkedListEntry_fields_next,
  &LinkedListEntry_fields_previous,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedListEntry_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListEntry_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedListEntry_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LinkedListEntry_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LinkedListEntry_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LinkedListEntry_MetainfoWrapper::LinkedListEntry_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_p = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "p", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__args[] = 
{
  &LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_o,
  &LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_n,
  &LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_p,
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedListEntry_method_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LinkedListEntry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LinkedListEntry::clazzInfo(), // return type
  "_0_LinkedListEntry", // alternative name of method
  -1, // altlabelHashCode
  LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__args, // the arguments
  0, //arguments count
  LinkedListEntry_methods_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__exceptions, // the declared exceptions
  LinkedListEntry_MetainfoWrapper::LinkedListEntry_method_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedListEntry_methods_LinkedListEntry__LRLinkedListEntry__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListEntry_methods_LinkedListEntry__LRLinkedListEntry__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedListEntry_method_LinkedListEntry__LRLinkedListEntry_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LinkedListEntry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LinkedListEntry::clazzInfo(), // return type
  "_1_LinkedListEntry", // alternative name of method
  -1, // altlabelHashCode
  LinkedListEntry_methods_LinkedListEntry__LRLinkedListEntry__args, // the arguments
  0, //arguments count
  LinkedListEntry_methods_LinkedListEntry__LRLinkedListEntry__exceptions, // the declared exceptions
  LinkedListEntry_MetainfoWrapper::LinkedListEntry_method_LinkedListEntry__LRLinkedListEntry__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedListEntry_methods_remove__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListEntry_methods_remove__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedListEntry_method_remove__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_remove", // alternative name of method
  -1, // altlabelHashCode
  LinkedListEntry_methods_remove__LRObject__args, // the arguments
  0, //arguments count
  LinkedListEntry_methods_remove__LRObject__exceptions, // the declared exceptions
  LinkedListEntry_MetainfoWrapper::LinkedListEntry_method_remove__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LinkedListEntry_methods[] = 
{
  &LinkedListEntry_method_GetClass__L_acdk_lang_RClass_,
  &LinkedListEntry_method_LinkedListEntry_INLRObject_INLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry_,
  &LinkedListEntry_method_LinkedListEntry__LRLinkedListEntry_,
  &LinkedListEntry_method_remove__LRObject_,
  0
};


struct LinkedListEntry_MetaInfoInitializer
{  LinkedListEntry_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LinkedListEntry::clazzInfo();
    ci->fields =  _LinkedListEntry_fields;
    ci->methods =  _LinkedListEntry_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LinkedListEntry_MetaInfoInitializer LinkedListEntry_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
LinkedList_create_array(int length)
{
  return new ObjectArrayImpl<RLinkedList>(length);
}

//static
::acdk::lang::RObject
LinkedList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LinkedList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LinkedList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedList_method_LinkedList__LRLinkedList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LinkedList();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedList_method_LinkedList_INLRCollection__LRLinkedList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LinkedList(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedList_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LinkedList::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedList_method_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LinkedList::getEntry(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RLinkedListEntry>(args[2], dc), ::acdk::lang::dmi::castTo< RLinkedListEntry>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedList_fields__size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedList* This = dmi_cast<LinkedList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_size, flags);
    else
      This->_size = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedList_fields__tail_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedList* This = dmi_cast<LinkedList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tail, flags);
    else
      This->_tail = ::acdk::lang::dmi::castTo< RLinkedListEntry>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LinkedList_fields__size = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LinkedList_MetainfoWrapper::LinkedList_fields__size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedList_fields__tail = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tail", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(),
  LinkedList_MetainfoWrapper::LinkedList_fields__tail_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LinkedList_fields[] = 
{
  &LinkedList_fields__size,
  &LinkedList_fields__tail,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LinkedList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LinkedList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LinkedList_MetainfoWrapper::LinkedList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedList_methods_LinkedList__LRLinkedList__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedList_methods_LinkedList__LRLinkedList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedList_method_LinkedList__LRLinkedList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LinkedList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LinkedList::clazzInfo(), // return type
  "_1_LinkedList", // alternative name of method
  -1, // altlabelHashCode
  LinkedList_methods_LinkedList__LRLinkedList__args, // the arguments
  0, //arguments count
  LinkedList_methods_LinkedList__LRLinkedList__exceptions, // the declared exceptions
  LinkedList_MetainfoWrapper::LinkedList_method_LinkedList__LRLinkedList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedList_methods_LinkedList_INLRCollection__LRLinkedList__arg_coll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "coll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedList_methods_LinkedList_INLRCollection__LRLinkedList__args[] = 
{
  &LinkedList_methods_LinkedList_INLRCollection__LRLinkedList__arg_coll,
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedList_methods_LinkedList_INLRCollection__LRLinkedList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedList_method_LinkedList_INLRCollection__LRLinkedList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LinkedList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LinkedList::clazzInfo(), // return type
  "_2_LinkedList", // alternative name of method
  -1, // altlabelHashCode
  LinkedList_methods_LinkedList_INLRCollection__LRLinkedList__args, // the arguments
  0, //arguments count
  LinkedList_methods_LinkedList_INLRCollection__LRLinkedList__exceptions, // the declared exceptions
  LinkedList_MetainfoWrapper::LinkedList_method_LinkedList_INLRCollection__LRLinkedList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedList_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedList_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedList_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  LinkedList_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  LinkedList_methods_create_instance__LRObject__exceptions, // the declared exceptions
  LinkedList_MetainfoWrapper::LinkedList_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_head = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "head", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_tail = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tail", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__args[] = 
{
  &LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_start,
  &LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_size,
  &LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_head,
  &LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__arg_tail,
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedList_method_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEntry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(), // return type
  "_3_getEntry", // alternative name of method
  -1, // altlabelHashCode
  LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__args, // the arguments
  0, //arguments count
  LinkedList_methods_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__exceptions, // the declared exceptions
  LinkedList_MetainfoWrapper::LinkedList_method_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LinkedList_methods[] = 
{
  &LinkedList_method_GetClass__L_acdk_lang_RClass_,
  &LinkedList_method_LinkedList__LRLinkedList_,
  &LinkedList_method_LinkedList_INLRCollection__LRLinkedList_,
  &LinkedList_method_create_instance__LRObject_,
  &LinkedList_method_getEntry_IIINLRLinkedListEntry_INLRLinkedListEntry__LRLinkedListEntry_,
  0
};


struct LinkedList_MetaInfoInitializer
{  LinkedList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LinkedList::clazzInfo();
    ci->fields =  _LinkedList_fields;
    ci->methods =  _LinkedList_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LinkedList_MetaInfoInitializer LinkedList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
SubLinkedList_create_array(int length)
{
  return new ObjectArrayImpl<RSubLinkedList>(length);
}

//static
::acdk::lang::RObject
SubLinkedList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SubLinkedList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubLinkedList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SubLinkedList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubLinkedList_method_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SubLinkedList(::acdk::lang::dmi::castTo< RLinkedList>(args[0], dc), ::acdk::lang::dmi::castTo< RLinkedListEntry>(args[1], dc), ::acdk::lang::dmi::castTo< RLinkedListEntry>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubLinkedList_method__checkMod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SubLinkedList* This = dmi_cast<SubLinkedList>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SubLinkedList::_checkMod();
    else
        This->_checkMod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubLinkedList_fields__head_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubLinkedList* This = dmi_cast<SubLinkedList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_head, flags);
    else
      This->_head = ::acdk::lang::dmi::castTo< RLinkedListEntry>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubLinkedList_fields__knownMod_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubLinkedList* This = dmi_cast<SubLinkedList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_knownMod, flags);
    else
      This->_knownMod = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubLinkedList_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubLinkedList* This = dmi_cast<SubLinkedList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = ::acdk::lang::dmi::castTo< RLinkedList>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubLinkedList_fields__size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubLinkedList* This = dmi_cast<SubLinkedList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_size, flags);
    else
      This->_size = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubLinkedList_fields__tail_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubLinkedList* This = dmi_cast<SubLinkedList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tail, flags);
    else
      This->_tail = ::acdk::lang::dmi::castTo< RLinkedListEntry>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SubLinkedList_fields__head = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_head", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(),
  SubLinkedList_MetainfoWrapper::SubLinkedList_fields__head_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SubLinkedList_fields__knownMod = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_knownMod", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SubLinkedList_MetainfoWrapper::SubLinkedList_fields__knownMod_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SubLinkedList_fields__list = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedList::clazzInfo(),
  SubLinkedList_MetainfoWrapper::SubLinkedList_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SubLinkedList_fields__size = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SubLinkedList_MetainfoWrapper::SubLinkedList_fields__size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SubLinkedList_fields__tail = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tail", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(),
  SubLinkedList_MetainfoWrapper::SubLinkedList_fields__tail_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SubLinkedList_fields[] = 
{
  &SubLinkedList_fields__head,
  &SubLinkedList_fields__knownMod,
  &SubLinkedList_fields__list,
  &SubLinkedList_fields__size,
  &SubLinkedList_fields__tail,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubLinkedList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubLinkedList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubLinkedList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SubLinkedList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SubLinkedList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SubLinkedList_MetainfoWrapper::SubLinkedList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__arg_head = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "head", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__arg_tail = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tail", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__args[] = 
{
  &SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__arg_list,
  &SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__arg_head,
  &SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__arg_tail,
  &SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__arg_size,
  0
};

::acdk::lang::dmi::ClazzInfo* SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubLinkedList_method_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SubLinkedList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SubLinkedList::clazzInfo(), // return type
  "_0_SubLinkedList", // alternative name of method
  -1, // altlabelHashCode
  SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__args, // the arguments
  0, //arguments count
  SubLinkedList_methods_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__exceptions, // the declared exceptions
  SubLinkedList_MetainfoWrapper::SubLinkedList_method_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubLinkedList_methods__checkMod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubLinkedList_methods__checkMod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubLinkedList_method__checkMod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkMod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1__checkMod", // alternative name of method
  -1, // altlabelHashCode
  SubLinkedList_methods__checkMod__V_args, // the arguments
  0, //arguments count
  SubLinkedList_methods__checkMod__V_exceptions, // the declared exceptions
  SubLinkedList_MetainfoWrapper::SubLinkedList_method__checkMod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SubLinkedList_methods[] = 
{
  &SubLinkedList_method_GetClass__L_acdk_lang_RClass_,
  &SubLinkedList_method_SubLinkedList_INLRLinkedList_INLRLinkedListEntry_INLRLinkedListEntry_I_LRSubLinkedList_,
  &SubLinkedList_method__checkMod__V,
  0
};


struct SubLinkedList_MetaInfoInitializer
{  SubLinkedList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SubLinkedList::clazzInfo();
    ci->fields =  _SubLinkedList_fields;
    ci->methods =  _SubLinkedList_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SubLinkedList_MetaInfoInitializer SubLinkedList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
LinkedListIterator_create_array(int length)
{
  return new ObjectArrayImpl<RLinkedListIterator>(length);
}

//static
::acdk::lang::RObject
LinkedListIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LinkedListIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedListIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LinkedListIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedListIterator_method_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LinkedListIterator(::acdk::lang::dmi::castTo< RLinkedList>(args[0], dc), ::acdk::lang::dmi::castTo< RLinkedListEntry>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LinkedListIterator_method__checkMod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LinkedListIterator* This = dmi_cast<LinkedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->LinkedListIterator::_checkMod();
    else
        This->_checkMod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListIterator_fields__knownMod_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListIterator* This = dmi_cast<LinkedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_knownMod, flags);
    else
      This->_knownMod = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListIterator_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListIterator* This = dmi_cast<LinkedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = ::acdk::lang::dmi::castTo< RLinkedList>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListIterator_fields__next_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListIterator* This = dmi_cast<LinkedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_next, flags);
    else
      This->_next = ::acdk::lang::dmi::castTo< RLinkedListEntry>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListIterator_fields__position_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListIterator* This = dmi_cast<LinkedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_position, flags);
    else
      This->_position = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListIterator_fields__previous_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListIterator* This = dmi_cast<LinkedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_previous, flags);
    else
      This->_previous = ::acdk::lang::dmi::castTo< RLinkedListEntry>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListIterator_fields__recent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListIterator* This = dmi_cast<LinkedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_recent, flags);
    else
      This->_recent = ::acdk::lang::dmi::castTo< RLinkedListEntry>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LinkedListIterator_fields__size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LinkedListIterator* This = dmi_cast<LinkedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_size, flags);
    else
      This->_size = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListIterator_fields__knownMod = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_knownMod", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_fields__knownMod_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListIterator_fields__list = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedList::clazzInfo(),
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListIterator_fields__next = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_next", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(),
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_fields__next_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListIterator_fields__position = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_position", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_fields__position_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListIterator_fields__previous = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_previous", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(),
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_fields__previous_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListIterator_fields__recent = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_recent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo(),
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_fields__recent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LinkedListIterator_fields__size = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_fields__size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LinkedListIterator_fields[] = 
{
  &LinkedListIterator_fields__knownMod,
  &LinkedListIterator_fields__list,
  &LinkedListIterator_fields__next,
  &LinkedListIterator_fields__position,
  &LinkedListIterator_fields__previous,
  &LinkedListIterator_fields__recent,
  &LinkedListIterator_fields__size,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedListIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedListIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LinkedListIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LinkedListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_entry = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "entry", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLinkedListEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_size = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "size", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_modCount = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "modCount", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__args[] = 
{
  &LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_list,
  &LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_entry,
  &LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_index,
  &LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_size,
  &LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__arg_modCount,
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedListIterator_method_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LinkedListIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LinkedListIterator::clazzInfo(), // return type
  "_0_LinkedListIterator", // alternative name of method
  -1, // altlabelHashCode
  LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__args, // the arguments
  0, //arguments count
  LinkedListIterator_methods_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__exceptions, // the declared exceptions
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_method_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LinkedListIterator_methods__checkMod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListIterator_methods__checkMod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LinkedListIterator_method__checkMod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_checkMod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1__checkMod", // alternative name of method
  -1, // altlabelHashCode
  LinkedListIterator_methods__checkMod__V_args, // the arguments
  0, //arguments count
  LinkedListIterator_methods__checkMod__V_exceptions, // the declared exceptions
  LinkedListIterator_MetainfoWrapper::LinkedListIterator_method__checkMod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LinkedListIterator_methods[] = 
{
  &LinkedListIterator_method_GetClass__L_acdk_lang_RClass_,
  &LinkedListIterator_method_LinkedListIterator_INLRLinkedList_INLRLinkedListEntry_III_LRLinkedListIterator_,
  &LinkedListIterator_method__checkMod__V,
  0
};


struct LinkedListIterator_MetaInfoInitializer
{  LinkedListIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LinkedListIterator::clazzInfo();
    ci->fields =  _LinkedListIterator_fields;
    ci->methods =  _LinkedListIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LinkedListIterator_MetaInfoInitializer LinkedListIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
List_create_array(int length)
{
  return new ObjectArrayImpl<RList>(length);
}

//static
::acdk::lang::RObject
List_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class List_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)List::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_add_IINLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
    This->add(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_addAll_IINLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
  ret = This->addAll(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RCollection>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_get_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
    ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_indexOf_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
  ret = This->indexOf(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_lastIndexOf_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
  ret = This->lastIndexOf(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_listIterator_I_LRListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
    ret = (::acdk::lang::RObject)This->listIterator(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_listIterator__LRListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
    ret = (::acdk::lang::RObject)This->listIterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_remove_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
    ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_set_IINLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
    ret = (::acdk::lang::RObject)This->set(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  List_method_subList_II_LRList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    List* This = dmi_cast<List>(This_);
    ret = (::acdk::lang::RObject)This->subList(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _List_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_p_GetClass", // alternative name of method
  -1, // altlabelHashCode
  List_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  List_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_add_IINLRObject__V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_add_IINLRObject__V_arg_element = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "element", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_add_IINLRObject__V_args[] = 
{
  &List_methods_add_IINLRObject__V_arg_index,
  &List_methods_add_IINLRObject__V_arg_element,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_add_IINLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_add_IINLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_add", // alternative name of method
  -1, // altlabelHashCode
  List_methods_add_IINLRObject__V_args, // the arguments
  0, //arguments count
  List_methods_add_IINLRObject__V_exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_add_IINLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_addAll_IINLRCollection__Z_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_addAll_IINLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_addAll_IINLRCollection__Z_args[] = 
{
  &List_methods_addAll_IINLRCollection__Z_arg_index,
  &List_methods_addAll_IINLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_addAll_IINLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_addAll_IINLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_addAll", // alternative name of method
  -1, // altlabelHashCode
  List_methods_addAll_IINLRCollection__Z_args, // the arguments
  0, //arguments count
  List_methods_addAll_IINLRCollection__Z_exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_addAll_IINLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_get_I_LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_get_I_LRObject__args[] = 
{
  &List_methods_get_I_LRObject__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_get_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_get_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_h_get", // alternative name of method
  -1, // altlabelHashCode
  List_methods_get_I_LRObject__args, // the arguments
  0, //arguments count
  List_methods_get_I_LRObject__exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_get_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_indexOf_INLRObject__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_indexOf_INLRObject__I_args[] = 
{
  &List_methods_indexOf_INLRObject__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_indexOf_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_indexOf_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "indexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_indexOf", // alternative name of method
  -1, // altlabelHashCode
  List_methods_indexOf_INLRObject__I_args, // the arguments
  0, //arguments count
  List_methods_indexOf_INLRObject__I_exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_indexOf_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_lastIndexOf_INLRObject__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_lastIndexOf_INLRObject__I_args[] = 
{
  &List_methods_lastIndexOf_INLRObject__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_lastIndexOf_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_lastIndexOf_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastIndexOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_lastIndexOf", // alternative name of method
  -1, // altlabelHashCode
  List_methods_lastIndexOf_INLRObject__I_args, // the arguments
  0, //arguments count
  List_methods_lastIndexOf_INLRObject__I_exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_lastIndexOf_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_listIterator_I_LRListIterator__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_listIterator_I_LRListIterator__args[] = 
{
  &List_methods_listIterator_I_LRListIterator__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_listIterator_I_LRListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_listIterator_I_LRListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo(), // return type
  "_k_listIterator", // alternative name of method
  -1, // altlabelHashCode
  List_methods_listIterator_I_LRListIterator__args, // the arguments
  0, //arguments count
  List_methods_listIterator_I_LRListIterator__exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_listIterator_I_LRListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_listIterator__LRListIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_listIterator__LRListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_listIterator__LRListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "listIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo(), // return type
  "_l_listIterator", // alternative name of method
  -1, // altlabelHashCode
  List_methods_listIterator__LRListIterator__args, // the arguments
  0, //arguments count
  List_methods_listIterator__LRListIterator__exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_listIterator__LRListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_remove_I_LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_remove_I_LRObject__args[] = 
{
  &List_methods_remove_I_LRObject__arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_remove_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_remove_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_m_remove", // alternative name of method
  -1, // altlabelHashCode
  List_methods_remove_I_LRObject__args, // the arguments
  0, //arguments count
  List_methods_remove_I_LRObject__exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_remove_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_set_IINLRObject__LRObject__arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_set_IINLRObject__LRObject__arg_element = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "element", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_set_IINLRObject__LRObject__args[] = 
{
  &List_methods_set_IINLRObject__LRObject__arg_index,
  &List_methods_set_IINLRObject__LRObject__arg_element,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_set_IINLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_set_IINLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_n_set", // alternative name of method
  -1, // altlabelHashCode
  List_methods_set_IINLRObject__LRObject__args, // the arguments
  0, //arguments count
  List_methods_set_IINLRObject__LRObject__exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_set_IINLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_subList_II_LRList__arg_fromIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fromIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo List_methods_subList_II_LRList__arg_toIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* List_methods_subList_II_LRList__args[] = 
{
  &List_methods_subList_II_LRList__arg_fromIndex,
  &List_methods_subList_II_LRList__arg_toIndex,
  0
};

::acdk::lang::dmi::ClazzInfo* List_methods_subList_II_LRList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo List_method_subList_II_LRList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RList::clazzInfo(), // return type
  "_o_subList", // alternative name of method
  -1, // altlabelHashCode
  List_methods_subList_II_LRList__args, // the arguments
  0, //arguments count
  List_methods_subList_II_LRList__exceptions, // the declared exceptions
  List_MetainfoWrapper::List_method_subList_II_LRList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _List_methods[] = 
{
  &List_method_GetClass__L_acdk_lang_RClass_,
  &List_method_add_IINLRObject__V,
  &List_method_addAll_IINLRCollection__Z,
  &List_method_get_I_LRObject_,
  &List_method_indexOf_INLRObject__I,
  &List_method_lastIndexOf_INLRObject__I,
  &List_method_listIterator_I_LRListIterator_,
  &List_method_listIterator__LRListIterator_,
  &List_method_remove_I_LRObject_,
  &List_method_set_IINLRObject__LRObject_,
  &List_method_subList_II_LRList_,
  0
};


struct List_MetaInfoInitializer
{  List_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = List::clazzInfo();
    ci->fields =  _List_fields;
    ci->methods =  _List_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
List_MetaInfoInitializer List_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ListIterator_create_array(int length)
{
  return new ObjectArrayImpl<RListIterator>(length);
}

//static
::acdk::lang::RObject
ListIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ListIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ListIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_add_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
    This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
    ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
  ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_hasPrevious__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
  ret = This->hasPrevious();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
    ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_nextIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
  ret = This->nextIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_previous__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
    ret = (::acdk::lang::RObject)This->previous();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_previousIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
  ret = This->previousIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
    This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListIterator_method_set_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListIterator* This = dmi_cast<ListIterator>(This_);
    This->set(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ListIterator_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListIterator_methods_add_INLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_add_INLRObject__V_args[] = 
{
  &ListIterator_methods_add_INLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_add_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_add_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_add", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_add_INLRObject__V_args, // the arguments
  0, //arguments count
  ListIterator_methods_add_INLRObject__V_exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_add_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_element", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  ListIterator_methods_element__LRObject__exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  ListIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_hasPrevious__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_hasPrevious__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_hasPrevious__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasPrevious", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_hasPrevious", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_hasPrevious__Z_args, // the arguments
  0, //arguments count
  ListIterator_methods_hasPrevious__Z_exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_hasPrevious__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_next", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  ListIterator_methods_next__LRObject__exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_nextIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_nextIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_nextIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_nextIndex", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_nextIndex__I_args, // the arguments
  0, //arguments count
  ListIterator_methods_nextIndex__I_exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_nextIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_previous__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_previous__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_previous__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previous", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_previous", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_previous__LRObject__args, // the arguments
  0, //arguments count
  ListIterator_methods_previous__LRObject__exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_previous__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_previousIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_previousIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_previousIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "previousIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_previousIndex", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_previousIndex__I_args, // the arguments
  0, //arguments count
  ListIterator_methods_previousIndex__I_exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_previousIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_remove", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  ListIterator_methods_remove__V_exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListIterator_methods_set_INLRObject__V_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListIterator_methods_set_INLRObject__V_args[] = 
{
  &ListIterator_methods_set_INLRObject__V_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator_methods_set_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListIterator_method_set_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_set", // alternative name of method
  -1, // altlabelHashCode
  ListIterator_methods_set_INLRObject__V_args, // the arguments
  0, //arguments count
  ListIterator_methods_set_INLRObject__V_exceptions, // the declared exceptions
  ListIterator_MetainfoWrapper::ListIterator_method_set_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ListIterator_methods[] = 
{
  &ListIterator_method_GetClass__L_acdk_lang_RClass_,
  &ListIterator_method_add_INLRObject__V,
  &ListIterator_method_element__LRObject_,
  &ListIterator_method_hasNext__Z,
  &ListIterator_method_hasPrevious__Z,
  &ListIterator_method_next__LRObject_,
  &ListIterator_method_nextIndex__I,
  &ListIterator_method_previous__LRObject_,
  &ListIterator_method_previousIndex__I,
  &ListIterator_method_remove__V,
  &ListIterator_method_set_INLRObject__V,
  0
};


struct ListIterator_MetaInfoInitializer
{  ListIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ListIterator::clazzInfo();
    ci->fields =  _ListIterator_fields;
    ci->methods =  _ListIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ListIterator_MetaInfoInitializer ListIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ListResourceBundle_create_array(int length)
{
  return new ObjectArrayImpl<RListResourceBundle>(length);
}

//static
::acdk::lang::RObject
ListResourceBundle_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ListResourceBundle_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListResourceBundle_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ListResourceBundle::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListResourceBundle_method_getContents__LRObjectArrayArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListResourceBundle* This = dmi_cast<ListResourceBundle>(This_);
    ret = (::acdk::lang::RObject)This->getContents();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListResourceBundle_method_getKeys__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListResourceBundle* This = dmi_cast<ListResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ListResourceBundle::getKeys();
    else
        ret = (::acdk::lang::RObject)This->getKeys();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ListResourceBundle_method_handleGetObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ListResourceBundle* This = dmi_cast<ListResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ListResourceBundle::handleGetObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->handleGetObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ListResourceBundle_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListResourceBundle_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListResourceBundle_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListResourceBundle_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ListResourceBundle_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ListResourceBundle_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ListResourceBundle_MetainfoWrapper::ListResourceBundle_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListResourceBundle_methods_ListResourceBundle__LRListResourceBundle__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListResourceBundle_methods_ListResourceBundle__LRListResourceBundle__exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  0
};

void ListResourceBundle_ListResourceBundle__LRListResourceBundle__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ListResourceBundle_method_ListResourceBundle__LRListResourceBundle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ListResourceBundle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ListResourceBundle::clazzInfo(), // return type
  "_0_ListResourceBundle", // alternative name of method
  -1, // altlabelHashCode
  ListResourceBundle_methods_ListResourceBundle__LRListResourceBundle__args, // the arguments
  0, //arguments count
  ListResourceBundle_methods_ListResourceBundle__LRListResourceBundle__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ListResourceBundle_ListResourceBundle__LRListResourceBundle__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListResourceBundle_methods_getContents__LRObjectArrayArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListResourceBundle_methods_getContents__LRObjectArrayArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListResourceBundle_method_getContents__LRObjectArrayArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getContents", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArrayArray::clazzInfo(), // return type
  "_1_getContents", // alternative name of method
  -1, // altlabelHashCode
  ListResourceBundle_methods_getContents__LRObjectArrayArray__args, // the arguments
  0, //arguments count
  ListResourceBundle_methods_getContents__LRObjectArrayArray__exceptions, // the declared exceptions
  ListResourceBundle_MetainfoWrapper::ListResourceBundle_method_getContents__LRObjectArrayArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListResourceBundle_methods_getKeys__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ListResourceBundle_methods_getKeys__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListResourceBundle_method_getKeys__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_2_getKeys", // alternative name of method
  -1, // altlabelHashCode
  ListResourceBundle_methods_getKeys__LRIterator__args, // the arguments
  0, //arguments count
  ListResourceBundle_methods_getKeys__LRIterator__exceptions, // the declared exceptions
  ListResourceBundle_MetainfoWrapper::ListResourceBundle_method_getKeys__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ListResourceBundle_methods_handleGetObject_INLRString__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ListResourceBundle_methods_handleGetObject_INLRString__LRObject__args[] = 
{
  &ListResourceBundle_methods_handleGetObject_INLRString__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ListResourceBundle_methods_handleGetObject_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ListResourceBundle_method_handleGetObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleGetObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_handleGetObject", // alternative name of method
  -1, // altlabelHashCode
  ListResourceBundle_methods_handleGetObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  ListResourceBundle_methods_handleGetObject_INLRString__LRObject__exceptions, // the declared exceptions
  ListResourceBundle_MetainfoWrapper::ListResourceBundle_method_handleGetObject_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ListResourceBundle_methods[] = 
{
  &ListResourceBundle_method_GetClass__L_acdk_lang_RClass_,
  &ListResourceBundle_method_ListResourceBundle__LRListResourceBundle_,
  &ListResourceBundle_method_getContents__LRObjectArrayArray_,
  &ListResourceBundle_method_getKeys__LRIterator_,
  &ListResourceBundle_method_handleGetObject_INLRString__LRObject_,
  0
};


struct ListResourceBundle_MetaInfoInitializer
{  ListResourceBundle_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ListResourceBundle::clazzInfo();
    ci->fields =  _ListResourceBundle_fields;
    ci->methods =  _ListResourceBundle_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ListResourceBundle_MetaInfoInitializer ListResourceBundle_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
Locale_create_array(int length)
{
  return new ObjectArrayImpl<RLocale>(length);
}

//static
::acdk::lang::RObject
Locale_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Locale_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_Locale__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Locale();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_Locale_INLRString_INLRString__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Locale(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_Locale_INLRString_INLRString_INLRString__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Locale(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method__calcHashCode__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Locale::_calcHashCode();
    else
        This->_calcHashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method__equals_INLRLocale__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Locale::_equals(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    else
      ret = This->_equals(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_convertLanguage_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::convertLanguage(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->convertLanguage(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Locale::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_equals_INLRLocale__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Locale::equals(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getAvailableLocals__LRLocaleArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getAvailableLocals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getCANADA__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getCANADA();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getCANADA_FRENCH__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getCANADA_FRENCH();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getCHINA__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getCHINA();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getCHINESE__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getCHINESE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getCountry__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getCountry();
    else
        ret = (::acdk::lang::RObject)This->getCountry();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDefault__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(Locale::getDefault());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDisplayCountry__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getDisplayCountry();
    else
        ret = (::acdk::lang::RObject)This->getDisplayCountry();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDisplayCountry_INLRLocale__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getDisplayCountry(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDisplayCountry(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDisplayLanguage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getDisplayLanguage();
    else
        ret = (::acdk::lang::RObject)This->getDisplayLanguage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDisplayLanguage_INLRLocale__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getDisplayLanguage(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDisplayLanguage(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDisplayName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getDisplayName();
    else
        ret = (::acdk::lang::RObject)This->getDisplayName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDisplayName_INLRLocale__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getDisplayName(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDisplayName(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDisplayVariant__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getDisplayVariant();
    else
        ret = (::acdk::lang::RObject)This->getDisplayVariant();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getDisplayVariant_INLRLocale__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getDisplayVariant(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDisplayVariant(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getENGLISH__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getENGLISH();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getFRANCE__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getFRANCE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getFRENCH__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getFRENCH();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getGERMAN__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getGERMAN();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getGERMANY__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getGERMANY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getISO3Country__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getISO3Country();
    else
        ret = (::acdk::lang::RObject)This->getISO3Country();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getISO3Languages__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getISO3Languages();
    else
        ret = (::acdk::lang::RObject)This->getISO3Languages();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getISOCountries__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getISOCountries();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getISOLanguages__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getISOLanguages();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getITALIAN__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getITALIAN();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getITALY__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getITALY();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getJAPAN__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getJAPAN();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getJAPANESE__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getJAPANESE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getKOREA__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getKOREA();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getKOREAN__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getKOREAN();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getLanguage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getLanguage();
    else
        ret = (::acdk::lang::RObject)This->getLanguage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getPRC__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getPRC();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getSIMPLIFIED_CHINESE__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getSIMPLIFIED_CHINESE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getSystemCountry__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getSystemCountry();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getSystemEncoding__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getSystemEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getSystemLanguage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getSystemLanguage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getSystemLocale__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getSystemLocale();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getSystemLocaleString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getSystemLocaleString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale::getSystemLocaleValues(::acdk::lang::dmi::castToObjectRef< RString>(args[0], dc), ::acdk::lang::dmi::castToObjectRef< RString>(args[1], dc), ::acdk::lang::dmi::castToObjectRef< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getTAIWAN__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getTAIWAN();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getTRADITIONAL_CHINESE__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getTRADITIONAL_CHINESE();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getUK__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getUK();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getUS__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::getUS();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_getVariant__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Locale::getVariant();
    else
        ret = (::acdk::lang::RObject)This->getVariant();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_isoCountry2longCountry_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::isoCountry2longCountry(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_isoLang2longLang_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::isoLang2longLang(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_longCountry2ISO_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::longCountry2ISO(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_longLang2ISO_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Locale::longLang2ISO(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_setDefault_INLRLocale__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Locale::setDefault(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    else
        This->setDefault(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_setSystemLocale_INLRLocale_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale::setSystemLocale(::acdk::lang::dmi::castTo< RLocale>(args[0], dc), (SystemLocaleCategory)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_setSystemLocale_INLRLocale__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale::setSystemLocale(::acdk::lang::dmi::castTo< RLocale>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_setSystemLocale_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale::setSystemLocale(::acdk::lang::dmi::castTo< RString>(args[0], dc), (SystemLocaleCategory)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_setSystemLocale_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale::setSystemLocale(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Locale_method_setSystemLocaleValues_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Locale::setSystemLocaleValues(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_CANADA_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::CANADA, flags);
    else
      Locale::CANADA = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_CANADA_FRENCH_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::CANADA_FRENCH, flags);
    else
      Locale::CANADA_FRENCH = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_CHINA_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::CHINA, flags);
    else
      Locale::CHINA = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_CHINESE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::CHINESE, flags);
    else
      Locale::CHINESE = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_ENGLISH_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::ENGLISH, flags);
    else
      Locale::ENGLISH = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_FRANCE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::FRANCE, flags);
    else
      Locale::FRANCE = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_FRENCH_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::FRENCH, flags);
    else
      Locale::FRENCH = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_GERMAN_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::GERMAN, flags);
    else
      Locale::GERMAN = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_GERMANY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::GERMANY, flags);
    else
      Locale::GERMANY = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_ITALIAN_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::ITALIAN, flags);
    else
      Locale::ITALIAN = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_ITALY_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::ITALY, flags);
    else
      Locale::ITALY = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_JAPAN_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::JAPAN, flags);
    else
      Locale::JAPAN = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_JAPANESE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::JAPANESE, flags);
    else
      Locale::JAPANESE = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_KOREA_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::KOREA, flags);
    else
      Locale::KOREA = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_KOREAN_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::KOREAN, flags);
    else
      Locale::KOREAN = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_PRC_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::PRC, flags);
    else
      Locale::PRC = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_SIMPLIFIED_CHINESE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::SIMPLIFIED_CHINESE, flags);
    else
      Locale::SIMPLIFIED_CHINESE = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_TAIWAN_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::TAIWAN, flags);
    else
      Locale::TAIWAN = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_TRADITIONAL_CHINESE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::TRADITIONAL_CHINESE, flags);
    else
      Locale::TRADITIONAL_CHINESE = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_UK_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::UK, flags);
    else
      Locale::UK = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields_US_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::US, flags);
    else
      Locale::US = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields__country_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_country, flags);
    else
      This->_country = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields__defaultLocale_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(Locale::_defaultLocale, flags);
    else
      Locale::_defaultLocale = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields__hashCode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_hashCode, flags);
    else
      This->_hashCode = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields__language_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_language, flags);
    else
      This->_language = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Locale_fields__variant_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Locale* This = dmi_cast<Locale>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_variant, flags);
    else
      This->_variant = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_CANADA = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "CANADA", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_CANADA_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_CANADA_FRENCH = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "CANADA_FRENCH", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_CANADA_FRENCH_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_CHINA = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "CHINA", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_CHINA_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_CHINESE = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "CHINESE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_CHINESE_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_ENGLISH = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ENGLISH", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_ENGLISH_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_FRANCE = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FRANCE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_FRANCE_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_FRENCH = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "FRENCH", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_FRENCH_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_GERMAN = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "GERMAN", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_GERMAN_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_GERMANY = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "GERMANY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_GERMANY_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_ITALIAN = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ITALIAN", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_ITALIAN_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_ITALY = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ITALY", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_ITALY_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_JAPAN = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "JAPAN", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_JAPAN_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_JAPANESE = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "JAPANESE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_JAPANESE_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_KOREA = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "KOREA", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_KOREA_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_KOREAN = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "KOREAN", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_KOREAN_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_PRC = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "PRC", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_PRC_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_SIMPLIFIED_CHINESE = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "SIMPLIFIED_CHINESE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_SIMPLIFIED_CHINESE_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_TAIWAN = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TAIWAN", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_TAIWAN_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_TRADITIONAL_CHINESE = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TRADITIONAL_CHINESE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_TRADITIONAL_CHINESE_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_UK = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "UK", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_UK_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields_US = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "US", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields_US_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields__country = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_country", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields__country_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields__defaultLocale = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_defaultLocale", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields__defaultLocale_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields__hashCode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_hashCode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Locale_MetainfoWrapper::Locale_fields__hashCode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields__language = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_language", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields__language_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Locale_fields__variant = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_variant", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Locale_MetainfoWrapper::Locale_fields__variant_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Locale_fields[] = 
{
  &Locale_fields_CANADA,
  &Locale_fields_CANADA_FRENCH,
  &Locale_fields_CHINA,
  &Locale_fields_CHINESE,
  &Locale_fields_ENGLISH,
  &Locale_fields_FRANCE,
  &Locale_fields_FRENCH,
  &Locale_fields_GERMAN,
  &Locale_fields_GERMANY,
  &Locale_fields_ITALIAN,
  &Locale_fields_ITALY,
  &Locale_fields_JAPAN,
  &Locale_fields_JAPANESE,
  &Locale_fields_KOREA,
  &Locale_fields_KOREAN,
  &Locale_fields_PRC,
  &Locale_fields_SIMPLIFIED_CHINESE,
  &Locale_fields_TAIWAN,
  &Locale_fields_TRADITIONAL_CHINESE,
  &Locale_fields_UK,
  &Locale_fields_US,
  &Locale_fields__country,
  &Locale_fields__defaultLocale,
  &Locale_fields__hashCode,
  &Locale_fields__language,
  &Locale_fields__variant,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_10_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Locale_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_Locale__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_Locale__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_Locale__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Locale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Locale::clazzInfo(), // return type
  "_0_Locale", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_Locale__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_Locale__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_Locale__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_Locale_INLRString_INLRString__LRLocale__arg_language = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "language", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_Locale_INLRString_INLRString__LRLocale__arg_country = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "country", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_Locale_INLRString_INLRString__LRLocale__args[] = 
{
  &Locale_methods_Locale_INLRString_INLRString__LRLocale__arg_language,
  &Locale_methods_Locale_INLRString_INLRString__LRLocale__arg_country,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_Locale_INLRString_INLRString__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_Locale_INLRString_INLRString__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Locale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Locale::clazzInfo(), // return type
  "_1_Locale", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_Locale_INLRString_INLRString__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_Locale_INLRString_INLRString__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_Locale_INLRString_INLRString__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__arg_language = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "language", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__arg_country = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "country", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__arg_variant = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "variant", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__args[] = 
{
  &Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__arg_language,
  &Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__arg_country,
  &Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__arg_variant,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_Locale_INLRString_INLRString_INLRString__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Locale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Locale::clazzInfo(), // return type
  "_2_Locale", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_Locale_INLRString_INLRString_INLRString__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_Locale_INLRString_INLRString_INLRString__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods__calcHashCode__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods__calcHashCode__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method__calcHashCode__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_calcHashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Z__calcHashCode", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods__calcHashCode__V_args, // the arguments
  0, //arguments count
  Locale_methods__calcHashCode__V_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method__calcHashCode__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods__equals_INLRLocale__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods__equals_INLRLocale__Z_args[] = 
{
  &Locale_methods__equals_INLRLocale__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods__equals_INLRLocale__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method__equals_INLRLocale__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_Y__equals", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods__equals_INLRLocale__Z_args, // the arguments
  0, //arguments count
  Locale_methods__equals_INLRLocale__Z_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method__equals_INLRLocale__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_convertLanguage_INLRString__LRString__arg_language = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "language", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_convertLanguage_INLRString__LRString__args[] = 
{
  &Locale_methods_convertLanguage_INLRString__LRString__arg_language,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_convertLanguage_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_convertLanguage_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "convertLanguage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_X_convertLanguage", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_convertLanguage_INLRString__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_convertLanguage_INLRString__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_convertLanguage_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_equals_INLRObject__Z_args[] = 
{
  &Locale_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_equals", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Locale_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_equals_INLRLocale__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_equals_INLRLocale__Z_args[] = 
{
  &Locale_methods_equals_INLRLocale__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_equals_INLRLocale__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_equals_INLRLocale__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_equals_INLRLocale__Z_args, // the arguments
  0, //arguments count
  Locale_methods_equals_INLRLocale__Z_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_equals_INLRLocale__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getAvailableLocals__LRLocaleArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getAvailableLocals__LRLocaleArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getAvailableLocals__LRLocaleArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableLocals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocaleArray::clazzInfo(), // return type
  "_v_getAvailableLocals", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getAvailableLocals__LRLocaleArray__args, // the arguments
  0, //arguments count
  Locale_methods_getAvailableLocals__LRLocaleArray__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getAvailableLocals__LRLocaleArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getCANADA__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getCANADA__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getCANADA__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCANADA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_s_getCANADA", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getCANADA__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getCANADA__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getCANADA__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getCANADA_FRENCH__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getCANADA_FRENCH__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getCANADA_FRENCH__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCANADA_FRENCH", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_t_getCANADA_FRENCH", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getCANADA_FRENCH__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getCANADA_FRENCH__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getCANADA_FRENCH__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getCHINA__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getCHINA__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getCHINA__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCHINA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_n_getCHINA", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getCHINA__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getCHINA__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getCHINA__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getCHINESE__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getCHINESE__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getCHINESE__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCHINESE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_f_getCHINESE", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getCHINESE__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getCHINESE__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getCHINESE__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getCountry__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getCountry__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getCountry__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCountry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getCountry", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getCountry__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getCountry__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getCountry__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDefault__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDefault__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDefault__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefault", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_8_getDefault", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDefault__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getDefault__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDefault__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDisplayCountry__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDisplayCountry__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDisplayCountry__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayCountry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_N_getDisplayCountry", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDisplayCountry__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getDisplayCountry__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDisplayCountry__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_getDisplayCountry_INLRLocale__LRString__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDisplayCountry_INLRLocale__LRString__args[] = 
{
  &Locale_methods_getDisplayCountry_INLRLocale__LRString__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDisplayCountry_INLRLocale__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDisplayCountry_INLRLocale__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayCountry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_O_getDisplayCountry", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDisplayCountry_INLRLocale__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getDisplayCountry_INLRLocale__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDisplayCountry_INLRLocale__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDisplayLanguage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDisplayLanguage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDisplayLanguage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayLanguage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_L_getDisplayLanguage", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDisplayLanguage__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getDisplayLanguage__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDisplayLanguage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_getDisplayLanguage_INLRLocale__LRString__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDisplayLanguage_INLRLocale__LRString__args[] = 
{
  &Locale_methods_getDisplayLanguage_INLRLocale__LRString__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDisplayLanguage_INLRLocale__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDisplayLanguage_INLRLocale__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayLanguage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_M_getDisplayLanguage", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDisplayLanguage_INLRLocale__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getDisplayLanguage_INLRLocale__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDisplayLanguage_INLRLocale__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDisplayName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDisplayName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDisplayName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_R_getDisplayName", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDisplayName__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getDisplayName__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDisplayName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_getDisplayName_INLRLocale__LRString__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDisplayName_INLRLocale__LRString__args[] = 
{
  &Locale_methods_getDisplayName_INLRLocale__LRString__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDisplayName_INLRLocale__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDisplayName_INLRLocale__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_S_getDisplayName", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDisplayName_INLRLocale__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getDisplayName_INLRLocale__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDisplayName_INLRLocale__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDisplayVariant__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDisplayVariant__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDisplayVariant__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayVariant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_P_getDisplayVariant", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDisplayVariant__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getDisplayVariant__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDisplayVariant__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_getDisplayVariant_INLRLocale__LRString__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getDisplayVariant_INLRLocale__LRString__args[] = 
{
  &Locale_methods_getDisplayVariant_INLRLocale__LRString__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getDisplayVariant_INLRLocale__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getDisplayVariant_INLRLocale__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDisplayVariant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Q_getDisplayVariant", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getDisplayVariant_INLRLocale__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getDisplayVariant_INLRLocale__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getDisplayVariant_INLRLocale__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getENGLISH__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getENGLISH__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getENGLISH__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getENGLISH", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_9_getENGLISH", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getENGLISH__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getENGLISH__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getENGLISH__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getFRANCE__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getFRANCE__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getFRANCE__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFRANCE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_i_getFRANCE", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getFRANCE__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getFRANCE__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getFRANCE__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getFRENCH__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getFRENCH__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getFRENCH__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFRENCH", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_a_getFRENCH", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getFRENCH__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getFRENCH__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getFRENCH__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getGERMAN__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getGERMAN__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getGERMAN__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGERMAN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_b_getGERMAN", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getGERMAN__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getGERMAN__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getGERMAN__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getGERMANY__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getGERMANY__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getGERMANY__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGERMANY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_j_getGERMANY", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getGERMANY__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getGERMANY__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getGERMANY__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getISO3Country__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getISO3Country__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getISO3Country__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getISO3Country", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_K_getISO3Country", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getISO3Country__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getISO3Country__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getISO3Country__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getISO3Languages__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getISO3Languages__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getISO3Languages__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getISO3Languages", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_J_getISO3Languages", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getISO3Languages__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getISO3Languages__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getISO3Languages__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getISOCountries__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getISOCountries__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getISOCountries__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getISOCountries", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_w_getISOCountries", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getISOCountries__LRStringArray__args, // the arguments
  0, //arguments count
  Locale_methods_getISOCountries__LRStringArray__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getISOCountries__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getISOLanguages__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getISOLanguages__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getISOLanguages__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getISOLanguages", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_x_getISOLanguages", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getISOLanguages__LRStringArray__args, // the arguments
  0, //arguments count
  Locale_methods_getISOLanguages__LRStringArray__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getISOLanguages__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getITALIAN__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getITALIAN__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getITALIAN__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getITALIAN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_c_getITALIAN", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getITALIAN__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getITALIAN__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getITALIAN__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getITALY__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getITALY__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getITALY__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getITALY", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_k_getITALY", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getITALY__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getITALY__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getITALY__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getJAPAN__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getJAPAN__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getJAPAN__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getJAPAN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_l_getJAPAN", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getJAPAN__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getJAPAN__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getJAPAN__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getJAPANESE__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getJAPANESE__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getJAPANESE__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getJAPANESE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_d_getJAPANESE", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getJAPANESE__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getJAPANESE__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getJAPANESE__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getKOREA__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getKOREA__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getKOREA__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKOREA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_m_getKOREA", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getKOREA__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getKOREA__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getKOREA__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getKOREAN__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getKOREAN__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getKOREAN__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKOREAN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_e_getKOREAN", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getKOREAN__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getKOREAN__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getKOREAN__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getLanguage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getLanguage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getLanguage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLanguage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getLanguage", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getLanguage__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getLanguage__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getLanguage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getPRC__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getPRC__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getPRC__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPRC", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_o_getPRC", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getPRC__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getPRC__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getPRC__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getSIMPLIFIED_CHINESE__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getSIMPLIFIED_CHINESE__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getSIMPLIFIED_CHINESE__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSIMPLIFIED_CHINESE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_g_getSIMPLIFIED_CHINESE", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getSIMPLIFIED_CHINESE__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getSIMPLIFIED_CHINESE__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getSIMPLIFIED_CHINESE__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getSystemCountry__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getSystemCountry__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getSystemCountry__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemCountry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_H_getSystemCountry", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getSystemCountry__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getSystemCountry__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getSystemCountry__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getSystemEncoding__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getSystemEncoding__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getSystemEncoding__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_I_getSystemEncoding", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getSystemEncoding__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getSystemEncoding__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getSystemEncoding__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getSystemLanguage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getSystemLanguage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getSystemLanguage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemLanguage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_G_getSystemLanguage", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getSystemLanguage__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getSystemLanguage__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getSystemLanguage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getSystemLocale__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getSystemLocale__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getSystemLocale__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_y_getSystemLocale", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getSystemLocale__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getSystemLocale__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getSystemLocale__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getSystemLocaleString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getSystemLocaleString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getSystemLocaleString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemLocaleString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_z_getSystemLocaleString", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getSystemLocaleString__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getSystemLocaleString__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getSystemLocaleString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_arg_language = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "language", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_arg_country = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "country", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_args[] = 
{
  &Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_arg_language,
  &Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_arg_country,
  &Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSystemLocaleValues", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_getSystemLocaleValues", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_args, // the arguments
  0, //arguments count
  Locale_methods_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getTAIWAN__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getTAIWAN__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getTAIWAN__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTAIWAN", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_p_getTAIWAN", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getTAIWAN__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getTAIWAN__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getTAIWAN__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getTRADITIONAL_CHINESE__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getTRADITIONAL_CHINESE__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getTRADITIONAL_CHINESE__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTRADITIONAL_CHINESE", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_h_getTRADITIONAL_CHINESE", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getTRADITIONAL_CHINESE__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getTRADITIONAL_CHINESE__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getTRADITIONAL_CHINESE__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getUK__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getUK__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getUK__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUK", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_q_getUK", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getUK__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getUK__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getUK__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getUS__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getUS__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getUS__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUS", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_r_getUS", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getUS__LRLocale__args, // the arguments
  0, //arguments count
  Locale_methods_getUS__LRLocale__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getUS__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_getVariant__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_getVariant__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_getVariant__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getVariant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getVariant", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_getVariant__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_getVariant__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_getVariant__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_isoCountry2longCountry_INLRString__LRString__arg_country = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "country", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_isoCountry2longCountry_INLRString__LRString__args[] = 
{
  &Locale_methods_isoCountry2longCountry_INLRString__LRString__arg_country,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_isoCountry2longCountry_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_isoCountry2longCountry_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isoCountry2longCountry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_W_isoCountry2longCountry", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_isoCountry2longCountry_INLRString__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_isoCountry2longCountry_INLRString__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_isoCountry2longCountry_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_isoLang2longLang_INLRString__LRString__arg_language = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "language", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_isoLang2longLang_INLRString__LRString__args[] = 
{
  &Locale_methods_isoLang2longLang_INLRString__LRString__arg_language,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_isoLang2longLang_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_isoLang2longLang_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isoLang2longLang", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_V_isoLang2longLang", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_isoLang2longLang_INLRString__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_isoLang2longLang_INLRString__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_isoLang2longLang_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_longCountry2ISO_INLRString__LRString__arg_country = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "country", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_longCountry2ISO_INLRString__LRString__args[] = 
{
  &Locale_methods_longCountry2ISO_INLRString__LRString__arg_country,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_longCountry2ISO_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_longCountry2ISO_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "longCountry2ISO", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_U_longCountry2ISO", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_longCountry2ISO_INLRString__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_longCountry2ISO_INLRString__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_longCountry2ISO_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_longLang2ISO_INLRString__LRString__arg_language = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "language", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_longLang2ISO_INLRString__LRString__args[] = 
{
  &Locale_methods_longLang2ISO_INLRString__LRString__arg_language,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_longLang2ISO_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_longLang2ISO_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "longLang2ISO", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_T_longLang2ISO", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_longLang2ISO_INLRString__LRString__args, // the arguments
  0, //arguments count
  Locale_methods_longLang2ISO_INLRString__LRString__exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_longLang2ISO_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setDefault_INLRLocale__V_arg_newLocale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newLocale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_setDefault_INLRLocale__V_args[] = 
{
  &Locale_methods_setDefault_INLRLocale__V_arg_newLocale,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_setDefault_INLRLocale__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_setDefault_INLRLocale__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefault", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setDefault", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_setDefault_INLRLocale__V_args, // the arguments
  0, //arguments count
  Locale_methods_setDefault_INLRLocale__V_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_setDefault_INLRLocale__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocale_INLRLocale_I_V_arg_loc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "loc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocale_INLRLocale_I_V_arg_cat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_setSystemLocale_INLRLocale_I_V_args[] = 
{
  &Locale_methods_setSystemLocale_INLRLocale_I_V_arg_loc,
  &Locale_methods_setSystemLocale_INLRLocale_I_V_arg_cat,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_setSystemLocale_INLRLocale_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_setSystemLocale_INLRLocale_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSystemLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_setSystemLocale", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_setSystemLocale_INLRLocale_I_V_args, // the arguments
  0, //arguments count
  Locale_methods_setSystemLocale_INLRLocale_I_V_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_setSystemLocale_INLRLocale_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocale_INLRLocale__V_arg_loc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "loc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_setSystemLocale_INLRLocale__V_args[] = 
{
  &Locale_methods_setSystemLocale_INLRLocale__V_arg_loc,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_setSystemLocale_INLRLocale__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_setSystemLocale_INLRLocale__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setSystemLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_setSystemLocale", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_setSystemLocale_INLRLocale__V_args, // the arguments
  0, //arguments count
  Locale_methods_setSystemLocale_INLRLocale__V_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_setSystemLocale_INLRLocale__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocale_INLRString_I_V_arg_localeIdent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localeIdent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocale_INLRString_I_V_arg_cat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_setSystemLocale_INLRString_I_V_args[] = 
{
  &Locale_methods_setSystemLocale_INLRString_I_V_arg_localeIdent,
  &Locale_methods_setSystemLocale_INLRString_I_V_arg_cat,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_setSystemLocale_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_setSystemLocale_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSystemLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_setSystemLocale", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_setSystemLocale_INLRString_I_V_args, // the arguments
  0, //arguments count
  Locale_methods_setSystemLocale_INLRString_I_V_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_setSystemLocale_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocale_INLRString__V_arg_localeIdent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "localeIdent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_setSystemLocale_INLRString__V_args[] = 
{
  &Locale_methods_setSystemLocale_INLRString__V_arg_localeIdent,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_setSystemLocale_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_setSystemLocale_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setSystemLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_setSystemLocale", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_setSystemLocale_INLRString__V_args, // the arguments
  0, //arguments count
  Locale_methods_setSystemLocale_INLRString__V_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_setSystemLocale_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_arg_language = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "language", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_arg_country = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "country", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_args[] = 
{
  &Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_arg_language,
  &Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_arg_country,
  &Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Locale_method_setSystemLocaleValues_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSystemLocaleValues", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_setSystemLocaleValues", // alternative name of method
  -1, // altlabelHashCode
  Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Locale_methods_setSystemLocaleValues_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  Locale_MetainfoWrapper::Locale_method_setSystemLocaleValues_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Locale_methods[] = 
{
  &Locale_method_GetClass__L_acdk_lang_RClass_,
  &Locale_method_Locale__LRLocale_,
  &Locale_method_Locale_INLRString_INLRString__LRLocale_,
  &Locale_method_Locale_INLRString_INLRString_INLRString__LRLocale_,
  &Locale_method__calcHashCode__V,
  &Locale_method__equals_INLRLocale__Z,
  &Locale_method_convertLanguage_INLRString__LRString_,
  &Locale_method_equals_INLRObject__Z,
  &Locale_method_equals_INLRLocale__Z,
  &Locale_method_getAvailableLocals__LRLocaleArray_,
  &Locale_method_getCANADA__LRLocale_,
  &Locale_method_getCANADA_FRENCH__LRLocale_,
  &Locale_method_getCHINA__LRLocale_,
  &Locale_method_getCHINESE__LRLocale_,
  &Locale_method_getCountry__LRString_,
  &Locale_method_getDefault__LRLocale_,
  &Locale_method_getDisplayCountry__LRString_,
  &Locale_method_getDisplayCountry_INLRLocale__LRString_,
  &Locale_method_getDisplayLanguage__LRString_,
  &Locale_method_getDisplayLanguage_INLRLocale__LRString_,
  &Locale_method_getDisplayName__LRString_,
  &Locale_method_getDisplayName_INLRLocale__LRString_,
  &Locale_method_getDisplayVariant__LRString_,
  &Locale_method_getDisplayVariant_INLRLocale__LRString_,
  &Locale_method_getENGLISH__LRLocale_,
  &Locale_method_getFRANCE__LRLocale_,
  &Locale_method_getFRENCH__LRLocale_,
  &Locale_method_getGERMAN__LRLocale_,
  &Locale_method_getGERMANY__LRLocale_,
  &Locale_method_getISO3Country__LRString_,
  &Locale_method_getISO3Languages__LRString_,
  &Locale_method_getISOCountries__LRStringArray_,
  &Locale_method_getISOLanguages__LRStringArray_,
  &Locale_method_getITALIAN__LRLocale_,
  &Locale_method_getITALY__LRLocale_,
  &Locale_method_getJAPAN__LRLocale_,
  &Locale_method_getJAPANESE__LRLocale_,
  &Locale_method_getKOREA__LRLocale_,
  &Locale_method_getKOREAN__LRLocale_,
  &Locale_method_getLanguage__LRString_,
  &Locale_method_getPRC__LRLocale_,
  &Locale_method_getSIMPLIFIED_CHINESE__LRLocale_,
  &Locale_method_getSystemCountry__LRString_,
  &Locale_method_getSystemEncoding__LRString_,
  &Locale_method_getSystemLanguage__LRString_,
  &Locale_method_getSystemLocale__LRLocale_,
  &Locale_method_getSystemLocaleString__LRString_,
  &Locale_method_getSystemLocaleValues_OUTLRString_OUTLRString_OUTLRString__V,
  &Locale_method_getTAIWAN__LRLocale_,
  &Locale_method_getTRADITIONAL_CHINESE__LRLocale_,
  &Locale_method_getUK__LRLocale_,
  &Locale_method_getUS__LRLocale_,
  &Locale_method_getVariant__LRString_,
  &Locale_method_isoCountry2longCountry_INLRString__LRString_,
  &Locale_method_isoLang2longLang_INLRString__LRString_,
  &Locale_method_longCountry2ISO_INLRString__LRString_,
  &Locale_method_longLang2ISO_INLRString__LRString_,
  &Locale_method_setDefault_INLRLocale__V,
  &Locale_method_setSystemLocale_INLRLocale_I_V,
  &Locale_method_setSystemLocale_INLRLocale__V,
  &Locale_method_setSystemLocale_INLRString_I_V,
  &Locale_method_setSystemLocale_INLRString__V,
  &Locale_method_setSystemLocaleValues_INLRString_INLRString_INLRString__V,
  0
};


struct Locale_MetaInfoInitializer
{  Locale_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Locale::clazzInfo();
    ci->fields =  _Locale_fields;
    ci->methods =  _Locale_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Locale_MetaInfoInitializer Locale_MetaInfoInitializer_staticinstance__;


struct Locale_clazzInfo_ClazzAttributesResInitializer4
{
  Locale_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Locale_methods_setSystemLocale_INLRLocale_I_V_arg_cat, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SystemLocaleCategoryMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Locale_methods_setSystemLocale_INLRString_I_V_arg_cat, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SystemLocaleCategoryMetaInf::GetEnumInfo()));
  }
};

Locale_clazzInfo_ClazzAttributesResInitializer4 Locale_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace util

