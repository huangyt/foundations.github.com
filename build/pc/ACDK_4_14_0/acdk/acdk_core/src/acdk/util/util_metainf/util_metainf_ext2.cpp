// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../util.h"
#include "../AbstractCollection.h"
#include "../AbstractList.h"
#include "../AbstractListIterator.h"
#include "../AbstractListListIterator.h"
#include "../AbstractListSubList.h"
#include "../AbstractMap.h"
#include "../AbstractSequentialList.h"
#include "../AbstractSet.h"
#include "../acdk_util_classes.h"
#include "../ArrayIterator.h"
#include "../ArrayList.h"
#include "../Arrays.h"
#include "../BasicMapEntry.h"
#include "../BitSet.h"
#include "../Bucket.h"
#include "../Calendar.h"
#include "../Collection.h"
#include "../Collections.h"
#include "../Comparator.h"
#include "../ConcurrentModificationException.h"
#include "../Date.h"
#include "../Dictionary.h"
#include "../DoubleIterator.h"
#include "../EmptyCollectionIterator.h"
#include "../Enumeration.h"
#include "../EventListener.h"
#include "../EventListenerProxy.h"
#include "../EventObject.h"
#include "../GregorianCalendar.h"
#include "../HashMap.h"
#include "../HashSet.h"
#include "../Hashtable.h"
#include "../IdentityHashMap.h"
#include "../Iterator.h"
#include "../LinkedList.h"
#include "../List.h"
#include "../ListIterator.h"
#include "../ListResourceBundle.h"
#include "../Locale.h"
#include "../Map.h"
#include "../MissingResourceException.h"
#include "../NoSuchElementException.h"
#include "../Properties.h"
#include "../PropertiesListener.h"
#include "../PropertyResourceBundle.h"
#include "../Random.h"
#include "../ResourceBundle.h"
#include "../Set.h"
#include "../SimpleCalendar.h"
#include "../SimpleListResourceBundle.h"
#include "../SimpleTimeZone.h"
#include "../SingleObjectIterator.h"
#include "../SortedMap.h"
#include "../SortedSet.h"
#include "../StringTokenizer.h"
#include "../SynchronizedCollections.h"
#include "../SysDate.h"
#include "../TAbstractCollection.h"
#include "../TAbstractList.h"
#include "../TAbstractListIterator.h"
#include "../TAbstractListListIterator.h"
#include "../TAbstractListSubList.h"
#include "../TAbstractMap.h"
#include "../TAbstractSet.h"
#include "../TArrayList.h"
#include "../TBasicMapEntry.h"
#include "../TBucket.h"
#include "../TCollection.h"
#include "../TComparator.h"
#include "../TDoubleIterator.h"
#include "../THashMap.h"
#include "../THashSet.h"
#include "../TimeZone.h"
#include "../TIterator.h"
#include "../TList.h"
#include "../TListIterator.h"
#include "../TMap.h"
#include "../TreeMap.h"
#include "../TreeSet.h"
#include "../TSet.h"
#include "../TSortedMap.h"
#include "../TTreeMap.h"
#include "../util.h"
#include "../util_all.h"
#include "../Vector.h"
#include "../WeakHashMap.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Map_create_array(int length)
{
  return new ObjectArrayImpl<RMap>(length);
}

//static
::acdk::lang::RObject
Map_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Map_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Map::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
    This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_containsKey_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
  ret = This->containsKey(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_containsValue_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
  ret = This->containsValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_entrySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
    ret = (::acdk::lang::RObject)This->entrySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
  ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_get_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
    ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
  ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
  ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_keySet__LRSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
    ret = (::acdk::lang::RObject)This->keySet();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_put_INLRObject_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
    ret = (::acdk::lang::RObject)This->put(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_putAll_INLRMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
    This->putAll(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_remove_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
    ret = (::acdk::lang::RObject)This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
  ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Map_method_values__LRCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Map* This = dmi_cast<Map>(This_);
    ret = (::acdk::lang::RObject)This->values();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Map_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Map_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_clear", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_clear__V_args, // the arguments
  0, //arguments count
  Map_methods_clear__V_exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Map_methods_containsKey_INLRObject__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_containsKey_INLRObject__Z_args[] = 
{
  &Map_methods_containsKey_INLRObject__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_containsKey_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_containsKey_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_containsKey", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_containsKey_INLRObject__Z_args, // the arguments
  0, //arguments count
  Map_methods_containsKey_INLRObject__Z_exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_containsKey_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Map_methods_containsValue_INLRObject__Z_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_containsValue_INLRObject__Z_args[] = 
{
  &Map_methods_containsValue_INLRObject__Z_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_containsValue_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_containsValue_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_containsValue", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_containsValue_INLRObject__Z_args, // the arguments
  0, //arguments count
  Map_methods_containsValue_INLRObject__Z_exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_containsValue_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_entrySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_entrySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_entrySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "entrySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_3_entrySet", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_entrySet__LRSet__args, // the arguments
  0, //arguments count
  Map_methods_entrySet__LRSet__exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_entrySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Map_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_equals_INLRObject__Z_args[] = 
{
  &Map_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_equals", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Map_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Map_methods_get_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_get_INLRObject__LRObject__args[] = 
{
  &Map_methods_get_INLRObject__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_get_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_get_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_get", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_get_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Map_methods_get_INLRObject__LRObject__exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_get_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Map_methods_hashCode__I_exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  Map_methods_isEmpty__Z_exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_keySet__LRSet__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_keySet__LRSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_keySet__LRSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo(), // return type
  "_8_keySet", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_keySet__LRSet__args, // the arguments
  0, //arguments count
  Map_methods_keySet__LRSet__exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_keySet__LRSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Map_methods_put_INLRObject_INLRObject__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Map_methods_put_INLRObject_INLRObject__LRObject__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_put_INLRObject_INLRObject__LRObject__args[] = 
{
  &Map_methods_put_INLRObject_INLRObject__LRObject__arg_key,
  &Map_methods_put_INLRObject_INLRObject__LRObject__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_put_INLRObject_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_put_INLRObject_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "put", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_9_put", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_put_INLRObject_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Map_methods_put_INLRObject_INLRObject__LRObject__exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_put_INLRObject_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Map_methods_putAll_INLRMap__V_arg_m = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "m", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_putAll_INLRMap__V_args[] = 
{
  &Map_methods_putAll_INLRMap__V_arg_m,
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_putAll_INLRMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_putAll_INLRMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "putAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_putAll", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_putAll_INLRMap__V_args, // the arguments
  0, //arguments count
  Map_methods_putAll_INLRMap__V_exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_putAll_INLRMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Map_methods_remove_INLRObject__LRObject__arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_remove_INLRObject__LRObject__args[] = 
{
  &Map_methods_remove_INLRObject__LRObject__arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_remove_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_remove_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_b_remove", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_remove_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Map_methods_remove_INLRObject__LRObject__exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_remove_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_size", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_size__I_args, // the arguments
  0, //arguments count
  Map_methods_size__I_exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Map_methods_values__LRCollection__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map_methods_values__LRCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Map_method_values__LRCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "values", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo(), // return type
  "_d_values", // alternative name of method
  -1, // altlabelHashCode
  Map_methods_values__LRCollection__args, // the arguments
  0, //arguments count
  Map_methods_values__LRCollection__exceptions, // the declared exceptions
  Map_MetainfoWrapper::Map_method_values__LRCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Map_methods[] = 
{
  &Map_method_GetClass__L_acdk_lang_RClass_,
  &Map_method_clear__V,
  &Map_method_containsKey_INLRObject__Z,
  &Map_method_containsValue_INLRObject__Z,
  &Map_method_entrySet__LRSet_,
  &Map_method_equals_INLRObject__Z,
  &Map_method_get_INLRObject__LRObject_,
  &Map_method_hashCode__I,
  &Map_method_isEmpty__Z,
  &Map_method_keySet__LRSet_,
  &Map_method_put_INLRObject_INLRObject__LRObject_,
  &Map_method_putAll_INLRMap__V,
  &Map_method_remove_INLRObject__LRObject_,
  &Map_method_size__I,
  &Map_method_values__LRCollection_,
  0
};


struct Map_MetaInfoInitializer
{  Map_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Map::clazzInfo();
    ci->fields =  _Map_fields;
    ci->methods =  _Map_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Map_MetaInfoInitializer Map_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
MapEntry_create_array(int length)
{
  return new ObjectArrayImpl<RMapEntry>(length);
}

//static
::acdk::lang::RObject
MapEntry_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MapEntry_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MapEntry_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MapEntry::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MapEntry_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MapEntry* This = dmi_cast<MapEntry>(This_);
  ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MapEntry_method_getKey__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MapEntry* This = dmi_cast<MapEntry>(This_);
    ret = (::acdk::lang::RObject)This->getKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MapEntry_method_getValue__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MapEntry* This = dmi_cast<MapEntry>(This_);
    ret = (::acdk::lang::RObject)This->getValue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MapEntry_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MapEntry* This = dmi_cast<MapEntry>(This_);
  ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MapEntry_method_setValue_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MapEntry* This = dmi_cast<MapEntry>(This_);
    ret = (::acdk::lang::RObject)This->setValue(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MapEntry_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MapEntry_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MapEntry_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MapEntry_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MapEntry_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MapEntry_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MapEntry_MetainfoWrapper::MapEntry_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MapEntry_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MapEntry_methods_equals_INLRObject__Z_args[] = 
{
  &MapEntry_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* MapEntry_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MapEntry_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_equals", // alternative name of method
  -1, // altlabelHashCode
  MapEntry_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  MapEntry_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  MapEntry_MetainfoWrapper::MapEntry_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MapEntry_methods_getKey__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MapEntry_methods_getKey__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MapEntry_method_getKey__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_getKey", // alternative name of method
  -1, // altlabelHashCode
  MapEntry_methods_getKey__LRObject__args, // the arguments
  0, //arguments count
  MapEntry_methods_getKey__LRObject__exceptions, // the declared exceptions
  MapEntry_MetainfoWrapper::MapEntry_method_getKey__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MapEntry_methods_getValue__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MapEntry_methods_getValue__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MapEntry_method_getValue__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_getValue", // alternative name of method
  -1, // altlabelHashCode
  MapEntry_methods_getValue__LRObject__args, // the arguments
  0, //arguments count
  MapEntry_methods_getValue__LRObject__exceptions, // the declared exceptions
  MapEntry_MetainfoWrapper::MapEntry_method_getValue__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MapEntry_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MapEntry_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MapEntry_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_hashCode", // alternative name of method
  -1, // altlabelHashCode
  MapEntry_methods_hashCode__I_args, // the arguments
  0, //arguments count
  MapEntry_methods_hashCode__I_exceptions, // the declared exceptions
  MapEntry_MetainfoWrapper::MapEntry_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MapEntry_methods_setValue_INLRObject__LRObject__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MapEntry_methods_setValue_INLRObject__LRObject__args[] = 
{
  &MapEntry_methods_setValue_INLRObject__LRObject__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* MapEntry_methods_setValue_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MapEntry_method_setValue_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_setValue", // alternative name of method
  -1, // altlabelHashCode
  MapEntry_methods_setValue_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  MapEntry_methods_setValue_INLRObject__LRObject__exceptions, // the declared exceptions
  MapEntry_MetainfoWrapper::MapEntry_method_setValue_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MapEntry_methods[] = 
{
  &MapEntry_method_GetClass__L_acdk_lang_RClass_,
  &MapEntry_method_equals_INLRObject__Z,
  &MapEntry_method_getKey__LRObject_,
  &MapEntry_method_getValue__LRObject_,
  &MapEntry_method_hashCode__I,
  &MapEntry_method_setValue_INLRObject__LRObject_,
  0
};


struct MapEntry_MetaInfoInitializer
{  MapEntry_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MapEntry::clazzInfo();
    ci->fields =  _MapEntry_fields;
    ci->methods =  _MapEntry_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MapEntry_MetaInfoInitializer MapEntry_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
MissingResourceException_create_array(int length)
{
  return new ObjectArrayImpl<RMissingResourceException>(length);
}

//static
::acdk::lang::RObject
MissingResourceException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MissingResourceException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MissingResourceException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MissingResourceException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MissingResourceException_method_MissingResourceException__LRMissingResourceException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MissingResourceException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MissingResourceException_method_MissingResourceException_INLRString__LRMissingResourceException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MissingResourceException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_MissingResourceException(IN(::acdk::lang::RThrowable) ex)
{
  throw RMissingResourceException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _MissingResourceException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MissingResourceException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MissingResourceException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MissingResourceException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MissingResourceException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MissingResourceException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MissingResourceException_MetainfoWrapper::MissingResourceException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MissingResourceException_methods_MissingResourceException__LRMissingResourceException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MissingResourceException_methods_MissingResourceException__LRMissingResourceException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MissingResourceException_method_MissingResourceException__LRMissingResourceException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MissingResourceException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MissingResourceException::clazzInfo(), // return type
  "_0_MissingResourceException", // alternative name of method
  -1, // altlabelHashCode
  MissingResourceException_methods_MissingResourceException__LRMissingResourceException__args, // the arguments
  0, //arguments count
  MissingResourceException_methods_MissingResourceException__LRMissingResourceException__exceptions, // the declared exceptions
  MissingResourceException_MetainfoWrapper::MissingResourceException_method_MissingResourceException__LRMissingResourceException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MissingResourceException_methods_MissingResourceException_INLRString__LRMissingResourceException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MissingResourceException_methods_MissingResourceException_INLRString__LRMissingResourceException__args[] = 
{
  &MissingResourceException_methods_MissingResourceException_INLRString__LRMissingResourceException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* MissingResourceException_methods_MissingResourceException_INLRString__LRMissingResourceException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MissingResourceException_method_MissingResourceException_INLRString__LRMissingResourceException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MissingResourceException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MissingResourceException::clazzInfo(), // return type
  "_1_MissingResourceException", // alternative name of method
  -1, // altlabelHashCode
  MissingResourceException_methods_MissingResourceException_INLRString__LRMissingResourceException__args, // the arguments
  0, //arguments count
  MissingResourceException_methods_MissingResourceException_INLRString__LRMissingResourceException__exceptions, // the declared exceptions
  MissingResourceException_MetainfoWrapper::MissingResourceException_method_MissingResourceException_INLRString__LRMissingResourceException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MissingResourceException_methods[] = 
{
  &MissingResourceException_method_GetClass__L_acdk_lang_RClass_,
  &MissingResourceException_method_MissingResourceException__LRMissingResourceException_,
  &MissingResourceException_method_MissingResourceException_INLRString__LRMissingResourceException_,
  0
};


struct MissingResourceException_MetaInfoInitializer
{  MissingResourceException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MissingResourceException::clazzInfo();
    ci->fields =  _MissingResourceException_fields;
    ci->methods =  _MissingResourceException_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MissingResourceException_MetaInfoInitializer MissingResourceException_MetaInfoInitializer_staticinstance__;


struct MissingResourceException_clazzInfo_ClazzAttributesResInitializer5
{
  MissingResourceException_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)MissingResourceException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_MissingResourceException));
  }
};

MissingResourceException_clazzInfo_ClazzAttributesResInitializer5 MissingResourceException_clazzInfo_ClazzAttributesResInitializer5_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
NoSuchElementException_create_array(int length)
{
  return new ObjectArrayImpl<RNoSuchElementException>(length);
}

//static
::acdk::lang::RObject
NoSuchElementException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class NoSuchElementException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchElementException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)NoSuchElementException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchElementException_method_NoSuchElementException__LRNoSuchElementException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchElementException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  NoSuchElementException_method_NoSuchElementException_INLRString__LRNoSuchElementException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new NoSuchElementException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_NoSuchElementException(IN(::acdk::lang::RThrowable) ex)
{
  throw RNoSuchElementException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _NoSuchElementException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchElementException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchElementException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchElementException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  NoSuchElementException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  NoSuchElementException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  NoSuchElementException_MetainfoWrapper::NoSuchElementException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchElementException_methods_NoSuchElementException__LRNoSuchElementException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchElementException_methods_NoSuchElementException__LRNoSuchElementException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchElementException_method_NoSuchElementException__LRNoSuchElementException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchElementException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchElementException::clazzInfo(), // return type
  "_0_NoSuchElementException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchElementException_methods_NoSuchElementException__LRNoSuchElementException__args, // the arguments
  0, //arguments count
  NoSuchElementException_methods_NoSuchElementException__LRNoSuchElementException__exceptions, // the declared exceptions
  NoSuchElementException_MetainfoWrapper::NoSuchElementException_method_NoSuchElementException__LRNoSuchElementException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__args[] = 
{
  &NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo NoSuchElementException_method_NoSuchElementException_INLRString__LRNoSuchElementException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "NoSuchElementException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  NoSuchElementException::clazzInfo(), // return type
  "_1_NoSuchElementException", // alternative name of method
  -1, // altlabelHashCode
  NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__args, // the arguments
  0, //arguments count
  NoSuchElementException_methods_NoSuchElementException_INLRString__LRNoSuchElementException__exceptions, // the declared exceptions
  NoSuchElementException_MetainfoWrapper::NoSuchElementException_method_NoSuchElementException_INLRString__LRNoSuchElementException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _NoSuchElementException_methods[] = 
{
  &NoSuchElementException_method_GetClass__L_acdk_lang_RClass_,
  &NoSuchElementException_method_NoSuchElementException__LRNoSuchElementException_,
  &NoSuchElementException_method_NoSuchElementException_INLRString__LRNoSuchElementException_,
  0
};


struct NoSuchElementException_MetaInfoInitializer
{  NoSuchElementException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = NoSuchElementException::clazzInfo();
    ci->fields =  _NoSuchElementException_fields;
    ci->methods =  _NoSuchElementException_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
NoSuchElementException_MetaInfoInitializer NoSuchElementException_MetaInfoInitializer_staticinstance__;


struct NoSuchElementException_clazzInfo_ClazzAttributesResInitializer6
{
  NoSuchElementException_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)NoSuchElementException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_NoSuchElementException));
  }
};

NoSuchElementException_clazzInfo_ClazzAttributesResInitializer6 NoSuchElementException_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
PropertiesChangeListener_create_array(int length)
{
  return new ObjectArrayImpl<RPropertiesChangeListener>(length);
}

//static
::acdk::lang::RObject
PropertiesChangeListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PropertiesChangeListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertiesChangeListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PropertiesChangeListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertiesChangeListener_method_propertyChanged_IINLRProperties_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertiesChangeListener* This = dmi_cast<PropertiesChangeListener>(This_);
    This->propertyChanged((PropertiesChangeAction)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< RProperties>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RObject>(args[3], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _PropertiesChangeListener_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertiesChangeListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertiesChangeListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertiesChangeListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PropertiesChangeListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PropertiesChangeListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PropertiesChangeListener_MetainfoWrapper::PropertiesChangeListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_action = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "action", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_args[] = 
{
  &PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_action,
  &PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_props,
  &PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_key,
  &PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertiesChangeListener_method_propertyChanged_IINLRProperties_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "propertyChanged", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_propertyChanged", // alternative name of method
  -1, // altlabelHashCode
  PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_exceptions, // the declared exceptions
  PropertiesChangeListener_MetainfoWrapper::PropertiesChangeListener_method_propertyChanged_IINLRProperties_INLRString_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PropertiesChangeListener_methods[] = 
{
  &PropertiesChangeListener_method_GetClass__L_acdk_lang_RClass_,
  &PropertiesChangeListener_method_propertyChanged_IINLRProperties_INLRString_INLRObject__V,
  0
};


struct PropertiesChangeListener_MetaInfoInitializer
{  PropertiesChangeListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PropertiesChangeListener::clazzInfo();
    ci->fields =  _PropertiesChangeListener_fields;
    ci->methods =  _PropertiesChangeListener_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PropertiesChangeListener_MetaInfoInitializer PropertiesChangeListener_MetaInfoInitializer_staticinstance__;


struct PropertiesChangeListener_clazzInfo_ClazzAttributesResInitializer7
{
  PropertiesChangeListener_clazzInfo_ClazzAttributesResInitializer7()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&PropertiesChangeListener_methods_propertyChanged_IINLRProperties_INLRString_INLRObject__V_arg_action, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)PropertiesChangeActionMetaInf::GetEnumInfo()));
  }
};

PropertiesChangeListener_clazzInfo_ClazzAttributesResInitializer7 PropertiesChangeListener_clazzInfo_ClazzAttributesResInitializer7_instance;



} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
Properties_create_array(int length)
{
  return new ObjectArrayImpl<RProperties>(length);
}

//static
::acdk::lang::RObject
Properties_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Properties_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Properties::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_Properties_INLRProperties__LRProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Properties(::acdk::lang::dmi::castTo< RProperties>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_Properties__LRProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Properties();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method__format_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Properties::_format(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_addPropertyChangeListener_INLRPropertiesChangeListener__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::addPropertyChangeListener(::acdk::lang::dmi::castTo< RPropertiesChangeListener>(args[0], dc));
    else
        This->addPropertyChangeListener(::acdk::lang::dmi::castTo< RPropertiesChangeListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_defaults__LRProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::defaults();
    else
        ret = (::acdk::lang::RObject)This->defaults();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_eval_INLRString_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::eval(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->eval(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_eval_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::eval(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->eval(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_getArrayProperty_INLRString_IZ_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::getArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->getArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_getArrayProperty_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::getArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_getArrayProperty_INLRString_I_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::getArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_getMapProperty_INLRString_Z_LRMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::getMapProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getMapProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_getMapProperty_INLRString__LRMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::getMapProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getMapProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_getProperty_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::getProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_getProperty_INLRString_INLRString_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::getProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->getProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_getProperty_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::getProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_list_INLacdk_io_RPrintWriter_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::list(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->list(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_list_INLacdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::list(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc));
    else
        This->list(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_load_INLacdk_io_RReader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::load(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    else
        This->load(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_loadProperties_INLRString__LRProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Properties::loadProperties(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_mergeProperties_INLRProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::mergeProperties(::acdk::lang::dmi::castTo< RProperties>(args[0], dc));
    else
        This->mergeProperties(::acdk::lang::dmi::castTo< RProperties>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_propertyNames_Z_LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::propertyNames(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->propertyNames(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_propertyNames__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::propertyNames();
    else
        ret = (::acdk::lang::RObject)This->propertyNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_removePropertyChangeListener_INLRPropertiesChangeListener__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::removePropertyChangeListener(::acdk::lang::dmi::castTo< RPropertiesChangeListener>(args[0], dc));
    else
        This->removePropertyChangeListener(::acdk::lang::dmi::castTo< RPropertiesChangeListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_setArrayProperty_INLRString_INLRStringArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::setArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_setArrayProperty_INLRString_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::setArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    else
        This->setArrayProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_setDefaults_INLRProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::setDefaults(::acdk::lang::dmi::castTo< RProperties>(args[0], dc));
    else
        This->setDefaults(::acdk::lang::dmi::castTo< RProperties>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_setProperty_INLRString_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Properties::setProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->setProperty(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_setPropertyMap_INLRString_INLRMap__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::setPropertyMap(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RMap>(args[1], dc));
    else
        This->setPropertyMap(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RMap>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_store_INLacdk_io_RWriter_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::store(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
        This->store(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Properties_method_store_INLacdk_io_RWriter_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Properties::store(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->store(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Properties_fields__defaults_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_defaults, flags);
    else
      This->_defaults = ::acdk::lang::dmi::castTo< RProperties>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Properties_fields__listener_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Properties* This = dmi_cast<Properties>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_listener, flags);
    else
      This->_listener = ::acdk::lang::dmi::castTo< RPropertiesChangeListenerArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Properties_fields__defaults = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_defaults", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo(),
  Properties_MetainfoWrapper::Properties_fields__defaults_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Properties_fields__listener = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_listener", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPropertiesChangeListenerArray::clazzInfo(),
  Properties_MetainfoWrapper::Properties_fields__listener_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Properties_fields[] = 
{
  &Properties_fields__defaults,
  &Properties_fields__listener,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_u_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Properties_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_Properties_INLRProperties__LRProperties__arg_def = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "def", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_Properties_INLRProperties__LRProperties__args[] = 
{
  &Properties_methods_Properties_INLRProperties__LRProperties__arg_def,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_Properties_INLRProperties__LRProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_Properties_INLRProperties__LRProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Properties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Properties::clazzInfo(), // return type
  "_0_Properties", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_Properties_INLRProperties__LRProperties__args, // the arguments
  0, //arguments count
  Properties_methods_Properties_INLRProperties__LRProperties__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_Properties_INLRProperties__LRProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_Properties__LRProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_Properties__LRProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_Properties__LRProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Properties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Properties::clazzInfo(), // return type
  "_1_Properties", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_Properties__LRProperties__args, // the arguments
  0, //arguments count
  Properties_methods_Properties__LRProperties__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_Properties__LRProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods__format_INLRString_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods__format_INLRString_INLRString__LRString__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods__format_INLRString_INLRString__LRString__args[] = 
{
  &Properties_methods__format_INLRString_INLRString__LRString__arg_key,
  &Properties_methods__format_INLRString_INLRString__LRString__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods__format_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method__format_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_t__format", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods__format_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  Properties_methods__format_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method__format_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_addPropertyChangeListener_INLRPropertiesChangeListener__V_arg_listener = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listener", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPropertiesChangeListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_addPropertyChangeListener_INLRPropertiesChangeListener__V_args[] = 
{
  &Properties_methods_addPropertyChangeListener_INLRPropertiesChangeListener__V_arg_listener,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_addPropertyChangeListener_INLRPropertiesChangeListener__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_addPropertyChangeListener_INLRPropertiesChangeListener__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addPropertyChangeListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_addPropertyChangeListener", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_addPropertyChangeListener_INLRPropertiesChangeListener__V_args, // the arguments
  0, //arguments count
  Properties_methods_addPropertyChangeListener_INLRPropertiesChangeListener__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_addPropertyChangeListener_INLRPropertiesChangeListener__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_defaults__LRProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_defaults__LRProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_defaults__LRProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "defaults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo(), // return type
  "_n_defaults", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_defaults__LRProperties__args, // the arguments
  0, //arguments count
  Properties_methods_defaults__LRProperties__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_defaults__LRProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_eval_INLRString_Z_LRString__arg_expr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_eval_INLRString_Z_LRString__arg_recursive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "recursive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_eval_INLRString_Z_LRString__args[] = 
{
  &Properties_methods_eval_INLRString_Z_LRString__arg_expr,
  &Properties_methods_eval_INLRString_Z_LRString__arg_recursive,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_eval_INLRString_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_eval_INLRString_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_eval", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_eval_INLRString_Z_LRString__args, // the arguments
  0, //arguments count
  Properties_methods_eval_INLRString_Z_LRString__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_eval_INLRString_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_eval_INLRString__LRString__arg_expr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_eval_INLRString__LRString__args[] = 
{
  &Properties_methods_eval_INLRString__LRString__arg_expr,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_eval_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_eval_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_eval", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_eval_INLRString__LRString__args, // the arguments
  0, //arguments count
  Properties_methods_eval_INLRString__LRString__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_eval_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__arg_keyStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__arg_withDefaults = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withDefaults", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__args[] = 
{
  &Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__arg_keyStart,
  &Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__arg_start,
  &Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__arg_withDefaults,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_getArrayProperty_INLRString_IZ_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getArrayProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_8_getArrayProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__args, // the arguments
  0, //arguments count
  Properties_methods_getArrayProperty_INLRString_IZ_LRStringArray__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_getArrayProperty_INLRString_IZ_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getArrayProperty_INLRString__LRStringArray__arg_keyStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_getArrayProperty_INLRString__LRStringArray__args[] = 
{
  &Properties_methods_getArrayProperty_INLRString__LRStringArray__arg_keyStart,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_getArrayProperty_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_getArrayProperty_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getArrayProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_9_getArrayProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_getArrayProperty_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Properties_methods_getArrayProperty_INLRString__LRStringArray__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_getArrayProperty_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getArrayProperty_INLRString_I_LRStringArray__arg_keyStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getArrayProperty_INLRString_I_LRStringArray__arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_getArrayProperty_INLRString_I_LRStringArray__args[] = 
{
  &Properties_methods_getArrayProperty_INLRString_I_LRStringArray__arg_keyStart,
  &Properties_methods_getArrayProperty_INLRString_I_LRStringArray__arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_getArrayProperty_INLRString_I_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_getArrayProperty_INLRString_I_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getArrayProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_a_getArrayProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_getArrayProperty_INLRString_I_LRStringArray__args, // the arguments
  0, //arguments count
  Properties_methods_getArrayProperty_INLRString_I_LRStringArray__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_getArrayProperty_INLRString_I_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getMapProperty_INLRString_Z_LRMap__arg_keyStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getMapProperty_INLRString_Z_LRMap__arg_withDefaults = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withDefaults", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_getMapProperty_INLRString_Z_LRMap__args[] = 
{
  &Properties_methods_getMapProperty_INLRString_Z_LRMap__arg_keyStart,
  &Properties_methods_getMapProperty_INLRString_Z_LRMap__arg_withDefaults,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_getMapProperty_INLRString_Z_LRMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_getMapProperty_INLRString_Z_LRMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMapProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo(), // return type
  "_5_getMapProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_getMapProperty_INLRString_Z_LRMap__args, // the arguments
  0, //arguments count
  Properties_methods_getMapProperty_INLRString_Z_LRMap__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_getMapProperty_INLRString_Z_LRMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getMapProperty_INLRString__LRMap__arg_keyStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_getMapProperty_INLRString__LRMap__args[] = 
{
  &Properties_methods_getMapProperty_INLRString__LRMap__arg_keyStart,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_getMapProperty_INLRString__LRMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_getMapProperty_INLRString__LRMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getMapProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo(), // return type
  "_6_getMapProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_getMapProperty_INLRString__LRMap__args, // the arguments
  0, //arguments count
  Properties_methods_getMapProperty_INLRString__LRMap__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_getMapProperty_INLRString__LRMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getProperty_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_getProperty_INLRString__LRString__args[] = 
{
  &Properties_methods_getProperty_INLRString__LRString__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_getProperty_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_getProperty_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_getProperty_INLRString__LRString__args, // the arguments
  0, //arguments count
  Properties_methods_getProperty_INLRString__LRString__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_getProperty_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getProperty_INLRString_INLRString_Z_LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getProperty_INLRString_INLRString_Z_LRString__arg_defaultValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "defaultValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getProperty_INLRString_INLRString_Z_LRString__arg_withDefaults = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withDefaults", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_getProperty_INLRString_INLRString_Z_LRString__args[] = 
{
  &Properties_methods_getProperty_INLRString_INLRString_Z_LRString__arg_key,
  &Properties_methods_getProperty_INLRString_INLRString_Z_LRString__arg_defaultValue,
  &Properties_methods_getProperty_INLRString_INLRString_Z_LRString__arg_withDefaults,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_getProperty_INLRString_INLRString_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_getProperty_INLRString_INLRString_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_getProperty_INLRString_INLRString_Z_LRString__args, // the arguments
  0, //arguments count
  Properties_methods_getProperty_INLRString_INLRString_Z_LRString__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_getProperty_INLRString_INLRString_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getProperty_INLRString_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_getProperty_INLRString_INLRString__LRString__arg_defaultValue = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "defaultValue", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_getProperty_INLRString_INLRString__LRString__args[] = 
{
  &Properties_methods_getProperty_INLRString_INLRString__LRString__arg_key,
  &Properties_methods_getProperty_INLRString_INLRString__LRString__arg_defaultValue,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_getProperty_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_getProperty_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_getProperty_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  Properties_methods_getProperty_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_getProperty_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_list_INLacdk_io_RPrintWriter_Z_V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_list_INLacdk_io_RPrintWriter_Z_V_arg_withDefaults = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withDefaults", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_list_INLacdk_io_RPrintWriter_Z_V_args[] = 
{
  &Properties_methods_list_INLacdk_io_RPrintWriter_Z_V_arg_out,
  &Properties_methods_list_INLacdk_io_RPrintWriter_Z_V_arg_withDefaults,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_list_INLacdk_io_RPrintWriter_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_list_INLacdk_io_RPrintWriter_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_list", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_list_INLacdk_io_RPrintWriter_Z_V_args, // the arguments
  0, //arguments count
  Properties_methods_list_INLacdk_io_RPrintWriter_Z_V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_list_INLacdk_io_RPrintWriter_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_list_INLacdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_list_INLacdk_io_RPrintWriter__V_args[] = 
{
  &Properties_methods_list_INLacdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_list_INLacdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_list_INLacdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_list", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_list_INLacdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  Properties_methods_list_INLacdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_list_INLacdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_load_INLacdk_io_RReader__V_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_load_INLacdk_io_RReader__V_args[] = 
{
  &Properties_methods_load_INLacdk_io_RReader__V_arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_load_INLacdk_io_RReader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_load_INLacdk_io_RReader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "load", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_load", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_load_INLacdk_io_RReader__V_args, // the arguments
  0, //arguments count
  Properties_methods_load_INLacdk_io_RReader__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_load_INLacdk_io_RReader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_loadProperties_INLRString__LRProperties__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_loadProperties_INLRString__LRProperties__args[] = 
{
  &Properties_methods_loadProperties_INLRString__LRProperties__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_loadProperties_INLRString__LRProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_loadProperties_INLRString__LRProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo(), // return type
  "_s_loadProperties", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_loadProperties_INLRString__LRProperties__args, // the arguments
  0, //arguments count
  Properties_methods_loadProperties_INLRString__LRProperties__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_loadProperties_INLRString__LRProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_mergeProperties_INLRProperties__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_mergeProperties_INLRProperties__V_args[] = 
{
  &Properties_methods_mergeProperties_INLRProperties__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_mergeProperties_INLRProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_mergeProperties_INLRProperties__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mergeProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_mergeProperties", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_mergeProperties_INLRProperties__V_args, // the arguments
  0, //arguments count
  Properties_methods_mergeProperties_INLRProperties__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_mergeProperties_INLRProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_propertyNames_Z_LRIterator__arg_withDefaults = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withDefaults", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_propertyNames_Z_LRIterator__args[] = 
{
  &Properties_methods_propertyNames_Z_LRIterator__arg_withDefaults,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_propertyNames_Z_LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_propertyNames_Z_LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "propertyNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_i_propertyNames", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_propertyNames_Z_LRIterator__args, // the arguments
  0, //arguments count
  Properties_methods_propertyNames_Z_LRIterator__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_propertyNames_Z_LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_propertyNames__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_propertyNames__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_propertyNames__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "propertyNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_j_propertyNames", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_propertyNames__LRIterator__args, // the arguments
  0, //arguments count
  Properties_methods_propertyNames__LRIterator__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_propertyNames__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_removePropertyChangeListener_INLRPropertiesChangeListener__V_arg_listener = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listener", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPropertiesChangeListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_removePropertyChangeListener_INLRPropertiesChangeListener__V_args[] = 
{
  &Properties_methods_removePropertyChangeListener_INLRPropertiesChangeListener__V_arg_listener,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_removePropertyChangeListener_INLRPropertiesChangeListener__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_removePropertyChangeListener_INLRPropertiesChangeListener__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removePropertyChangeListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_removePropertyChangeListener", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_removePropertyChangeListener_INLRPropertiesChangeListener__V_args, // the arguments
  0, //arguments count
  Properties_methods_removePropertyChangeListener_INLRPropertiesChangeListener__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_removePropertyChangeListener_INLRPropertiesChangeListener__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_arg_keyStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_arg_values = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "values", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_arg_start = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "start", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_args[] = 
{
  &Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_arg_keyStart,
  &Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_arg_values,
  &Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_arg_start,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_setArrayProperty_INLRString_INLRStringArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setArrayProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setArrayProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_args, // the arguments
  0, //arguments count
  Properties_methods_setArrayProperty_INLRString_INLRStringArray_I_V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_setArrayProperty_INLRString_INLRStringArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setArrayProperty_INLRString_INLRStringArray__V_arg_keyStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setArrayProperty_INLRString_INLRStringArray__V_arg_values = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "values", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_setArrayProperty_INLRString_INLRStringArray__V_args[] = 
{
  &Properties_methods_setArrayProperty_INLRString_INLRStringArray__V_arg_keyStart,
  &Properties_methods_setArrayProperty_INLRString_INLRStringArray__V_arg_values,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_setArrayProperty_INLRString_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_setArrayProperty_INLRString_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setArrayProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setArrayProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_setArrayProperty_INLRString_INLRStringArray__V_args, // the arguments
  0, //arguments count
  Properties_methods_setArrayProperty_INLRString_INLRStringArray__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_setArrayProperty_INLRString_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setDefaults_INLRProperties__V_arg_defaults = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "defaults", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_setDefaults_INLRProperties__V_args[] = 
{
  &Properties_methods_setDefaults_INLRProperties__V_arg_defaults,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_setDefaults_INLRProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_setDefaults_INLRProperties__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefaults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_setDefaults", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_setDefaults_INLRProperties__V_args, // the arguments
  0, //arguments count
  Properties_methods_setDefaults_INLRProperties__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_setDefaults_INLRProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setProperty_INLRString_INLRString__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setProperty_INLRString_INLRString__LRObject__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_setProperty_INLRString_INLRString__LRObject__args[] = 
{
  &Properties_methods_setProperty_INLRString_INLRString__LRObject__arg_key,
  &Properties_methods_setProperty_INLRString_INLRString__LRObject__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_setProperty_INLRString_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_setProperty_INLRString_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProperty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_k_setProperty", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_setProperty_INLRString_INLRString__LRObject__args, // the arguments
  0, //arguments count
  Properties_methods_setProperty_INLRString_INLRString__LRObject__exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_setProperty_INLRString_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setPropertyMap_INLRString_INLRMap__V_arg_keyStart = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyStart", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_setPropertyMap_INLRString_INLRMap__V_arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_setPropertyMap_INLRString_INLRMap__V_args[] = 
{
  &Properties_methods_setPropertyMap_INLRString_INLRMap__V_arg_keyStart,
  &Properties_methods_setPropertyMap_INLRString_INLRMap__V_arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_setPropertyMap_INLRString_INLRMap__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_setPropertyMap_INLRString_INLRMap__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setPropertyMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setPropertyMap", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_setPropertyMap_INLRString_INLRMap__V_args, // the arguments
  0, //arguments count
  Properties_methods_setPropertyMap_INLRString_INLRMap__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_setPropertyMap_INLRString_INLRMap__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_arg_header = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "header", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_arg_withDefaults = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withDefaults", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_args[] = 
{
  &Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_arg_out,
  &Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_arg_header,
  &Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_arg_withDefaults,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_store_INLacdk_io_RWriter_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "store", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_store", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_args, // the arguments
  0, //arguments count
  Properties_methods_store_INLacdk_io_RWriter_INLRString_Z_V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_store_INLacdk_io_RWriter_INLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_store_INLacdk_io_RWriter_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Properties_methods_store_INLacdk_io_RWriter_INLRString__V_arg_header = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "header", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Properties_methods_store_INLacdk_io_RWriter_INLRString__V_args[] = 
{
  &Properties_methods_store_INLacdk_io_RWriter_INLRString__V_arg_out,
  &Properties_methods_store_INLacdk_io_RWriter_INLRString__V_arg_header,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties_methods_store_INLacdk_io_RWriter_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Properties_method_store_INLacdk_io_RWriter_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "store", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_store", // alternative name of method
  -1, // altlabelHashCode
  Properties_methods_store_INLacdk_io_RWriter_INLRString__V_args, // the arguments
  0, //arguments count
  Properties_methods_store_INLacdk_io_RWriter_INLRString__V_exceptions, // the declared exceptions
  Properties_MetainfoWrapper::Properties_method_store_INLacdk_io_RWriter_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Properties_methods[] = 
{
  &Properties_method_GetClass__L_acdk_lang_RClass_,
  &Properties_method_Properties_INLRProperties__LRProperties_,
  &Properties_method_Properties__LRProperties_,
  &Properties_method__format_INLRString_INLRString__LRString_,
  &Properties_method_addPropertyChangeListener_INLRPropertiesChangeListener__V,
  &Properties_method_defaults__LRProperties_,
  &Properties_method_eval_INLRString_Z_LRString_,
  &Properties_method_eval_INLRString__LRString_,
  &Properties_method_getArrayProperty_INLRString_IZ_LRStringArray_,
  &Properties_method_getArrayProperty_INLRString__LRStringArray_,
  &Properties_method_getArrayProperty_INLRString_I_LRStringArray_,
  &Properties_method_getMapProperty_INLRString_Z_LRMap_,
  &Properties_method_getMapProperty_INLRString__LRMap_,
  &Properties_method_getProperty_INLRString__LRString_,
  &Properties_method_getProperty_INLRString_INLRString_Z_LRString_,
  &Properties_method_getProperty_INLRString_INLRString__LRString_,
  &Properties_method_list_INLacdk_io_RPrintWriter_Z_V,
  &Properties_method_list_INLacdk_io_RPrintWriter__V,
  &Properties_method_load_INLacdk_io_RReader__V,
  &Properties_method_loadProperties_INLRString__LRProperties_,
  &Properties_method_mergeProperties_INLRProperties__V,
  &Properties_method_propertyNames_Z_LRIterator_,
  &Properties_method_propertyNames__LRIterator_,
  &Properties_method_removePropertyChangeListener_INLRPropertiesChangeListener__V,
  &Properties_method_setArrayProperty_INLRString_INLRStringArray_I_V,
  &Properties_method_setArrayProperty_INLRString_INLRStringArray__V,
  &Properties_method_setDefaults_INLRProperties__V,
  &Properties_method_setProperty_INLRString_INLRString__LRObject_,
  &Properties_method_setPropertyMap_INLRString_INLRMap__V,
  &Properties_method_store_INLacdk_io_RWriter_INLRString_Z_V,
  &Properties_method_store_INLacdk_io_RWriter_INLRString__V,
  0
};


struct Properties_MetaInfoInitializer
{  Properties_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Properties::clazzInfo();
    ci->fields =  _Properties_fields;
    ci->methods =  _Properties_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Properties_MetaInfoInitializer Properties_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
PropertiesListener_create_array(int length)
{
  return new ObjectArrayImpl<RPropertiesListener>(length);
}

//static
::acdk::lang::RObject
PropertiesListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PropertiesListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertiesListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PropertiesListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertiesListener_method_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PropertiesListener(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProperties>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertiesListener_method_reload__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertiesListener* This = dmi_cast<PropertiesListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PropertiesListener::reload();
    else
        This->reload();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertiesListener_method_run__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertiesListener* This = dmi_cast<PropertiesListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PropertiesListener::run();
    else
        This->run();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PropertiesListener_fields__configFile_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PropertiesListener* This = dmi_cast<PropertiesListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_configFile, flags);
    else
      This->_configFile = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PropertiesListener_fields__properties_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PropertiesListener* This = dmi_cast<PropertiesListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_properties, flags);
    else
      This->_properties = ::acdk::lang::dmi::castTo< RProperties>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PropertiesListener_fields_reconfigure_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(PropertiesListener::reconfigure, flags);
    else
      PropertiesListener::reconfigure = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PropertiesListener_fields__configFile = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_configFile", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  PropertiesListener_MetainfoWrapper::PropertiesListener_fields__configFile_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PropertiesListener_fields__properties = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_properties", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo(),
  PropertiesListener_MetainfoWrapper::PropertiesListener_fields__properties_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PropertiesListener_fields_reconfigure = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "reconfigure", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  PropertiesListener_MetainfoWrapper::PropertiesListener_fields_reconfigure_accessor, // read/write access to this fields
  (void*)&PropertiesListener::reconfigure // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PropertiesListener_fields[] = 
{
  &PropertiesListener_fields__configFile,
  &PropertiesListener_fields__properties,
  &PropertiesListener_fields_reconfigure,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertiesListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertiesListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertiesListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PropertiesListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PropertiesListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PropertiesListener_MetainfoWrapper::PropertiesListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertiesListener_methods_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__arg_cfgFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cfgFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertiesListener_methods_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertiesListener_methods_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__args[] = 
{
  &PropertiesListener_methods_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__arg_cfgFile,
  &PropertiesListener_methods_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertiesListener_methods_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertiesListener_method_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PropertiesListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PropertiesListener::clazzInfo(), // return type
  "_0_PropertiesListener", // alternative name of method
  -1, // altlabelHashCode
  PropertiesListener_methods_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__args, // the arguments
  0, //arguments count
  PropertiesListener_methods_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__exceptions, // the declared exceptions
  PropertiesListener_MetainfoWrapper::PropertiesListener_method_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertiesListener_methods_reload__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertiesListener_methods_reload__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertiesListener_method_reload__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reload", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_reload", // alternative name of method
  -1, // altlabelHashCode
  PropertiesListener_methods_reload__V_args, // the arguments
  0, //arguments count
  PropertiesListener_methods_reload__V_exceptions, // the declared exceptions
  PropertiesListener_MetainfoWrapper::PropertiesListener_method_reload__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertiesListener_methods_run__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertiesListener_methods_run__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertiesListener_method_run__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_run", // alternative name of method
  -1, // altlabelHashCode
  PropertiesListener_methods_run__V_args, // the arguments
  0, //arguments count
  PropertiesListener_methods_run__V_exceptions, // the declared exceptions
  PropertiesListener_MetainfoWrapper::PropertiesListener_method_run__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PropertiesListener_methods[] = 
{
  &PropertiesListener_method_GetClass__L_acdk_lang_RClass_,
  &PropertiesListener_method_PropertiesListener_INLRString_INLRProperties__LRPropertiesListener_,
  &PropertiesListener_method_reload__V,
  &PropertiesListener_method_run__V,
  0
};


struct PropertiesListener_MetaInfoInitializer
{  PropertiesListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PropertiesListener::clazzInfo();
    ci->fields =  _PropertiesListener_fields;
    ci->methods =  _PropertiesListener_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PropertiesListener_MetaInfoInitializer PropertiesListener_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
PropertyResourceBundle_create_array(int length)
{
  return new ObjectArrayImpl<RPropertyResourceBundle>(length);
}

//static
::acdk::lang::RObject
PropertyResourceBundle_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PropertyResourceBundle_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyResourceBundle_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PropertyResourceBundle::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyResourceBundle_method_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PropertyResourceBundle(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyResourceBundle_method_getMap_INLRString__LRMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertyResourceBundle* This = dmi_cast<PropertyResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PropertyResourceBundle::getMap(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getMap(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyResourceBundle_method_getProperties__LRProperties__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertyResourceBundle* This = dmi_cast<PropertyResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PropertyResourceBundle::getProperties();
    else
        ret = (::acdk::lang::RObject)This->getProperties();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyResourceBundle_method_getStringArray_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertyResourceBundle* This = dmi_cast<PropertyResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PropertyResourceBundle::getStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyResourceBundle_method_handleGetObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertyResourceBundle* This = dmi_cast<PropertyResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->PropertyResourceBundle::handleGetObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->handleGetObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropertyResourceBundle_method_hasValue_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropertyResourceBundle* This = dmi_cast<PropertyResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->PropertyResourceBundle::hasValue(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->hasValue(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PropertyResourceBundle_fields__properties_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PropertyResourceBundle* This = dmi_cast<PropertyResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_properties, flags);
    else
      This->_properties = ::acdk::lang::dmi::castTo< RProperties>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PropertyResourceBundle_fields__properties = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_properties", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo(),
  PropertyResourceBundle_MetainfoWrapper::PropertyResourceBundle_fields__properties_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PropertyResourceBundle_fields[] = 
{
  &PropertyResourceBundle_fields__properties,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyResourceBundle_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyResourceBundle_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyResourceBundle_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PropertyResourceBundle_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PropertyResourceBundle_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PropertyResourceBundle_MetainfoWrapper::PropertyResourceBundle_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertyResourceBundle_methods_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyResourceBundle_methods_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__args[] = 
{
  &PropertyResourceBundle_methods_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyResourceBundle_methods_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  0
};

void PropertyResourceBundle_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo PropertyResourceBundle_method_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PropertyResourceBundle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PropertyResourceBundle::clazzInfo(), // return type
  "_0_PropertyResourceBundle", // alternative name of method
  -1, // altlabelHashCode
  PropertyResourceBundle_methods_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__args, // the arguments
  0, //arguments count
  PropertyResourceBundle_methods_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__exceptions, // the declared exceptions
  PropertyResourceBundle_MetainfoWrapper::PropertyResourceBundle_method_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__dispatch, // invoke this method
  PropertyResourceBundle_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertyResourceBundle_methods_getMap_INLRString__LRMap__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyResourceBundle_methods_getMap_INLRString__LRMap__args[] = 
{
  &PropertyResourceBundle_methods_getMap_INLRString__LRMap__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyResourceBundle_methods_getMap_INLRString__LRMap__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void PropertyResourceBundle_getMap_INLRString__LRMap__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo PropertyResourceBundle_method_getMap_INLRString__LRMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo(), // return type
  "_4_getMap", // alternative name of method
  -1, // altlabelHashCode
  PropertyResourceBundle_methods_getMap_INLRString__LRMap__args, // the arguments
  0, //arguments count
  PropertyResourceBundle_methods_getMap_INLRString__LRMap__exceptions, // the declared exceptions
  PropertyResourceBundle_MetainfoWrapper::PropertyResourceBundle_method_getMap_INLRString__LRMap__dispatch, // invoke this method
  PropertyResourceBundle_getMap_INLRString__LRMap__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyResourceBundle_methods_getProperties__LRProperties__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyResourceBundle_methods_getProperties__LRProperties__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyResourceBundle_method_getProperties__LRProperties_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProperties", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo(), // return type
  "_1_getProperties", // alternative name of method
  -1, // altlabelHashCode
  PropertyResourceBundle_methods_getProperties__LRProperties__args, // the arguments
  0, //arguments count
  PropertyResourceBundle_methods_getProperties__LRProperties__exceptions, // the declared exceptions
  PropertyResourceBundle_MetainfoWrapper::PropertyResourceBundle_method_getProperties__LRProperties__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertyResourceBundle_methods_getStringArray_INLRString__LRStringArray__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyResourceBundle_methods_getStringArray_INLRString__LRStringArray__args[] = 
{
  &PropertyResourceBundle_methods_getStringArray_INLRString__LRStringArray__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyResourceBundle_methods_getStringArray_INLRString__LRStringArray__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void PropertyResourceBundle_getStringArray_INLRString__LRStringArray__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo PropertyResourceBundle_method_getStringArray_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_3_getStringArray", // alternative name of method
  -1, // altlabelHashCode
  PropertyResourceBundle_methods_getStringArray_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  PropertyResourceBundle_methods_getStringArray_INLRString__LRStringArray__exceptions, // the declared exceptions
  PropertyResourceBundle_MetainfoWrapper::PropertyResourceBundle_method_getStringArray_INLRString__LRStringArray__dispatch, // invoke this method
  PropertyResourceBundle_getStringArray_INLRString__LRStringArray__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertyResourceBundle_methods_handleGetObject_INLRString__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyResourceBundle_methods_handleGetObject_INLRString__LRObject__args[] = 
{
  &PropertyResourceBundle_methods_handleGetObject_INLRString__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyResourceBundle_methods_handleGetObject_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyResourceBundle_method_handleGetObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleGetObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_5_handleGetObject", // alternative name of method
  -1, // altlabelHashCode
  PropertyResourceBundle_methods_handleGetObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  PropertyResourceBundle_methods_handleGetObject_INLRString__LRObject__exceptions, // the declared exceptions
  PropertyResourceBundle_MetainfoWrapper::PropertyResourceBundle_method_handleGetObject_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropertyResourceBundle_methods_hasValue_INLRString__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropertyResourceBundle_methods_hasValue_INLRString__Z_args[] = 
{
  &PropertyResourceBundle_methods_hasValue_INLRString__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyResourceBundle_methods_hasValue_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropertyResourceBundle_method_hasValue_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_hasValue", // alternative name of method
  -1, // altlabelHashCode
  PropertyResourceBundle_methods_hasValue_INLRString__Z_args, // the arguments
  0, //arguments count
  PropertyResourceBundle_methods_hasValue_INLRString__Z_exceptions, // the declared exceptions
  PropertyResourceBundle_MetainfoWrapper::PropertyResourceBundle_method_hasValue_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PropertyResourceBundle_methods[] = 
{
  &PropertyResourceBundle_method_GetClass__L_acdk_lang_RClass_,
  &PropertyResourceBundle_method_PropertyResourceBundle_INLacdk_io_RReader__LRPropertyResourceBundle_,
  &PropertyResourceBundle_method_getMap_INLRString__LRMap_,
  &PropertyResourceBundle_method_getProperties__LRProperties_,
  &PropertyResourceBundle_method_getStringArray_INLRString__LRStringArray_,
  &PropertyResourceBundle_method_handleGetObject_INLRString__LRObject_,
  &PropertyResourceBundle_method_hasValue_INLRString__Z,
  0
};


struct PropertyResourceBundle_MetaInfoInitializer
{  PropertyResourceBundle_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PropertyResourceBundle::clazzInfo();
    ci->fields =  _PropertyResourceBundle_fields;
    ci->methods =  _PropertyResourceBundle_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PropertyResourceBundle_MetaInfoInitializer PropertyResourceBundle_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
Random_create_array(int length)
{
  return new ObjectArrayImpl<RRandom>(length);
}

//static
::acdk::lang::RObject
Random_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Random_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Random::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_Random__LRRandom__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Random();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_Random_J_LRRandom__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Random(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method__nextBits_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Random::_nextBits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->_nextBits(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Random::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_nextBoolean__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Random::nextBoolean();
    else
      ret = This->nextBoolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_nextBytes_INLRcharArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Random::nextBytes(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc));
    else
        This->nextBytes(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_nextDouble__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Random::nextDouble();
    else
      ret = This->nextDouble();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_nextFloat__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Random::nextFloat();
    else
      ret = This->nextFloat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_nextGaussian__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Random::nextGaussian();
    else
      ret = This->nextGaussian();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_nextInt__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Random::nextInt();
    else
      ret = This->nextInt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_nextInt_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Random::nextInt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->nextInt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_nextLong__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Random::nextLong();
    else
      ret = This->nextLong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Random_method_setSeed_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Random::setSeed(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        This->setSeed(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Random_fields__haveNextNextGaussian_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_haveNextNextGaussian, flags);
    else
      This->_haveNextNextGaussian = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Random_fields__nextNextGaussian_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nextNextGaussian, flags);
    else
      This->_nextNextGaussian = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Random_fields__seed_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Random* This = dmi_cast<Random>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_seed, flags);
    else
      This->_seed = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Random_fields__haveNextNextGaussian = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_haveNextNextGaussian", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Random_MetainfoWrapper::Random_fields__haveNextNextGaussian_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Random_fields__nextNextGaussian = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nextNextGaussian", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  Random_MetainfoWrapper::Random_fields__nextNextGaussian_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Random_fields__seed = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_seed", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  Random_MetainfoWrapper::Random_fields__seed_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Random_fields[] = 
{
  &Random_fields__haveNextNextGaussian,
  &Random_fields__nextNextGaussian,
  &Random_fields__seed,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Random_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_Random__LRRandom__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_Random__LRRandom__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_Random__LRRandom_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Random", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Random::clazzInfo(), // return type
  "_1_Random", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_Random__LRRandom__args, // the arguments
  0, //arguments count
  Random_methods_Random__LRRandom__exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_Random__LRRandom__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Random_methods_Random_J_LRRandom__arg_seed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_Random_J_LRRandom__args[] = 
{
  &Random_methods_Random_J_LRRandom__arg_seed,
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_Random_J_LRRandom__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_Random_J_LRRandom_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Random", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Random::clazzInfo(), // return type
  "_2_Random", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_Random_J_LRRandom__args, // the arguments
  0, //arguments count
  Random_methods_Random_J_LRRandom__exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_Random_J_LRRandom__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Random_methods__nextBits_I_I_arg_bits = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bits", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods__nextBits_I_I_args[] = 
{
  &Random_methods__nextBits_I_I_arg_bits,
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods__nextBits_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method__nextBits_I_I = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_nextBits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c__nextBits", // alternative name of method
  -1, // altlabelHashCode
  Random_methods__nextBits_I_I_args, // the arguments
  0, //arguments count
  Random_methods__nextBits_I_I_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method__nextBits_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  Random_methods_create_instance__LRObject__exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_nextBoolean__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_nextBoolean__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_nextBoolean__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_nextBoolean", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_nextBoolean__Z_args, // the arguments
  0, //arguments count
  Random_methods_nextBoolean__Z_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_nextBoolean__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Random_methods_nextBytes_INLRcharArray__V_arg_bytes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "bytes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_nextBytes_INLRcharArray__V_args[] = 
{
  &Random_methods_nextBytes_INLRcharArray__V_arg_bytes,
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_nextBytes_INLRcharArray__V_exceptions[] =
{
  RIllegalArgumentException::clazzInfo(), 
  0
};

void Random_nextBytes_INLRcharArray__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IllegalArgumentException) == true)
    THROW_INSTANCE( RIllegalArgumentException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Random_method_nextBytes_INLRcharArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_nextBytes", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_nextBytes_INLRcharArray__V_args, // the arguments
  0, //arguments count
  Random_methods_nextBytes_INLRcharArray__V_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_nextBytes_INLRcharArray__V_dispatch, // invoke this method
  Random_nextBytes_INLRcharArray__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_nextDouble__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_nextDouble__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_nextDouble__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_5_nextDouble", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_nextDouble__D_args, // the arguments
  0, //arguments count
  Random_methods_nextDouble__D_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_nextDouble__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_nextFloat__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_nextFloat__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_nextFloat__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_6_nextFloat", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_nextFloat__F_args, // the arguments
  0, //arguments count
  Random_methods_nextFloat__F_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_nextFloat__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_nextGaussian__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_nextGaussian__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_nextGaussian__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextGaussian", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_7_nextGaussian", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_nextGaussian__D_args, // the arguments
  0, //arguments count
  Random_methods_nextGaussian__D_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_nextGaussian__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_nextInt__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_nextInt__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_nextInt__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_nextInt", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_nextInt__I_args, // the arguments
  0, //arguments count
  Random_methods_nextInt__I_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_nextInt__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Random_methods_nextInt_I_I_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_nextInt_I_I_args[] = 
{
  &Random_methods_nextInt_I_I_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_nextInt_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_nextInt_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_nextInt", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_nextInt_I_I_args, // the arguments
  0, //arguments count
  Random_methods_nextInt_I_I_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_nextInt_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_nextLong__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_nextLong__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_nextLong__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_a_nextLong", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_nextLong__J_args, // the arguments
  0, //arguments count
  Random_methods_nextLong__J_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_nextLong__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Random_methods_setSeed_J_V_arg_seed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Random_methods_setSeed_J_V_args[] = 
{
  &Random_methods_setSeed_J_V_arg_seed,
  0
};

::acdk::lang::dmi::ClazzInfo* Random_methods_setSeed_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Random_method_setSeed_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSeed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setSeed", // alternative name of method
  -1, // altlabelHashCode
  Random_methods_setSeed_J_V_args, // the arguments
  0, //arguments count
  Random_methods_setSeed_J_V_exceptions, // the declared exceptions
  Random_MetainfoWrapper::Random_method_setSeed_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Random_methods[] = 
{
  &Random_method_GetClass__L_acdk_lang_RClass_,
  &Random_method_Random__LRRandom_,
  &Random_method_Random_J_LRRandom_,
  &Random_method__nextBits_I_I,
  &Random_method_create_instance__LRObject_,
  &Random_method_nextBoolean__Z,
  &Random_method_nextBytes_INLRcharArray__V,
  &Random_method_nextDouble__D,
  &Random_method_nextFloat__F,
  &Random_method_nextGaussian__D,
  &Random_method_nextInt__I,
  &Random_method_nextInt_I_I,
  &Random_method_nextLong__J,
  &Random_method_setSeed_J_V,
  0
};


struct Random_MetaInfoInitializer
{  Random_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Random::clazzInfo();
    ci->fields =  _Random_fields;
    ci->methods =  _Random_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Random_MetaInfoInitializer Random_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
ResourceBundle_create_array(int length)
{
  return new ObjectArrayImpl<RResourceBundle>(length);
}

//static
::acdk::lang::RObject
ResourceBundle_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ResourceBundle_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ResourceBundle::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method__resourceBundleCache__LRMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(ResourceBundle::_resourceBundleCache());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_flushResourceBundleCache__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle::flushResourceBundleCache();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ResourceBundle::getBundle(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RLocale>(args[1], dc), ::acdk::lang::dmi::castTo< RClassLoader>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getBundle_INLRString__LRResourceBundle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ResourceBundle::getBundle(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getBundle_INLRString_INLRLocale__LRResourceBundle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ResourceBundle::getBundle(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RLocale>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getKeys__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    ret = (::acdk::lang::RObject)This->getKeys();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getLocale__LRLocale__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ResourceBundle::getLocale();
    else
        ret = (::acdk::lang::RObject)This->getLocale();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getMap_INLRString__LRMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ResourceBundle::getMap(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getMap(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ResourceBundle::getObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ResourceBundle::getString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_getStringArray_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ResourceBundle::getStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_handleGetObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    ret = (::acdk::lang::RObject)This->handleGetObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_hasValue_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ResourceBundle::hasValue(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->hasValue(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ResourceBundle_method_setParent_INLRResourceBundle__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ResourceBundle::setParent(::acdk::lang::dmi::castTo< RResourceBundle>(args[0], dc));
    else
        This->setParent(::acdk::lang::dmi::castTo< RResourceBundle>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResourceBundle_fields__locale_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_locale, flags);
    else
      This->_locale = ::acdk::lang::dmi::castTo< RLocale>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ResourceBundle_fields__parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ResourceBundle* This = dmi_cast<ResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parent, flags);
    else
      This->_parent = ::acdk::lang::dmi::castTo< RResourceBundle>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ResourceBundle_fields__locale = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_locale", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(),
  ResourceBundle_MetainfoWrapper::ResourceBundle_fields__locale_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ResourceBundle_fields__parent = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResourceBundle::clazzInfo(),
  ResourceBundle_MetainfoWrapper::ResourceBundle_fields__parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ResourceBundle_fields[] = 
{
  &ResourceBundle_fields__locale,
  &ResourceBundle_fields__parent,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_ResourceBundle__LRResourceBundle__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_ResourceBundle__LRResourceBundle__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_ResourceBundle__LRResourceBundle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ResourceBundle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ResourceBundle::clazzInfo(), // return type
  "_1_ResourceBundle", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_ResourceBundle__LRResourceBundle__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_ResourceBundle__LRResourceBundle__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods__resourceBundleCache__LRMap__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods__resourceBundleCache__LRMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method__resourceBundleCache__LRMap_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_resourceBundleCache", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo(), // return type
  "_0__resourceBundleCache", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods__resourceBundleCache__LRMap__args, // the arguments
  0, //arguments count
  ResourceBundle_methods__resourceBundleCache__LRMap__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method__resourceBundleCache__LRMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_flushResourceBundleCache__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_flushResourceBundleCache__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_flushResourceBundleCache__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flushResourceBundleCache", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_flushResourceBundleCache", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_flushResourceBundleCache__V_args, // the arguments
  0, //arguments count
  ResourceBundle_methods_flushResourceBundleCache__V_exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_flushResourceBundleCache__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__arg_baseName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "baseName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__arg_classLoader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "classLoader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassLoader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__args[] = 
{
  &ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__arg_baseName,
  &ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__arg_locale,
  &ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__arg_classLoader,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void ResourceBundle_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBundle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResourceBundle::clazzInfo(), // return type
  "_7_getBundle", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__dispatch, // invoke this method
  ResourceBundle_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getBundle_INLRString__LRResourceBundle__arg_baseName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "baseName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getBundle_INLRString__LRResourceBundle__args[] = 
{
  &ResourceBundle_methods_getBundle_INLRString__LRResourceBundle__arg_baseName,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getBundle_INLRString__LRResourceBundle__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void ResourceBundle_getBundle_INLRString__LRResourceBundle__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getBundle_INLRString__LRResourceBundle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getBundle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResourceBundle::clazzInfo(), // return type
  "_8_getBundle", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getBundle_INLRString__LRResourceBundle__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getBundle_INLRString__LRResourceBundle__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getBundle_INLRString__LRResourceBundle__dispatch, // invoke this method
  ResourceBundle_getBundle_INLRString__LRResourceBundle__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getBundle_INLRString_INLRLocale__LRResourceBundle__arg_baseName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "baseName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getBundle_INLRString_INLRLocale__LRResourceBundle__arg_locale = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "locale", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getBundle_INLRString_INLRLocale__LRResourceBundle__args[] = 
{
  &ResourceBundle_methods_getBundle_INLRString_INLRLocale__LRResourceBundle__arg_baseName,
  &ResourceBundle_methods_getBundle_INLRString_INLRLocale__LRResourceBundle__arg_locale,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getBundle_INLRString_INLRLocale__LRResourceBundle__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void ResourceBundle_getBundle_INLRString_INLRLocale__LRResourceBundle__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getBundle_INLRString_INLRLocale__LRResourceBundle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getBundle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResourceBundle::clazzInfo(), // return type
  "_9_getBundle", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getBundle_INLRString_INLRLocale__LRResourceBundle__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getBundle_INLRString_INLRLocale__LRResourceBundle__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getBundle_INLRString_INLRLocale__LRResourceBundle__dispatch, // invoke this method
  ResourceBundle_getBundle_INLRString_INLRLocale__LRResourceBundle__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getKeys__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getKeys__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getKeys__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_b_getKeys", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getKeys__LRIterator__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getKeys__LRIterator__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getKeys__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getLocale__LRLocale__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getLocale__LRLocale__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getLocale__LRLocale_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocale", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLocale::clazzInfo(), // return type
  "_a_getLocale", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getLocale__LRLocale__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getLocale__LRLocale__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getLocale__LRLocale__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getMap_INLRString__LRMap__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getMap_INLRString__LRMap__args[] = 
{
  &ResourceBundle_methods_getMap_INLRString__LRMap__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getMap_INLRString__LRMap__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void ResourceBundle_getMap_INLRString__LRMap__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getMap_INLRString__LRMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo(), // return type
  "_5_getMap", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getMap_INLRString__LRMap__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getMap_INLRString__LRMap__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getMap_INLRString__LRMap__dispatch, // invoke this method
  ResourceBundle_getMap_INLRString__LRMap__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getObject_INLRString__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getObject_INLRString__LRObject__args[] = 
{
  &ResourceBundle_methods_getObject_INLRString__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getObject_INLRString__LRObject__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void ResourceBundle_getObject_INLRString__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_6_getObject", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getObject_INLRString__LRObject__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getObject_INLRString__LRObject__dispatch, // invoke this method
  ResourceBundle_getObject_INLRString__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getString_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getString_INLRString__LRString__args[] = 
{
  &ResourceBundle_methods_getString_INLRString__LRString__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getString_INLRString__LRString__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void ResourceBundle_getString_INLRString__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getString", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getString_INLRString__LRString__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getString_INLRString__LRString__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getString_INLRString__LRString__dispatch, // invoke this method
  ResourceBundle_getString_INLRString__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_getStringArray_INLRString__LRStringArray__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_getStringArray_INLRString__LRStringArray__args[] = 
{
  &ResourceBundle_methods_getStringArray_INLRString__LRStringArray__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_getStringArray_INLRString__LRStringArray__exceptions[] =
{
  RMissingResourceException::clazzInfo(), 
  0
};

void ResourceBundle_getStringArray_INLRString__LRStringArray__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, MissingResourceException) == true)
    THROW_INSTANCE( RMissingResourceException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_getStringArray_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_4_getStringArray", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_getStringArray_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_getStringArray_INLRString__LRStringArray__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_getStringArray_INLRString__LRStringArray__dispatch, // invoke this method
  ResourceBundle_getStringArray_INLRString__LRStringArray__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_handleGetObject_INLRString__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_handleGetObject_INLRString__LRObject__args[] = 
{
  &ResourceBundle_methods_handleGetObject_INLRString__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_handleGetObject_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_handleGetObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleGetObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_d_handleGetObject", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_handleGetObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  ResourceBundle_methods_handleGetObject_INLRString__LRObject__exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_handleGetObject_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_hasValue_INLRString__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_hasValue_INLRString__Z_args[] = 
{
  &ResourceBundle_methods_hasValue_INLRString__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_hasValue_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_hasValue_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_hasValue", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_hasValue_INLRString__Z_args, // the arguments
  0, //arguments count
  ResourceBundle_methods_hasValue_INLRString__Z_exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_hasValue_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ResourceBundle_methods_setParent_INLRResourceBundle__V_arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RResourceBundle::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ResourceBundle_methods_setParent_INLRResourceBundle__V_args[] = 
{
  &ResourceBundle_methods_setParent_INLRResourceBundle__V_arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle_methods_setParent_INLRResourceBundle__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ResourceBundle_method_setParent_INLRResourceBundle__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setParent", // alternative name of method
  -1, // altlabelHashCode
  ResourceBundle_methods_setParent_INLRResourceBundle__V_args, // the arguments
  0, //arguments count
  ResourceBundle_methods_setParent_INLRResourceBundle__V_exceptions, // the declared exceptions
  ResourceBundle_MetainfoWrapper::ResourceBundle_method_setParent_INLRResourceBundle__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ResourceBundle_methods[] = 
{
  &ResourceBundle_method_GetClass__L_acdk_lang_RClass_,
  &ResourceBundle_method_ResourceBundle__LRResourceBundle_,
  &ResourceBundle_method__resourceBundleCache__LRMap_,
  &ResourceBundle_method_flushResourceBundleCache__V,
  &ResourceBundle_method_getBundle_INLRString_INLRLocale_INLRClassLoader__LRResourceBundle_,
  &ResourceBundle_method_getBundle_INLRString__LRResourceBundle_,
  &ResourceBundle_method_getBundle_INLRString_INLRLocale__LRResourceBundle_,
  &ResourceBundle_method_getKeys__LRIterator_,
  &ResourceBundle_method_getLocale__LRLocale_,
  &ResourceBundle_method_getMap_INLRString__LRMap_,
  &ResourceBundle_method_getObject_INLRString__LRObject_,
  &ResourceBundle_method_getString_INLRString__LRString_,
  &ResourceBundle_method_getStringArray_INLRString__LRStringArray_,
  &ResourceBundle_method_handleGetObject_INLRString__LRObject_,
  &ResourceBundle_method_hasValue_INLRString__Z,
  &ResourceBundle_method_setParent_INLRResourceBundle__V,
  0
};


struct ResourceBundle_MetaInfoInitializer
{  ResourceBundle_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ResourceBundle::clazzInfo();
    ci->fields =  _ResourceBundle_fields;
    ci->methods =  _ResourceBundle_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ResourceBundle_MetaInfoInitializer ResourceBundle_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Set_create_array(int length)
{
  return new ObjectArrayImpl<RSet>(length);
}

//static
::acdk::lang::RObject
Set_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Set_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Set::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_add_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->add(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_addAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->addAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_clear__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
    This->clear();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_contains_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->contains(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_containsAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->containsAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_isEmpty__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->isEmpty();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_iterator__LRIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
    ret = (::acdk::lang::RObject)This->iterator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_remove_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->remove(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_removeAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->removeAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_retainAll_INLRCollection__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->retainAll(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
  ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_toArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
    ret = (::acdk::lang::RObject)This->toArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Set_method_toArray_INLRObjectArray__LRObjectArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Set* This = dmi_cast<Set>(This_);
    ret = (::acdk::lang::RObject)This->toArray(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Set_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Set_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_add_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_add_INLRObject__Z_args[] = 
{
  &Set_methods_add_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_add_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_add_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "add", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_add", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_add_INLRObject__Z_args, // the arguments
  0, //arguments count
  Set_methods_add_INLRObject__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_add_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_addAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_addAll_INLRCollection__Z_args[] = 
{
  &Set_methods_addAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_addAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_addAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_addAll", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_addAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  Set_methods_addAll_INLRCollection__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_addAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_clear__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_clear__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_clear__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_clear", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_clear__V_args, // the arguments
  0, //arguments count
  Set_methods_clear__V_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_clear__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_contains_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_contains_INLRObject__Z_args[] = 
{
  &Set_methods_contains_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_contains_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_contains_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "contains", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_contains", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_contains_INLRObject__Z_args, // the arguments
  0, //arguments count
  Set_methods_contains_INLRObject__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_contains_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_containsAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_containsAll_INLRCollection__Z_args[] = 
{
  &Set_methods_containsAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_containsAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_containsAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_containsAll", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_containsAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  Set_methods_containsAll_INLRCollection__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_containsAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_equals_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_equals_INLRObject__Z_args[] = 
{
  &Set_methods_equals_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Set_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Set_methods_hashCode__I_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_isEmpty__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_isEmpty__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_isEmpty__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEmpty", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_isEmpty", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_isEmpty__Z_args, // the arguments
  0, //arguments count
  Set_methods_isEmpty__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_isEmpty__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_iterator__LRIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_iterator__LRIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_iterator__LRIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "iterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(), // return type
  "_8_iterator", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_iterator__LRIterator__args, // the arguments
  0, //arguments count
  Set_methods_iterator__LRIterator__exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_iterator__LRIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_remove_INLRObject__Z_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_remove_INLRObject__Z_args[] = 
{
  &Set_methods_remove_INLRObject__Z_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_remove_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_remove_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_remove", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_remove_INLRObject__Z_args, // the arguments
  0, //arguments count
  Set_methods_remove_INLRObject__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_remove_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_removeAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_removeAll_INLRCollection__Z_args[] = 
{
  &Set_methods_removeAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_removeAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_removeAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_removeAll", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_removeAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  Set_methods_removeAll_INLRCollection__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_removeAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_retainAll_INLRCollection__Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_retainAll_INLRCollection__Z_args[] = 
{
  &Set_methods_retainAll_INLRCollection__Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_retainAll_INLRCollection__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_retainAll_INLRCollection__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "retainAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_retainAll", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_retainAll_INLRCollection__Z_args, // the arguments
  0, //arguments count
  Set_methods_retainAll_INLRCollection__Z_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_retainAll_INLRCollection__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_size", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_size__I_args, // the arguments
  0, //arguments count
  Set_methods_size__I_exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_toArray__LRObjectArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_toArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_toArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_d_toArray", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_toArray__LRObjectArray__args, // the arguments
  0, //arguments count
  Set_methods_toArray__LRObjectArray__exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_toArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Set_methods_toArray_INLRObjectArray__LRObjectArray__arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Set_methods_toArray_INLRObjectArray__LRObjectArray__args[] = 
{
  &Set_methods_toArray_INLRObjectArray__LRObjectArray__arg_array,
  0
};

::acdk::lang::dmi::ClazzInfo* Set_methods_toArray_INLRObjectArray__LRObjectArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Set_method_toArray_INLRObjectArray__LRObjectArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(), // return type
  "_e_toArray", // alternative name of method
  -1, // altlabelHashCode
  Set_methods_toArray_INLRObjectArray__LRObjectArray__args, // the arguments
  0, //arguments count
  Set_methods_toArray_INLRObjectArray__LRObjectArray__exceptions, // the declared exceptions
  Set_MetainfoWrapper::Set_method_toArray_INLRObjectArray__LRObjectArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Set_methods[] = 
{
  &Set_method_GetClass__L_acdk_lang_RClass_,
  &Set_method_add_INLRObject__Z,
  &Set_method_addAll_INLRCollection__Z,
  &Set_method_clear__V,
  &Set_method_contains_INLRObject__Z,
  &Set_method_containsAll_INLRCollection__Z,
  &Set_method_equals_INLRObject__Z,
  &Set_method_hashCode__I,
  &Set_method_isEmpty__Z,
  &Set_method_iterator__LRIterator_,
  &Set_method_remove_INLRObject__Z,
  &Set_method_removeAll_INLRCollection__Z,
  &Set_method_retainAll_INLRCollection__Z,
  &Set_method_size__I,
  &Set_method_toArray__LRObjectArray_,
  &Set_method_toArray_INLRObjectArray__LRObjectArray_,
  0
};


struct Set_MetaInfoInitializer
{  Set_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Set::clazzInfo();
    ci->fields =  _Set_fields;
    ci->methods =  _Set_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Set_MetaInfoInitializer Set_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
SimpleListResourceBundle_create_array(int length)
{
  return new ObjectArrayImpl<RSimpleListResourceBundle>(length);
}

//static
::acdk::lang::RObject
SimpleListResourceBundle_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SimpleListResourceBundle_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleListResourceBundle_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SimpleListResourceBundle::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleListResourceBundle_method_SimpleListResourceBundle__LRSimpleListResourceBundle__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleListResourceBundle();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleListResourceBundle_method_handleGetObject_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleListResourceBundle* This = dmi_cast<SimpleListResourceBundle>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleListResourceBundle::handleGetObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->handleGetObject(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SimpleListResourceBundle_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleListResourceBundle_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleListResourceBundle_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleListResourceBundle_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SimpleListResourceBundle_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SimpleListResourceBundle_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SimpleListResourceBundle_MetainfoWrapper::SimpleListResourceBundle_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleListResourceBundle_methods_SimpleListResourceBundle__LRSimpleListResourceBundle__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleListResourceBundle_methods_SimpleListResourceBundle__LRSimpleListResourceBundle__exceptions[] =
{
  acdk::io::RIOException::clazzInfo(), 
  0
};

void SimpleListResourceBundle_SimpleListResourceBundle__LRSimpleListResourceBundle__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, acdk::io::IOException) == true)
    THROW_INSTANCE( acdk::io::RIOException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo SimpleListResourceBundle_method_SimpleListResourceBundle__LRSimpleListResourceBundle_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleListResourceBundle", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleListResourceBundle::clazzInfo(), // return type
  "_0_SimpleListResourceBundle", // alternative name of method
  -1, // altlabelHashCode
  SimpleListResourceBundle_methods_SimpleListResourceBundle__LRSimpleListResourceBundle__args, // the arguments
  0, //arguments count
  SimpleListResourceBundle_methods_SimpleListResourceBundle__LRSimpleListResourceBundle__exceptions, // the declared exceptions
  SimpleListResourceBundle_MetainfoWrapper::SimpleListResourceBundle_method_SimpleListResourceBundle__LRSimpleListResourceBundle__dispatch, // invoke this method
  SimpleListResourceBundle_SimpleListResourceBundle__LRSimpleListResourceBundle__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleListResourceBundle_methods_handleGetObject_INLRString__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleListResourceBundle_methods_handleGetObject_INLRString__LRObject__args[] = 
{
  &SimpleListResourceBundle_methods_handleGetObject_INLRString__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleListResourceBundle_methods_handleGetObject_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleListResourceBundle_method_handleGetObject_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleGetObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_1_handleGetObject", // alternative name of method
  -1, // altlabelHashCode
  SimpleListResourceBundle_methods_handleGetObject_INLRString__LRObject__args, // the arguments
  0, //arguments count
  SimpleListResourceBundle_methods_handleGetObject_INLRString__LRObject__exceptions, // the declared exceptions
  SimpleListResourceBundle_MetainfoWrapper::SimpleListResourceBundle_method_handleGetObject_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SimpleListResourceBundle_methods[] = 
{
  &SimpleListResourceBundle_method_GetClass__L_acdk_lang_RClass_,
  &SimpleListResourceBundle_method_SimpleListResourceBundle__LRSimpleListResourceBundle_,
  &SimpleListResourceBundle_method_handleGetObject_INLRString__LRObject_,
  0
};


struct SimpleListResourceBundle_MetaInfoInitializer
{  SimpleListResourceBundle_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SimpleListResourceBundle::clazzInfo();
    ci->fields =  _SimpleListResourceBundle_fields;
    ci->methods =  _SimpleListResourceBundle_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SimpleListResourceBundle_MetaInfoInitializer SimpleListResourceBundle_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

//static
::acdk::lang::RObject
SimpleTimeZone_create_array(int length)
{
  return new ObjectArrayImpl<RSimpleTimeZone>(length);
}

//static
::acdk::lang::RObject
SimpleTimeZone_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SimpleTimeZone_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SimpleTimeZone::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_SimpleTimeZone__LRSimpleTimeZone__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleTimeZone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_SimpleTimeZone_IINLRString__LRSimpleTimeZone__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleTimeZone(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleTimeZone(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< int>(args[6], dc), ::acdk::lang::dmi::castTo< int>(args[7], dc), ::acdk::lang::dmi::castTo< int>(args[8], dc), ::acdk::lang::dmi::castTo< int>(args[9], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleTimeZone(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< int>(args[6], dc), ::acdk::lang::dmi::castTo< int>(args[7], dc), ::acdk::lang::dmi::castTo< int>(args[8], dc), ::acdk::lang::dmi::castTo< int>(args[9], dc), ::acdk::lang::dmi::castTo< int>(args[10], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_getDaysInMonth_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleTimeZone::getDaysInMonth(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getDaysInMonth(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_getOffset_IIIIII_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleTimeZone::getOffset(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    else
      ret = This->getOffset(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_getRawOffset__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleTimeZone::getRawOffset();
    else
      ret = This->getRawOffset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_getRawOffset_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleTimeZone::getRawOffset(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->getRawOffset(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_inDaylightTime_INLRDate__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleTimeZone::inDaylightTime(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    else
      ret = This->inDaylightTime(::acdk::lang::dmi::castTo< RDate>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_isBefore_IIIIIIIIII_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleTimeZone::isBefore(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< int>(args[6], dc), ::acdk::lang::dmi::castTo< int>(args[7], dc), ::acdk::lang::dmi::castTo< int>(args[8], dc), ::acdk::lang::dmi::castTo< int>(args[9], dc));
    else
      ret = This->isBefore(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< int>(args[6], dc), ::acdk::lang::dmi::castTo< int>(args[7], dc), ::acdk::lang::dmi::castTo< int>(args[8], dc), ::acdk::lang::dmi::castTo< int>(args[9], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_setEndRule_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleTimeZone::setEndRule(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    else
        This->setEndRule(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_setStartRule_IIII_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleTimeZone::setStartRule(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    else
        This->setStartRule(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_setStartYear_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleTimeZone::setStartYear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setStartYear(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleTimeZone_method_useDaylightTime__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SimpleTimeZone::useDaylightTime();
    else
      ret = This->useDaylightTime();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__dstSavings_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dstSavings, flags);
    else
      This->_dstSavings = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__endDay_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_endDay, flags);
    else
      This->_endDay = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__endDayOfWeek_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_endDayOfWeek, flags);
    else
      This->_endDayOfWeek = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__endMode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_endMode, flags);
    else
      This->_endMode = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__endMonth_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_endMonth, flags);
    else
      This->_endMonth = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__endTime_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_endTime, flags);
    else
      This->_endTime = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__rawOffset_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rawOffset, flags);
    else
      This->_rawOffset = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__startDay_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_startDay, flags);
    else
      This->_startDay = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__startDayOfWeek_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_startDayOfWeek, flags);
    else
      This->_startDayOfWeek = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__startMode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_startMode, flags);
    else
      This->_startMode = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__startMonth_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_startMonth, flags);
    else
      This->_startMonth = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__startTime_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_startTime, flags);
    else
      This->_startTime = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__startYear_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_startYear, flags);
    else
      This->_startYear = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SimpleTimeZone_fields__useDayLight_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SimpleTimeZone* This = dmi_cast<SimpleTimeZone>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_useDayLight, flags);
    else
      This->_useDayLight = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__dstSavings = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dstSavings", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__dstSavings_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__endDay = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endDay", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__endDay_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__endDayOfWeek = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endDayOfWeek", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__endDayOfWeek_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__endMode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endMode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__endMode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__endMonth = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endMonth", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__endMonth_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__endTime = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endTime", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__endTime_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__rawOffset = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rawOffset", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__rawOffset_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__startDay = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_startDay", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__startDay_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__startDayOfWeek = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_startDayOfWeek", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__startDayOfWeek_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__startMode = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_startMode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__startMode_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__startMonth = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_startMonth", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__startMonth_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__startTime = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_startTime", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__startTime_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__startYear = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_startYear", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__startYear_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SimpleTimeZone_fields__useDayLight = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_useDayLight", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_fields__useDayLight_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SimpleTimeZone_fields[] = 
{
  &SimpleTimeZone_fields__dstSavings,
  &SimpleTimeZone_fields__endDay,
  &SimpleTimeZone_fields__endDayOfWeek,
  &SimpleTimeZone_fields__endMode,
  &SimpleTimeZone_fields__endMonth,
  &SimpleTimeZone_fields__endTime,
  &SimpleTimeZone_fields__rawOffset,
  &SimpleTimeZone_fields__startDay,
  &SimpleTimeZone_fields__startDayOfWeek,
  &SimpleTimeZone_fields__startMode,
  &SimpleTimeZone_fields__startMonth,
  &SimpleTimeZone_fields__startTime,
  &SimpleTimeZone_fields__startYear,
  &SimpleTimeZone_fields__useDayLight,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_SimpleTimeZone__LRSimpleTimeZone__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_SimpleTimeZone__LRSimpleTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_SimpleTimeZone__LRSimpleTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleTimeZone::clazzInfo(), // return type
  "_0_SimpleTimeZone", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_SimpleTimeZone__LRSimpleTimeZone__args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_SimpleTimeZone__LRSimpleTimeZone__exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_SimpleTimeZone__LRSimpleTimeZone__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString__LRSimpleTimeZone__arg_rOs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rOs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString__LRSimpleTimeZone__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_SimpleTimeZone_IINLRString__LRSimpleTimeZone__args[] = 
{
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString__LRSimpleTimeZone__arg_rOs,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString__LRSimpleTimeZone__arg_id,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_SimpleTimeZone_IINLRString__LRSimpleTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_SimpleTimeZone_IINLRString__LRSimpleTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleTimeZone::clazzInfo(), // return type
  "_1_SimpleTimeZone", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_SimpleTimeZone_IINLRString__LRSimpleTimeZone__args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_SimpleTimeZone_IINLRString__LRSimpleTimeZone__exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_SimpleTimeZone_IINLRString__LRSimpleTimeZone__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_rOs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rOs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_startMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_startDayOfWeekInMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startDayOfWeekInMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_startDayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startDayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_startTime = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startTime", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_endMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_endDayOfWeekInMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endDayOfWeekInMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_endDayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endDayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_endTime = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endTime", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__args[] = 
{
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_rOs,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_id,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_startMonth,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_startDayOfWeekInMonth,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_startDayOfWeek,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_startTime,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_endMonth,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_endDayOfWeekInMonth,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_endDayOfWeek,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__arg_endTime,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleTimeZone::clazzInfo(), // return type
  "_2_SimpleTimeZone", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_rOs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rOs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_id = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "id", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_startMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_startDayOfWeekInMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startDayOfWeekInMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_startDayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startDayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_startTime = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startTime", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_endMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_endDayOfWeekInMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endDayOfWeekInMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_endDayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endDayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_endTime = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endTime", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_dstSavings = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dstSavings", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__args[] = 
{
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_rOs,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_id,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_startMonth,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_startDayOfWeekInMonth,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_startDayOfWeek,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_startTime,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_endMonth,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_endDayOfWeekInMonth,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_endDayOfWeek,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_endTime,
  &SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__arg_dstSavings,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleTimeZone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleTimeZone::clazzInfo(), // return type
  "_3_SimpleTimeZone", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getDaysInMonth_II_I_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getDaysInMonth_II_I_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_getDaysInMonth_II_I_args[] = 
{
  &SimpleTimeZone_methods_getDaysInMonth_II_I_arg_month,
  &SimpleTimeZone_methods_getDaysInMonth_II_I_arg_year,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_getDaysInMonth_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_getDaysInMonth_II_I = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDaysInMonth", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_getDaysInMonth", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_getDaysInMonth_II_I_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_getDaysInMonth_II_I_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_getDaysInMonth_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getOffset_IIIIII_I_arg_era = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "era", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getOffset_IIIIII_I_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getOffset_IIIIII_I_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getOffset_IIIIII_I_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getOffset_IIIIII_I_arg_dayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getOffset_IIIIII_I_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_getOffset_IIIIII_I_args[] = 
{
  &SimpleTimeZone_methods_getOffset_IIIIII_I_arg_era,
  &SimpleTimeZone_methods_getOffset_IIIIII_I_arg_year,
  &SimpleTimeZone_methods_getOffset_IIIIII_I_arg_month,
  &SimpleTimeZone_methods_getOffset_IIIIII_I_arg_day,
  &SimpleTimeZone_methods_getOffset_IIIIII_I_arg_dayOfWeek,
  &SimpleTimeZone_methods_getOffset_IIIIII_I_arg_millis,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_getOffset_IIIIII_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_getOffset_IIIIII_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getOffset", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_getOffset_IIIIII_I_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_getOffset_IIIIII_I_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_getOffset_IIIIII_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_getRawOffset__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_getRawOffset__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_getRawOffset__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRawOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getRawOffset", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_getRawOffset__I_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_getRawOffset__I_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_getRawOffset__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_getRawOffset_I_V_arg_rawOffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rawOffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_getRawOffset_I_V_args[] = 
{
  &SimpleTimeZone_methods_getRawOffset_I_V_arg_rawOffset,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_getRawOffset_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_getRawOffset_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRawOffset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_getRawOffset", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_getRawOffset_I_V_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_getRawOffset_I_V_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_getRawOffset_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_inDaylightTime_INLRDate__Z_arg_date = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "date", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDate::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_inDaylightTime_INLRDate__Z_args[] = 
{
  &SimpleTimeZone_methods_inDaylightTime_INLRDate__Z_arg_date,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_inDaylightTime_INLRDate__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_inDaylightTime_INLRDate__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "inDaylightTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_inDaylightTime", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_inDaylightTime_INLRDate__Z_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_inDaylightTime_INLRDate__Z_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_inDaylightTime_INLRDate__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_dayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_millis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "millis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_otherMonth = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "otherMonth", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_otherDay = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "otherDay", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_otherDayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "otherDayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_otherMillis = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "otherMillis", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_args[] = 
{
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_year,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_month,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_day,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_dayOfWeek,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_millis,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_mode,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_otherMonth,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_otherDay,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_otherDayOfWeek,
  &SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_arg_otherMillis,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_isBefore_IIIIIIIIII_Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBefore", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isBefore", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_isBefore_IIIIIIIIII_Z_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_isBefore_IIIIIIIIII_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setEndRule_IIII_V_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setEndRule_IIII_V_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setEndRule_IIII_V_arg_dayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setEndRule_IIII_V_arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_setEndRule_IIII_V_args[] = 
{
  &SimpleTimeZone_methods_setEndRule_IIII_V_arg_month,
  &SimpleTimeZone_methods_setEndRule_IIII_V_arg_day,
  &SimpleTimeZone_methods_setEndRule_IIII_V_arg_dayOfWeek,
  &SimpleTimeZone_methods_setEndRule_IIII_V_arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_setEndRule_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_setEndRule_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEndRule", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setEndRule", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_setEndRule_IIII_V_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_setEndRule_IIII_V_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_setEndRule_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setStartRule_IIII_V_arg_month = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "month", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setStartRule_IIII_V_arg_day = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "day", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setStartRule_IIII_V_arg_dayOfWeek = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dayOfWeek", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setStartRule_IIII_V_arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_setStartRule_IIII_V_args[] = 
{
  &SimpleTimeZone_methods_setStartRule_IIII_V_arg_month,
  &SimpleTimeZone_methods_setStartRule_IIII_V_arg_day,
  &SimpleTimeZone_methods_setStartRule_IIII_V_arg_dayOfWeek,
  &SimpleTimeZone_methods_setStartRule_IIII_V_arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_setStartRule_IIII_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_setStartRule_IIII_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStartRule", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setStartRule", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_setStartRule_IIII_V_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_setStartRule_IIII_V_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_setStartRule_IIII_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleTimeZone_methods_setStartYear_I_V_arg_year = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "year", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_setStartYear_I_V_args[] = 
{
  &SimpleTimeZone_methods_setStartYear_I_V_arg_year,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_setStartYear_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_setStartYear_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStartYear", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setStartYear", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_setStartYear_I_V_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_setStartYear_I_V_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_setStartYear_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleTimeZone_methods_useDaylightTime__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone_methods_useDaylightTime__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleTimeZone_method_useDaylightTime__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "useDaylightTime", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_useDaylightTime", // alternative name of method
  -1, // altlabelHashCode
  SimpleTimeZone_methods_useDaylightTime__Z_args, // the arguments
  0, //arguments count
  SimpleTimeZone_methods_useDaylightTime__Z_exceptions, // the declared exceptions
  SimpleTimeZone_MetainfoWrapper::SimpleTimeZone_method_useDaylightTime__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SimpleTimeZone_methods[] = 
{
  &SimpleTimeZone_method_GetClass__L_acdk_lang_RClass_,
  &SimpleTimeZone_method_SimpleTimeZone__LRSimpleTimeZone_,
  &SimpleTimeZone_method_SimpleTimeZone_IINLRString__LRSimpleTimeZone_,
  &SimpleTimeZone_method_SimpleTimeZone_IINLRString_IIIIIIII_LRSimpleTimeZone_,
  &SimpleTimeZone_method_SimpleTimeZone_IINLRString_IIIIIIIII_LRSimpleTimeZone_,
  &SimpleTimeZone_method_getDaysInMonth_II_I,
  &SimpleTimeZone_method_getOffset_IIIIII_I,
  &SimpleTimeZone_method_getRawOffset__I,
  &SimpleTimeZone_method_getRawOffset_I_V,
  &SimpleTimeZone_method_inDaylightTime_INLRDate__Z,
  &SimpleTimeZone_method_isBefore_IIIIIIIIII_Z,
  &SimpleTimeZone_method_setEndRule_IIII_V,
  &SimpleTimeZone_method_setStartRule_IIII_V,
  &SimpleTimeZone_method_setStartYear_I_V,
  &SimpleTimeZone_method_useDaylightTime__Z,
  0
};


struct SimpleTimeZone_MetaInfoInitializer
{  SimpleTimeZone_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SimpleTimeZone::clazzInfo();
    ci->fields =  _SimpleTimeZone_fields;
    ci->methods =  _SimpleTimeZone_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SimpleTimeZone_MetaInfoInitializer SimpleTimeZone_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SingleObjectIterator_create_array(int length)
{
  return new ObjectArrayImpl<RSingleObjectIterator>(length);
}

//static
::acdk::lang::RObject
SingleObjectIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SingleObjectIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SingleObjectIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SingleObjectIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SingleObjectIterator_method_SingleObjectIterator_INLRObject__LRSingleObjectIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SingleObjectIterator(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SingleObjectIterator_method_element__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SingleObjectIterator* This = dmi_cast<SingleObjectIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SingleObjectIterator::element();
    else
        ret = (::acdk::lang::RObject)This->element();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SingleObjectIterator_method_hasNext__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SingleObjectIterator* This = dmi_cast<SingleObjectIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SingleObjectIterator::hasNext();
    else
      ret = This->hasNext();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SingleObjectIterator_method_next__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SingleObjectIterator* This = dmi_cast<SingleObjectIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SingleObjectIterator::next();
    else
        ret = (::acdk::lang::RObject)This->next();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SingleObjectIterator_method_remove__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SingleObjectIterator* This = dmi_cast<SingleObjectIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SingleObjectIterator::remove();
    else
        This->remove();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SingleObjectIterator_fields__endOfCol_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SingleObjectIterator* This = dmi_cast<SingleObjectIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_endOfCol, flags);
    else
      This->_endOfCol = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SingleObjectIterator_fields__object_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SingleObjectIterator* This = dmi_cast<SingleObjectIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_object, flags);
    else
      This->_object = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SingleObjectIterator_fields__endOfCol = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endOfCol", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  SingleObjectIterator_MetainfoWrapper::SingleObjectIterator_fields__endOfCol_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SingleObjectIterator_fields__object = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_object", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  SingleObjectIterator_MetainfoWrapper::SingleObjectIterator_fields__object_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SingleObjectIterator_fields[] = 
{
  &SingleObjectIterator_fields__endOfCol,
  &SingleObjectIterator_fields__object,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SingleObjectIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SingleObjectIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SingleObjectIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SingleObjectIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SingleObjectIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SingleObjectIterator_MetainfoWrapper::SingleObjectIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SingleObjectIterator_methods_SingleObjectIterator_INLRObject__LRSingleObjectIterator__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SingleObjectIterator_methods_SingleObjectIterator_INLRObject__LRSingleObjectIterator__args[] = 
{
  &SingleObjectIterator_methods_SingleObjectIterator_INLRObject__LRSingleObjectIterator__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* SingleObjectIterator_methods_SingleObjectIterator_INLRObject__LRSingleObjectIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SingleObjectIterator_method_SingleObjectIterator_INLRObject__LRSingleObjectIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SingleObjectIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SingleObjectIterator::clazzInfo(), // return type
  "_0_SingleObjectIterator", // alternative name of method
  -1, // altlabelHashCode
  SingleObjectIterator_methods_SingleObjectIterator_INLRObject__LRSingleObjectIterator__args, // the arguments
  0, //arguments count
  SingleObjectIterator_methods_SingleObjectIterator_INLRObject__LRSingleObjectIterator__exceptions, // the declared exceptions
  SingleObjectIterator_MetainfoWrapper::SingleObjectIterator_method_SingleObjectIterator_INLRObject__LRSingleObjectIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SingleObjectIterator_methods_element__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SingleObjectIterator_methods_element__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SingleObjectIterator_method_element__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "element", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_element", // alternative name of method
  -1, // altlabelHashCode
  SingleObjectIterator_methods_element__LRObject__args, // the arguments
  0, //arguments count
  SingleObjectIterator_methods_element__LRObject__exceptions, // the declared exceptions
  SingleObjectIterator_MetainfoWrapper::SingleObjectIterator_method_element__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SingleObjectIterator_methods_hasNext__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SingleObjectIterator_methods_hasNext__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SingleObjectIterator_method_hasNext__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasNext", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_hasNext", // alternative name of method
  -1, // altlabelHashCode
  SingleObjectIterator_methods_hasNext__Z_args, // the arguments
  0, //arguments count
  SingleObjectIterator_methods_hasNext__Z_exceptions, // the declared exceptions
  SingleObjectIterator_MetainfoWrapper::SingleObjectIterator_method_hasNext__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SingleObjectIterator_methods_next__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SingleObjectIterator_methods_next__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SingleObjectIterator_method_next__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "next", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_2_next", // alternative name of method
  -1, // altlabelHashCode
  SingleObjectIterator_methods_next__LRObject__args, // the arguments
  0, //arguments count
  SingleObjectIterator_methods_next__LRObject__exceptions, // the declared exceptions
  SingleObjectIterator_MetainfoWrapper::SingleObjectIterator_method_next__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SingleObjectIterator_methods_remove__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SingleObjectIterator_methods_remove__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SingleObjectIterator_method_remove__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "remove", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_remove", // alternative name of method
  -1, // altlabelHashCode
  SingleObjectIterator_methods_remove__V_args, // the arguments
  0, //arguments count
  SingleObjectIterator_methods_remove__V_exceptions, // the declared exceptions
  SingleObjectIterator_MetainfoWrapper::SingleObjectIterator_method_remove__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SingleObjectIterator_methods[] = 
{
  &SingleObjectIterator_method_GetClass__L_acdk_lang_RClass_,
  &SingleObjectIterator_method_SingleObjectIterator_INLRObject__LRSingleObjectIterator_,
  &SingleObjectIterator_method_element__LRObject_,
  &SingleObjectIterator_method_hasNext__Z,
  &SingleObjectIterator_method_next__LRObject_,
  &SingleObjectIterator_method_remove__V,
  0
};


struct SingleObjectIterator_MetaInfoInitializer
{  SingleObjectIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SingleObjectIterator::clazzInfo();
    ci->fields =  _SingleObjectIterator_fields;
    ci->methods =  _SingleObjectIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SingleObjectIterator_MetaInfoInitializer SingleObjectIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
SortedMap_create_array(int length)
{
  return new ObjectArrayImpl<RSortedMap>(length);
}

//static
::acdk::lang::RObject
SortedMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SortedMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SortedMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedMap_method_comparator__LRComparator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedMap* This = dmi_cast<SortedMap>(This_);
    ret = (::acdk::lang::RObject)This->comparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedMap_method_firstKey__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedMap* This = dmi_cast<SortedMap>(This_);
    ret = (::acdk::lang::RObject)This->firstKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedMap_method_headMap_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedMap* This = dmi_cast<SortedMap>(This_);
    ret = (::acdk::lang::RObject)This->headMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedMap_method_lastKey__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedMap* This = dmi_cast<SortedMap>(This_);
    ret = (::acdk::lang::RObject)This->lastKey();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedMap_method_subMap_INLRObject_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedMap* This = dmi_cast<SortedMap>(This_);
    ret = (::acdk::lang::RObject)This->subMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedMap_method_tailMap_INLRObject__LRSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedMap* This = dmi_cast<SortedMap>(This_);
    ret = (::acdk::lang::RObject)This->tailMap(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SortedMap_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SortedMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_k_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SortedMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SortedMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SortedMap_MetainfoWrapper::SortedMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedMap_methods_comparator__LRComparator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SortedMap_methods_comparator__LRComparator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedMap_method_comparator__LRComparator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "comparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo(), // return type
  "_e_comparator", // alternative name of method
  -1, // altlabelHashCode
  SortedMap_methods_comparator__LRComparator__args, // the arguments
  0, //arguments count
  SortedMap_methods_comparator__LRComparator__exceptions, // the declared exceptions
  SortedMap_MetainfoWrapper::SortedMap_method_comparator__LRComparator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedMap_methods_firstKey__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SortedMap_methods_firstKey__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedMap_method_firstKey__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "firstKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_f_firstKey", // alternative name of method
  -1, // altlabelHashCode
  SortedMap_methods_firstKey__LRObject__args, // the arguments
  0, //arguments count
  SortedMap_methods_firstKey__LRObject__exceptions, // the declared exceptions
  SortedMap_MetainfoWrapper::SortedMap_method_firstKey__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SortedMap_methods_headMap_INLRObject__LRSortedMap__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedMap_methods_headMap_INLRObject__LRSortedMap__args[] = 
{
  &SortedMap_methods_headMap_INLRObject__LRSortedMap__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* SortedMap_methods_headMap_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedMap_method_headMap_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "headMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_g_headMap", // alternative name of method
  -1, // altlabelHashCode
  SortedMap_methods_headMap_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  SortedMap_methods_headMap_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  SortedMap_MetainfoWrapper::SortedMap_method_headMap_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedMap_methods_lastKey__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SortedMap_methods_lastKey__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedMap_method_lastKey__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastKey", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_h_lastKey", // alternative name of method
  -1, // altlabelHashCode
  SortedMap_methods_lastKey__LRObject__args, // the arguments
  0, //arguments count
  SortedMap_methods_lastKey__LRObject__exceptions, // the declared exceptions
  SortedMap_MetainfoWrapper::SortedMap_method_lastKey__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SortedMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_fromKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fromKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SortedMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_toKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__args[] = 
{
  &SortedMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_fromKey,
  &SortedMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__arg_toKey,
  0
};

::acdk::lang::dmi::ClazzInfo* SortedMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedMap_method_subMap_INLRObject_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_i_subMap", // alternative name of method
  -1, // altlabelHashCode
  SortedMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  SortedMap_methods_subMap_INLRObject_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  SortedMap_MetainfoWrapper::SortedMap_method_subMap_INLRObject_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SortedMap_methods_tailMap_INLRObject__LRSortedMap__arg_fromKey = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fromKey", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedMap_methods_tailMap_INLRObject__LRSortedMap__args[] = 
{
  &SortedMap_methods_tailMap_INLRObject__LRSortedMap__arg_fromKey,
  0
};

::acdk::lang::dmi::ClazzInfo* SortedMap_methods_tailMap_INLRObject__LRSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedMap_method_tailMap_INLRObject__LRSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tailMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo(), // return type
  "_j_tailMap", // alternative name of method
  -1, // altlabelHashCode
  SortedMap_methods_tailMap_INLRObject__LRSortedMap__args, // the arguments
  0, //arguments count
  SortedMap_methods_tailMap_INLRObject__LRSortedMap__exceptions, // the declared exceptions
  SortedMap_MetainfoWrapper::SortedMap_method_tailMap_INLRObject__LRSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SortedMap_methods[] = 
{
  &SortedMap_method_GetClass__L_acdk_lang_RClass_,
  &SortedMap_method_comparator__LRComparator_,
  &SortedMap_method_firstKey__LRObject_,
  &SortedMap_method_headMap_INLRObject__LRSortedMap_,
  &SortedMap_method_lastKey__LRObject_,
  &SortedMap_method_subMap_INLRObject_INLRObject__LRSortedMap_,
  &SortedMap_method_tailMap_INLRObject__LRSortedMap_,
  0
};


struct SortedMap_MetaInfoInitializer
{  SortedMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SortedMap::clazzInfo();
    ci->fields =  _SortedMap_fields;
    ci->methods =  _SortedMap_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SortedMap_MetaInfoInitializer SortedMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
SortedSet_create_array(int length)
{
  return new ObjectArrayImpl<RSortedSet>(length);
}

//static
::acdk::lang::RObject
SortedSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SortedSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SortedSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedSet_method_comparator__LRComparator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedSet* This = dmi_cast<SortedSet>(This_);
    ret = (::acdk::lang::RObject)This->comparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedSet_method_first__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedSet* This = dmi_cast<SortedSet>(This_);
    ret = (::acdk::lang::RObject)This->first();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedSet_method_headSet_INLRObject__LRSortedSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedSet* This = dmi_cast<SortedSet>(This_);
    ret = (::acdk::lang::RObject)This->headSet(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedSet_method_last__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedSet* This = dmi_cast<SortedSet>(This_);
    ret = (::acdk::lang::RObject)This->last();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedSet_method_subSet_INLRObject_INLRObject__LRSortedSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedSet* This = dmi_cast<SortedSet>(This_);
    ret = (::acdk::lang::RObject)This->subSet(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SortedSet_method_tailSet_INLRObject__LRSortedSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SortedSet* This = dmi_cast<SortedSet>(This_);
    ret = (::acdk::lang::RObject)This->tailSet(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SortedSet_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SortedSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_l_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SortedSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SortedSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SortedSet_MetainfoWrapper::SortedSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedSet_methods_comparator__LRComparator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SortedSet_methods_comparator__LRComparator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedSet_method_comparator__LRComparator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "comparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparator::clazzInfo(), // return type
  "_f_comparator", // alternative name of method
  -1, // altlabelHashCode
  SortedSet_methods_comparator__LRComparator__args, // the arguments
  0, //arguments count
  SortedSet_methods_comparator__LRComparator__exceptions, // the declared exceptions
  SortedSet_MetainfoWrapper::SortedSet_method_comparator__LRComparator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedSet_methods_first__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SortedSet_methods_first__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedSet_method_first__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "first", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_g_first", // alternative name of method
  -1, // altlabelHashCode
  SortedSet_methods_first__LRObject__args, // the arguments
  0, //arguments count
  SortedSet_methods_first__LRObject__exceptions, // the declared exceptions
  SortedSet_MetainfoWrapper::SortedSet_method_first__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SortedSet_methods_headSet_INLRObject__LRSortedSet__arg_toElement = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toElement", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedSet_methods_headSet_INLRObject__LRSortedSet__args[] = 
{
  &SortedSet_methods_headSet_INLRObject__LRSortedSet__arg_toElement,
  0
};

::acdk::lang::dmi::ClazzInfo* SortedSet_methods_headSet_INLRObject__LRSortedSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedSet_method_headSet_INLRObject__LRSortedSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "headSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedSet::clazzInfo(), // return type
  "_h_headSet", // alternative name of method
  -1, // altlabelHashCode
  SortedSet_methods_headSet_INLRObject__LRSortedSet__args, // the arguments
  0, //arguments count
  SortedSet_methods_headSet_INLRObject__LRSortedSet__exceptions, // the declared exceptions
  SortedSet_MetainfoWrapper::SortedSet_method_headSet_INLRObject__LRSortedSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedSet_methods_last__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SortedSet_methods_last__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedSet_method_last__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "last", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_i_last", // alternative name of method
  -1, // altlabelHashCode
  SortedSet_methods_last__LRObject__args, // the arguments
  0, //arguments count
  SortedSet_methods_last__LRObject__exceptions, // the declared exceptions
  SortedSet_MetainfoWrapper::SortedSet_method_last__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__arg_fromElement = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fromElement", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__arg_toElement = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toElement", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__args[] = 
{
  &SortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__arg_fromElement,
  &SortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__arg_toElement,
  0
};

::acdk::lang::dmi::ClazzInfo* SortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedSet_method_subSet_INLRObject_INLRObject__LRSortedSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedSet::clazzInfo(), // return type
  "_j_subSet", // alternative name of method
  -1, // altlabelHashCode
  SortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__args, // the arguments
  0, //arguments count
  SortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__exceptions, // the declared exceptions
  SortedSet_MetainfoWrapper::SortedSet_method_subSet_INLRObject_INLRObject__LRSortedSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SortedSet_methods_tailSet_INLRObject__LRSortedSet__arg_fromElement = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fromElement", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SortedSet_methods_tailSet_INLRObject__LRSortedSet__args[] = 
{
  &SortedSet_methods_tailSet_INLRObject__LRSortedSet__arg_fromElement,
  0
};

::acdk::lang::dmi::ClazzInfo* SortedSet_methods_tailSet_INLRObject__LRSortedSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SortedSet_method_tailSet_INLRObject__LRSortedSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tailSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedSet::clazzInfo(), // return type
  "_k_tailSet", // alternative name of method
  -1, // altlabelHashCode
  SortedSet_methods_tailSet_INLRObject__LRSortedSet__args, // the arguments
  0, //arguments count
  SortedSet_methods_tailSet_INLRObject__LRSortedSet__exceptions, // the declared exceptions
  SortedSet_MetainfoWrapper::SortedSet_method_tailSet_INLRObject__LRSortedSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SortedSet_methods[] = 
{
  &SortedSet_method_GetClass__L_acdk_lang_RClass_,
  &SortedSet_method_comparator__LRComparator_,
  &SortedSet_method_first__LRObject_,
  &SortedSet_method_headSet_INLRObject__LRSortedSet_,
  &SortedSet_method_last__LRObject_,
  &SortedSet_method_subSet_INLRObject_INLRObject__LRSortedSet_,
  &SortedSet_method_tailSet_INLRObject__LRSortedSet_,
  0
};


struct SortedSet_MetaInfoInitializer
{  SortedSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SortedSet::clazzInfo();
    ci->fields =  _SortedSet_fields;
    ci->methods =  _SortedSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SortedSet_MetaInfoInitializer SortedSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
StringTokenizer_create_array(int length)
{
  return new ObjectArrayImpl<RStringTokenizer>(length);
}

//static
::acdk::lang::RObject
StringTokenizer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringTokenizer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringTokenizer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringTokenizer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_StringTokenizer_INLRString_INLRString__LRStringTokenizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringTokenizer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringTokenizer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_StringTokenizer_INLRString__LRStringTokenizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringTokenizer(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_allToken__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringTokenizer::allToken();
    else
        ret = (::acdk::lang::RObject)This->allToken();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_countTokens__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringTokenizer::countTokens();
    else
      ret = This->countTokens();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_hasMoreTokens__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringTokenizer::hasMoreTokens();
    else
      ret = This->hasMoreTokens();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_nextToken__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringTokenizer::nextToken();
    else
        ret = (::acdk::lang::RObject)This->nextToken();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_nextToken_INLRString_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringTokenizer::nextToken(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->nextToken(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTokenizer_method_nextToken_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringTokenizer::nextToken(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->nextToken(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTokenizer_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTokenizer_fields__delimiter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_delimiter, flags);
    else
      This->_delimiter = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTokenizer_fields__delimiterAreToken_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_delimiterAreToken, flags);
    else
      This->_delimiterAreToken = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTokenizer_fields__lastElement_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lastElement, flags);
    else
      This->_lastElement = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTokenizer_fields__nextBegin_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nextBegin, flags);
    else
      This->_nextBegin = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTokenizer_fields__nextEnd_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nextEnd, flags);
    else
      This->_nextEnd = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTokenizer_fields__pos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pos, flags);
    else
      This->_pos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTokenizer_fields__useDelimerAsChars_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTokenizer* This = dmi_cast<StringTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_useDelimerAsChars, flags);
    else
      This->_useDelimerAsChars = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StringTokenizer_fields__buffer = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StringTokenizer_MetainfoWrapper::StringTokenizer_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringTokenizer_fields__delimiter = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_delimiter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StringTokenizer_MetainfoWrapper::StringTokenizer_fields__delimiter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringTokenizer_fields__delimiterAreToken = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_delimiterAreToken", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StringTokenizer_MetainfoWrapper::StringTokenizer_fields__delimiterAreToken_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringTokenizer_fields__lastElement = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lastElement", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StringTokenizer_MetainfoWrapper::StringTokenizer_fields__lastElement_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringTokenizer_fields__nextBegin = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_nextBegin", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StringTokenizer_MetainfoWrapper::StringTokenizer_fields__nextBegin_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringTokenizer_fields__nextEnd = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_nextEnd", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StringTokenizer_MetainfoWrapper::StringTokenizer_fields__nextEnd_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringTokenizer_fields__pos = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_pos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StringTokenizer_MetainfoWrapper::StringTokenizer_fields__pos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringTokenizer_fields__useDelimerAsChars = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_useDelimerAsChars", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StringTokenizer_MetainfoWrapper::StringTokenizer_fields__useDelimerAsChars_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StringTokenizer_fields[] = 
{
  &StringTokenizer_fields__buffer,
  &StringTokenizer_fields__delimiter,
  &StringTokenizer_fields__delimiterAreToken,
  &StringTokenizer_fields__lastElement,
  &StringTokenizer_fields__nextBegin,
  &StringTokenizer_fields__nextEnd,
  &StringTokenizer_fields__pos,
  &StringTokenizer_fields__useDelimerAsChars,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__arg_delimiter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delimiter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__arg_delimiteraretoken = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "delimiteraretoken", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__arg_useDelimerAsChars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useDelimerAsChars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__args[] = 
{
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__arg_text,
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__arg_delimiter,
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__arg_delimiteraretoken,
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__arg_useDelimerAsChars,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringTokenizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringTokenizer::clazzInfo(), // return type
  "_0_StringTokenizer", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString__LRStringTokenizer__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString__LRStringTokenizer__arg_delimiter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delimiter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_StringTokenizer_INLRString_INLRString__LRStringTokenizer__args[] = 
{
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString__LRStringTokenizer__arg_text,
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString__LRStringTokenizer__arg_delimiter,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_StringTokenizer_INLRString_INLRString__LRStringTokenizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_StringTokenizer_INLRString_INLRString__LRStringTokenizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StringTokenizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringTokenizer::clazzInfo(), // return type
  "_1_StringTokenizer", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_StringTokenizer_INLRString_INLRString__LRStringTokenizer__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_StringTokenizer_INLRString_INLRString__LRStringTokenizer__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_StringTokenizer_INLRString_INLRString__LRStringTokenizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__arg_delimiter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delimiter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__arg_delimiteraretoken = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "delimiteraretoken", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__args[] = 
{
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__arg_text,
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__arg_delimiter,
  &StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__arg_delimiteraretoken,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StringTokenizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringTokenizer::clazzInfo(), // return type
  "_2_StringTokenizer", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_StringTokenizer_INLRString__LRStringTokenizer__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_StringTokenizer_INLRString__LRStringTokenizer__args[] = 
{
  &StringTokenizer_methods_StringTokenizer_INLRString__LRStringTokenizer__arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_StringTokenizer_INLRString__LRStringTokenizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_StringTokenizer_INLRString__LRStringTokenizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringTokenizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringTokenizer::clazzInfo(), // return type
  "_3_StringTokenizer", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_StringTokenizer_INLRString__LRStringTokenizer__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_StringTokenizer_INLRString__LRStringTokenizer__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_StringTokenizer_INLRString__LRStringTokenizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_allToken__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_allToken__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_allToken__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "allToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_9_allToken", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_allToken__LRStringArray__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_allToken__LRStringArray__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_allToken__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_countTokens__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_countTokens__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_countTokens__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "countTokens", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_countTokens", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_countTokens__I_args, // the arguments
  0, //arguments count
  StringTokenizer_methods_countTokens__I_exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_countTokens__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_hasMoreTokens__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_hasMoreTokens__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_hasMoreTokens__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasMoreTokens", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_hasMoreTokens", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_hasMoreTokens__Z_args, // the arguments
  0, //arguments count
  StringTokenizer_methods_hasMoreTokens__Z_exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_hasMoreTokens__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_nextToken__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_nextToken__LRString__exceptions[] =
{
  RNoSuchElementException::clazzInfo(), 
  0
};

void StringTokenizer_nextToken__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchElementException) == true)
    THROW_INSTANCE( RNoSuchElementException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_nextToken__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_nextToken", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_nextToken__LRString__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_nextToken__LRString__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_nextToken__LRString__dispatch, // invoke this method
  StringTokenizer_nextToken__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_nextToken_INLRString_Z_LRString__arg_delim = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delim", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_nextToken_INLRString_Z_LRString__arg_useDelimerAsChars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "useDelimerAsChars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_nextToken_INLRString_Z_LRString__args[] = 
{
  &StringTokenizer_methods_nextToken_INLRString_Z_LRString__arg_delim,
  &StringTokenizer_methods_nextToken_INLRString_Z_LRString__arg_useDelimerAsChars,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_nextToken_INLRString_Z_LRString__exceptions[] =
{
  RNoSuchElementException::clazzInfo(), 
  0
};

void StringTokenizer_nextToken_INLRString_Z_LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchElementException) == true)
    THROW_INSTANCE( RNoSuchElementException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_nextToken_INLRString_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_nextToken", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_nextToken_INLRString_Z_LRString__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_nextToken_INLRString_Z_LRString__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_nextToken_INLRString_Z_LRString__dispatch, // invoke this method
  StringTokenizer_nextToken_INLRString_Z_LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTokenizer_methods_nextToken_INLRString__LRString__arg_delim = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "delim", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTokenizer_methods_nextToken_INLRString__LRString__args[] = 
{
  &StringTokenizer_methods_nextToken_INLRString__LRString__arg_delim,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer_methods_nextToken_INLRString__LRString__exceptions[] =
{
  RNoSuchElementException::clazzInfo(), 
  0
};

void StringTokenizer_nextToken_INLRString__LRString__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NoSuchElementException) == true)
    THROW_INSTANCE( RNoSuchElementException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo StringTokenizer_method_nextToken_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "nextToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_nextToken", // alternative name of method
  -1, // altlabelHashCode
  StringTokenizer_methods_nextToken_INLRString__LRString__args, // the arguments
  0, //arguments count
  StringTokenizer_methods_nextToken_INLRString__LRString__exceptions, // the declared exceptions
  StringTokenizer_MetainfoWrapper::StringTokenizer_method_nextToken_INLRString__LRString__dispatch, // invoke this method
  StringTokenizer_nextToken_INLRString__LRString__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringTokenizer_methods[] = 
{
  &StringTokenizer_method_GetClass__L_acdk_lang_RClass_,
  &StringTokenizer_method_StringTokenizer_INLRString_INLRString_ZZ_LRStringTokenizer_,
  &StringTokenizer_method_StringTokenizer_INLRString_INLRString__LRStringTokenizer_,
  &StringTokenizer_method_StringTokenizer_INLRString_INLRString_Z_LRStringTokenizer_,
  &StringTokenizer_method_StringTokenizer_INLRString__LRStringTokenizer_,
  &StringTokenizer_method_allToken__LRStringArray_,
  &StringTokenizer_method_countTokens__I,
  &StringTokenizer_method_hasMoreTokens__Z,
  &StringTokenizer_method_nextToken__LRString_,
  &StringTokenizer_method_nextToken_INLRString_Z_LRString_,
  &StringTokenizer_method_nextToken_INLRString__LRString_,
  0
};


struct StringTokenizer_MetaInfoInitializer
{  StringTokenizer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringTokenizer::clazzInfo();
    ci->fields =  _StringTokenizer_fields;
    ci->methods =  _StringTokenizer_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringTokenizer_MetaInfoInitializer StringTokenizer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedIterator_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedIterator>(length);
}

//static
::acdk::lang::RObject
SynchronizedIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedIterator_method_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedIterator(::acdk::lang::dmi::castTo< RIterator>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedIterator_fields__it_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedIterator* This = dmi_cast<SynchronizedIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_it, flags);
    else
      This->_it = ::acdk::lang::dmi::castTo< RIterator>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedIterator_fields__lock_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedIterator* This = dmi_cast<SynchronizedIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lock, flags);
    else
      This->_lock = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedIterator_fields__it = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_it", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(),
  SynchronizedIterator_MetainfoWrapper::SynchronizedIterator_fields__it_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedIterator_fields__lock = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lock", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  SynchronizedIterator_MetainfoWrapper::SynchronizedIterator_fields__lock_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedIterator_fields[] = 
{
  &SynchronizedIterator_fields__it,
  &SynchronizedIterator_fields__lock,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedIterator_MetainfoWrapper::SynchronizedIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedIterator_methods_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__arg_it = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "it", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedIterator_methods_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__arg_thelock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "thelock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedIterator_methods_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__args[] = 
{
  &SynchronizedIterator_methods_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__arg_it,
  &SynchronizedIterator_methods_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__arg_thelock,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedIterator_methods_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedIterator_method_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedIterator::clazzInfo(), // return type
  "_0_SynchronizedIterator", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedIterator_methods_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__args, // the arguments
  0, //arguments count
  SynchronizedIterator_methods_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__exceptions, // the declared exceptions
  SynchronizedIterator_MetainfoWrapper::SynchronizedIterator_method_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedIterator_methods[] = 
{
  &SynchronizedIterator_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedIterator_method_SynchronizedIterator_INLRIterator_INLRObject__LRSynchronizedIterator_,
  0
};


struct SynchronizedIterator_MetaInfoInitializer
{  SynchronizedIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedIterator::clazzInfo();
    ci->fields =  _SynchronizedIterator_fields;
    ci->methods =  _SynchronizedIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedIterator_MetaInfoInitializer SynchronizedIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedListIterator_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedListIterator>(length);
}

//static
::acdk::lang::RObject
SynchronizedListIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedListIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedListIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedListIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedListIterator_method_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedListIterator(::acdk::lang::dmi::castTo< RListIterator>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedListIterator_fields__lit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedListIterator* This = dmi_cast<SynchronizedListIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lit, flags);
    else
      This->_lit = ::acdk::lang::dmi::castTo< RListIterator>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedListIterator_fields__lit = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo(),
  SynchronizedListIterator_MetainfoWrapper::SynchronizedListIterator_fields__lit_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedListIterator_fields[] = 
{
  &SynchronizedListIterator_fields__lit,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedListIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedListIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedListIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedListIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedListIterator_MetainfoWrapper::SynchronizedListIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedListIterator_methods_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__arg_lit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "lit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RListIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedListIterator_methods_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__arg_sync = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sync", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedListIterator_methods_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__args[] = 
{
  &SynchronizedListIterator_methods_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__arg_lit,
  &SynchronizedListIterator_methods_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__arg_sync,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedListIterator_methods_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedListIterator_method_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedListIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedListIterator::clazzInfo(), // return type
  "_0_SynchronizedListIterator", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedListIterator_methods_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__args, // the arguments
  0, //arguments count
  SynchronizedListIterator_methods_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__exceptions, // the declared exceptions
  SynchronizedListIterator_MetainfoWrapper::SynchronizedListIterator_method_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedListIterator_methods[] = 
{
  &SynchronizedListIterator_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedListIterator_method_SynchronizedListIterator_INLRListIterator_INLRObject__LRSynchronizedListIterator_,
  0
};


struct SynchronizedListIterator_MetaInfoInitializer
{  SynchronizedListIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedListIterator::clazzInfo();
    ci->fields =  _SynchronizedListIterator_fields;
    ci->methods =  _SynchronizedListIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedListIterator_MetaInfoInitializer SynchronizedListIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedCollection_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedCollection>(length);
}

//static
::acdk::lang::RObject
SynchronizedCollection_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedCollection_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedCollection_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedCollection::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedCollection_method_SynchronizedCollection_INLRCollection__LRSynchronizedCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedCollection(::acdk::lang::dmi::castTo< RCollection>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedCollection_method_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedCollection(::acdk::lang::dmi::castTo< RCollection>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedCollection_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedCollection::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedCollection_fields__coll_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedCollection* This = dmi_cast<SynchronizedCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_coll, flags);
    else
      This->_coll = ::acdk::lang::dmi::castTo< RCollection>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedCollection_fields__lock_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedCollection* This = dmi_cast<SynchronizedCollection>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lock, flags);
    else
      This->_lock = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedCollection_fields__coll = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_coll", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo(),
  SynchronizedCollection_MetainfoWrapper::SynchronizedCollection_fields__coll_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedCollection_fields__lock = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_lock", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  SynchronizedCollection_MetainfoWrapper::SynchronizedCollection_fields__lock_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedCollection_fields[] = 
{
  &SynchronizedCollection_fields__coll,
  &SynchronizedCollection_fields__lock,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedCollection_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedCollection_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedCollection_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedCollection_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedCollection_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedCollection_MetainfoWrapper::SynchronizedCollection_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedCollection_methods_SynchronizedCollection_INLRCollection__LRSynchronizedCollection__arg_coll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "coll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedCollection_methods_SynchronizedCollection_INLRCollection__LRSynchronizedCollection__args[] = 
{
  &SynchronizedCollection_methods_SynchronizedCollection_INLRCollection__LRSynchronizedCollection__arg_coll,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedCollection_methods_SynchronizedCollection_INLRCollection__LRSynchronizedCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedCollection_method_SynchronizedCollection_INLRCollection__LRSynchronizedCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedCollection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedCollection::clazzInfo(), // return type
  "_2_SynchronizedCollection", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedCollection_methods_SynchronizedCollection_INLRCollection__LRSynchronizedCollection__args, // the arguments
  0, //arguments count
  SynchronizedCollection_methods_SynchronizedCollection_INLRCollection__LRSynchronizedCollection__exceptions, // the declared exceptions
  SynchronizedCollection_MetainfoWrapper::SynchronizedCollection_method_SynchronizedCollection_INLRCollection__LRSynchronizedCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedCollection_methods_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__arg_coll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "coll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCollection::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedCollection_methods_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__arg_sync = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sync", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedCollection_methods_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__args[] = 
{
  &SynchronizedCollection_methods_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__arg_coll,
  &SynchronizedCollection_methods_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__arg_sync,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedCollection_methods_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedCollection_method_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedCollection", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedCollection::clazzInfo(), // return type
  "_1_SynchronizedCollection", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedCollection_methods_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__args, // the arguments
  0, //arguments count
  SynchronizedCollection_methods_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__exceptions, // the declared exceptions
  SynchronizedCollection_MetainfoWrapper::SynchronizedCollection_method_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedCollection_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedCollection_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedCollection_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedCollection_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  SynchronizedCollection_methods_create_instance__LRObject__exceptions, // the declared exceptions
  SynchronizedCollection_MetainfoWrapper::SynchronizedCollection_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedCollection_methods[] = 
{
  &SynchronizedCollection_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedCollection_method_SynchronizedCollection_INLRCollection__LRSynchronizedCollection_,
  &SynchronizedCollection_method_SynchronizedCollection_INLRCollection_INLRObject__LRSynchronizedCollection_,
  &SynchronizedCollection_method_create_instance__LRObject_,
  0
};


struct SynchronizedCollection_MetaInfoInitializer
{  SynchronizedCollection_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedCollection::clazzInfo();
    ci->fields =  _SynchronizedCollection_fields;
    ci->methods =  _SynchronizedCollection_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedCollection_MetaInfoInitializer SynchronizedCollection_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedList_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedList>(length);
}

//static
::acdk::lang::RObject
SynchronizedList_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedList_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedList_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedList::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedList_method_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedList(::acdk::lang::dmi::castTo< RList>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedList_method_SynchronizedList_INLRList__LRSynchronizedList__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedList(::acdk::lang::dmi::castTo< RList>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedList_fields__list_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedList* This = dmi_cast<SynchronizedList>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_list, flags);
    else
      This->_list = ::acdk::lang::dmi::castTo< RList>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedList_fields__list = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_list", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RList::clazzInfo(),
  SynchronizedList_MetainfoWrapper::SynchronizedList_fields__list_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedList_fields[] = 
{
  &SynchronizedList_fields__list,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedList_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedList_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedList_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedList_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedList_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedList_MetainfoWrapper::SynchronizedList_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedList_methods_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedList_methods_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__arg_sync = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sync", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedList_methods_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__args[] = 
{
  &SynchronizedList_methods_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__arg_list,
  &SynchronizedList_methods_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__arg_sync,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedList_methods_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedList_method_SynchronizedList_INLRList_INLRObject__LRSynchronizedList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedList::clazzInfo(), // return type
  "_0_SynchronizedList", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedList_methods_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__args, // the arguments
  0, //arguments count
  SynchronizedList_methods_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__exceptions, // the declared exceptions
  SynchronizedList_MetainfoWrapper::SynchronizedList_method_SynchronizedList_INLRList_INLRObject__LRSynchronizedList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedList_methods_SynchronizedList_INLRList__LRSynchronizedList__arg_list = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "list", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RList::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedList_methods_SynchronizedList_INLRList__LRSynchronizedList__args[] = 
{
  &SynchronizedList_methods_SynchronizedList_INLRList__LRSynchronizedList__arg_list,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedList_methods_SynchronizedList_INLRList__LRSynchronizedList__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedList_method_SynchronizedList_INLRList__LRSynchronizedList_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedList::clazzInfo(), // return type
  "_1_SynchronizedList", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedList_methods_SynchronizedList_INLRList__LRSynchronizedList__args, // the arguments
  0, //arguments count
  SynchronizedList_methods_SynchronizedList_INLRList__LRSynchronizedList__exceptions, // the declared exceptions
  SynchronizedList_MetainfoWrapper::SynchronizedList_method_SynchronizedList_INLRList__LRSynchronizedList__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedList_methods[] = 
{
  &SynchronizedList_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedList_method_SynchronizedList_INLRList_INLRObject__LRSynchronizedList_,
  &SynchronizedList_method_SynchronizedList_INLRList__LRSynchronizedList_,
  0
};


struct SynchronizedList_MetaInfoInitializer
{  SynchronizedList_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedList::clazzInfo();
    ci->fields =  _SynchronizedList_fields;
    ci->methods =  _SynchronizedList_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedList_MetaInfoInitializer SynchronizedList_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedSet_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedSet>(length);
}

//static
::acdk::lang::RObject
SynchronizedSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSet_method_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedSet(::acdk::lang::dmi::castTo< RSet>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSet_method_SynchronizedSet_INLRSet__LRSynchronizedSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedSet(::acdk::lang::dmi::castTo< RSet>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedSet_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedSet_MetainfoWrapper::SynchronizedSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSet_methods_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__arg_set = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "set", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSet_methods_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__arg_sync = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sync", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSet_methods_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__args[] = 
{
  &SynchronizedSet_methods_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__arg_set,
  &SynchronizedSet_methods_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__arg_sync,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSet_methods_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSet_method_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedSet::clazzInfo(), // return type
  "_0_SynchronizedSet", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSet_methods_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__args, // the arguments
  0, //arguments count
  SynchronizedSet_methods_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__exceptions, // the declared exceptions
  SynchronizedSet_MetainfoWrapper::SynchronizedSet_method_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSet_methods_SynchronizedSet_INLRSet__LRSynchronizedSet__arg_set = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "set", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSet_methods_SynchronizedSet_INLRSet__LRSynchronizedSet__args[] = 
{
  &SynchronizedSet_methods_SynchronizedSet_INLRSet__LRSynchronizedSet__arg_set,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSet_methods_SynchronizedSet_INLRSet__LRSynchronizedSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSet_method_SynchronizedSet_INLRSet__LRSynchronizedSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedSet::clazzInfo(), // return type
  "_1_SynchronizedSet", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSet_methods_SynchronizedSet_INLRSet__LRSynchronizedSet__args, // the arguments
  0, //arguments count
  SynchronizedSet_methods_SynchronizedSet_INLRSet__LRSynchronizedSet__exceptions, // the declared exceptions
  SynchronizedSet_MetainfoWrapper::SynchronizedSet_method_SynchronizedSet_INLRSet__LRSynchronizedSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedSet_methods[] = 
{
  &SynchronizedSet_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedSet_method_SynchronizedSet_INLRSet_INLRObject__LRSynchronizedSet_,
  &SynchronizedSet_method_SynchronizedSet_INLRSet__LRSynchronizedSet_,
  0
};


struct SynchronizedSet_MetaInfoInitializer
{  SynchronizedSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedSet::clazzInfo();
    ci->fields =  _SynchronizedSet_fields;
    ci->methods =  _SynchronizedSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedSet_MetaInfoInitializer SynchronizedSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedSortedSet_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedSortedSet>(length);
}

//static
::acdk::lang::RObject
SynchronizedSortedSet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedSortedSet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSortedSet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedSortedSet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSortedSet_method_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedSortedSet(::acdk::lang::dmi::castTo< RSortedSet>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSortedSet_method_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedSortedSet(::acdk::lang::dmi::castTo< RSortedSet>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSortedSet_method_subSet_INLRObject_INLRObject__LRSortedSet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SynchronizedSortedSet* This = dmi_cast<SynchronizedSortedSet>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SynchronizedSortedSet::subSet(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->subSet(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedSortedSet_fields__sortedSet_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedSortedSet* This = dmi_cast<SynchronizedSortedSet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sortedSet, flags);
    else
      This->_sortedSet = ::acdk::lang::dmi::castTo< RSortedSet>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedSortedSet_fields__sortedSet = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sortedSet", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedSet::clazzInfo(),
  SynchronizedSortedSet_MetainfoWrapper::SynchronizedSortedSet_fields__sortedSet_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedSortedSet_fields[] = 
{
  &SynchronizedSortedSet_fields__sortedSet,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSortedSet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedSet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSortedSet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSortedSet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedSortedSet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedSortedSet_MetainfoWrapper::SynchronizedSortedSet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__arg_ss = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ss", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__arg_sync = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sync", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__args[] = 
{
  &SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__arg_ss,
  &SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__arg_sync,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSortedSet_method_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedSortedSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedSortedSet::clazzInfo(), // return type
  "_0_SynchronizedSortedSet", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__args, // the arguments
  0, //arguments count
  SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__exceptions, // the declared exceptions
  SynchronizedSortedSet_MetainfoWrapper::SynchronizedSortedSet_method_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet__arg_ss = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ss", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet__args[] = 
{
  &SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet__arg_ss,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSortedSet_method_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedSortedSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedSortedSet::clazzInfo(), // return type
  "_1_SynchronizedSortedSet", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet__args, // the arguments
  0, //arguments count
  SynchronizedSortedSet_methods_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet__exceptions, // the declared exceptions
  SynchronizedSortedSet_MetainfoWrapper::SynchronizedSortedSet_method_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__arg_fromElement = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fromElement", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__arg_toElement = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "toElement", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__args[] = 
{
  &SynchronizedSortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__arg_fromElement,
  &SynchronizedSortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__arg_toElement,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSortedSet_method_subSet_INLRObject_INLRObject__LRSortedSet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "subSet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedSet::clazzInfo(), // return type
  "_2_subSet", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__args, // the arguments
  0, //arguments count
  SynchronizedSortedSet_methods_subSet_INLRObject_INLRObject__LRSortedSet__exceptions, // the declared exceptions
  SynchronizedSortedSet_MetainfoWrapper::SynchronizedSortedSet_method_subSet_INLRObject_INLRObject__LRSortedSet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedSortedSet_methods[] = 
{
  &SynchronizedSortedSet_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedSortedSet_method_SynchronizedSortedSet_INLRSortedSet_INLRObject__LRSynchronizedSortedSet_,
  &SynchronizedSortedSet_method_SynchronizedSortedSet_INLRSortedSet__LRSynchronizedSortedSet_,
  &SynchronizedSortedSet_method_subSet_INLRObject_INLRObject__LRSortedSet_,
  0
};


struct SynchronizedSortedSet_MetaInfoInitializer
{  SynchronizedSortedSet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedSortedSet::clazzInfo();
    ci->fields =  _SynchronizedSortedSet_fields;
    ci->methods =  _SynchronizedSortedSet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedSortedSet_MetaInfoInitializer SynchronizedSortedSet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedMap_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedMap>(length);
}

//static
::acdk::lang::RObject
SynchronizedMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMap_method_SynchronizedMap_INLRMap__LRSynchronizedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedMap(::acdk::lang::dmi::castTo< RMap>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMap_method_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedMap(::acdk::lang::dmi::castTo< RMap>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMap_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedMap::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedMap_fields__lock_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedMap* This = dmi_cast<SynchronizedMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lock, flags);
    else
      This->_lock = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedMap_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedMap* This = dmi_cast<SynchronizedMap>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedMap_fields__lock = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lock", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  SynchronizedMap_MetainfoWrapper::SynchronizedMap_fields__lock_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedMap_fields__map = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo(),
  SynchronizedMap_MetainfoWrapper::SynchronizedMap_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedMap_fields[] = 
{
  &SynchronizedMap_fields__lock,
  &SynchronizedMap_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedMap_MetainfoWrapper::SynchronizedMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMap_methods_SynchronizedMap_INLRMap__LRSynchronizedMap__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMap_methods_SynchronizedMap_INLRMap__LRSynchronizedMap__args[] = 
{
  &SynchronizedMap_methods_SynchronizedMap_INLRMap__LRSynchronizedMap__arg_map,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMap_methods_SynchronizedMap_INLRMap__LRSynchronizedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMap_method_SynchronizedMap_INLRMap__LRSynchronizedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedMap::clazzInfo(), // return type
  "_2_SynchronizedMap", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMap_methods_SynchronizedMap_INLRMap__LRSynchronizedMap__args, // the arguments
  0, //arguments count
  SynchronizedMap_methods_SynchronizedMap_INLRMap__LRSynchronizedMap__exceptions, // the declared exceptions
  SynchronizedMap_MetainfoWrapper::SynchronizedMap_method_SynchronizedMap_INLRMap__LRSynchronizedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMap_methods_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMap_methods_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__arg_sync = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sync", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMap_methods_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__args[] = 
{
  &SynchronizedMap_methods_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__arg_map,
  &SynchronizedMap_methods_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__arg_sync,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMap_methods_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMap_method_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedMap::clazzInfo(), // return type
  "_1_SynchronizedMap", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMap_methods_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__args, // the arguments
  0, //arguments count
  SynchronizedMap_methods_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__exceptions, // the declared exceptions
  SynchronizedMap_MetainfoWrapper::SynchronizedMap_method_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMap_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMap_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMap_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMap_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  SynchronizedMap_methods_create_instance__LRObject__exceptions, // the declared exceptions
  SynchronizedMap_MetainfoWrapper::SynchronizedMap_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedMap_methods[] = 
{
  &SynchronizedMap_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedMap_method_SynchronizedMap_INLRMap__LRSynchronizedMap_,
  &SynchronizedMap_method_SynchronizedMap_INLRMap_INLRObject__LRSynchronizedMap_,
  &SynchronizedMap_method_create_instance__LRObject_,
  0
};


struct SynchronizedMap_MetaInfoInitializer
{  SynchronizedMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedMap::clazzInfo();
    ci->fields =  _SynchronizedMap_fields;
    ci->methods =  _SynchronizedMap_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedMap_MetaInfoInitializer SynchronizedMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedMapEntry_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedMapEntry>(length);
}

//static
::acdk::lang::RObject
SynchronizedMapEntry_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedMapEntry_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMapEntry_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedMapEntry::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMapEntry_method_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedMapEntry(::acdk::lang::dmi::castTo< RSynchronizedMap>(args[0], dc), ::acdk::lang::dmi::castTo< RMapEntry>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedMapEntry_fields__entry_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedMapEntry* This = dmi_cast<SynchronizedMapEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_entry, flags);
    else
      This->_entry = ::acdk::lang::dmi::castTo< RMapEntry>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedMapEntry_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedMapEntry* This = dmi_cast<SynchronizedMapEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RSynchronizedMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedMapEntry_fields__entry = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_entry", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMapEntry::clazzInfo(),
  SynchronizedMapEntry_MetainfoWrapper::SynchronizedMapEntry_fields__entry_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedMapEntry_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSynchronizedMap::clazzInfo(),
  SynchronizedMapEntry_MetainfoWrapper::SynchronizedMapEntry_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedMapEntry_fields[] = 
{
  &SynchronizedMapEntry_fields__entry,
  &SynchronizedMapEntry_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMapEntry_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntry_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMapEntry_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMapEntry_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedMapEntry_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedMapEntry_MetainfoWrapper::SynchronizedMapEntry_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMapEntry_methods_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSynchronizedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMapEntry_methods_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__arg_entry = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "entry", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMapEntry::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMapEntry_methods_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__args[] = 
{
  &SynchronizedMapEntry_methods_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__arg_map,
  &SynchronizedMapEntry_methods_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__arg_entry,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntry_methods_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMapEntry_method_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedMapEntry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedMapEntry::clazzInfo(), // return type
  "_0_SynchronizedMapEntry", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMapEntry_methods_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__args, // the arguments
  0, //arguments count
  SynchronizedMapEntry_methods_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__exceptions, // the declared exceptions
  SynchronizedMapEntry_MetainfoWrapper::SynchronizedMapEntry_method_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedMapEntry_methods[] = 
{
  &SynchronizedMapEntry_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedMapEntry_method_SynchronizedMapEntry_INLRSynchronizedMap_INLRMapEntry__LRSynchronizedMapEntry_,
  0
};


struct SynchronizedMapEntry_MetaInfoInitializer
{  SynchronizedMapEntry_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedMapEntry::clazzInfo();
    ci->fields =  _SynchronizedMapEntry_fields;
    ci->methods =  _SynchronizedMapEntry_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedMapEntry_MetaInfoInitializer SynchronizedMapEntry_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedMapEntySetIterator_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedMapEntySetIterator>(length);
}

//static
::acdk::lang::RObject
SynchronizedMapEntySetIterator_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedMapEntySetIterator_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMapEntySetIterator_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedMapEntySetIterator::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMapEntySetIterator_method_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedMapEntySetIterator(::acdk::lang::dmi::castTo< RSynchronizedMap>(args[0], dc), ::acdk::lang::dmi::castTo< RIterator>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedMapEntySetIterator_fields__it_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedMapEntySetIterator* This = dmi_cast<SynchronizedMapEntySetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_it, flags);
    else
      This->_it = ::acdk::lang::dmi::castTo< RIterator>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedMapEntySetIterator_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedMapEntySetIterator* This = dmi_cast<SynchronizedMapEntySetIterator>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RSynchronizedMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedMapEntySetIterator_fields__it = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_it", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo(),
  SynchronizedMapEntySetIterator_MetainfoWrapper::SynchronizedMapEntySetIterator_fields__it_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedMapEntySetIterator_fields__map = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSynchronizedMap::clazzInfo(),
  SynchronizedMapEntySetIterator_MetainfoWrapper::SynchronizedMapEntySetIterator_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedMapEntySetIterator_fields[] = 
{
  &SynchronizedMapEntySetIterator_fields__it,
  &SynchronizedMapEntySetIterator_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMapEntySetIterator_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntySetIterator_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMapEntySetIterator_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMapEntySetIterator_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedMapEntySetIterator_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedMapEntySetIterator_MetainfoWrapper::SynchronizedMapEntySetIterator_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSynchronizedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__arg_it = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "it", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIterator::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__arg_thelock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "thelock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__args[] = 
{
  &SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__arg_map,
  &SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__arg_it,
  &SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__arg_thelock,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMapEntySetIterator_method_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedMapEntySetIterator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedMapEntySetIterator::clazzInfo(), // return type
  "_0_SynchronizedMapEntySetIterator", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__args, // the arguments
  0, //arguments count
  SynchronizedMapEntySetIterator_methods_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__exceptions, // the declared exceptions
  SynchronizedMapEntySetIterator_MetainfoWrapper::SynchronizedMapEntySetIterator_method_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedMapEntySetIterator_methods[] = 
{
  &SynchronizedMapEntySetIterator_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedMapEntySetIterator_method_SynchronizedMapEntySetIterator_INLRSynchronizedMap_INLRIterator_INLRObject__LRSynchronizedMapEntySetIterator_,
  0
};


struct SynchronizedMapEntySetIterator_MetaInfoInitializer
{  SynchronizedMapEntySetIterator_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedMapEntySetIterator::clazzInfo();
    ci->fields =  _SynchronizedMapEntySetIterator_fields;
    ci->methods =  _SynchronizedMapEntySetIterator_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedMapEntySetIterator_MetaInfoInitializer SynchronizedMapEntySetIterator_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedMapEntySet_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedMapEntySet>(length);
}

//static
::acdk::lang::RObject
SynchronizedMapEntySet_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedMapEntySet_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMapEntySet_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedMapEntySet::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedMapEntySet_method_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedMapEntySet(::acdk::lang::dmi::castTo< RSynchronizedMap>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedMapEntySet_fields__lock_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedMapEntySet* This = dmi_cast<SynchronizedMapEntySet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lock, flags);
    else
      This->_lock = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SynchronizedMapEntySet_fields__map_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SynchronizedMapEntySet* This = dmi_cast<SynchronizedMapEntySet>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_map, flags);
    else
      This->_map = ::acdk::lang::dmi::castTo< RSynchronizedMap>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedMapEntySet_fields__lock = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lock", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  SynchronizedMapEntySet_MetainfoWrapper::SynchronizedMapEntySet_fields__lock_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SynchronizedMapEntySet_fields__map = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_map", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSynchronizedMap::clazzInfo(),
  SynchronizedMapEntySet_MetainfoWrapper::SynchronizedMapEntySet_fields__map_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedMapEntySet_fields[] = 
{
  &SynchronizedMapEntySet_fields__lock,
  &SynchronizedMapEntySet_fields__map,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMapEntySet_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntySet_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMapEntySet_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMapEntySet_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedMapEntySet_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedMapEntySet_MetainfoWrapper::SynchronizedMapEntySet_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMapEntySet_methods_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__arg_map = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "map", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSynchronizedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedMapEntySet_methods_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__arg_thelock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "thelock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedMapEntySet_methods_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__args[] = 
{
  &SynchronizedMapEntySet_methods_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__arg_map,
  &SynchronizedMapEntySet_methods_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__arg_thelock,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntySet_methods_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedMapEntySet_method_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedMapEntySet", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedMapEntySet::clazzInfo(), // return type
  "_0_SynchronizedMapEntySet", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedMapEntySet_methods_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__args, // the arguments
  0, //arguments count
  SynchronizedMapEntySet_methods_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__exceptions, // the declared exceptions
  SynchronizedMapEntySet_MetainfoWrapper::SynchronizedMapEntySet_method_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedMapEntySet_methods[] = 
{
  &SynchronizedMapEntySet_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedMapEntySet_method_SynchronizedMapEntySet_INLRSynchronizedMap_INLRObject__LRSynchronizedMapEntySet_,
  0
};


struct SynchronizedMapEntySet_MetaInfoInitializer
{  SynchronizedMapEntySet_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedMapEntySet::clazzInfo();
    ci->fields =  _SynchronizedMapEntySet_fields;
    ci->methods =  _SynchronizedMapEntySet_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedMapEntySet_MetaInfoInitializer SynchronizedMapEntySet_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


//static
::acdk::lang::RObject
SynchronizedSortedMap_create_array(int length)
{
  return new ObjectArrayImpl<RSynchronizedSortedMap>(length);
}

//static
::acdk::lang::RObject
SynchronizedSortedMap_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SynchronizedSortedMap_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSortedMap_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SynchronizedSortedMap::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSortedMap_method_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedSortedMap(::acdk::lang::dmi::castTo< RSortedMap>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SynchronizedSortedMap_method_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SynchronizedSortedMap(::acdk::lang::dmi::castTo< RSortedMap>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SynchronizedSortedMap_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSortedMap_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedMap_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSortedMap_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSortedMap_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SynchronizedSortedMap_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SynchronizedSortedMap_MetainfoWrapper::SynchronizedSortedMap_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__arg_sm = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sm", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__arg_sync = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "sync", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__args[] = 
{
  &SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__arg_sm,
  &SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__arg_sync,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSortedMap_method_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedSortedMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedSortedMap::clazzInfo(), // return type
  "_0_SynchronizedSortedMap", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__args, // the arguments
  0, //arguments count
  SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__exceptions, // the declared exceptions
  SynchronizedSortedMap_MetainfoWrapper::SynchronizedSortedMap_method_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap__arg_sm = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sm", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSortedMap::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap__args[] = 
{
  &SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap__arg_sm,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SynchronizedSortedMap_method_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SynchronizedSortedMap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SynchronizedSortedMap::clazzInfo(), // return type
  "_1_SynchronizedSortedMap", // alternative name of method
  -1, // altlabelHashCode
  SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap__args, // the arguments
  0, //arguments count
  SynchronizedSortedMap_methods_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap__exceptions, // the declared exceptions
  SynchronizedSortedMap_MetainfoWrapper::SynchronizedSortedMap_method_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SynchronizedSortedMap_methods[] = 
{
  &SynchronizedSortedMap_method_GetClass__L_acdk_lang_RClass_,
  &SynchronizedSortedMap_method_SynchronizedSortedMap_INLRSortedMap_INLRObject__LRSynchronizedSortedMap_,
  &SynchronizedSortedMap_method_SynchronizedSortedMap_INLRSortedMap__LRSynchronizedSortedMap_,
  0
};


struct SynchronizedSortedMap_MetaInfoInitializer
{  SynchronizedSortedMap_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SynchronizedSortedMap::clazzInfo();
    ci->fields =  _SynchronizedSortedMap_fields;
    ci->methods =  _SynchronizedSortedMap_methods;
    ci->_scopeParent = acdk_util_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SynchronizedSortedMap_MetaInfoInitializer SynchronizedSortedMap_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util

