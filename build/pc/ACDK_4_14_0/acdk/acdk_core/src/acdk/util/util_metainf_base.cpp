// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AbstractCollection.h"
#include "AbstractList.h"
#include "AbstractListIterator.h"
#include "AbstractListListIterator.h"
#include "AbstractListSubList.h"
#include "AbstractMap.h"
#include "AbstractSequentialList.h"
#include "AbstractSet.h"
#include "acdk_util_classes.h"
#include "ArrayIterator.h"
#include "ArrayList.h"
#include "Arrays.h"
#include "BasicMapEntry.h"
#include "BitSet.h"
#include "Bucket.h"
#include "Calendar.h"
#include "Collection.h"
#include "Collections.h"
#include "Comparator.h"
#include "ConcurrentModificationException.h"
#include "Date.h"
#include "Dictionary.h"
#include "DoubleIterator.h"
#include "EmptyCollectionIterator.h"
#include "Enumeration.h"
#include "EventListener.h"
#include "EventListenerProxy.h"
#include "EventObject.h"
#include "GregorianCalendar.h"
#include "HashMap.h"
#include "HashSet.h"
#include "Hashtable.h"
#include "IdentityHashMap.h"
#include "Iterator.h"
#include "LinkedList.h"
#include "List.h"
#include "ListIterator.h"
#include "ListResourceBundle.h"
#include "Locale.h"
#include "Map.h"
#include "MissingResourceException.h"
#include "NoSuchElementException.h"
#include "Properties.h"
#include "PropertiesListener.h"
#include "PropertyResourceBundle.h"
#include "Random.h"
#include "ResourceBundle.h"
#include "Set.h"
#include "SimpleCalendar.h"
#include "SimpleListResourceBundle.h"
#include "SimpleTimeZone.h"
#include "SingleObjectIterator.h"
#include "SortedMap.h"
#include "SortedSet.h"
#include "StringTokenizer.h"
#include "SynchronizedCollections.h"
#include "SysDate.h"
#include "TAbstractCollection.h"
#include "TAbstractList.h"
#include "TAbstractListIterator.h"
#include "TAbstractListListIterator.h"
#include "TAbstractListSubList.h"
#include "TAbstractMap.h"
#include "TAbstractSet.h"
#include "TArrayList.h"
#include "TBasicMapEntry.h"
#include "TBucket.h"
#include "TCollection.h"
#include "TComparator.h"
#include "TDoubleIterator.h"
#include "THashMap.h"
#include "THashSet.h"
#include "TimeZone.h"
#include "TIterator.h"
#include "TList.h"
#include "TListIterator.h"
#include "TMap.h"
#include "TreeMap.h"
#include "TreeSet.h"
#include "TSet.h"
#include "TSortedMap.h"
#include "TTreeMap.h"
#include "util.h"
#include "util_all.h"
#include "Vector.h"
#include "WeakHashMap.h"

namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractCollection_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractCollection_super_acdk__util__Collection =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::util::Collection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractCollection_interfaces[] =
{
  &_AbstractCollection_super___acdk__lang__Object,
  &_AbstractCollection_super_acdk__util__Collection,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCollection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractCollection", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractCollection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractCollection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractCollection(AbstractCollection::clazzInfo());

::acdk::lang::RClass
AbstractCollection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractCollection::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractList_super_AbstractCollection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCollection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractList_super_List =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  List::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractList_interfaces[] =
{
  &_AbstractList_super_AbstractCollection,
  &_AbstractList_super_List,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractList", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractList(AbstractList::clazzInfo());

::acdk::lang::RClass
AbstractList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractList::getCollectableFields(FieldReferences& fields)
{
  AbstractCollection::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractListIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractListIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractListIterator_interfaces[] =
{
  &_AbstractListIterator_super_acdk__lang__Object,
  &_AbstractListIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractListIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractListIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractListIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractListIterator(AbstractListIterator::clazzInfo());

::acdk::lang::RClass
AbstractListIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractListIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_list._ref_this()); // RAbstractList _list 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractListListIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractListListIterator_super_ListIterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ListIterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractListListIterator_interfaces[] =
{
  &_AbstractListListIterator_super_acdk__lang__Object,
  &_AbstractListListIterator_super_ListIterator,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListListIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractListListIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractListListIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractListListIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractListListIterator(AbstractListListIterator::clazzInfo());

::acdk::lang::RClass
AbstractListListIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractListListIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_list._ref_this()); // RAbstractList _list 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractListSubList_super_AbstractList =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractList::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractListSubList_interfaces[] =
{
  &_AbstractListSubList_super_AbstractList,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "AbstractListSubList", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractListSubList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractListSubList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractListSubList(AbstractListSubList::clazzInfo());

::acdk::lang::RClass
AbstractListSubList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractListSubList::getCollectableFields(FieldReferences& fields)
{
  AbstractList::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_list._ref_this()); // RAbstractList _list 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractListSubListListIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractListSubListListIterator_super_ListIterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ListIterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractListSubListListIterator_interfaces[] =
{
  &_AbstractListSubListListIterator_super_acdk__lang__Object,
  &_AbstractListSubListListIterator_super_ListIterator,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractListSubListListIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "AbstractListSubListListIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractListSubListListIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractListSubListListIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractListSubListListIterator(AbstractListSubListListIterator::clazzInfo());

::acdk::lang::RClass
AbstractListSubListListIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractListSubListListIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_it._ref_this()); // RListIterator _it 
  fields.push_back((::acdk::lang::RObject*)this->_list._ref_this()); // RAbstractListSubList _list 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractMap_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractMap_super_Map =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Map::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractMap_interfaces[] =
{
  &_AbstractMap_super_acdk__lang__Object,
  &_AbstractMap_super_Map,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractMap(AbstractMap::clazzInfo());

::acdk::lang::RClass
AbstractMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractMap::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractMapCachedKeySet_super_AbstractSet =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractMapCachedKeySet_interfaces[] =
{
  &_AbstractMapCachedKeySet_super_AbstractSet,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractMapCachedKeySet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractMapCachedKeySet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractMapCachedKeySet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractMapCachedKeySet(AbstractMapCachedKeySet::clazzInfo());

::acdk::lang::RClass
AbstractMapCachedKeySet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractMapCachedKeySet::getCollectableFields(FieldReferences& fields)
{
  AbstractSet::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RAbstractMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractMapCachedKeySetIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractMapCachedKeySetIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractMapCachedKeySetIterator_interfaces[] =
{
  &_AbstractMapCachedKeySetIterator_super_acdk__lang__Object,
  &_AbstractMapCachedKeySetIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedKeySetIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractMapCachedKeySetIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractMapCachedKeySetIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractMapCachedKeySetIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractMapCachedKeySetIterator(AbstractMapCachedKeySetIterator::clazzInfo());

::acdk::lang::RClass
AbstractMapCachedKeySetIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractMapCachedKeySetIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_it._ref_this()); // RIterator _it 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractMapCachedValuesCollection_super_AbstractCollection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCollection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractMapCachedValuesCollection_interfaces[] =
{
  &_AbstractMapCachedValuesCollection_super_AbstractCollection,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractMapCachedValuesCollection", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractMapCachedValuesCollection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractMapCachedValuesCollection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractMapCachedValuesCollection(AbstractMapCachedValuesCollection::clazzInfo());

::acdk::lang::RClass
AbstractMapCachedValuesCollection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractMapCachedValuesCollection::getCollectableFields(FieldReferences& fields)
{
  AbstractCollection::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RAbstractMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractMapCachedValuesCollectionIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractMapCachedValuesCollectionIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractMapCachedValuesCollectionIterator_interfaces[] =
{
  &_AbstractMapCachedValuesCollectionIterator_super_acdk__lang__Object,
  &_AbstractMapCachedValuesCollectionIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractMapCachedValuesCollectionIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractMapCachedValuesCollectionIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractMapCachedValuesCollectionIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractMapCachedValuesCollectionIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractMapCachedValuesCollectionIterator(AbstractMapCachedValuesCollectionIterator::clazzInfo());

::acdk::lang::RClass
AbstractMapCachedValuesCollectionIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractMapCachedValuesCollectionIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_it._ref_this()); // RIterator _it 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractSequentialList_super_AbstractList =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractList::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractSequentialList_interfaces[] =
{
  &_AbstractSequentialList_super_AbstractList,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSequentialList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractSequentialList", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractSequentialList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractSequentialList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractSequentialList(AbstractSequentialList::clazzInfo());

::acdk::lang::RClass
AbstractSequentialList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractSequentialList::getCollectableFields(FieldReferences& fields)
{
  AbstractList::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractSet_super_AbstractCollection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCollection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractSet_super_Set =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Set::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractSet_interfaces[] =
{
  &_AbstractSet_super_AbstractCollection,
  &_AbstractSet_super_Set,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractSet(AbstractSet::clazzInfo());

::acdk::lang::RClass
AbstractSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractSet::getCollectableFields(FieldReferences& fields)
{
  AbstractCollection::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _ArrayIterator_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ArrayIterator_super_ListIterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ListIterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ArrayIterator_interfaces[] =
{
  &_ArrayIterator_super___acdk__lang__Object,
  &_ArrayIterator_super_ListIterator,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ArrayIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ArrayIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ArrayIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ArrayIterator(ArrayIterator::clazzInfo());

::acdk::lang::RClass
ArrayIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ArrayIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_array._ref_this()); // RObjectArray _array 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ArrayList_super_AbstractList =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractList::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ArrayList_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ArrayList_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ArrayList_interfaces[] =
{
  &_ArrayList_super_AbstractList,
  &_ArrayList_super_acdk__lang__Cloneable,
  &_ArrayList_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* ArrayList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "ArrayList", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ArrayList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &ArrayList::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ArrayList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ArrayList(ArrayList::clazzInfo());

::acdk::lang::RClass
ArrayList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ArrayList::getCollectableFields(FieldReferences& fields)
{
  AbstractList::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_data._ref_this()); // RObjectArray _data 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ArraysImpl_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ArraysImpl_interfaces[] =
{
  &_ArraysImpl_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ArraysImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ArraysImpl", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ArraysImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ArraysImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ArraysImpl(ArraysImpl::clazzInfo());

::acdk::lang::RClass
ArraysImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ArraysImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _BasicMapEntry_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _BasicMapEntry_super_MapEntry =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  MapEntry::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _BasicMapEntry_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BasicMapEntry_interfaces[] =
{
  &_BasicMapEntry_super_acdk__lang__Object,
  &_BasicMapEntry_super_MapEntry,
  &_BasicMapEntry_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* BasicMapEntry::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "BasicMapEntry", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BasicMapEntry_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BasicMapEntry::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BasicMapEntry(BasicMapEntry::clazzInfo());

::acdk::lang::RClass
BasicMapEntry::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BasicMapEntry::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_key._ref_this()); // RObject _key 
  fields.push_back((::acdk::lang::RObject*)this->_value._ref_this()); // RObject _value 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _BitSet_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _BitSet_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _BitSet_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BitSet_interfaces[] =
{
  &_BitSet_super_acdk__lang__Object,
  &_BitSet_super_acdk__lang__Cloneable,
  &_BitSet_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* BitSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "BitSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BitSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BitSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BitSet(BitSet::clazzInfo());

::acdk::lang::RClass
BitSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BitSet::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_bits._ref_this()); // RcharArray _bits 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _BucketNode_super_BasicMapEntry =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  BasicMapEntry::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _BucketNode_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BucketNode_interfaces[] =
{
  &_BucketNode_super_BasicMapEntry,
  &_BucketNode_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* BucketNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "BucketNode", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BucketNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &BucketNode::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BucketNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BucketNode(BucketNode::clazzInfo());

::acdk::lang::RClass
BucketNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BucketNode::getCollectableFields(FieldReferences& fields)
{
  BasicMapEntry::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_next._ref_this()); // RBucketNode _next 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _Bucket_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Bucket_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Bucket_interfaces[] =
{
  &_Bucket_super_acdk__lang__Object,
  &_Bucket_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Bucket::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Bucket", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Bucket_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Bucket::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Bucket(Bucket::clazzInfo());

::acdk::lang::RClass
Bucket::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Bucket::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_first._ref_this()); // RBucketNode _first 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _Calendar_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Calendar_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Calendar_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Calendar_interfaces[] =
{
  &_Calendar_super_acdk__lang__Object,
  &_Calendar_super_acdk__io__Serializable,
  &_Calendar_super_acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Calendar::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Calendar", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Calendar_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Calendar::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Calendar(Calendar::clazzInfo());

::acdk::lang::RClass
Calendar::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Calendar::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fields._ref_this()); // RintArray _fields 
  fields.push_back((::acdk::lang::RObject*)this->_isSet._ref_this()); // RboolArray _isSet 
  fields.push_back((::acdk::lang::RObject*)this->_stamp._ref_this()); // RintArray _stamp 
  fields.push_back((::acdk::lang::RObject*)this->_zone._ref_this()); // RTimeZone _zone 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Collection_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Collection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Collection", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Collection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Collection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Collection(Collection::clazzInfo());

::acdk::lang::RClass
Collection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Collection::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _IteratorEnumeration_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _IteratorEnumeration_super_Enumeration =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Enumeration::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IteratorEnumeration_interfaces[] =
{
  &_IteratorEnumeration_super_acdk__lang__Object,
  &_IteratorEnumeration_super_Enumeration,
  0
};

::acdk::lang::dmi::ClazzInfo* IteratorEnumeration::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IteratorEnumeration", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IteratorEnumeration_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IteratorEnumeration::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IteratorEnumeration(IteratorEnumeration::clazzInfo());

::acdk::lang::RClass
IteratorEnumeration::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IteratorEnumeration::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_it._ref_this()); // RIterator _it 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Comparator_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Comparator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Comparator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Comparator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Comparator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Comparator(Comparator::clazzInfo());

::acdk::lang::RClass
Comparator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Comparator::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ConcurrentModificationException_super_acdk__lang__RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConcurrentModificationException_interfaces[] =
{
  &_ConcurrentModificationException_super_acdk__lang__RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* ConcurrentModificationException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ConcurrentModificationException", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ConcurrentModificationException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ConcurrentModificationException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ConcurrentModificationException(ConcurrentModificationException::clazzInfo());

::acdk::lang::RClass
ConcurrentModificationException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ConcurrentModificationException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, RuntimeException)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _Date_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Date_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Date_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Date_super_acdk__lang__Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Date_interfaces[] =
{
  &_Date_super_acdk__lang__Object,
  &_Date_super_acdk__io__Serializable,
  &_Date_super_acdk__lang__Cloneable,
  &_Date_super_acdk__lang__Comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* Date::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Date", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Date_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Date::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Date::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Date(Date::clazzInfo());

::acdk::lang::RClass
Date::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Date::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _Dictionary_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Dictionary_interfaces[] =
{
  &_Dictionary_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* Dictionary::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Dictionary", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Dictionary_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Dictionary::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Dictionary(Dictionary::clazzInfo());

::acdk::lang::RClass
Dictionary::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Dictionary::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace ::acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _DoubleIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _DoubleIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DoubleIterator_interfaces[] =
{
  &_DoubleIterator_super_acdk__lang__Object,
  &_DoubleIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* DoubleIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DoubleIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DoubleIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DoubleIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DoubleIterator(DoubleIterator::clazzInfo());

::acdk::lang::RClass
DoubleIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DoubleIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_it1._ref_this()); // RIterator _it1 
  fields.push_back((::acdk::lang::RObject*)this->_it2._ref_this()); // RIterator _it2 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _EmptyCollectionIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _EmptyCollectionIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _EmptyCollectionIterator_interfaces[] =
{
  &_EmptyCollectionIterator_super_acdk__lang__Object,
  &_EmptyCollectionIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* EmptyCollectionIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "EmptyCollectionIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _EmptyCollectionIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    EmptyCollectionIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_EmptyCollectionIterator(EmptyCollectionIterator::clazzInfo());

::acdk::lang::RClass
EmptyCollectionIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
EmptyCollectionIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Enumeration_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Enumeration", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Enumeration_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Enumeration::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Enumeration(Enumeration::clazzInfo());

::acdk::lang::RClass
Enumeration::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Enumeration::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo* _EventListener_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* EventListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "EventListener", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _EventListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    EventListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_EventListener(EventListener::clazzInfo());

::acdk::lang::RClass
EventListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
EventListener::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _EventListenerProxy_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _EventListenerProxy_super_EventListener =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  EventListener::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _EventListenerProxy_interfaces[] =
{
  &_EventListenerProxy_super_acdk__lang__Object,
  &_EventListenerProxy_super_EventListener,
  0
};

::acdk::lang::dmi::ClazzInfo* EventListenerProxy::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "EventListenerProxy", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _EventListenerProxy_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    EventListenerProxy::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_EventListenerProxy(EventListenerProxy::clazzInfo());

::acdk::lang::RClass
EventListenerProxy::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
EventListenerProxy::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_listener._ref_this()); // REventListener _listener 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _EventObject_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _EventObject_interfaces[] =
{
  &_EventObject_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* EventObject::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "EventObject", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _EventObject_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    EventObject::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_EventObject(EventObject::clazzInfo());

::acdk::lang::RClass
EventObject::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
EventObject::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_source._ref_this()); // RString _source 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _GregorianCalendar_super_acdk__util__Calendar =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::util::Calendar::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _GregorianCalendar_interfaces[] =
{
  &_GregorianCalendar_super_acdk__util__Calendar,
  0
};

::acdk::lang::dmi::ClazzInfo* GregorianCalendar::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "GregorianCalendar", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _GregorianCalendar_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    GregorianCalendar::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_GregorianCalendar(GregorianCalendar::clazzInfo());

::acdk::lang::RClass
GregorianCalendar::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
GregorianCalendar::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::util::, Calendar)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;

::acdk::lang::dmi::ClazzEnumValueInfo HashMapSetType_HMSTKeys = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HMSTKeys", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::HMSTKeys, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HashMapSetType_HMSTValues = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HMSTValues", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::HMSTValues, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo HashMapSetType_HMSTEntries = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "HMSTEntries", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::HMSTEntries, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* HashMapSetType_enumValues[] = {
  &HashMapSetType_HMSTKeys,
  &HashMapSetType_HMSTValues,
  &HashMapSetType_HMSTEntries,
0
};

::acdk::lang::dmi::ClazzEnumInfo* HashMapSetTypeMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo HashMapSetType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "HashMapSetType", // name
  -1, // hashCode
  "acdk/util", // ns
  0, // _scopeParent
  0, // _nextSibling
  HashMapSetType_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_HashMapSetType(&HashMapSetType_enumInfo);

  return &HashMapSetType_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_HashMapSetTypeEnumInfo(HashMapSetTypeMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _HashMap_super_AbstractMap =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HashMap_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HashMap_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HashMap_interfaces[] =
{
  &_HashMap_super_AbstractMap,
  &_HashMap_super_acdk__lang__Cloneable,
  &_HashMap_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "HashMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HashMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &HashMap::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HashMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HashMap(HashMap::clazzInfo());

::acdk::lang::RClass
HashMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HashMap::getCollectableFields(FieldReferences& fields)
{
  AbstractMap::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buckets._ref_this()); // RBucketArray _buckets 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _HashMapKey_super_BucketNode =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  BucketNode::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HashMapKey_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HashMapKey_interfaces[] =
{
  &_HashMapKey_super_BucketNode,
  &_HashMapKey_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapKey::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "HashMapKey", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HashMapKey_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HashMapKey::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HashMapKey(HashMapKey::clazzInfo());

::acdk::lang::RClass
HashMapKey::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HashMapKey::getCollectableFields(FieldReferences& fields)
{
  BucketNode::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _HashMapIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HashMapIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HashMapIterator_interfaces[] =
{
  &_HashMapIterator_super_acdk__lang__Object,
  &_HashMapIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "HashMapIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HashMapIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HashMapIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HashMapIterator(HashMapIterator::clazzInfo());

::acdk::lang::RClass
HashMapIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HashMapIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_currentKey._ref_this()); // RObject _currentKey 
  fields.push_back((::acdk::lang::RObject*)this->_currentNode._ref_this()); // RBucketNode _currentNode 
  fields.push_back((::acdk::lang::RObject*)this->_hashMap._ref_this()); // RHashMap _hashMap 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _HashMapSet_super_AbstractSet =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HashMapSet_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HashMapSet_interfaces[] =
{
  &_HashMapSet_super_AbstractSet,
  &_HashMapSet_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "HashMapSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HashMapSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HashMapSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HashMapSet(HashMapSet::clazzInfo());

::acdk::lang::RClass
HashMapSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HashMapSet::getCollectableFields(FieldReferences& fields)
{
  AbstractSet::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_hashMap._ref_this()); // RHashMap _hashMap 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _HashMapCollection_super_AbstractCollection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCollection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HashMapCollection_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HashMapCollection_interfaces[] =
{
  &_HashMapCollection_super_AbstractCollection,
  &_HashMapCollection_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* HashMapCollection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "HashMapCollection", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HashMapCollection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HashMapCollection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HashMapCollection(HashMapCollection::clazzInfo());

::acdk::lang::RClass
HashMapCollection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HashMapCollection::getCollectableFields(FieldReferences& fields)
{
  AbstractCollection::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_hashMap._ref_this()); // RHashMap _hashMap 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _HashSet_super_AbstractSet =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HashSet_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _HashSet_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _HashSet_interfaces[] =
{
  &_HashSet_super_AbstractSet,
  &_HashSet_super_acdk__lang__Cloneable,
  &_HashSet_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* HashSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "HashSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _HashSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &HashSet::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    HashSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_HashSet(HashSet::clazzInfo());

::acdk::lang::RClass
HashSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
HashSet::getCollectableFields(FieldReferences& fields)
{
  AbstractSet::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RHashMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _Hashtable_super_acdk__util__Dictionary =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::util::Dictionary::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Hashtable_super_acdk__util__Map =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::util::Map::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Hashtable_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Hashtable_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Hashtable_interfaces[] =
{
  &_Hashtable_super_acdk__util__Dictionary,
  &_Hashtable_super_acdk__util__Map,
  &_Hashtable_super_acdk__io__Serializable,
  &_Hashtable_super_acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Hashtable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Hashtable", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Hashtable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Hashtable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Hashtable(Hashtable::clazzInfo());

::acdk::lang::RClass
Hashtable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Hashtable::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::util::, Dictionary)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_table._ref_this()); // RHashMap _table 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _IdentityHashMap_super_HashMap =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  HashMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IdentityHashMap_interfaces[] =
{
  &_IdentityHashMap_super_HashMap,
  0
};

::acdk::lang::dmi::ClazzInfo* IdentityHashMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IdentityHashMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IdentityHashMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &IdentityHashMap::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IdentityHashMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IdentityHashMap(IdentityHashMap::clazzInfo());

::acdk::lang::RClass
IdentityHashMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IdentityHashMap::getCollectableFields(FieldReferences& fields)
{
  HashMap::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Iterator_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Iterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Iterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Iterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Iterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Iterator(Iterator::clazzInfo());

::acdk::lang::RClass
Iterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Iterator::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _LinkedListEntry_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LinkedListEntry_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LinkedListEntry_interfaces[] =
{
  &_LinkedListEntry_super_acdk__lang__Object,
  &_LinkedListEntry_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListEntry::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LinkedListEntry", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LinkedListEntry_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LinkedListEntry::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LinkedListEntry(LinkedListEntry::clazzInfo());

::acdk::lang::RClass
LinkedListEntry::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LinkedListEntry::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->data._ref_this()); // RObject data 
  fields.push_back((::acdk::lang::RObject*)this->next._ref_this()); // RLinkedListEntry next 
  fields.push_back((::acdk::lang::RObject*)this->previous._ref_this()); // RLinkedListEntry previous 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _LinkedList_super_AbstractSequentialList =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractSequentialList::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LinkedList_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LinkedList_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LinkedList_interfaces[] =
{
  &_LinkedList_super_AbstractSequentialList,
  &_LinkedList_super_acdk__io__Serializable,
  &_LinkedList_super_acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "LinkedList", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LinkedList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &LinkedList::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LinkedList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LinkedList(LinkedList::clazzInfo());

::acdk::lang::RClass
LinkedList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LinkedList::getCollectableFields(FieldReferences& fields)
{
  AbstractSequentialList::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_tail._ref_this()); // RLinkedListEntry _tail 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _SubLinkedList_super_AbstractSequentialList =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractSequentialList::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SubLinkedList_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SubLinkedList_interfaces[] =
{
  &_SubLinkedList_super_AbstractSequentialList,
  &_SubLinkedList_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SubLinkedList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SubLinkedList", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SubLinkedList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SubLinkedList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SubLinkedList(SubLinkedList::clazzInfo());

::acdk::lang::RClass
SubLinkedList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SubLinkedList::getCollectableFields(FieldReferences& fields)
{
  AbstractSequentialList::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_head._ref_this()); // RLinkedListEntry _head 
  fields.push_back((::acdk::lang::RObject*)this->_list._ref_this()); // RLinkedList _list 
  fields.push_back((::acdk::lang::RObject*)this->_tail._ref_this()); // RLinkedListEntry _tail 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _LinkedListIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LinkedListIterator_super_ListIterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ListIterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LinkedListIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LinkedListIterator_interfaces[] =
{
  &_LinkedListIterator_super_acdk__lang__Object,
  &_LinkedListIterator_super_ListIterator,
  &_LinkedListIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* LinkedListIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LinkedListIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LinkedListIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LinkedListIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LinkedListIterator(LinkedListIterator::clazzInfo());

::acdk::lang::RClass
LinkedListIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LinkedListIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_list._ref_this()); // RLinkedList _list 
  fields.push_back((::acdk::lang::RObject*)this->_next._ref_this()); // RLinkedListEntry _next 
  fields.push_back((::acdk::lang::RObject*)this->_previous._ref_this()); // RLinkedListEntry _previous 
  fields.push_back((::acdk::lang::RObject*)this->_recent._ref_this()); // RLinkedListEntry _recent 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _List_super_Collection =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Collection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _List_interfaces[] =
{
  &_List_super_Collection,
  0
};

::acdk::lang::dmi::ClazzInfo* List::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "List", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _List_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    List::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_List(List::clazzInfo());

::acdk::lang::RClass
List::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
List::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ListIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ListIterator_interfaces[] =
{
  &_ListIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* ListIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ListIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ListIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ListIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ListIterator(ListIterator::clazzInfo());

::acdk::lang::RClass
ListIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ListIterator::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ListResourceBundle_super_ResourceBundle =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ResourceBundle::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ListResourceBundle_interfaces[] =
{
  &_ListResourceBundle_super_ResourceBundle,
  0
};

::acdk::lang::dmi::ClazzInfo* ListResourceBundle::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ListResourceBundle", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ListResourceBundle_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ListResourceBundle::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ListResourceBundle(ListResourceBundle::clazzInfo());

::acdk::lang::RClass
ListResourceBundle::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ListResourceBundle::getCollectableFields(FieldReferences& fields)
{
  ResourceBundle::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


::acdk::lang::dmi::ClazzEnumValueInfo SystemLocaleCategory_SysLocaleAll = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SysLocaleAll", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::SysLocaleAll, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemLocaleCategory_SysLocaleCollate = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SysLocaleCollate", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::SysLocaleCollate, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemLocaleCategory_SysLocaleCtype = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SysLocaleCtype", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::SysLocaleCtype, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemLocaleCategory_SysLocaleMonetary = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SysLocaleMonetary", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::SysLocaleMonetary, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemLocaleCategory_SysLocaleNumberic = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SysLocaleNumberic", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::SysLocaleNumberic, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SystemLocaleCategory_SysLocaleTime = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SysLocaleTime", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::SysLocaleTime, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SystemLocaleCategory_enumValues[] = {
  &SystemLocaleCategory_SysLocaleAll,
  &SystemLocaleCategory_SysLocaleCollate,
  &SystemLocaleCategory_SysLocaleCtype,
  &SystemLocaleCategory_SysLocaleMonetary,
  &SystemLocaleCategory_SysLocaleNumberic,
  &SystemLocaleCategory_SysLocaleTime,
0
};

::acdk::lang::dmi::ClazzEnumInfo* SystemLocaleCategoryMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo SystemLocaleCategory_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SystemLocaleCategory", // name
  -1, // hashCode
  "acdk/util", // ns
  0, // _scopeParent
  0, // _nextSibling
  SystemLocaleCategory_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_SystemLocaleCategory(&SystemLocaleCategory_enumInfo);

  return &SystemLocaleCategory_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_SystemLocaleCategoryEnumInfo(SystemLocaleCategoryMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _Locale_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Locale_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Locale_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Locale_interfaces[] =
{
  &_Locale_super_acdk__lang__Object,
  &_Locale_super_acdk__lang__Cloneable,
  &_Locale_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Locale::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Locale", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Locale_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 25, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Locale::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Locale(Locale::clazzInfo());

::acdk::lang::RClass
Locale::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Locale::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_country._ref_this()); // RString _country 
  fields.push_back((::acdk::lang::RObject*)this->_language._ref_this()); // RString _language 
  fields.push_back((::acdk::lang::RObject*)this->_variant._ref_this()); // RString _variant 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Map_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Map::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Map", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Map_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Map::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Map(Map::clazzInfo());

::acdk::lang::RClass
Map::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Map::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _MapEntry_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* MapEntry::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "MapEntry", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MapEntry_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MapEntry::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MapEntry(MapEntry::clazzInfo());

::acdk::lang::RClass
MapEntry::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MapEntry::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _MissingResourceException_super_acdk__lang__RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MissingResourceException_interfaces[] =
{
  &_MissingResourceException_super_acdk__lang__RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* MissingResourceException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MissingResourceException", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MissingResourceException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MissingResourceException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MissingResourceException(MissingResourceException::clazzInfo());

::acdk::lang::RClass
MissingResourceException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MissingResourceException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, RuntimeException)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _NoSuchElementException_super_acdk__lang__RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NoSuchElementException_interfaces[] =
{
  &_NoSuchElementException_super_acdk__lang__RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* NoSuchElementException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NoSuchElementException", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NoSuchElementException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NoSuchElementException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NoSuchElementException(NoSuchElementException::clazzInfo());

::acdk::lang::RClass
NoSuchElementException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NoSuchElementException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, RuntimeException)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 


::acdk::lang::dmi::ClazzEnumValueInfo PropertiesChangeAction_PropChangeSetProperty = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PropChangeSetProperty", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::PropChangeSetProperty, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PropertiesChangeAction_PropChangeSetMapProperty = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PropChangeSetMapProperty", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::PropChangeSetMapProperty, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo PropertiesChangeAction_PropChangeSetArrayProperty = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "PropChangeSetArrayProperty", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::PropChangeSetArrayProperty, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* PropertiesChangeAction_enumValues[] = {
  &PropertiesChangeAction_PropChangeSetProperty,
  &PropertiesChangeAction_PropChangeSetMapProperty,
  &PropertiesChangeAction_PropChangeSetArrayProperty,
0
};

::acdk::lang::dmi::ClazzEnumInfo* PropertiesChangeActionMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo PropertiesChangeAction_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "PropertiesChangeAction", // name
  -1, // hashCode
  "acdk/util", // ns
  0, // _scopeParent
  0, // _nextSibling
  PropertiesChangeAction_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_PropertiesChangeAction(&PropertiesChangeAction_enumInfo);

  return &PropertiesChangeAction_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_PropertiesChangeActionEnumInfo(PropertiesChangeActionMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo* _PropertiesChangeListener_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropertiesChangeListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "PropertiesChangeListener", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PropertiesChangeListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PropertiesChangeListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PropertiesChangeListener(PropertiesChangeListener::clazzInfo());

::acdk::lang::RClass
PropertiesChangeListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PropertiesChangeListener::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _Properties_super_HashMap =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  HashMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Properties_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Properties_super___acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Properties_interfaces[] =
{
  &_Properties_super_HashMap,
  &_Properties_super___acdk__io__Serializable,
  &_Properties_super___acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* Properties::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Properties", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Properties_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Properties::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Properties(Properties::clazzInfo());

::acdk::lang::RClass
Properties::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Properties::getCollectableFields(FieldReferences& fields)
{
  HashMap::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_defaults._ref_this()); // RProperties _defaults 
  fields.push_back((::acdk::lang::RObject*)this->_listener._ref_this()); // RPropertiesChangeListenerArray _listener 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _PropertiesListener_super___acdk__lang__Thread =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Thread::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PropertiesListener_interfaces[] =
{
  &_PropertiesListener_super___acdk__lang__Thread,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertiesListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PropertiesListener", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PropertiesListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PropertiesListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PropertiesListener(PropertiesListener::clazzInfo());

::acdk::lang::RClass
PropertiesListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PropertiesListener::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Thread)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_configFile._ref_this()); // RString _configFile 
  fields.push_back((::acdk::lang::RObject*)this->_properties._ref_this()); // RProperties _properties 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _PropertyResourceBundle_super_ResourceBundle =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ResourceBundle::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PropertyResourceBundle_interfaces[] =
{
  &_PropertyResourceBundle_super_ResourceBundle,
  0
};

::acdk::lang::dmi::ClazzInfo* PropertyResourceBundle::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PropertyResourceBundle", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PropertyResourceBundle_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PropertyResourceBundle::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PropertyResourceBundle(PropertyResourceBundle::clazzInfo());

::acdk::lang::RClass
PropertyResourceBundle::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PropertyResourceBundle::getCollectableFields(FieldReferences& fields)
{
  ResourceBundle::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_properties._ref_this()); // RProperties _properties 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _Random_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Random_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Random_interfaces[] =
{
  &_Random_super_acdk__lang__Object,
  &_Random_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Random::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Random", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Random_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Random::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Random::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Random(Random::clazzInfo());

::acdk::lang::RClass
Random::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Random::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _ResourceBundle_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ResourceBundle_interfaces[] =
{
  &_ResourceBundle_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* ResourceBundle::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ResourceBundle", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ResourceBundle_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ResourceBundle::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ResourceBundle(ResourceBundle::clazzInfo());

::acdk::lang::RClass
ResourceBundle::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ResourceBundle::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_locale._ref_this()); // RLocale _locale 
  fields.push_back((::acdk::lang::RObject*)this->_parent._ref_this()); // RResourceBundle _parent 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Set_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Set::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Set", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Set_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Set::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Set(Set::clazzInfo());

::acdk::lang::RClass
Set::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Set::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _SimpleListResourceBundle_super_ResourceBundle =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ResourceBundle::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SimpleListResourceBundle_interfaces[] =
{
  &_SimpleListResourceBundle_super_ResourceBundle,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleListResourceBundle::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SimpleListResourceBundle", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SimpleListResourceBundle_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SimpleListResourceBundle::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SimpleListResourceBundle(SimpleListResourceBundle::clazzInfo());

::acdk::lang::RClass
SimpleListResourceBundle::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SimpleListResourceBundle::getCollectableFields(FieldReferences& fields)
{
  ResourceBundle::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _SimpleTimeZone_super_acdk__util__TimeZone =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::util::TimeZone::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SimpleTimeZone_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SimpleTimeZone_interfaces[] =
{
  &_SimpleTimeZone_super_acdk__util__TimeZone,
  &_SimpleTimeZone_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleTimeZone::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SimpleTimeZone", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SimpleTimeZone_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SimpleTimeZone::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SimpleTimeZone(SimpleTimeZone::clazzInfo());

::acdk::lang::RClass
SimpleTimeZone::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SimpleTimeZone::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::util::, TimeZone)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SingleObjectIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SingleObjectIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SingleObjectIterator_interfaces[] =
{
  &_SingleObjectIterator_super_acdk__lang__Object,
  &_SingleObjectIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* SingleObjectIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SingleObjectIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SingleObjectIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SingleObjectIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SingleObjectIterator(SingleObjectIterator::clazzInfo());

::acdk::lang::RClass
SingleObjectIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SingleObjectIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_object._ref_this()); // RObject _object 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _SortedMap_super_Map =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Map::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SortedMap_interfaces[] =
{
  &_SortedMap_super_Map,
  0
};

::acdk::lang::dmi::ClazzInfo* SortedMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SortedMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SortedMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SortedMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SortedMap(SortedMap::clazzInfo());

::acdk::lang::RClass
SortedMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SortedMap::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _SortedSet_super_Set =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Set::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SortedSet_interfaces[] =
{
  &_SortedSet_super_Set,
  0
};

::acdk::lang::dmi::ClazzInfo* SortedSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SortedSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SortedSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SortedSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SortedSet(SortedSet::clazzInfo());

::acdk::lang::RClass
SortedSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SortedSet::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _StringTokenizer_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _StringTokenizer_super_acdk__util__Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::util::Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringTokenizer_interfaces[] =
{
  &_StringTokenizer_super_acdk__lang__Object,
  &_StringTokenizer_super_acdk__util__Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTokenizer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StringTokenizer", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StringTokenizer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StringTokenizer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StringTokenizer(StringTokenizer::clazzInfo());

::acdk::lang::RClass
StringTokenizer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StringTokenizer::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RString _buffer 
  fields.push_back((::acdk::lang::RObject*)this->_delimiter._ref_this()); // RString _delimiter 
  fields.push_back((::acdk::lang::RObject*)this->_lastElement._ref_this()); // RString _lastElement 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedIterator_interfaces[] =
{
  &_SynchronizedIterator_super_acdk__lang__Object,
  &_SynchronizedIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SynchronizedIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedIterator(SynchronizedIterator::clazzInfo());

::acdk::lang::RClass
SynchronizedIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_it._ref_this()); // RIterator _it 
  fields.push_back((::acdk::lang::RObject*)this->_lock._ref_this()); // RObject _lock 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedListIterator_super_SynchronizedIterator =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SynchronizedIterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedListIterator_super_ListIterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ListIterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedListIterator_interfaces[] =
{
  &_SynchronizedListIterator_super_SynchronizedIterator,
  &_SynchronizedListIterator_super_ListIterator,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedListIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SynchronizedListIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedListIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedListIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedListIterator(SynchronizedListIterator::clazzInfo());

::acdk::lang::RClass
SynchronizedListIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedListIterator::getCollectableFields(FieldReferences& fields)
{
  SynchronizedIterator::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_lit._ref_this()); // RListIterator _lit 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedCollection_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedCollection_super_Collection =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Collection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedCollection_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedCollection_interfaces[] =
{
  &_SynchronizedCollection_super_acdk__lang__Object,
  &_SynchronizedCollection_super_Collection,
  &_SynchronizedCollection_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedCollection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SynchronizedCollection", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedCollection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &SynchronizedCollection::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedCollection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedCollection(SynchronizedCollection::clazzInfo());

::acdk::lang::RClass
SynchronizedCollection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedCollection::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_coll._ref_this()); // RCollection _coll 
  fields.push_back((::acdk::lang::RObject*)this->_lock._ref_this()); // RObject _lock 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedList_super_SynchronizedCollection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SynchronizedCollection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedList_super_List =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  List::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedList_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedList_interfaces[] =
{
  &_SynchronizedList_super_SynchronizedCollection,
  &_SynchronizedList_super_List,
  &_SynchronizedList_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedList::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SynchronizedList", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedList_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedList::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedList(SynchronizedList::clazzInfo());

::acdk::lang::RClass
SynchronizedList::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedList::getCollectableFields(FieldReferences& fields)
{
  SynchronizedCollection::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_list._ref_this()); // RList _list 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSet_super_SynchronizedCollection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SynchronizedCollection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSet_super_Set =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Set::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSet_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedSet_interfaces[] =
{
  &_SynchronizedSet_super_SynchronizedCollection,
  &_SynchronizedSet_super_Set,
  &_SynchronizedSet_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SynchronizedSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedSet(SynchronizedSet::clazzInfo());

::acdk::lang::RClass
SynchronizedSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedSet::getCollectableFields(FieldReferences& fields)
{
  SynchronizedCollection::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSortedSet_super_SynchronizedSet =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SynchronizedSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSortedSet_super_SortedSet =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SortedSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSortedSet_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedSortedSet_interfaces[] =
{
  &_SynchronizedSortedSet_super_SynchronizedSet,
  &_SynchronizedSortedSet_super_SortedSet,
  &_SynchronizedSortedSet_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SynchronizedSortedSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedSortedSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedSortedSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedSortedSet(SynchronizedSortedSet::clazzInfo());

::acdk::lang::RClass
SynchronizedSortedSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedSortedSet::getCollectableFields(FieldReferences& fields)
{
  SynchronizedSet::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_sortedSet._ref_this()); // RSortedSet _sortedSet 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMap_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMap_super_Map =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Map::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMap_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedMap_interfaces[] =
{
  &_SynchronizedMap_super_acdk__lang__Object,
  &_SynchronizedMap_super_Map,
  &_SynchronizedMap_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SynchronizedMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &SynchronizedMap::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedMap(SynchronizedMap::clazzInfo());

::acdk::lang::RClass
SynchronizedMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedMap::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_lock._ref_this()); // RObject _lock 
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMapEntry_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMapEntry_super_MapEntry =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  MapEntry::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMapEntry_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedMapEntry_interfaces[] =
{
  &_SynchronizedMapEntry_super_acdk__lang__Object,
  &_SynchronizedMapEntry_super_MapEntry,
  &_SynchronizedMapEntry_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntry::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SynchronizedMapEntry", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedMapEntry_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedMapEntry::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedMapEntry(SynchronizedMapEntry::clazzInfo());

::acdk::lang::RClass
SynchronizedMapEntry::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedMapEntry::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_entry._ref_this()); // RMapEntry _entry 
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RSynchronizedMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMapEntySetIterator_super_SynchronizedIterator =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SynchronizedIterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedMapEntySetIterator_interfaces[] =
{
  &_SynchronizedMapEntySetIterator_super_SynchronizedIterator,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntySetIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SynchronizedMapEntySetIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedMapEntySetIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedMapEntySetIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedMapEntySetIterator(SynchronizedMapEntySetIterator::clazzInfo());

::acdk::lang::RClass
SynchronizedMapEntySetIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedMapEntySetIterator::getCollectableFields(FieldReferences& fields)
{
  SynchronizedIterator::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_it._ref_this()); // RIterator _it 
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RSynchronizedMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMapEntySet_super_SynchronizedSet =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SynchronizedSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedMapEntySet_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedMapEntySet_interfaces[] =
{
  &_SynchronizedMapEntySet_super_SynchronizedSet,
  &_SynchronizedMapEntySet_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedMapEntySet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SynchronizedMapEntySet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedMapEntySet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedMapEntySet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedMapEntySet(SynchronizedMapEntySet::clazzInfo());

::acdk::lang::RClass
SynchronizedMapEntySet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedMapEntySet::getCollectableFields(FieldReferences& fields)
{
  SynchronizedSet::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_lock._ref_this()); // RObject _lock 
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RSynchronizedMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSortedMap_super_SynchronizedMap =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SynchronizedMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSortedMap_super_SortedMap =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SortedMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SynchronizedSortedMap_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SynchronizedSortedMap_interfaces[] =
{
  &_SynchronizedSortedMap_super_SynchronizedMap,
  &_SynchronizedSortedMap_super_SortedMap,
  &_SynchronizedSortedMap_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SynchronizedSortedMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SynchronizedSortedMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SynchronizedSortedMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SynchronizedSortedMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SynchronizedSortedMap(SynchronizedSortedMap::clazzInfo());

::acdk::lang::RClass
SynchronizedSortedMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SynchronizedSortedMap::getCollectableFields(FieldReferences& fields)
{
  SynchronizedMap::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _SysDate_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SysDate_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SysDate_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SysDate_super_acdk__lang__Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SysDate_interfaces[] =
{
  &_SysDate_super_acdk__lang__Object,
  &_SysDate_super_acdk__io__Serializable,
  &_SysDate_super_acdk__lang__Cloneable,
  &_SysDate_super_acdk__lang__Comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* SysDate::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SysDate", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SysDate_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &SysDate::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SysDate::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SysDate(SysDate::clazzInfo());

::acdk::lang::RClass
SysDate::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SysDate::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _TimeZone_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TimeZone_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TimeZone_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TimeZone_interfaces[] =
{
  &_TimeZone_super_acdk__lang__Object,
  &_TimeZone_super_acdk__io__Serializable,
  &_TimeZone_super_acdk__lang__Cloneable,
  0
};

::acdk::lang::dmi::ClazzInfo* TimeZone::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "TimeZone", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TimeZone_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TimeZone::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TimeZone(TimeZone::clazzInfo());

::acdk::lang::RClass
TimeZone::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TimeZone::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_id._ref_this()); // RString _id 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo NodeType_RedNodeType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "RedNodeType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::RedNodeType, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo NodeType_BlackNodeType = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "BlackNodeType", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::BlackNodeType, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* NodeType_enumValues[] = {
  &NodeType_RedNodeType,
  &NodeType_BlackNodeType,
0
};

::acdk::lang::dmi::ClazzEnumInfo NodeType_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "NodeType", // name
  -1, // hashCode
  "acdk/util", // ns
  0, // _scopeParent
  0, // _nextSibling
  NodeType_enumValues, // values
  0, // internal next link
};

::acdk::lang::dmi::RegisterEnumInfo _register_NodeType(&NodeType_enumInfo);


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo MapEntryTyp_Entries = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Entries", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::Entries, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MapEntryTyp_Keys = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Keys", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::Keys, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo MapEntryTyp_Values = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "Values", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::util::Values, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* MapEntryTyp_enumValues[] = {
  &MapEntryTyp_Entries,
  &MapEntryTyp_Keys,
  &MapEntryTyp_Values,
0
};

::acdk::lang::dmi::ClazzEnumInfo* MapEntryTypMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo MapEntryTyp_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "MapEntryTyp", // name
  -1, // hashCode
  "acdk/util", // ns
  0, // _scopeParent
  0, // _nextSibling
  MapEntryTyp_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_MapEntryTyp(&MapEntryTyp_enumInfo);

  return &MapEntryTyp_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_MapEntryTypEnumInfo(MapEntryTypMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _RedBlackNode_super_BasicMapEntry =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  BasicMapEntry::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _RedBlackNode_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RedBlackNode_interfaces[] =
{
  &_RedBlackNode_super_BasicMapEntry,
  &_RedBlackNode_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* RedBlackNode::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "RedBlackNode", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RedBlackNode_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RedBlackNode::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RedBlackNode(RedBlackNode::clazzInfo());

::acdk::lang::RClass
RedBlackNode::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RedBlackNode::getCollectableFields(FieldReferences& fields)
{
  BasicMapEntry::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_left._ref_this()); // RRedBlackNode _left 
  fields.push_back((::acdk::lang::RObject*)this->_parent._ref_this()); // RRedBlackNode _parent 
  fields.push_back((::acdk::lang::RObject*)this->_right._ref_this()); // RRedBlackNode _right 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TreeMap_super_AbstractMap =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeMap_super_SortedMap =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SortedMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeMap_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeMap_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeMap_interfaces[] =
{
  &_TreeMap_super_AbstractMap,
  &_TreeMap_super_SortedMap,
  &_TreeMap_super_acdk__lang__Cloneable,
  &_TreeMap_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "TreeMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TreeMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &TreeMap::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TreeMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeMap(TreeMap::clazzInfo());

::acdk::lang::RClass
TreeMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TreeMap::getCollectableFields(FieldReferences& fields)
{
  AbstractMap::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_comparator._ref_this()); // RComparator _comparator 
  fields.push_back((::acdk::lang::RObject*)this->_root._ref_this()); // RRedBlackNode _root 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TreeMapIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeMapIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeMapIterator_interfaces[] =
{
  &_TreeMapIterator_super_acdk__lang__Object,
  &_TreeMapIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TreeMapIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TreeMapIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TreeMapIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeMapIterator(TreeMapIterator::clazzInfo());

::acdk::lang::RClass
TreeMapIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TreeMapIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_first._ref_this()); // RRedBlackNode _first 
  fields.push_back((::acdk::lang::RObject*)this->_last._ref_this()); // RRedBlackNode _last 
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RTreeMap _map 
  fields.push_back((::acdk::lang::RObject*)this->_prev._ref_this()); // RRedBlackNode _prev 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TreeMapCollection_super_AbstractCollection =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCollection::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeMapCollection_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeMapCollection_interfaces[] =
{
  &_TreeMapCollection_super_AbstractCollection,
  &_TreeMapCollection_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapCollection::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "TreeMapCollection", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TreeMapCollection_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TreeMapCollection::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeMapCollection(TreeMapCollection::clazzInfo());

::acdk::lang::RClass
TreeMapCollection::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TreeMapCollection::getCollectableFields(FieldReferences& fields)
{
  AbstractCollection::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RSortedMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TreeMapSet_super_AbstractSet =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeMapSet_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeMapSet_interfaces[] =
{
  &_TreeMapSet_super_AbstractSet,
  &_TreeMapSet_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "TreeMapSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TreeMapSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TreeMapSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeMapSet(TreeMapSet::clazzInfo());

::acdk::lang::RClass
TreeMapSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TreeMapSet::getCollectableFields(FieldReferences& fields)
{
  AbstractSet::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RSortedMap _map 
  fields.push_back((::acdk::lang::RObject*)this->_treeMap._ref_this()); // RTreeMap _treeMap 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TreeMapSetIterator_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeMapSetIterator_super_Iterator =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Iterator::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeMapSetIterator_interfaces[] =
{
  &_TreeMapSetIterator_super_acdk__lang__Object,
  &_TreeMapSetIterator_super_Iterator,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeMapSetIterator::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TreeMapSetIterator", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TreeMapSetIterator_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TreeMapSetIterator::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeMapSetIterator(TreeMapSetIterator::clazzInfo());

::acdk::lang::RClass
TreeMapSetIterator::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TreeMapSetIterator::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_first._ref_this()); // RRedBlackNode _first 
  fields.push_back((::acdk::lang::RObject*)this->_last._ref_this()); // RRedBlackNode _last 
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RSortedMap _map 
  fields.push_back((::acdk::lang::RObject*)this->_prev._ref_this()); // RRedBlackNode _prev 
  fields.push_back((::acdk::lang::RObject*)this->_treeMap._ref_this()); // RTreeMap _treeMap 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _SubTreeMap_super_AbstractMap =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SubTreeMap_super_SortedMap =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SortedMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SubTreeMap_super___acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SubTreeMap_interfaces[] =
{
  &_SubTreeMap_super_AbstractMap,
  &_SubTreeMap_super_SortedMap,
  &_SubTreeMap_super___acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SubTreeMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SubTreeMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SubTreeMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SubTreeMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SubTreeMap(SubTreeMap::clazzInfo());

::acdk::lang::RClass
SubTreeMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SubTreeMap::getCollectableFields(FieldReferences& fields)
{
  AbstractMap::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RTreeMap _map 
  fields.push_back((::acdk::lang::RObject*)this->_maxKey._ref_this()); // RObject _maxKey 
  fields.push_back((::acdk::lang::RObject*)this->_minKey._ref_this()); // RObject _minKey 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TreeSet_super_AbstractSet =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeSet_super_SortedSet =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SortedSet::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeSet_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TreeSet_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TreeSet_interfaces[] =
{
  &_TreeSet_super_AbstractSet,
  &_TreeSet_super_SortedSet,
  &_TreeSet_super_acdk__lang__Cloneable,
  &_TreeSet_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* TreeSet::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "TreeSet", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TreeSet_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &TreeSet::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TreeSet::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TreeSet(TreeSet::clazzInfo());

::acdk::lang::RClass
TreeSet::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TreeSet::getCollectableFields(FieldReferences& fields)
{
  AbstractSet::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_map._ref_this()); // RSortedMap _map 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

using namespace acdk::io;
::acdk::lang::dmi::ClazzSuperInfo _Vector_super_AbstractList =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractList::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Vector_super_acdk__lang__Cloneable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Cloneable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _Vector_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Vector_interfaces[] =
{
  &_Vector_super_AbstractList,
  &_Vector_super_acdk__lang__Cloneable,
  &_Vector_super_acdk__io__Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* Vector::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "Vector", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Vector_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &Vector::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Vector::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Vector(Vector::clazzInfo());

::acdk::lang::RClass
Vector::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Vector::getCollectableFields(FieldReferences& fields)
{
  AbstractList::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_elementData._ref_this()); // RObjectArray _elementData 
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _WeakHashMapKey_super___acdk__lang__ref__WeakReference =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::ref::WeakReference::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _WeakHashMapKey_interfaces[] =
{
  &_WeakHashMapKey_super___acdk__lang__ref__WeakReference,
  0
};

::acdk::lang::dmi::ClazzInfo* WeakHashMapKey::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "WeakHashMapKey", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _WeakHashMapKey_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    WeakHashMapKey::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_WeakHashMapKey(WeakHashMapKey::clazzInfo());

::acdk::lang::RClass
WeakHashMapKey::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
WeakHashMapKey::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::ref::, WeakReference)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace util


namespace acdk { 
namespace util { 

::acdk::lang::dmi::ClazzSuperInfo _WeakHashMap_super_AbstractMap =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractMap::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _WeakHashMap_interfaces[] =
{
  &_WeakHashMap_super_AbstractMap,
  0
};

::acdk::lang::dmi::ClazzInfo* WeakHashMap::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "WeakHashMap", // name of class
  -1, // hashCode
  "acdk/util", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _WeakHashMap_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &WeakHashMap::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    WeakHashMap::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_WeakHashMap(WeakHashMap::clazzInfo());

::acdk::lang::RClass
WeakHashMap::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
WeakHashMap::getCollectableFields(FieldReferences& fields)
{
  AbstractMap::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_hashMap._ref_this()); // RHashMap _hashMap 
  fields.push_back((::acdk::lang::RObject*)this->_refQueue._ref_this()); // ::acdk::lang::ref::RReferenceQueue _refQueue 
}


} // namespace acdk
} // namespace util

