// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../logging.h"
#include "../AbstractLogConsumer.h"
#include "../ConsoleConsumer.h"
#include "../FileConsumer.h"
#include "../Formatter.h"
#include "../Level.h"
#include "../Log.h"
#include "../LogConsumer.h"
#include "../Logger.h"
#include "../logging.h"
#include "../LogManager.h"
#include "../LogRecord.h"
#include "../MsgBoxConsumer.h"
#include "../NamedLogArgs.h"
#include "../RollingFileConsumer.h"
#include "../SimpleFormatter.h"
#include "../StdFormatter.h"
#include "../TransactionConsumer.h"
#include "../Win32DbgConsumer.h"
#include "../WriterConsumer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_util_logging_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "logging", // name of unit
  -1, // hashCode
  "acdk/util", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_util_logging_unitInfo(&acdk_util_logging_unitInfo);


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
AbstractLogConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractLogConsumer>(length);
}

//static
::acdk::lang::RObject
AbstractLogConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractLogConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractLogConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractLogConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractLogConsumer_method_getFormatter__LRFormatter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractLogConsumer::getFormatter();
    else
        ret = (::acdk::lang::RObject)This->getFormatter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractLogConsumer_method_getMaxLevel__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractLogConsumer::getMaxLevel();
    else
      ret = This->getMaxLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractLogConsumer_method_getMinLevel__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractLogConsumer::getMinLevel();
    else
      ret = This->getMinLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractLogConsumer_method_setFormatter_INLRFormatter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractLogConsumer::setFormatter(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    else
        This->setFormatter(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractLogConsumer_method_setMaxLevel_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractLogConsumer::setMaxLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMaxLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractLogConsumer_method_setMinLevel_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractLogConsumer::setMinLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMinLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractLogConsumer_method_wantPublish_INLRLogRecord__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractLogConsumer::wantPublish(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    else
      ret = This->wantPublish(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractLogConsumer_fields__formatter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_formatter, flags);
    else
      This->_formatter = ::acdk::lang::dmi::castTo< RFormatter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractLogConsumer_fields_maxLogLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->maxLogLevel, flags);
    else
      This->maxLogLevel = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractLogConsumer_fields_minLogLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractLogConsumer* This = dmi_cast<AbstractLogConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->minLogLevel, flags);
    else
      This->minLogLevel = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractLogConsumer_fields__formatter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_formatter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo(),
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_fields__formatter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractLogConsumer_fields_maxLogLevel = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "maxLogLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_fields_maxLogLevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractLogConsumer_fields_minLogLevel = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "minLogLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_fields_minLogLevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractLogConsumer_fields[] = 
{
  &AbstractLogConsumer_fields__formatter,
  &AbstractLogConsumer_fields_maxLogLevel,
  &AbstractLogConsumer_fields_minLogLevel,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__args[] = 
{
  &AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__arg_formatter,
  &AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__arg_minll,
  &AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractLogConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractLogConsumer::clazzInfo(), // return type
  "_0_AbstractLogConsumer", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_AbstractLogConsumer__LRAbstractLogConsumer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_AbstractLogConsumer__LRAbstractLogConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_AbstractLogConsumer__LRAbstractLogConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractLogConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractLogConsumer::clazzInfo(), // return type
  "_1_AbstractLogConsumer", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_AbstractLogConsumer__LRAbstractLogConsumer__args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_AbstractLogConsumer__LRAbstractLogConsumer__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter__LRAbstractLogConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter__LRAbstractLogConsumer__args[] = 
{
  &AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter__LRAbstractLogConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter__LRAbstractLogConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_AbstractLogConsumer_INLRFormatter__LRAbstractLogConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractLogConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractLogConsumer::clazzInfo(), // return type
  "_2_AbstractLogConsumer", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter__LRAbstractLogConsumer__args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter__LRAbstractLogConsumer__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer__args[] = 
{
  &AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer__arg_formatter,
  &AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractLogConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractLogConsumer::clazzInfo(), // return type
  "_3_AbstractLogConsumer", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer__args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_getFormatter__LRFormatter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_getFormatter__LRFormatter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_getFormatter__LRFormatter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo(), // return type
  "_8_getFormatter", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_getFormatter__LRFormatter__args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_getFormatter__LRFormatter__exceptions, // the declared exceptions
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_method_getFormatter__LRFormatter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_getMaxLevel__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_getMaxLevel__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_getMaxLevel__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getMaxLevel", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_getMaxLevel__I_args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_getMaxLevel__I_exceptions, // the declared exceptions
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_method_getMaxLevel__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_getMinLevel__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_getMinLevel__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_getMinLevel__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getMinLevel", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_getMinLevel__I_args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_getMinLevel__I_exceptions, // the declared exceptions
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_method_getMinLevel__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_setFormatter_INLRFormatter__V_arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_setFormatter_INLRFormatter__V_args[] = 
{
  &AbstractLogConsumer_methods_setFormatter_INLRFormatter__V_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_setFormatter_INLRFormatter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_setFormatter_INLRFormatter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setFormatter", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_setFormatter_INLRFormatter__V_args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_setFormatter_INLRFormatter__V_exceptions, // the declared exceptions
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_method_setFormatter_INLRFormatter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_setMaxLevel_I_V_arg_mn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_setMaxLevel_I_V_args[] = 
{
  &AbstractLogConsumer_methods_setMaxLevel_I_V_arg_mn,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_setMaxLevel_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_setMaxLevel_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setMaxLevel", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_setMaxLevel_I_V_args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_setMaxLevel_I_V_exceptions, // the declared exceptions
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_method_setMaxLevel_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_setMinLevel_I_V_arg_mn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_setMinLevel_I_V_args[] = 
{
  &AbstractLogConsumer_methods_setMinLevel_I_V_arg_mn,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_setMinLevel_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_setMinLevel_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setMinLevel", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_setMinLevel_I_V_args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_setMinLevel_I_V_exceptions, // the declared exceptions
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_method_setMinLevel_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_methods_wantPublish_INLRLogRecord__Z_arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods_wantPublish_INLRLogRecord__Z_args[] = 
{
  &AbstractLogConsumer_methods_wantPublish_INLRLogRecord__Z_arg_rec,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_methods_wantPublish_INLRLogRecord__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_method_wantPublish_INLRLogRecord__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wantPublish", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_wantPublish", // alternative name of method
  -1, // altlabelHashCode
  AbstractLogConsumer_methods_wantPublish_INLRLogRecord__Z_args, // the arguments
  0, //arguments count
  AbstractLogConsumer_methods_wantPublish_INLRLogRecord__Z_exceptions, // the declared exceptions
  AbstractLogConsumer_MetainfoWrapper::AbstractLogConsumer_method_wantPublish_INLRLogRecord__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractLogConsumer_methods[] = 
{
  &AbstractLogConsumer_method_AbstractLogConsumer_INLRFormatter_II_LRAbstractLogConsumer_,
  &AbstractLogConsumer_method_AbstractLogConsumer__LRAbstractLogConsumer_,
  &AbstractLogConsumer_method_AbstractLogConsumer_INLRFormatter__LRAbstractLogConsumer_,
  &AbstractLogConsumer_method_AbstractLogConsumer_INLRFormatter_I_LRAbstractLogConsumer_,
  &AbstractLogConsumer_method_GetClass__L_acdk_lang_RClass_,
  &AbstractLogConsumer_method_getFormatter__LRFormatter_,
  &AbstractLogConsumer_method_getMaxLevel__I,
  &AbstractLogConsumer_method_getMinLevel__I,
  &AbstractLogConsumer_method_setFormatter_INLRFormatter__V,
  &AbstractLogConsumer_method_setMaxLevel_I_V,
  &AbstractLogConsumer_method_setMinLevel_I_V,
  &AbstractLogConsumer_method_wantPublish_INLRLogRecord__Z,
  0
};


struct AbstractLogConsumer_MetaInfoInitializer
{  AbstractLogConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractLogConsumer::clazzInfo();
    ci->fields =  _AbstractLogConsumer_fields;
    ci->methods =  _AbstractLogConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractLogConsumer_MetaInfoInitializer AbstractLogConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
ConsoleConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RConsoleConsumer>(length);
}

//static
::acdk::lang::RObject
ConsoleConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ConsoleConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleConsumer_method_ConsoleConsumer__LRConsoleConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleConsumer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleConsumer_method_ConsoleConsumer_INLRFormatter__LRConsoleConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ConsoleConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleConsumer_fields__logToStdErr_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleConsumer* This = dmi_cast<ConsoleConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_logToStdErr, flags);
    else
      This->_logToStdErr = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleConsumer_fields__logToStdErr = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_logToStdErr", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ConsoleConsumer_MetainfoWrapper::ConsoleConsumer_fields__logToStdErr_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ConsoleConsumer_fields[] = 
{
  &ConsoleConsumer_fields__logToStdErr,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__arg_stdErr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "stdErr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__args[] = 
{
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__arg_formatter,
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__arg_minll,
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__arg_maxll,
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__arg_stdErr,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleConsumer::clazzInfo(), // return type
  "_0_ConsoleConsumer", // alternative name of method
  -1, // altlabelHashCode
  ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__args, // the arguments
  0, //arguments count
  ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__exceptions, // the declared exceptions
  ConsoleConsumer_MetainfoWrapper::ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods_ConsoleConsumer__LRConsoleConsumer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleConsumer_methods_ConsoleConsumer__LRConsoleConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_method_ConsoleConsumer__LRConsoleConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleConsumer::clazzInfo(), // return type
  "_1_ConsoleConsumer", // alternative name of method
  -1, // altlabelHashCode
  ConsoleConsumer_methods_ConsoleConsumer__LRConsoleConsumer__args, // the arguments
  0, //arguments count
  ConsoleConsumer_methods_ConsoleConsumer__LRConsoleConsumer__exceptions, // the declared exceptions
  ConsoleConsumer_MetainfoWrapper::ConsoleConsumer_method_ConsoleConsumer__LRConsoleConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter__LRConsoleConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter__LRConsoleConsumer__args[] = 
{
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter__LRConsoleConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter__LRConsoleConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_method_ConsoleConsumer_INLRFormatter__LRConsoleConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleConsumer::clazzInfo(), // return type
  "_2_ConsoleConsumer", // alternative name of method
  -1, // altlabelHashCode
  ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter__LRConsoleConsumer__args, // the arguments
  0, //arguments count
  ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter__LRConsoleConsumer__exceptions, // the declared exceptions
  ConsoleConsumer_MetainfoWrapper::ConsoleConsumer_method_ConsoleConsumer_INLRFormatter__LRConsoleConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__args[] = 
{
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__arg_formatter,
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleConsumer::clazzInfo(), // return type
  "_3_ConsoleConsumer", // alternative name of method
  -1, // altlabelHashCode
  ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__args, // the arguments
  0, //arguments count
  ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__exceptions, // the declared exceptions
  ConsoleConsumer_MetainfoWrapper::ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__args[] = 
{
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__arg_formatter,
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__arg_minll,
  &ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleConsumer::clazzInfo(), // return type
  "_4_ConsoleConsumer", // alternative name of method
  -1, // altlabelHashCode
  ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__args, // the arguments
  0, //arguments count
  ConsoleConsumer_methods_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__exceptions, // the declared exceptions
  ConsoleConsumer_MetainfoWrapper::ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ConsoleConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ConsoleConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ConsoleConsumer_MetainfoWrapper::ConsoleConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ConsoleConsumer_methods[] = 
{
  &ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_IIZ_LRConsoleConsumer_,
  &ConsoleConsumer_method_ConsoleConsumer__LRConsoleConsumer_,
  &ConsoleConsumer_method_ConsoleConsumer_INLRFormatter__LRConsoleConsumer_,
  &ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_I_LRConsoleConsumer_,
  &ConsoleConsumer_method_ConsoleConsumer_INLRFormatter_II_LRConsoleConsumer_,
  &ConsoleConsumer_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ConsoleConsumer_MetaInfoInitializer
{  ConsoleConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ConsoleConsumer::clazzInfo();
    ci->fields =  _ConsoleConsumer_fields;
    ci->methods =  _ConsoleConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ConsoleConsumer_MetaInfoInitializer ConsoleConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
FileConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RFileConsumer>(length);
}

//static
::acdk::lang::RObject
FileConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer__LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRFormatter__LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRFormatter_I_LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRFormatter_II_LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc), ::acdk::lang::dmi::castTo< bool>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRString__LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method__ensureWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileConsumer::_ensureWriter();
    else
        This->_ensureWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method__openWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileConsumer::_openWriter();
    else
        This->_openWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_getFlushLevel__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileConsumer::getFlushLevel();
    else
      ret = This->getFlushLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_isBuffered__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileConsumer::isBuffered();
    else
      ret = This->isBuffered();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_setBuffered_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileConsumer::setBuffered(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setBuffered(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileConsumer_method_setFlushLevel_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileConsumer::setFlushLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setFlushLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileConsumer_fields__buffered_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffered, flags);
    else
      This->_buffered = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileConsumer_fields__flushLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flushLevel, flags);
    else
      This->_flushLevel = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileConsumer_fields__fname_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fname, flags);
    else
      This->_fname = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileConsumer_fields__writer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileConsumer* This = dmi_cast<FileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_writer, flags);
    else
      This->_writer = ::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileConsumer_fields__buffered = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffered", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  FileConsumer_MetainfoWrapper::FileConsumer_fields__buffered_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileConsumer_fields__flushLevel = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flushLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FileConsumer_MetainfoWrapper::FileConsumer_fields__flushLevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileConsumer_fields__fname = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fname", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileConsumer_MetainfoWrapper::FileConsumer_fields__fname_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileConsumer_fields__writer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_writer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo(),
  FileConsumer_MetainfoWrapper::FileConsumer_fields__writer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileConsumer_fields[] = 
{
  &FileConsumer_fields__buffered,
  &FileConsumer_fields__flushLevel,
  &FileConsumer_fields__fname,
  &FileConsumer_fields__writer,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__arg_buffered = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffered", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__arg_formatter,
  &FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__arg_minll,
  &FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__arg_maxll,
  &FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__arg_buffered,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRFormatter_IIZ_LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_0_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRFormatter_IIZ_LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer__LRFileConsumer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer__LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer__LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_1_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer__LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer__LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer__LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter__LRFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRFormatter__LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRFormatter__LRFileConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRFormatter__LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRFormatter__LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_2_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRFormatter__LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRFormatter__LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRFormatter__LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_I_LRFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_I_LRFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRFormatter_I_LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRFormatter_I_LRFileConsumer__arg_formatter,
  &FileConsumer_methods_FileConsumer_INLRFormatter_I_LRFileConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRFormatter_I_LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRFormatter_I_LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_3_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRFormatter_I_LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRFormatter_I_LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRFormatter_I_LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__arg_formatter,
  &FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__arg_minll,
  &FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRFormatter_II_LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_4_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRFormatter_II_LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRFormatter_II_LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_buffered = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffered", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_fname,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_formatter,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_minll,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_maxll,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__arg_buffered,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_5_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString__LRFileConsumer__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRString__LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRString__LRFileConsumer__arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRString__LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRString__LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_6_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRString__LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRString__LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRString__LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__arg_fname,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRString_INLRFormatter__LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_7_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRString_INLRFormatter__LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__arg_fname,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__arg_formatter,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_8_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__args[] = 
{
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__arg_fname,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__arg_formatter,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__arg_minll,
  &FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileConsumer::clazzInfo(), // return type
  "_9_FileConsumer", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__args, // the arguments
  0, //arguments count
  FileConsumer_methods_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__ensureWriter__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods__ensureWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method__ensureWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_ensureWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a__ensureWriter", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods__ensureWriter__V_args, // the arguments
  0, //arguments count
  FileConsumer_methods__ensureWriter__V_exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method__ensureWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__openWriter__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods__openWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method__openWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_openWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b__openWriter", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods__openWriter__V_args, // the arguments
  0, //arguments count
  FileConsumer_methods__openWriter__V_exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method__openWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_getFlushLevel__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_getFlushLevel__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_getFlushLevel__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFlushLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getFlushLevel", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_getFlushLevel__I_args, // the arguments
  0, //arguments count
  FileConsumer_methods_getFlushLevel__I_exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_getFlushLevel__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_isBuffered__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_isBuffered__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_isBuffered__Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBuffered", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isBuffered", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_isBuffered__Z_args, // the arguments
  0, //arguments count
  FileConsumer_methods_isBuffered__Z_exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_isBuffered__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_setBuffered_Z_V_arg_buffered = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "buffered", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_setBuffered_Z_V_args[] = 
{
  &FileConsumer_methods_setBuffered_Z_V_arg_buffered,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_setBuffered_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_setBuffered_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBuffered", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_setBuffered", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_setBuffered_Z_V_args, // the arguments
  0, //arguments count
  FileConsumer_methods_setBuffered_Z_V_exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_setBuffered_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_methods_setFlushLevel_I_V_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods_setFlushLevel_I_V_args[] = 
{
  &FileConsumer_methods_setFlushLevel_I_V_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_methods_setFlushLevel_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_method_setFlushLevel_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFlushLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setFlushLevel", // alternative name of method
  -1, // altlabelHashCode
  FileConsumer_methods_setFlushLevel_I_V_args, // the arguments
  0, //arguments count
  FileConsumer_methods_setFlushLevel_I_V_exceptions, // the declared exceptions
  FileConsumer_MetainfoWrapper::FileConsumer_method_setFlushLevel_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileConsumer_methods[] = 
{
  &FileConsumer_method_FileConsumer_INLRFormatter_IIZ_LRFileConsumer_,
  &FileConsumer_method_FileConsumer__LRFileConsumer_,
  &FileConsumer_method_FileConsumer_INLRFormatter__LRFileConsumer_,
  &FileConsumer_method_FileConsumer_INLRFormatter_I_LRFileConsumer_,
  &FileConsumer_method_FileConsumer_INLRFormatter_II_LRFileConsumer_,
  &FileConsumer_method_FileConsumer_INLRString_INLRFormatter_IIZ_LRFileConsumer_,
  &FileConsumer_method_FileConsumer_INLRString__LRFileConsumer_,
  &FileConsumer_method_FileConsumer_INLRString_INLRFormatter__LRFileConsumer_,
  &FileConsumer_method_FileConsumer_INLRString_INLRFormatter_I_LRFileConsumer_,
  &FileConsumer_method_FileConsumer_INLRString_INLRFormatter_II_LRFileConsumer_,
  &FileConsumer_method_GetClass__L_acdk_lang_RClass_,
  &FileConsumer_method__ensureWriter__V,
  &FileConsumer_method__openWriter__V,
  &FileConsumer_method_getFlushLevel__I,
  &FileConsumer_method_isBuffered__Z,
  &FileConsumer_method_setBuffered_Z_V,
  &FileConsumer_method_setFlushLevel_I_V,
  0
};


struct FileConsumer_MetaInfoInitializer
{  FileConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileConsumer::clazzInfo();
    ci->fields =  _FileConsumer_fields;
    ci->methods =  _FileConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileConsumer_MetaInfoInitializer FileConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
Formatter_create_array(int length)
{
  return new ObjectArrayImpl<RFormatter>(length);
}

//static
::acdk::lang::RObject
Formatter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Formatter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Formatter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Formatter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Formatter_method_configure_INLRString_INL_acdk_util_RProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Formatter* This = dmi_cast<Formatter>(This_);
    This->configure(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RProperties>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Formatter_method_format_INLRLogRecord__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Formatter* This = dmi_cast<Formatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Formatter::format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Formatter_method_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Formatter* This = dmi_cast<Formatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Formatter::format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(args[1], dc));
    else
        This->format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Formatter_method_getFooter__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Formatter* This = dmi_cast<Formatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Formatter::getFooter();
    else
        ret = (::acdk::lang::RObject)This->getFooter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Formatter_method_getHeader__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Formatter* This = dmi_cast<Formatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Formatter::getHeader();
    else
        ret = (::acdk::lang::RObject)This->getHeader();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Formatter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Formatter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Formatter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Formatter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Formatter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Formatter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Formatter_MetainfoWrapper::Formatter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Formatter_methods_configure_INLRString_INL_acdk_util_RProperties__V_arg_propnameprefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "propnameprefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Formatter_methods_configure_INLRString_INL_acdk_util_RProperties__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Formatter_methods_configure_INLRString_INL_acdk_util_RProperties__V_args[] = 
{
  &Formatter_methods_configure_INLRString_INL_acdk_util_RProperties__V_arg_propnameprefix,
  &Formatter_methods_configure_INLRString_INL_acdk_util_RProperties__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Formatter_methods_configure_INLRString_INL_acdk_util_RProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Formatter_method_configure_INLRString_INL_acdk_util_RProperties__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "configure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_configure", // alternative name of method
  -1, // altlabelHashCode
  Formatter_methods_configure_INLRString_INL_acdk_util_RProperties__V_args, // the arguments
  0, //arguments count
  Formatter_methods_configure_INLRString_INL_acdk_util_RProperties__V_exceptions, // the declared exceptions
  Formatter_MetainfoWrapper::Formatter_method_configure_INLRString_INL_acdk_util_RProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Formatter_methods_format_INLRLogRecord__LRString__arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Formatter_methods_format_INLRLogRecord__LRString__args[] = 
{
  &Formatter_methods_format_INLRLogRecord__LRString__arg_rec,
  0
};

::acdk::lang::dmi::ClazzInfo* Formatter_methods_format_INLRLogRecord__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Formatter_method_format_INLRLogRecord__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_format", // alternative name of method
  -1, // altlabelHashCode
  Formatter_methods_format_INLRLogRecord__LRString__args, // the arguments
  0, //arguments count
  Formatter_methods_format_INLRLogRecord__LRString__exceptions, // the declared exceptions
  Formatter_MetainfoWrapper::Formatter_method_format_INLRLogRecord__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Formatter_methods_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Formatter_methods_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Formatter_methods_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_args[] = 
{
  &Formatter_methods_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_arg_rec,
  &Formatter_methods_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* Formatter_methods_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Formatter_method_format_INLRLogRecord_INL_acdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_format", // alternative name of method
  -1, // altlabelHashCode
  Formatter_methods_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  Formatter_methods_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_exceptions, // the declared exceptions
  Formatter_MetainfoWrapper::Formatter_method_format_INLRLogRecord_INL_acdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Formatter_methods_getFooter__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Formatter_methods_getFooter__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Formatter_method_getFooter__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFooter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getFooter", // alternative name of method
  -1, // altlabelHashCode
  Formatter_methods_getFooter__LRString__args, // the arguments
  0, //arguments count
  Formatter_methods_getFooter__LRString__exceptions, // the declared exceptions
  Formatter_MetainfoWrapper::Formatter_method_getFooter__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Formatter_methods_getHeader__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Formatter_methods_getHeader__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Formatter_method_getHeader__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getHeader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getHeader", // alternative name of method
  -1, // altlabelHashCode
  Formatter_methods_getHeader__LRString__args, // the arguments
  0, //arguments count
  Formatter_methods_getHeader__LRString__exceptions, // the declared exceptions
  Formatter_MetainfoWrapper::Formatter_method_getHeader__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Formatter_methods[] = 
{
  &Formatter_method_GetClass__L_acdk_lang_RClass_,
  &Formatter_method_configure_INLRString_INL_acdk_util_RProperties__V,
  &Formatter_method_format_INLRLogRecord__LRString_,
  &Formatter_method_format_INLRLogRecord_INL_acdk_io_RCharWriter__V,
  &Formatter_method_getFooter__LRString_,
  &Formatter_method_getHeader__LRString_,
  0
};


struct Formatter_MetaInfoInitializer
{  Formatter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Formatter::clazzInfo();
    ci->fields =  _Formatter_fields;
    ci->methods =  _Formatter_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Formatter_MetaInfoInitializer Formatter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
LogConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RLogConsumer>(length);
}

//static
::acdk::lang::RObject
LogConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LogConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LogConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_configure_INLRString_INLRProperties__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogConsumer* This = dmi_cast<LogConsumer>(This_);
    This->configure(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProperties>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_getFormatter__LRFormatter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogConsumer* This = dmi_cast<LogConsumer>(This_);
    ret = (::acdk::lang::RObject)This->getFormatter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_getMaxLevel__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogConsumer* This = dmi_cast<LogConsumer>(This_);
  ret = This->getMaxLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_getMinLevel__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogConsumer* This = dmi_cast<LogConsumer>(This_);
  ret = This->getMinLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_publish_INLRLogRecord__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogConsumer* This = dmi_cast<LogConsumer>(This_);
    This->publish(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_setFormatter_INLRFormatter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogConsumer* This = dmi_cast<LogConsumer>(This_);
    This->setFormatter(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_setMaxLevel_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogConsumer* This = dmi_cast<LogConsumer>(This_);
    This->setMaxLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogConsumer_method_setMinLevel_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogConsumer* This = dmi_cast<LogConsumer>(This_);
    This->setMinLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _LogConsumer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LogConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogConsumer_methods_configure_INLRString_INLRProperties__V_arg_propnameprefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "propnameprefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LogConsumer_methods_configure_INLRString_INLRProperties__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_configure_INLRString_INLRProperties__V_args[] = 
{
  &LogConsumer_methods_configure_INLRString_INLRProperties__V_arg_propnameprefix,
  &LogConsumer_methods_configure_INLRString_INLRProperties__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_configure_INLRString_INLRProperties__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_configure_INLRString_INLRProperties__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "configure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_configure", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_configure_INLRString_INLRProperties__V_args, // the arguments
  0, //arguments count
  LogConsumer_methods_configure_INLRString_INLRProperties__V_exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_configure_INLRString_INLRProperties__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_getFormatter__LRFormatter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_getFormatter__LRFormatter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_getFormatter__LRFormatter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo(), // return type
  "_4_getFormatter", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_getFormatter__LRFormatter__args, // the arguments
  0, //arguments count
  LogConsumer_methods_getFormatter__LRFormatter__exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_getFormatter__LRFormatter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_getMaxLevel__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_getMaxLevel__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_getMaxLevel__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMaxLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getMaxLevel", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_getMaxLevel__I_args, // the arguments
  0, //arguments count
  LogConsumer_methods_getMaxLevel__I_exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_getMaxLevel__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_getMinLevel__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_getMinLevel__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_getMinLevel__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_getMinLevel", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_getMinLevel__I_args, // the arguments
  0, //arguments count
  LogConsumer_methods_getMinLevel__I_exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_getMinLevel__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogConsumer_methods_publish_INLRLogRecord__V_arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_publish_INLRLogRecord__V_args[] = 
{
  &LogConsumer_methods_publish_INLRLogRecord__V_arg_rec,
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_publish_INLRLogRecord__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_publish_INLRLogRecord__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "publish", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_publish", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_publish_INLRLogRecord__V_args, // the arguments
  0, //arguments count
  LogConsumer_methods_publish_INLRLogRecord__V_exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_publish_INLRLogRecord__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogConsumer_methods_setFormatter_INLRFormatter__V_arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_setFormatter_INLRFormatter__V_args[] = 
{
  &LogConsumer_methods_setFormatter_INLRFormatter__V_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_setFormatter_INLRFormatter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_setFormatter_INLRFormatter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setFormatter", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_setFormatter_INLRFormatter__V_args, // the arguments
  0, //arguments count
  LogConsumer_methods_setFormatter_INLRFormatter__V_exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_setFormatter_INLRFormatter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogConsumer_methods_setMaxLevel_I_V_arg_mn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_setMaxLevel_I_V_args[] = 
{
  &LogConsumer_methods_setMaxLevel_I_V_arg_mn,
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_setMaxLevel_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_setMaxLevel_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMaxLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setMaxLevel", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_setMaxLevel_I_V_args, // the arguments
  0, //arguments count
  LogConsumer_methods_setMaxLevel_I_V_exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_setMaxLevel_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogConsumer_methods_setMinLevel_I_V_arg_mn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods_setMinLevel_I_V_args[] = 
{
  &LogConsumer_methods_setMinLevel_I_V_arg_mn,
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_methods_setMinLevel_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_method_setMinLevel_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_setMinLevel", // alternative name of method
  -1, // altlabelHashCode
  LogConsumer_methods_setMinLevel_I_V_args, // the arguments
  0, //arguments count
  LogConsumer_methods_setMinLevel_I_V_exceptions, // the declared exceptions
  LogConsumer_MetainfoWrapper::LogConsumer_method_setMinLevel_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LogConsumer_methods[] = 
{
  &LogConsumer_method_GetClass__L_acdk_lang_RClass_,
  &LogConsumer_method_configure_INLRString_INLRProperties__V,
  &LogConsumer_method_getFormatter__LRFormatter_,
  &LogConsumer_method_getMaxLevel__I,
  &LogConsumer_method_getMinLevel__I,
  &LogConsumer_method_publish_INLRLogRecord__V,
  &LogConsumer_method_setFormatter_INLRFormatter__V,
  &LogConsumer_method_setMaxLevel_I_V,
  &LogConsumer_method_setMinLevel_I_V,
  0
};


struct LogConsumer_MetaInfoInitializer
{  LogConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LogConsumer::clazzInfo();
    ci->fields =  _LogConsumer_fields;
    ci->methods =  _LogConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LogConsumer_MetaInfoInitializer LogConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
Logger_create_array(int length)
{
  return new ObjectArrayImpl<RLogger>(length);
}

//static
::acdk::lang::RObject
Logger_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Logger_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Logger::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_Logger_INLRString__LRLogger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Logger(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_Logger_INLRString_I_LRLogger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Logger(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_addConsumer_INLRLogConsumer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Logger::addConsumer(::acdk::lang::dmi::castTo< RLogConsumer>(args[0], dc));
    else
        This->addConsumer(::acdk::lang::dmi::castTo< RLogConsumer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_doLog_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Logger::doLog(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->doLog(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Logger::formatCompilerSourceMsg(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Logger::formatCompilerSourceMsg(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_getMinLevel__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Logger::getMinLevel();
    else
      ret = This->getMinLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Logger::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_log_IINLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Logger::log(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    else
        This->log(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_log_INLRLogRecord__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Logger::log(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    else
        This->log(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_setMinLevel_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Logger::setMinLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setMinLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Logger_method_setName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Logger::setName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Logger_fields__consumer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_consumer, flags);
    else
      This->_consumer = ::acdk::lang::dmi::castTo< RLogConsumerArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Logger_fields__inheritConsumer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_inheritConsumer, flags);
    else
      This->_inheritConsumer = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Logger_fields__minLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_minLevel, flags);
    else
      This->_minLevel = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Logger_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Logger_fields__parent_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Logger* This = dmi_cast<Logger>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parent, flags);
    else
      This->_parent = ::acdk::lang::dmi::castTo< RLogger>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Logger_fields__consumer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_consumer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogConsumerArray::clazzInfo(),
  Logger_MetainfoWrapper::Logger_fields__consumer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Logger_fields__inheritConsumer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_inheritConsumer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Logger_MetainfoWrapper::Logger_fields__inheritConsumer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Logger_fields__minLevel = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_minLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Logger_MetainfoWrapper::Logger_fields__minLevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Logger_fields__name = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Logger_MetainfoWrapper::Logger_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Logger_fields__parent = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parent", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogger::clazzInfo(),
  Logger_MetainfoWrapper::Logger_fields__parent_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Logger_fields[] = 
{
  &Logger_fields__consumer,
  &Logger_fields__inheritConsumer,
  &Logger_fields__minLevel,
  &Logger_fields__name,
  &Logger_fields__parent,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Logger_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_Logger_INLRString__LRLogger__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_Logger_INLRString__LRLogger__args[] = 
{
  &Logger_methods_Logger_INLRString__LRLogger__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_Logger_INLRString__LRLogger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_Logger_INLRString__LRLogger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Logger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Logger::clazzInfo(), // return type
  "_0_Logger", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_Logger_INLRString__LRLogger__args, // the arguments
  0, //arguments count
  Logger_methods_Logger_INLRString__LRLogger__exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_Logger_INLRString__LRLogger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_Logger_INLRString_I_LRLogger__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_Logger_INLRString_I_LRLogger__arg_minLevel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "minLevel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_Logger_INLRString_I_LRLogger__args[] = 
{
  &Logger_methods_Logger_INLRString_I_LRLogger__arg_name,
  &Logger_methods_Logger_INLRString_I_LRLogger__arg_minLevel,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_Logger_INLRString_I_LRLogger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_Logger_INLRString_I_LRLogger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Logger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Logger::clazzInfo(), // return type
  "_1_Logger", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_Logger_INLRString_I_LRLogger__args, // the arguments
  0, //arguments count
  Logger_methods_Logger_INLRString_I_LRLogger__exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_Logger_INLRString_I_LRLogger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_addConsumer_INLRLogConsumer__V_arg_cons = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cons", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogConsumer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_addConsumer_INLRLogConsumer__V_args[] = 
{
  &Logger_methods_addConsumer_INLRLogConsumer__V_arg_cons,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_addConsumer_INLRLogConsumer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_addConsumer_INLRLogConsumer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addConsumer", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_addConsumer_INLRLogConsumer__V_args, // the arguments
  0, //arguments count
  Logger_methods_addConsumer_INLRLogConsumer__V_exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_addConsumer_INLRLogConsumer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_doLog_I_Z_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_doLog_I_Z_args[] = 
{
  &Logger_methods_doLog_I_Z_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_doLog_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_doLog_I_Z = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doLog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_doLog", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_doLog_I_Z_args, // the arguments
  0, //arguments count
  Logger_methods_doLog_I_Z_exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_doLog_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__args[] = 
{
  &Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__arg_msg,
  &Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__arg_file,
  &Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__arg_line,
  &Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_formatCompilerSourceMsg_INLRString_INLRString_II_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "formatCompilerSourceMsg", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_formatCompilerSourceMsg", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__args, // the arguments
  0, //arguments count
  Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_formatCompilerSourceMsg_INLRString_INLRString_II_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__args[] = 
{
  &Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__arg_msg,
  &Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__arg_file,
  &Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_formatCompilerSourceMsg_INLRString_INLRString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "formatCompilerSourceMsg", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_formatCompilerSourceMsg", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__args, // the arguments
  0, //arguments count
  Logger_methods_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_formatCompilerSourceMsg_INLRString_INLRString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_getMinLevel__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_getMinLevel__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_getMinLevel__I = 
{
  ::acdk::lang::dmi::MiReadOnly | ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMinLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_getMinLevel", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_getMinLevel__I_args, // the arguments
  0, //arguments count
  Logger_methods_getMinLevel__I_exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_getMinLevel__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_getName", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Logger_methods_getName__LRString__exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_log_IINLRString_INLRString__V_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_log_IINLRString_INLRString__V_arg_cat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_log_IINLRString_INLRString__V_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_log_IINLRString_INLRString__V_args[] = 
{
  &Logger_methods_log_IINLRString_INLRString__V_arg_level,
  &Logger_methods_log_IINLRString_INLRString__V_arg_cat,
  &Logger_methods_log_IINLRString_INLRString__V_arg_text,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_log_IINLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_log_IINLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "log", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_log", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_log_IINLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Logger_methods_log_IINLRString_INLRString__V_exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_log_IINLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_log_INLRLogRecord__V_arg_log = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "log", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_log_INLRLogRecord__V_args[] = 
{
  &Logger_methods_log_INLRLogRecord__V_arg_log,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_log_INLRLogRecord__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_log_INLRLogRecord__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "log", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_log", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_log_INLRLogRecord__V_args, // the arguments
  0, //arguments count
  Logger_methods_log_INLRLogRecord__V_exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_log_INLRLogRecord__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_setMinLevel_I_V_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_setMinLevel_I_V_args[] = 
{
  &Logger_methods_setMinLevel_I_V_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_setMinLevel_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_setMinLevel_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setMinLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setMinLevel", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_setMinLevel_I_V_args, // the arguments
  0, //arguments count
  Logger_methods_setMinLevel_I_V_exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_setMinLevel_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_methods_setName_INLRString__V_arg_newname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods_setName_INLRString__V_args[] = 
{
  &Logger_methods_setName_INLRString__V_arg_newname,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_methods_setName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_method_setName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setName", // alternative name of method
  -1, // altlabelHashCode
  Logger_methods_setName_INLRString__V_args, // the arguments
  0, //arguments count
  Logger_methods_setName_INLRString__V_exceptions, // the declared exceptions
  Logger_MetainfoWrapper::Logger_method_setName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Logger_methods[] = 
{
  &Logger_method_GetClass__L_acdk_lang_RClass_,
  &Logger_method_Logger_INLRString__LRLogger_,
  &Logger_method_Logger_INLRString_I_LRLogger_,
  &Logger_method_addConsumer_INLRLogConsumer__V,
  &Logger_method_doLog_I_Z,
  &Logger_method_formatCompilerSourceMsg_INLRString_INLRString_II_LRString_,
  &Logger_method_formatCompilerSourceMsg_INLRString_INLRString_I_LRString_,
  &Logger_method_getMinLevel__I,
  &Logger_method_getName__LRString_,
  &Logger_method_log_IINLRString_INLRString__V,
  &Logger_method_log_INLRLogRecord__V,
  &Logger_method_setMinLevel_I_V,
  &Logger_method_setName_INLRString__V,
  0
};


struct Logger_MetaInfoInitializer
{  Logger_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Logger::clazzInfo();
    ci->fields =  _Logger_fields;
    ci->methods =  _Logger_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Logger_MetaInfoInitializer Logger_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
LogManager_create_array(int length)
{
  return new ObjectArrayImpl<RLogManager>(length);
}

//static
::acdk::lang::RObject
LogManager_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LogManager_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LogManager::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_deregisterLogger_INLRLogger__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogManager::deregisterLogger(::acdk::lang::dmi::castTo< RLogger>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_doLog_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = LogManager::doLog(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_getCreateLogger_INLRString__LRLogger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LogManager::getCreateLogger(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_getLogger_INLRString__LRLogger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LogManager::getLogger(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_getNullLogger__LRLogger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = inoutOf(LogManager::getNullLogger());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_getRootLogger__LRLogger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = inoutOf(LogManager::getRootLogger());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_getStandardFormatter__LRFormatter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(LogManager::getStandardFormatter());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_init_configure_INOUTLRLogger__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogManager::init_configure(::acdk::lang::dmi::castToObjectRef< RLogger>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_parseCommandLine_INLRStringArray__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LogManager::parseCommandLine(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_registerLogger_INLRLogger__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogManager::registerLogger(::acdk::lang::dmi::castTo< RLogger>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogManager_method_setStandardFormatter_INLRFormatter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    LogManager::setStandardFormatter(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogManager_fields_MinLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(LogManager::MinLevel, flags);
    else
      LogManager::MinLevel = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogManager_fields_Threshold_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(LogManager::Threshold, flags);
    else
      LogManager::Threshold = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogManager_fields_TresholdSet_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(LogManager::TresholdSet, flags);
    else
      LogManager::TresholdSet = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LogManager_fields_MinLevel = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "MinLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LogManager_MetainfoWrapper::LogManager_fields_MinLevel_accessor, // read/write access to this fields
  (void*)&LogManager::MinLevel // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogManager_fields_Threshold = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "Threshold", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LogManager_MetainfoWrapper::LogManager_fields_Threshold_accessor, // read/write access to this fields
  (void*)&LogManager::Threshold // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogManager_fields_TresholdSet = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TresholdSet", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  LogManager_MetainfoWrapper::LogManager_fields_TresholdSet_accessor, // read/write access to this fields
  (void*)&LogManager::TresholdSet // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LogManager_fields[] = 
{
  &LogManager_fields_MinLevel,
  &LogManager_fields_Threshold,
  &LogManager_fields_TresholdSet,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LogManager_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogManager_methods_deregisterLogger_INLRLogger__V_arg_logger = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "logger", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_deregisterLogger_INLRLogger__V_args[] = 
{
  &LogManager_methods_deregisterLogger_INLRLogger__V_arg_logger,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_deregisterLogger_INLRLogger__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_deregisterLogger_INLRLogger__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deregisterLogger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_deregisterLogger", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_deregisterLogger_INLRLogger__V_args, // the arguments
  0, //arguments count
  LogManager_methods_deregisterLogger_INLRLogger__V_exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_deregisterLogger_INLRLogger__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogManager_methods_doLog_I_Z_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_doLog_I_Z_args[] = 
{
  &LogManager_methods_doLog_I_Z_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_doLog_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_doLog_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doLog", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_doLog", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_doLog_I_Z_args, // the arguments
  0, //arguments count
  LogManager_methods_doLog_I_Z_exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_doLog_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogManager_methods_getCreateLogger_INLRString__LRLogger__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_getCreateLogger_INLRString__LRLogger__args[] = 
{
  &LogManager_methods_getCreateLogger_INLRString__LRLogger__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_getCreateLogger_INLRString__LRLogger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_getCreateLogger_INLRString__LRLogger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCreateLogger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogger::clazzInfo(), // return type
  "_3_getCreateLogger", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_getCreateLogger_INLRString__LRLogger__args, // the arguments
  0, //arguments count
  LogManager_methods_getCreateLogger_INLRString__LRLogger__exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_getCreateLogger_INLRString__LRLogger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogManager_methods_getLogger_INLRString__LRLogger__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_getLogger_INLRString__LRLogger__args[] = 
{
  &LogManager_methods_getLogger_INLRString__LRLogger__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_getLogger_INLRString__LRLogger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_getLogger_INLRString__LRLogger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLogger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogger::clazzInfo(), // return type
  "_2_getLogger", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_getLogger_INLRString__LRLogger__args, // the arguments
  0, //arguments count
  LogManager_methods_getLogger_INLRString__LRLogger__exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_getLogger_INLRString__LRLogger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_getNullLogger__LRLogger__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_getNullLogger__LRLogger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_getNullLogger__LRLogger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiIn | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getNullLogger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogger::clazzInfo(), // return type
  "_1_getNullLogger", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_getNullLogger__LRLogger__args, // the arguments
  0, //arguments count
  LogManager_methods_getNullLogger__LRLogger__exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_getNullLogger__LRLogger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_getRootLogger__LRLogger__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_getRootLogger__LRLogger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_getRootLogger__LRLogger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiIn | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getRootLogger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogger::clazzInfo(), // return type
  "_0_getRootLogger", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_getRootLogger__LRLogger__args, // the arguments
  0, //arguments count
  LogManager_methods_getRootLogger__LRLogger__exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_getRootLogger__LRLogger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_getStandardFormatter__LRFormatter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_getStandardFormatter__LRFormatter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_getStandardFormatter__LRFormatter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStandardFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo(), // return type
  "_8_getStandardFormatter", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_getStandardFormatter__LRFormatter__args, // the arguments
  0, //arguments count
  LogManager_methods_getStandardFormatter__LRFormatter__exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_getStandardFormatter__LRFormatter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogManager_methods_init_configure_INOUTLRLogger__V_arg_rootlogger = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "rootlogger", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_init_configure_INOUTLRLogger__V_args[] = 
{
  &LogManager_methods_init_configure_INOUTLRLogger__V_arg_rootlogger,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_init_configure_INOUTLRLogger__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_init_configure_INOUTLRLogger__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "init_configure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_init_configure", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_init_configure_INOUTLRLogger__V_args, // the arguments
  0, //arguments count
  LogManager_methods_init_configure_INOUTLRLogger__V_exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_init_configure_INOUTLRLogger__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogManager_methods_parseCommandLine_INLRStringArray__LRStringArray__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_parseCommandLine_INLRStringArray__LRStringArray__args[] = 
{
  &LogManager_methods_parseCommandLine_INLRStringArray__LRStringArray__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_parseCommandLine_INLRStringArray__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_parseCommandLine_INLRStringArray__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseCommandLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_a_parseCommandLine", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_parseCommandLine_INLRStringArray__LRStringArray__args, // the arguments
  0, //arguments count
  LogManager_methods_parseCommandLine_INLRStringArray__LRStringArray__exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_parseCommandLine_INLRStringArray__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogManager_methods_registerLogger_INLRLogger__V_arg_logger = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "logger", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_registerLogger_INLRLogger__V_args[] = 
{
  &LogManager_methods_registerLogger_INLRLogger__V_arg_logger,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_registerLogger_INLRLogger__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_registerLogger_INLRLogger__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "registerLogger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_registerLogger", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_registerLogger_INLRLogger__V_args, // the arguments
  0, //arguments count
  LogManager_methods_registerLogger_INLRLogger__V_exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_registerLogger_INLRLogger__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogManager_methods_setStandardFormatter_INLRFormatter__V_arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods_setStandardFormatter_INLRFormatter__V_args[] = 
{
  &LogManager_methods_setStandardFormatter_INLRFormatter__V_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_methods_setStandardFormatter_INLRFormatter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_method_setStandardFormatter_INLRFormatter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStandardFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setStandardFormatter", // alternative name of method
  -1, // altlabelHashCode
  LogManager_methods_setStandardFormatter_INLRFormatter__V_args, // the arguments
  0, //arguments count
  LogManager_methods_setStandardFormatter_INLRFormatter__V_exceptions, // the declared exceptions
  LogManager_MetainfoWrapper::LogManager_method_setStandardFormatter_INLRFormatter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LogManager_methods[] = 
{
  &LogManager_method_GetClass__L_acdk_lang_RClass_,
  &LogManager_method_deregisterLogger_INLRLogger__V,
  &LogManager_method_doLog_I_Z,
  &LogManager_method_getCreateLogger_INLRString__LRLogger_,
  &LogManager_method_getLogger_INLRString__LRLogger_,
  &LogManager_method_getNullLogger__LRLogger_,
  &LogManager_method_getRootLogger__LRLogger_,
  &LogManager_method_getStandardFormatter__LRFormatter_,
  &LogManager_method_init_configure_INOUTLRLogger__V,
  &LogManager_method_parseCommandLine_INLRStringArray__LRStringArray_,
  &LogManager_method_registerLogger_INLRLogger__V,
  &LogManager_method_setStandardFormatter_INLRFormatter__V,
  0
};


struct LogManager_MetaInfoInitializer
{  LogManager_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LogManager::clazzInfo();
    ci->fields =  _LogManager_fields;
    ci->methods =  _LogManager_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LogManager_MetaInfoInitializer LogManager_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
LogRecord_create_array(int length)
{
  return new ObjectArrayImpl<RLogRecord>(length);
}

//static
::acdk::lang::RObject
LogRecord_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class LogRecord_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogRecord_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)LogRecord::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  LogRecord_method_LogRecord_IINLRString_INLRString__LRLogRecord__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new LogRecord(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_catName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->catName, flags);
    else
      This->catName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_ex_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->ex, flags);
    else
      This->ex = ::acdk::lang::dmi::castTo< RThrowable>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_file_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->file, flags);
    else
      This->file = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_level_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->level, flags);
    else
      This->level = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_line_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->line, flags);
    else
      This->line = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_message_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->message, flags);
    else
      This->message = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_namedParameters_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->namedParameters, flags);
    else
      This->namedParameters = ::acdk::lang::dmi::castTo< RNamedParameterArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_parameters_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->parameters, flags);
    else
      This->parameters = ::acdk::lang::dmi::castTo< RObjectArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_processId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->processId, flags);
    else
      This->processId = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_threadId_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->threadId, flags);
    else
      This->threadId = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  LogRecord_fields_timeStamp_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    LogRecord* This = dmi_cast<LogRecord>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->timeStamp, flags);
    else
      This->timeStamp = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_catName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "catName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LogRecord_MetainfoWrapper::LogRecord_fields_catName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_ex = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ex", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(),
  LogRecord_MetainfoWrapper::LogRecord_fields_ex_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_file = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "file", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LogRecord_MetainfoWrapper::LogRecord_fields_file_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_level = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "level", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LogRecord_MetainfoWrapper::LogRecord_fields_level_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_line = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "line", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LogRecord_MetainfoWrapper::LogRecord_fields_line_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_message = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "message", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  LogRecord_MetainfoWrapper::LogRecord_fields_message_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_namedParameters = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "namedParameters", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNamedParameterArray::clazzInfo(),
  LogRecord_MetainfoWrapper::LogRecord_fields_namedParameters_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_parameters = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "parameters", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo(),
  LogRecord_MetainfoWrapper::LogRecord_fields_parameters_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_processId = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "processId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LogRecord_MetainfoWrapper::LogRecord_fields_processId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_threadId = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "threadId", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  LogRecord_MetainfoWrapper::LogRecord_fields_threadId_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo LogRecord_fields_timeStamp = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "timeStamp", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  LogRecord_MetainfoWrapper::LogRecord_fields_timeStamp_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _LogRecord_fields[] = 
{
  &LogRecord_fields_catName,
  &LogRecord_fields_ex,
  &LogRecord_fields_file,
  &LogRecord_fields_level,
  &LogRecord_fields_line,
  &LogRecord_fields_message,
  &LogRecord_fields_namedParameters,
  &LogRecord_fields_parameters,
  &LogRecord_fields_processId,
  &LogRecord_fields_threadId,
  &LogRecord_fields_timeStamp,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogRecord_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* LogRecord_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogRecord_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  LogRecord_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  LogRecord_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  LogRecord_MetainfoWrapper::LogRecord_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__arg_cat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__args[] = 
{
  &LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__arg_l,
  &LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__arg_cat,
  &LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogRecord_method_LogRecord_IINLRString_INLRString__LRLogRecord_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "LogRecord", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  LogRecord::clazzInfo(), // return type
  "_0_LogRecord", // alternative name of method
  -1, // altlabelHashCode
  LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__args, // the arguments
  0, //arguments count
  LogRecord_methods_LogRecord_IINLRString_INLRString__LRLogRecord__exceptions, // the declared exceptions
  LogRecord_MetainfoWrapper::LogRecord_method_LogRecord_IINLRString_INLRString__LRLogRecord__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _LogRecord_methods[] = 
{
  &LogRecord_method_GetClass__L_acdk_lang_RClass_,
  &LogRecord_method_LogRecord_IINLRString_INLRString__LRLogRecord_,
  0
};


struct LogRecord_MetaInfoInitializer
{  LogRecord_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = LogRecord::clazzInfo();
    ci->fields =  _LogRecord_fields;
    ci->methods =  _LogRecord_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
LogRecord_MetaInfoInitializer LogRecord_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
MsgBoxConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RMsgBoxConsumer>(length);
}

//static
::acdk::lang::RObject
MsgBoxConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MsgBoxConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MsgBoxConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MsgBoxConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MsgBoxConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MsgBoxConsumer_method_MsgBoxConsumer__LRMsgBoxConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MsgBoxConsumer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MsgBoxConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MsgBoxConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _MsgBoxConsumer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MsgBoxConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MsgBoxConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MsgBoxConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MsgBoxConsumer_MetainfoWrapper::MsgBoxConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__args[] = 
{
  &MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__arg_formatter,
  &MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__arg_minll,
  &MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MsgBoxConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MsgBoxConsumer::clazzInfo(), // return type
  "_0_MsgBoxConsumer", // alternative name of method
  -1, // altlabelHashCode
  MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__args, // the arguments
  0, //arguments count
  MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__exceptions, // the declared exceptions
  MsgBoxConsumer_MetainfoWrapper::MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods_MsgBoxConsumer__LRMsgBoxConsumer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MsgBoxConsumer_methods_MsgBoxConsumer__LRMsgBoxConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_method_MsgBoxConsumer__LRMsgBoxConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MsgBoxConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MsgBoxConsumer::clazzInfo(), // return type
  "_1_MsgBoxConsumer", // alternative name of method
  -1, // altlabelHashCode
  MsgBoxConsumer_methods_MsgBoxConsumer__LRMsgBoxConsumer__args, // the arguments
  0, //arguments count
  MsgBoxConsumer_methods_MsgBoxConsumer__LRMsgBoxConsumer__exceptions, // the declared exceptions
  MsgBoxConsumer_MetainfoWrapper::MsgBoxConsumer_method_MsgBoxConsumer__LRMsgBoxConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer__args[] = 
{
  &MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MsgBoxConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MsgBoxConsumer::clazzInfo(), // return type
  "_2_MsgBoxConsumer", // alternative name of method
  -1, // altlabelHashCode
  MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer__args, // the arguments
  0, //arguments count
  MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer__exceptions, // the declared exceptions
  MsgBoxConsumer_MetainfoWrapper::MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__args[] = 
{
  &MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__arg_formatter,
  &MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MsgBoxConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MsgBoxConsumer::clazzInfo(), // return type
  "_3_MsgBoxConsumer", // alternative name of method
  -1, // altlabelHashCode
  MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__args, // the arguments
  0, //arguments count
  MsgBoxConsumer_methods_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__exceptions, // the declared exceptions
  MsgBoxConsumer_MetainfoWrapper::MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MsgBoxConsumer_methods[] = 
{
  &MsgBoxConsumer_method_GetClass__L_acdk_lang_RClass_,
  &MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter_II_LRMsgBoxConsumer_,
  &MsgBoxConsumer_method_MsgBoxConsumer__LRMsgBoxConsumer_,
  &MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter__LRMsgBoxConsumer_,
  &MsgBoxConsumer_method_MsgBoxConsumer_INLRFormatter_I_LRMsgBoxConsumer_,
  0
};


struct MsgBoxConsumer_MetaInfoInitializer
{  MsgBoxConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MsgBoxConsumer::clazzInfo();
    ci->fields =  _MsgBoxConsumer_fields;
    ci->methods =  _MsgBoxConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MsgBoxConsumer_MetaInfoInitializer MsgBoxConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
RollingFileConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RRollingFileConsumer>(length);
}

//static
::acdk::lang::RObject
RollingFileConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RollingFileConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RollingFileConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer__LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< bool>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RollingFileConsumer(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_getFlushLevel__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RollingFileConsumer* This = dmi_cast<RollingFileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RollingFileConsumer::getFlushLevel();
    else
      ret = This->getFlushLevel();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_rollOver__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RollingFileConsumer* This = dmi_cast<RollingFileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RollingFileConsumer::rollOver();
    else
        This->rollOver();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RollingFileConsumer_method_setFlushLevel_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RollingFileConsumer* This = dmi_cast<RollingFileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RollingFileConsumer::setFlushLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setFlushLevel(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RollingFileConsumer_fields__curRecordNum_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RollingFileConsumer* This = dmi_cast<RollingFileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curRecordNum, flags);
    else
      This->_curRecordNum = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RollingFileConsumer_fields__flushLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RollingFileConsumer* This = dmi_cast<RollingFileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flushLevel, flags);
    else
      This->_flushLevel = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RollingFileConsumer_fields__maxBackupIndex_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RollingFileConsumer* This = dmi_cast<RollingFileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxBackupIndex, flags);
    else
      This->_maxBackupIndex = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RollingFileConsumer_fields__maxRecordNum_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RollingFileConsumer* This = dmi_cast<RollingFileConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxRecordNum, flags);
    else
      This->_maxRecordNum = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RollingFileConsumer_fields__curRecordNum = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curRecordNum", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_fields__curRecordNum_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RollingFileConsumer_fields__flushLevel = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flushLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_fields__flushLevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RollingFileConsumer_fields__maxBackupIndex = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxBackupIndex", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_fields__maxBackupIndex_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RollingFileConsumer_fields__maxRecordNum = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxRecordNum", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_fields__maxRecordNum_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RollingFileConsumer_fields[] = 
{
  &RollingFileConsumer_fields__curRecordNum,
  &RollingFileConsumer_fields__flushLevel,
  &RollingFileConsumer_fields__maxBackupIndex,
  &RollingFileConsumer_fields__maxRecordNum,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__arg_buffered = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffered", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__arg_formatter,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__arg_minll,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__arg_maxll,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__arg_buffered,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_0_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer__LRRollingFileConsumer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer__LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer__LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_1_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer__LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer__LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer__LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_2_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__arg_formatter,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_3_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__arg_formatter,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__arg_minll,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_4_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_fnameBase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fnameBase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_maxBackupIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxBackupIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_maxRecordNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxRecordNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_buffered = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffered", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_fnameBase,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_maxBackupIndex,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_maxRecordNum,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_formatter,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_minll,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_maxll,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__arg_buffered,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_5_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__arg_fnameBase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fnameBase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__arg_maxBackupIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxBackupIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__arg_maxRecordNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxRecordNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__arg_fnameBase,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__arg_maxBackupIndex,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__arg_maxRecordNum,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRString_II_LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_6_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRString_II_LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__arg_fnameBase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fnameBase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__arg_maxBackupIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxBackupIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__arg_maxRecordNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxRecordNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__arg_fnameBase,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__arg_maxBackupIndex,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__arg_maxRecordNum,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_7_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_fnameBase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fnameBase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_maxBackupIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxBackupIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_maxRecordNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxRecordNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_fnameBase,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_maxBackupIndex,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_maxRecordNum,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_formatter,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_8_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_fnameBase = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fnameBase", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_maxBackupIndex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxBackupIndex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_maxRecordNum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "maxRecordNum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__args[] = 
{
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_fnameBase,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_maxBackupIndex,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_maxRecordNum,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_formatter,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_minll,
  &RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RollingFileConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RollingFileConsumer::clazzInfo(), // return type
  "_9_RollingFileConsumer", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_getFlushLevel__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_getFlushLevel__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_getFlushLevel__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFlushLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_getFlushLevel", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_getFlushLevel__I_args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_getFlushLevel__I_exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_getFlushLevel__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_rollOver__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_rollOver__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_rollOver__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rollOver", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_rollOver", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_rollOver__V_args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_rollOver__V_exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_rollOver__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_methods_setFlushLevel_I_V_arg_level = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "level", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods_setFlushLevel_I_V_args[] = 
{
  &RollingFileConsumer_methods_setFlushLevel_I_V_arg_level,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_methods_setFlushLevel_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_method_setFlushLevel_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFlushLevel", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setFlushLevel", // alternative name of method
  -1, // altlabelHashCode
  RollingFileConsumer_methods_setFlushLevel_I_V_args, // the arguments
  0, //arguments count
  RollingFileConsumer_methods_setFlushLevel_I_V_exceptions, // the declared exceptions
  RollingFileConsumer_MetainfoWrapper::RollingFileConsumer_method_setFlushLevel_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RollingFileConsumer_methods[] = 
{
  &RollingFileConsumer_method_GetClass__L_acdk_lang_RClass_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_IIZ_LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer__LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRFormatter__LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_I_LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRFormatter_II_LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_IIZ_LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRString_II_LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter__LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_I_LRRollingFileConsumer_,
  &RollingFileConsumer_method_RollingFileConsumer_INLRString_IIINLRFormatter_II_LRRollingFileConsumer_,
  &RollingFileConsumer_method_getFlushLevel__I,
  &RollingFileConsumer_method_rollOver__V,
  &RollingFileConsumer_method_setFlushLevel_I_V,
  0
};


struct RollingFileConsumer_MetaInfoInitializer
{  RollingFileConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RollingFileConsumer::clazzInfo();
    ci->fields =  _RollingFileConsumer_fields;
    ci->methods =  _RollingFileConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RollingFileConsumer_MetaInfoInitializer RollingFileConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
SimpleFormatter_create_array(int length)
{
  return new ObjectArrayImpl<RSimpleFormatter>(length);
}

//static
::acdk::lang::RObject
SimpleFormatter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SimpleFormatter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleFormatter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SimpleFormatter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleFormatter_method_SimpleFormatter__LRSimpleFormatter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SimpleFormatter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleFormatter_method_format_INLRLogRecord__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleFormatter* This = dmi_cast<SimpleFormatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SimpleFormatter::format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SimpleFormatter_method_format_INLRLogRecord_INLRCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SimpleFormatter* This = dmi_cast<SimpleFormatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->SimpleFormatter::format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc), ::acdk::lang::dmi::castTo< RCharWriter>(args[1], dc));
    else
        This->format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc), ::acdk::lang::dmi::castTo< RCharWriter>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SimpleFormatter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleFormatter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFormatter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleFormatter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SimpleFormatter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SimpleFormatter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SimpleFormatter_MetainfoWrapper::SimpleFormatter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleFormatter_methods_SimpleFormatter__LRSimpleFormatter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFormatter_methods_SimpleFormatter__LRSimpleFormatter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleFormatter_method_SimpleFormatter__LRSimpleFormatter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SimpleFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SimpleFormatter::clazzInfo(), // return type
  "_0_SimpleFormatter", // alternative name of method
  -1, // altlabelHashCode
  SimpleFormatter_methods_SimpleFormatter__LRSimpleFormatter__args, // the arguments
  0, //arguments count
  SimpleFormatter_methods_SimpleFormatter__LRSimpleFormatter__exceptions, // the declared exceptions
  SimpleFormatter_MetainfoWrapper::SimpleFormatter_method_SimpleFormatter__LRSimpleFormatter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleFormatter_methods_format_INLRLogRecord__LRString__arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleFormatter_methods_format_INLRLogRecord__LRString__args[] = 
{
  &SimpleFormatter_methods_format_INLRLogRecord__LRString__arg_rec,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFormatter_methods_format_INLRLogRecord__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleFormatter_method_format_INLRLogRecord__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_format", // alternative name of method
  -1, // altlabelHashCode
  SimpleFormatter_methods_format_INLRLogRecord__LRString__args, // the arguments
  0, //arguments count
  SimpleFormatter_methods_format_INLRLogRecord__LRString__exceptions, // the declared exceptions
  SimpleFormatter_MetainfoWrapper::SimpleFormatter_method_format_INLRLogRecord__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SimpleFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_args[] = 
{
  &SimpleFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_rec,
  &SimpleFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleFormatter_method_format_INLRLogRecord_INLRCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_format", // alternative name of method
  -1, // altlabelHashCode
  SimpleFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_args, // the arguments
  0, //arguments count
  SimpleFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_exceptions, // the declared exceptions
  SimpleFormatter_MetainfoWrapper::SimpleFormatter_method_format_INLRLogRecord_INLRCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SimpleFormatter_methods[] = 
{
  &SimpleFormatter_method_GetClass__L_acdk_lang_RClass_,
  &SimpleFormatter_method_SimpleFormatter__LRSimpleFormatter_,
  &SimpleFormatter_method_format_INLRLogRecord__LRString_,
  &SimpleFormatter_method_format_INLRLogRecord_INLRCharWriter__V,
  0
};


struct SimpleFormatter_MetaInfoInitializer
{  SimpleFormatter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SimpleFormatter::clazzInfo();
    ci->fields =  _SimpleFormatter_fields;
    ci->methods =  _SimpleFormatter_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SimpleFormatter_MetaInfoInitializer SimpleFormatter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
StdFormatter_create_array(int length)
{
  return new ObjectArrayImpl<RStdFormatter>(length);
}

//static
::acdk::lang::RObject
StdFormatter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StdFormatter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdFormatter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StdFormatter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdFormatter_method_StdFormatter__LRStdFormatter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StdFormatter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdFormatter_method_format_INLRLogRecord__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdFormatter* This = dmi_cast<StdFormatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StdFormatter::format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StdFormatter_method_format_INLRLogRecord_INLRCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StdFormatter* This = dmi_cast<StdFormatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StdFormatter::format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc), ::acdk::lang::dmi::castTo< RCharWriter>(args[1], dc));
    else
        This->format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc), ::acdk::lang::dmi::castTo< RCharWriter>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _StdFormatter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdFormatter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StdFormatter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdFormatter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StdFormatter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StdFormatter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StdFormatter_MetainfoWrapper::StdFormatter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdFormatter_methods_StdFormatter__LRStdFormatter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StdFormatter_methods_StdFormatter__LRStdFormatter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdFormatter_method_StdFormatter__LRStdFormatter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StdFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StdFormatter::clazzInfo(), // return type
  "_0_StdFormatter", // alternative name of method
  -1, // altlabelHashCode
  StdFormatter_methods_StdFormatter__LRStdFormatter__args, // the arguments
  0, //arguments count
  StdFormatter_methods_StdFormatter__LRStdFormatter__exceptions, // the declared exceptions
  StdFormatter_MetainfoWrapper::StdFormatter_method_StdFormatter__LRStdFormatter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdFormatter_methods_format_INLRLogRecord__LRString__arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdFormatter_methods_format_INLRLogRecord__LRString__args[] = 
{
  &StdFormatter_methods_format_INLRLogRecord__LRString__arg_rec,
  0
};

::acdk::lang::dmi::ClazzInfo* StdFormatter_methods_format_INLRLogRecord__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdFormatter_method_format_INLRLogRecord__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_format", // alternative name of method
  -1, // altlabelHashCode
  StdFormatter_methods_format_INLRLogRecord__LRString__args, // the arguments
  0, //arguments count
  StdFormatter_methods_format_INLRLogRecord__LRString__exceptions, // the declared exceptions
  StdFormatter_MetainfoWrapper::StdFormatter_method_format_INLRLogRecord__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StdFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StdFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_args[] = 
{
  &StdFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_rec,
  &StdFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* StdFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdFormatter_method_format_INLRLogRecord_INLRCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_format", // alternative name of method
  -1, // altlabelHashCode
  StdFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_args, // the arguments
  0, //arguments count
  StdFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_exceptions, // the declared exceptions
  StdFormatter_MetainfoWrapper::StdFormatter_method_format_INLRLogRecord_INLRCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StdFormatter_methods[] = 
{
  &StdFormatter_method_GetClass__L_acdk_lang_RClass_,
  &StdFormatter_method_StdFormatter__LRStdFormatter_,
  &StdFormatter_method_format_INLRLogRecord__LRString_,
  &StdFormatter_method_format_INLRLogRecord_INLRCharWriter__V,
  0
};


struct StdFormatter_MetaInfoInitializer
{  StdFormatter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StdFormatter::clazzInfo();
    ci->fields =  _StdFormatter_fields;
    ci->methods =  _StdFormatter_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StdFormatter_MetaInfoInitializer StdFormatter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
TransactionConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RTransactionConsumer>(length);
}

//static
::acdk::lang::RObject
TransactionConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TransactionConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransactionConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TransactionConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransactionConsumer_method_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TransactionConsumer(::acdk::lang::dmi::castTo< RLogConsumer>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransactionConsumer_method_begin__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransactionConsumer* This = dmi_cast<TransactionConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TransactionConsumer::begin();
    else
        This->begin();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransactionConsumer_method_commit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransactionConsumer* This = dmi_cast<TransactionConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TransactionConsumer::commit();
    else
        This->commit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TransactionConsumer_method_rollback__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TransactionConsumer* This = dmi_cast<TransactionConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TransactionConsumer::rollback();
    else
        This->rollback();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransactionConsumer_fields__consumer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransactionConsumer* This = dmi_cast<TransactionConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_consumer, flags);
    else
      This->_consumer = ::acdk::lang::dmi::castTo< RLogConsumer>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransactionConsumer_fields__queues_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransactionConsumer* This = dmi_cast<TransactionConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_queues, flags);
    else
      This->_queues = ::acdk::lang::dmi::castTo< RLogRecordArrayArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TransactionConsumer_fields__rollBackLogLevel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TransactionConsumer* This = dmi_cast<TransactionConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_rollBackLogLevel, flags);
    else
      This->_rollBackLogLevel = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TransactionConsumer_fields__consumer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_consumer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogConsumer::clazzInfo(),
  TransactionConsumer_MetainfoWrapper::TransactionConsumer_fields__consumer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransactionConsumer_fields__queues = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_queues", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecordArrayArray::clazzInfo(),
  TransactionConsumer_MetainfoWrapper::TransactionConsumer_fields__queues_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TransactionConsumer_fields__rollBackLogLevel = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_rollBackLogLevel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TransactionConsumer_MetainfoWrapper::TransactionConsumer_fields__rollBackLogLevel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TransactionConsumer_fields[] = 
{
  &TransactionConsumer_fields__consumer,
  &TransactionConsumer_fields__queues,
  &TransactionConsumer_fields__rollBackLogLevel,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransactionConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransactionConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransactionConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TransactionConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TransactionConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TransactionConsumer_MetainfoWrapper::TransactionConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TransactionConsumer_methods_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__arg_consumer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "consumer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogConsumer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TransactionConsumer_methods_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__arg_rollBackMinLevel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "rollBackMinLevel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransactionConsumer_methods_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__args[] = 
{
  &TransactionConsumer_methods_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__arg_consumer,
  &TransactionConsumer_methods_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__arg_rollBackMinLevel,
  0
};

::acdk::lang::dmi::ClazzInfo* TransactionConsumer_methods_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransactionConsumer_method_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TransactionConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TransactionConsumer::clazzInfo(), // return type
  "_0_TransactionConsumer", // alternative name of method
  -1, // altlabelHashCode
  TransactionConsumer_methods_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__args, // the arguments
  0, //arguments count
  TransactionConsumer_methods_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__exceptions, // the declared exceptions
  TransactionConsumer_MetainfoWrapper::TransactionConsumer_method_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransactionConsumer_methods_begin__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransactionConsumer_methods_begin__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransactionConsumer_method_begin__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "begin", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_begin", // alternative name of method
  -1, // altlabelHashCode
  TransactionConsumer_methods_begin__V_args, // the arguments
  0, //arguments count
  TransactionConsumer_methods_begin__V_exceptions, // the declared exceptions
  TransactionConsumer_MetainfoWrapper::TransactionConsumer_method_begin__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransactionConsumer_methods_commit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransactionConsumer_methods_commit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransactionConsumer_method_commit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "commit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_commit", // alternative name of method
  -1, // altlabelHashCode
  TransactionConsumer_methods_commit__V_args, // the arguments
  0, //arguments count
  TransactionConsumer_methods_commit__V_exceptions, // the declared exceptions
  TransactionConsumer_MetainfoWrapper::TransactionConsumer_method_commit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransactionConsumer_methods_rollback__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TransactionConsumer_methods_rollback__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransactionConsumer_method_rollback__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rollback", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_rollback", // alternative name of method
  -1, // altlabelHashCode
  TransactionConsumer_methods_rollback__V_args, // the arguments
  0, //arguments count
  TransactionConsumer_methods_rollback__V_exceptions, // the declared exceptions
  TransactionConsumer_MetainfoWrapper::TransactionConsumer_method_rollback__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TransactionConsumer_methods[] = 
{
  &TransactionConsumer_method_GetClass__L_acdk_lang_RClass_,
  &TransactionConsumer_method_TransactionConsumer_INLRLogConsumer_I_LRTransactionConsumer_,
  &TransactionConsumer_method_begin__V,
  &TransactionConsumer_method_commit__V,
  &TransactionConsumer_method_rollback__V,
  0
};


struct TransactionConsumer_MetaInfoInitializer
{  TransactionConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TransactionConsumer::clazzInfo();
    ci->fields =  _TransactionConsumer_fields;
    ci->methods =  _TransactionConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TransactionConsumer_MetaInfoInitializer TransactionConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
Win32DbgFormatter_create_array(int length)
{
  return new ObjectArrayImpl<RWin32DbgFormatter>(length);
}

//static
::acdk::lang::RObject
Win32DbgFormatter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Win32DbgFormatter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgFormatter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Win32DbgFormatter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgFormatter_method_Win32DbgFormatter__LRWin32DbgFormatter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Win32DbgFormatter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgFormatter_method_format_INLRLogRecord__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Win32DbgFormatter* This = dmi_cast<Win32DbgFormatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Win32DbgFormatter::format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgFormatter_method_format_INLRLogRecord_INLRCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Win32DbgFormatter* This = dmi_cast<Win32DbgFormatter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Win32DbgFormatter::format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc), ::acdk::lang::dmi::castTo< RCharWriter>(args[1], dc));
    else
        This->format(::acdk::lang::dmi::castTo< RLogRecord>(args[0], dc), ::acdk::lang::dmi::castTo< RCharWriter>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Win32DbgFormatter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgFormatter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgFormatter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgFormatter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgFormatter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Win32DbgFormatter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Win32DbgFormatter_MetainfoWrapper::Win32DbgFormatter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgFormatter_methods_Win32DbgFormatter__LRWin32DbgFormatter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgFormatter_methods_Win32DbgFormatter__LRWin32DbgFormatter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgFormatter_method_Win32DbgFormatter__LRWin32DbgFormatter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Win32DbgFormatter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Win32DbgFormatter::clazzInfo(), // return type
  "_0_Win32DbgFormatter", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgFormatter_methods_Win32DbgFormatter__LRWin32DbgFormatter__args, // the arguments
  0, //arguments count
  Win32DbgFormatter_methods_Win32DbgFormatter__LRWin32DbgFormatter__exceptions, // the declared exceptions
  Win32DbgFormatter_MetainfoWrapper::Win32DbgFormatter_method_Win32DbgFormatter__LRWin32DbgFormatter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgFormatter_methods_format_INLRLogRecord__LRString__arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgFormatter_methods_format_INLRLogRecord__LRString__args[] = 
{
  &Win32DbgFormatter_methods_format_INLRLogRecord__LRString__arg_rec,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgFormatter_methods_format_INLRLogRecord__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgFormatter_method_format_INLRLogRecord__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_format", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgFormatter_methods_format_INLRLogRecord__LRString__args, // the arguments
  0, //arguments count
  Win32DbgFormatter_methods_format_INLRLogRecord__LRString__exceptions, // the declared exceptions
  Win32DbgFormatter_MetainfoWrapper::Win32DbgFormatter_method_format_INLRLogRecord__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_rec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "rec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLogRecord::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_args[] = 
{
  &Win32DbgFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_rec,
  &Win32DbgFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgFormatter_method_format_INLRLogRecord_INLRCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "format", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_format", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_args, // the arguments
  0, //arguments count
  Win32DbgFormatter_methods_format_INLRLogRecord_INLRCharWriter__V_exceptions, // the declared exceptions
  Win32DbgFormatter_MetainfoWrapper::Win32DbgFormatter_method_format_INLRLogRecord_INLRCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Win32DbgFormatter_methods[] = 
{
  &Win32DbgFormatter_method_GetClass__L_acdk_lang_RClass_,
  &Win32DbgFormatter_method_Win32DbgFormatter__LRWin32DbgFormatter_,
  &Win32DbgFormatter_method_format_INLRLogRecord__LRString_,
  &Win32DbgFormatter_method_format_INLRLogRecord_INLRCharWriter__V,
  0
};


struct Win32DbgFormatter_MetaInfoInitializer
{  Win32DbgFormatter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Win32DbgFormatter::clazzInfo();
    ci->fields =  _Win32DbgFormatter_fields;
    ci->methods =  _Win32DbgFormatter_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Win32DbgFormatter_MetaInfoInitializer Win32DbgFormatter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
Win32DbgConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RWin32DbgConsumer>(length);
}

//static
::acdk::lang::RObject
Win32DbgConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Win32DbgConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Win32DbgConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Win32DbgConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgConsumer_method_Win32DbgConsumer__LRWin32DbgConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Win32DbgConsumer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Win32DbgConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Win32DbgConsumer(::acdk::lang::dmi::castTo< RFormatter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Win32DbgConsumer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Win32DbgConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Win32DbgConsumer_MetainfoWrapper::Win32DbgConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__args[] = 
{
  &Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__arg_formatter,
  &Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__arg_minll,
  &Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Win32DbgConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Win32DbgConsumer::clazzInfo(), // return type
  "_0_Win32DbgConsumer", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__args, // the arguments
  0, //arguments count
  Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__exceptions, // the declared exceptions
  Win32DbgConsumer_MetainfoWrapper::Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods_Win32DbgConsumer__LRWin32DbgConsumer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgConsumer_methods_Win32DbgConsumer__LRWin32DbgConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_method_Win32DbgConsumer__LRWin32DbgConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Win32DbgConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Win32DbgConsumer::clazzInfo(), // return type
  "_1_Win32DbgConsumer", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgConsumer_methods_Win32DbgConsumer__LRWin32DbgConsumer__args, // the arguments
  0, //arguments count
  Win32DbgConsumer_methods_Win32DbgConsumer__LRWin32DbgConsumer__exceptions, // the declared exceptions
  Win32DbgConsumer_MetainfoWrapper::Win32DbgConsumer_method_Win32DbgConsumer__LRWin32DbgConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer__args[] = 
{
  &Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Win32DbgConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Win32DbgConsumer::clazzInfo(), // return type
  "_2_Win32DbgConsumer", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer__args, // the arguments
  0, //arguments count
  Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer__exceptions, // the declared exceptions
  Win32DbgConsumer_MetainfoWrapper::Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__args[] = 
{
  &Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__arg_formatter,
  &Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Win32DbgConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Win32DbgConsumer::clazzInfo(), // return type
  "_3_Win32DbgConsumer", // alternative name of method
  -1, // altlabelHashCode
  Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__args, // the arguments
  0, //arguments count
  Win32DbgConsumer_methods_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__exceptions, // the declared exceptions
  Win32DbgConsumer_MetainfoWrapper::Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Win32DbgConsumer_methods[] = 
{
  &Win32DbgConsumer_method_GetClass__L_acdk_lang_RClass_,
  &Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter_II_LRWin32DbgConsumer_,
  &Win32DbgConsumer_method_Win32DbgConsumer__LRWin32DbgConsumer_,
  &Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter__LRWin32DbgConsumer_,
  &Win32DbgConsumer_method_Win32DbgConsumer_INLRFormatter_I_LRWin32DbgConsumer_,
  0
};


struct Win32DbgConsumer_MetaInfoInitializer
{  Win32DbgConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Win32DbgConsumer::clazzInfo();
    ci->fields =  _Win32DbgConsumer_fields;
    ci->methods =  _Win32DbgConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Win32DbgConsumer_MetaInfoInitializer Win32DbgConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 


//static
::acdk::lang::RObject
WriterConsumer_create_array(int length)
{
  return new ObjectArrayImpl<RWriterConsumer>(length);
}

//static
::acdk::lang::RObject
WriterConsumer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class WriterConsumer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriterConsumer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)WriterConsumer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WriterConsumer(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< int>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WriterConsumer(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WriterConsumer(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WriterConsumer(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RFormatter>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  WriterConsumer_fields__writer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    WriterConsumer* This = dmi_cast<WriterConsumer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_writer, flags);
    else
      This->_writer = ::acdk::lang::dmi::castTo< ::acdk::io::RPrintWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo WriterConsumer_fields__writer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_writer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RPrintWriter::clazzInfo(),
  WriterConsumer_MetainfoWrapper::WriterConsumer_fields__writer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _WriterConsumer_fields[] = 
{
  &WriterConsumer_fields__writer,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WriterConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  WriterConsumer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  WriterConsumer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  WriterConsumer_MetainfoWrapper::WriterConsumer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__arg_maxll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "maxll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__args[] = 
{
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__arg_out,
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__arg_formatter,
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__arg_minll,
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__arg_maxll,
  0
};

::acdk::lang::dmi::ClazzInfo* WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "WriterConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WriterConsumer::clazzInfo(), // return type
  "_0_WriterConsumer", // alternative name of method
  -1, // altlabelHashCode
  WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__args, // the arguments
  0, //arguments count
  WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__exceptions, // the declared exceptions
  WriterConsumer_MetainfoWrapper::WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer__args[] = 
{
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "WriterConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WriterConsumer::clazzInfo(), // return type
  "_1_WriterConsumer", // alternative name of method
  -1, // altlabelHashCode
  WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer__args, // the arguments
  0, //arguments count
  WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer__exceptions, // the declared exceptions
  WriterConsumer_MetainfoWrapper::WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__args[] = 
{
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__arg_out,
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__arg_formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "WriterConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WriterConsumer::clazzInfo(), // return type
  "_2_WriterConsumer", // alternative name of method
  -1, // altlabelHashCode
  WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__args, // the arguments
  0, //arguments count
  WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__exceptions, // the declared exceptions
  WriterConsumer_MetainfoWrapper::WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__arg_formatter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "formatter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFormatter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__arg_minll = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "minll", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__args[] = 
{
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__arg_out,
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__arg_formatter,
  &WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__arg_minll,
  0
};

::acdk::lang::dmi::ClazzInfo* WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "WriterConsumer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WriterConsumer::clazzInfo(), // return type
  "_3_WriterConsumer", // alternative name of method
  -1, // altlabelHashCode
  WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__args, // the arguments
  0, //arguments count
  WriterConsumer_methods_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__exceptions, // the declared exceptions
  WriterConsumer_MetainfoWrapper::WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _WriterConsumer_methods[] = 
{
  &WriterConsumer_method_GetClass__L_acdk_lang_RClass_,
  &WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_II_LRWriterConsumer_,
  &WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter__LRWriterConsumer_,
  &WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter__LRWriterConsumer_,
  &WriterConsumer_method_WriterConsumer_INLacdk_io_RWriter_INLRFormatter_I_LRWriterConsumer_,
  0
};


struct WriterConsumer_MetaInfoInitializer
{  WriterConsumer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = WriterConsumer::clazzInfo();
    ci->fields =  _WriterConsumer_fields;
    ci->methods =  _WriterConsumer_methods;
    ci->_scopeParent = acdk_util_logging_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
WriterConsumer_MetaInfoInitializer WriterConsumer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace util
} // namespace logging


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) logging_dummyExportFunc() {}
#endif

