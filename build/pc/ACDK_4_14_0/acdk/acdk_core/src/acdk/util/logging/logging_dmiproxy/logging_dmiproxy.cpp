// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../logging.h"
#include "../AbstractLogConsumer.h"
#include "../ConsoleConsumer.h"
#include "../FileConsumer.h"
#include "../Formatter.h"
#include "../Level.h"
#include "../Log.h"
#include "../LogConsumer.h"
#include "../Logger.h"
#include "../logging.h"
#include "../LogManager.h"
#include "../LogRecord.h"
#include "../MsgBoxConsumer.h"
#include "../NamedLogArgs.h"
#include "../RollingFileConsumer.h"
#include "../SimpleFormatter.h"
#include "../StdFormatter.h"
#include "../TransactionConsumer.h"
#include "../Win32DbgConsumer.h"
#include "../WriterConsumer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace util { 
namespace logging { 

class AbstractLogConsumer_DmiProxy
: extends AbstractLogConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(AbstractLogConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  AbstractLogConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, AbstractLogConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  AbstractLogConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : AbstractLogConsumer(formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  AbstractLogConsumer_DmiProxy()
  : AbstractLogConsumer()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  AbstractLogConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter)
  : AbstractLogConsumer(formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  AbstractLogConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : AbstractLogConsumer(formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int getMaxLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::getMaxLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::getMinLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void setMaxLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[9]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::setMaxLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[10]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::setMinLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new AbstractLogConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _AbstractLogConsumer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new AbstractLogConsumer_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _AbstractLogConsumer_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new AbstractLogConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _AbstractLogConsumer_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new AbstractLogConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo AbstractLogConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractLogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractLogConsumer_DmiProxy_interfaces[] =
{
  &AbstractLogConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "AbstractLogConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  AbstractLogConsumer::clazzInfo(), // returnType
  "_0_AbstractLogConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  AbstractLogConsumer_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  AbstractLogConsumer_DmiProxy::_AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods__AbstractLogConsumer_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "AbstractLogConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  AbstractLogConsumer::clazzInfo(), // returnType
  "_1_AbstractLogConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  AbstractLogConsumer_methods__AbstractLogConsumer_args,
  0, // argumentCount
  0, // excpetions,
  AbstractLogConsumer_DmiProxy::_AbstractLogConsumer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_args[] = 
{
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "AbstractLogConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  AbstractLogConsumer::clazzInfo(), // returnType
  "_2_AbstractLogConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  AbstractLogConsumer_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  AbstractLogConsumer_DmiProxy::_AbstractLogConsumer_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractLogConsumer_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_args[] = 
{
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_arg_formatter,
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "AbstractLogConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  AbstractLogConsumer::clazzInfo(), // returnType
  "_3_AbstractLogConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  AbstractLogConsumer_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  AbstractLogConsumer_DmiProxy::_AbstractLogConsumer_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* AbstractLogConsumer_methods[] = 
{
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I_I,
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer,
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter,
  &AbstractLogConsumer_DmiProxy_methods__AbstractLogConsumer_in_acdk_util_logging_Formatter_I,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractLogConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "AbstractLogConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _AbstractLogConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     AbstractLogConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractLogConsumer_DmiProxy(AbstractLogConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class ConsoleConsumer_DmiProxy
: extends ConsoleConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ConsoleConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  ConsoleConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, ConsoleConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ConsoleConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : ConsoleConsumer(formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ConsoleConsumer_DmiProxy()
  : ConsoleConsumer()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ConsoleConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter)
  : ConsoleConsumer(formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ConsoleConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : ConsoleConsumer(formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int getMaxLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::getMaxLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::getMinLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void setMaxLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[9]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::setMaxLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[10]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::setMinLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, ConsoleConsumer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ConsoleConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ConsoleConsumer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ConsoleConsumer_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ConsoleConsumer_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ConsoleConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ConsoleConsumer_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ConsoleConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ConsoleConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ConsoleConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConsoleConsumer_DmiProxy_interfaces[] =
{
  &ConsoleConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ConsoleConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ConsoleConsumer::clazzInfo(), // returnType
  "_0_ConsoleConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  ConsoleConsumer_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  ConsoleConsumer_DmiProxy::_ConsoleConsumer_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods__ConsoleConsumer_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ConsoleConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ConsoleConsumer::clazzInfo(), // returnType
  "_1_ConsoleConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  ConsoleConsumer_methods__ConsoleConsumer_args,
  0, // argumentCount
  0, // excpetions,
  ConsoleConsumer_DmiProxy::_ConsoleConsumer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_args[] = 
{
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ConsoleConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ConsoleConsumer::clazzInfo(), // returnType
  "_2_ConsoleConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  ConsoleConsumer_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  ConsoleConsumer_DmiProxy::_ConsoleConsumer_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleConsumer_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_args[] = 
{
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_arg_formatter,
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ConsoleConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ConsoleConsumer::clazzInfo(), // returnType
  "_3_ConsoleConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  ConsoleConsumer_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  ConsoleConsumer_DmiProxy::_ConsoleConsumer_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ConsoleConsumer_methods[] = 
{
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I_I,
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer,
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter,
  &ConsoleConsumer_DmiProxy_methods__ConsoleConsumer_in_acdk_util_logging_Formatter_I,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ConsoleConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _ConsoleConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ConsoleConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ConsoleConsumer_DmiProxy(ConsoleConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class FileConsumer_DmiProxy
: extends FileConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(FileConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  FileConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, FileConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  FileConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll, bool buffered)
  : FileConsumer(formatter, minll, maxll, buffered)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy()
  : FileConsumer()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter)
  : FileConsumer(formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : FileConsumer(formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : FileConsumer(formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy(IN(::acdk::lang::RString) fname, IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll, bool buffered)
  : FileConsumer(fname, formatter, minll, maxll, buffered)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy(IN(::acdk::lang::RString) fname)
  : FileConsumer(fname)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy(IN(::acdk::lang::RString) fname, IN(::acdk::util::logging::RFormatter) formatter)
  : FileConsumer(fname, formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy(IN(::acdk::lang::RString) fname, IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : FileConsumer(fname, formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  FileConsumer_DmiProxy(IN(::acdk::lang::RString) fname, IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : FileConsumer(fname, formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int getMaxLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::getMaxLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::getMinLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void setMaxLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[9]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::setMaxLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[10]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::setMinLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, FileConsumer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), (::acdk::util::logging::RFormatter)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar(), args[4].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), (::acdk::util::logging::RFormatter)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), (::acdk::util::logging::RFormatter)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new FileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), (::acdk::util::logging::RFormatter)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo FileConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  FileConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileConsumer_DmiProxy_interfaces[] =
{
  &FileConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_buffered =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "buffered",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_formatter,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_minll,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_maxll,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_buffered,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_0_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_util_logging_Formatter_I_I_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_1_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_util_logging_Formatter_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_2_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_util_logging_Formatter_I_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_arg_formatter,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_3_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_4_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_fname =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fname",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_buffered =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "buffered",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_fname,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_formatter,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_minll,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_maxll,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_arg_buffered,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_5_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_arg_fname =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fname",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_lang_String_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_arg_fname,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_6_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_arg_fname =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fname",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_arg_fname,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_7_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_arg_fname =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fname",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_arg_fname,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_arg_formatter,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_8_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_arg_fname =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fname",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileConsumer_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_arg_fname,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "FileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  FileConsumer::clazzInfo(), // returnType
  "_9_FileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  FileConsumer_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  FileConsumer_DmiProxy::_FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* FileConsumer_methods[] = 
{
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I_Z,
  &FileConsumer_DmiProxy_methods__FileConsumer,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_util_logging_Formatter_I_I,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I_Z,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I,
  &FileConsumer_DmiProxy_methods__FileConsumer_in_acdk_lang_String_in_acdk_util_logging_Formatter_I_I,
  0
};

::acdk::lang::dmi::ClazzInfo* FileConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "FileConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _FileConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     FileConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_FileConsumer_DmiProxy(FileConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class Formatter_DmiProxy
: extends ::acdk::lang::Object
, implements Formatter
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Formatter)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Formatter::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, Formatter)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  static ::acdk::lang::RObject create_instance() { return new Formatter_DmiProxy(); }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Formatter_DmiProxy()
  : Formatter()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RString format(IN(::acdk::util::logging::RLogRecord) rec)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[2]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::format(rec);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("format", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void format(IN(::acdk::util::logging::RLogRecord) rec, IN(::acdk::io::RCharWriter) out)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[3]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::format(rec, out);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    __acdk_args[1] = ::acdk::lang::inOf(out);
    _dmiProxyGetTarget()->standardDispatch("format", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RString getFooter()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::getFooter();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFooter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::lang::RString getHeader()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::getHeader();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getHeader", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Formatter_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Formatter_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Formatter_DmiProxy_interfaces[] =
{
  &Formatter_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Formatter_methods__Formatter_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Formatter_DmiProxy_methods__Formatter = 
{
  ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Formatter_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Formatter::clazzInfo(), // returnType
  "_DmiProxy", // altname
  -1, // altnamehashCode
  Formatter_methods__Formatter_args,
  0, // argumentCount
  0, // excpetions,
  Formatter_DmiProxy::_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Formatter_methods[] = 
{
  &Formatter_DmiProxy_methods__Formatter,
  0
};

::acdk::lang::dmi::ClazzInfo* Formatter_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Formatter_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Formatter_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Formatter_methods, // pointer to Array of Methods
     0, // count of Methods
     Formatter_DmiProxy::create_instance, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Formatter_DmiProxy(Formatter_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class LogConsumer_DmiProxy
: extends ::acdk::lang::Object
, implements LogConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(LogConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  LogConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, LogConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  static ::acdk::lang::RObject create_instance() { return new LogConsumer_DmiProxy(); }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  LogConsumer_DmiProxy()
  : LogConsumer()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  int getMaxLevel()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMaxLevel(int mn)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _LogConsumer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new LogConsumer_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo LogConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LogConsumer_DmiProxy_interfaces[] =
{
  &LogConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogConsumer_methods__LogConsumer_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogConsumer_DmiProxy_methods__LogConsumer = 
{
  ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "LogConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  LogConsumer::clazzInfo(), // returnType
  "_DmiProxy", // altname
  -1, // altnamehashCode
  LogConsumer_methods__LogConsumer_args,
  0, // argumentCount
  0, // excpetions,
  LogConsumer_DmiProxy::_LogConsumer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* LogConsumer_methods[] = 
{
  &LogConsumer_DmiProxy_methods__LogConsumer,
  0
};

::acdk::lang::dmi::ClazzInfo* LogConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "LogConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _LogConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     LogConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     LogConsumer_DmiProxy::create_instance, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_LogConsumer_DmiProxy(LogConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class Logger_DmiProxy
: extends Logger
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Logger)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Logger::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, Logger)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Logger_DmiProxy(IN(::acdk::lang::RString) name)
  : Logger(name)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Logger_DmiProxy(IN(::acdk::lang::RString) name, int minLevel)
  : Logger(name, minLevel)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Logger)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Logger)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Logger)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Logger)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Logger)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Logger)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Logger)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Logger_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Logger_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Logger_in_acdk_lang_String_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Logger_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Logger_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Logger::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Logger_DmiProxy_interfaces[] =
{
  &Logger_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_DmiProxy_methods__Logger_in_acdk_lang_String_arg_name =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "name",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods__Logger_in_acdk_lang_String_args[] = 
{
  &Logger_DmiProxy_methods__Logger_in_acdk_lang_String_arg_name,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_DmiProxy_methods__Logger_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Logger_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Logger::clazzInfo(), // returnType
  "_0_Logger_DmiProxy", // altname
  -1, // altnamehashCode
  Logger_methods__Logger_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  Logger_DmiProxy::_Logger_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_DmiProxy_methods__Logger_in_acdk_lang_String_I_arg_name =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "name",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Logger_DmiProxy_methods__Logger_in_acdk_lang_String_I_arg_minLevel =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "minLevel",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Logger_methods__Logger_in_acdk_lang_String_I_args[] = 
{
  &Logger_DmiProxy_methods__Logger_in_acdk_lang_String_I_arg_name,
  &Logger_DmiProxy_methods__Logger_in_acdk_lang_String_I_arg_minLevel,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Logger_DmiProxy_methods__Logger_in_acdk_lang_String_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Logger_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Logger::clazzInfo(), // returnType
  "_1_Logger_DmiProxy", // altname
  -1, // altnamehashCode
  Logger_methods__Logger_in_acdk_lang_String_I_args,
  0, // argumentCount
  0, // excpetions,
  Logger_DmiProxy::_Logger_in_acdk_lang_String_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Logger_methods[] = 
{
  &Logger_DmiProxy_methods__Logger_in_acdk_lang_String,
  &Logger_DmiProxy_methods__Logger_in_acdk_lang_String_I,
  0
};

::acdk::lang::dmi::ClazzInfo* Logger_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Logger_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Logger_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Logger_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Logger_DmiProxy(Logger_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class LogManager_DmiProxy
: extends LogManager
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(LogManager)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  LogManager::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, LogManager)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  LogManager_DmiProxy()
  : LogManager()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogManager)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogManager)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogManager)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogManager)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogManager)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogManager)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogManager)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _LogManager_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new LogManager_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo LogManager_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LogManager::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LogManager_DmiProxy_interfaces[] =
{
  &LogManager_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogManager_methods__LogManager_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogManager_DmiProxy_methods__LogManager = 
{
  ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "LogManager_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  LogManager::clazzInfo(), // returnType
  "_DmiProxy", // altname
  -1, // altnamehashCode
  LogManager_methods__LogManager_args,
  0, // argumentCount
  0, // excpetions,
  LogManager_DmiProxy::_LogManager_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* LogManager_methods[] = 
{
  &LogManager_DmiProxy_methods__LogManager,
  0
};

::acdk::lang::dmi::ClazzInfo* LogManager_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "LogManager_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _LogManager_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     LogManager_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_LogManager_DmiProxy(LogManager_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class LogRecord_DmiProxy
: extends LogRecord
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(LogRecord)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  LogRecord::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, LogRecord)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  LogRecord_DmiProxy(int l, IN(::acdk::lang::RString) cat, IN(::acdk::lang::RString) msg)
  : LogRecord(l, cat, msg)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogRecord)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogRecord)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogRecord)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogRecord)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogRecord)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogRecord)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, LogRecord)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new LogRecord_DmiProxy(args[0].getIntVar(), (::acdk::lang::RString)args[1].getObjectVar(), (::acdk::lang::RString)args[2].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo LogRecord_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  LogRecord::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LogRecord_DmiProxy_interfaces[] =
{
  &LogRecord_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo LogRecord_DmiProxy_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_arg_l =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "l",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo LogRecord_DmiProxy_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_arg_cat =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "cat",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo LogRecord_DmiProxy_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_arg_msg =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "msg",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* LogRecord_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_args[] = 
{
  &LogRecord_DmiProxy_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_arg_l,
  &LogRecord_DmiProxy_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_arg_cat,
  &LogRecord_DmiProxy_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_arg_msg,
  0
};

::acdk::lang::dmi::ClazzMethodInfo LogRecord_DmiProxy_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "LogRecord_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  LogRecord::clazzInfo(), // returnType
  "_0_LogRecord_DmiProxy", // altname
  -1, // altnamehashCode
  LogRecord_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  LogRecord_DmiProxy::_LogRecord_I_in_acdk_lang_String_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* LogRecord_methods[] = 
{
  &LogRecord_DmiProxy_methods__LogRecord_I_in_acdk_lang_String_in_acdk_lang_String,
  0
};

::acdk::lang::dmi::ClazzInfo* LogRecord_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "LogRecord_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _LogRecord_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     LogRecord_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_LogRecord_DmiProxy(LogRecord_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class MsgBoxConsumer_DmiProxy
: extends MsgBoxConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(MsgBoxConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  MsgBoxConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, MsgBoxConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  MsgBoxConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : MsgBoxConsumer(formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  MsgBoxConsumer_DmiProxy()
  : MsgBoxConsumer()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  MsgBoxConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter)
  : MsgBoxConsumer(formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  MsgBoxConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : MsgBoxConsumer(formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int getMaxLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::getMaxLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::getMinLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void setMaxLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[9]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::setMaxLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[10]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::setMinLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, MsgBoxConsumer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new MsgBoxConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _MsgBoxConsumer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new MsgBoxConsumer_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _MsgBoxConsumer_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new MsgBoxConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _MsgBoxConsumer_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new MsgBoxConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo MsgBoxConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  MsgBoxConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MsgBoxConsumer_DmiProxy_interfaces[] =
{
  &MsgBoxConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "MsgBoxConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  MsgBoxConsumer::clazzInfo(), // returnType
  "_0_MsgBoxConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  MsgBoxConsumer_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  MsgBoxConsumer_DmiProxy::_MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods__MsgBoxConsumer_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "MsgBoxConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  MsgBoxConsumer::clazzInfo(), // returnType
  "_1_MsgBoxConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  MsgBoxConsumer_methods__MsgBoxConsumer_args,
  0, // argumentCount
  0, // excpetions,
  MsgBoxConsumer_DmiProxy::_MsgBoxConsumer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_args[] = 
{
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "MsgBoxConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  MsgBoxConsumer::clazzInfo(), // returnType
  "_2_MsgBoxConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  MsgBoxConsumer_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  MsgBoxConsumer_DmiProxy::_MsgBoxConsumer_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* MsgBoxConsumer_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_args[] = 
{
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_arg_formatter,
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "MsgBoxConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  MsgBoxConsumer::clazzInfo(), // returnType
  "_3_MsgBoxConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  MsgBoxConsumer_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  MsgBoxConsumer_DmiProxy::_MsgBoxConsumer_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* MsgBoxConsumer_methods[] = 
{
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I_I,
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer,
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter,
  &MsgBoxConsumer_DmiProxy_methods__MsgBoxConsumer_in_acdk_util_logging_Formatter_I,
  0
};

::acdk::lang::dmi::ClazzInfo* MsgBoxConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "MsgBoxConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _MsgBoxConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     MsgBoxConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_MsgBoxConsumer_DmiProxy(MsgBoxConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class RollingFileConsumer_DmiProxy
: extends RollingFileConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(RollingFileConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  RollingFileConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, RollingFileConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  RollingFileConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll, bool buffered)
  : RollingFileConsumer(formatter, minll, maxll, buffered)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy()
  : RollingFileConsumer()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter)
  : RollingFileConsumer(formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : RollingFileConsumer(formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : RollingFileConsumer(formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy(IN(::acdk::lang::RString) fnameBase, int maxBackupIndex, int maxRecordNum, IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll, bool buffered)
  : RollingFileConsumer(fnameBase, maxBackupIndex, maxRecordNum, formatter, minll, maxll, buffered)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy(IN(::acdk::lang::RString) fnameBase, int maxBackupIndex, int maxRecordNum)
  : RollingFileConsumer(fnameBase, maxBackupIndex, maxRecordNum)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy(IN(::acdk::lang::RString) fnameBase, int maxBackupIndex, int maxRecordNum, IN(::acdk::util::logging::RFormatter) formatter)
  : RollingFileConsumer(fnameBase, maxBackupIndex, maxRecordNum, formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy(IN(::acdk::lang::RString) fnameBase, int maxBackupIndex, int maxRecordNum, IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : RollingFileConsumer(fnameBase, maxBackupIndex, maxRecordNum, formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  RollingFileConsumer_DmiProxy(IN(::acdk::lang::RString) fnameBase, int maxBackupIndex, int maxRecordNum, IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : RollingFileConsumer(fnameBase, maxBackupIndex, maxRecordNum, formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int getMaxLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::getMaxLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::getMinLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void setMaxLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[9]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::setMaxLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[10]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::setMinLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, RollingFileConsumer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), args[3].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (::acdk::util::logging::RFormatter)args[3].getObjectVar(), args[4].getIntVar(), args[5].getIntVar(), args[6].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_lang_String_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (::acdk::util::logging::RFormatter)args[3].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (::acdk::util::logging::RFormatter)args[3].getObjectVar(), args[4].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new RollingFileConsumer_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar(), (::acdk::util::logging::RFormatter)args[3].getObjectVar(), args[4].getIntVar(), args[5].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo RollingFileConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RollingFileConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RollingFileConsumer_DmiProxy_interfaces[] =
{
  &RollingFileConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_buffered =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "buffered",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_formatter,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_minll,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_maxll,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_arg_buffered,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_0_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_1_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_2_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_arg_formatter,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_3_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_4_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_fnameBase =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fnameBase",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_maxBackupIndex =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxBackupIndex",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_maxRecordNum =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxRecordNum",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_buffered =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "buffered",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_fnameBase,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_maxBackupIndex,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_maxRecordNum,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_formatter,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_minll,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_maxll,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_arg_buffered,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_5_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_arg_fnameBase =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fnameBase",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_arg_maxBackupIndex =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxBackupIndex",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_arg_maxRecordNum =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxRecordNum",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_arg_fnameBase,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_arg_maxBackupIndex,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_arg_maxRecordNum,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_6_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_lang_String_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_arg_fnameBase =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fnameBase",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_arg_maxBackupIndex =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxBackupIndex",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_arg_maxRecordNum =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxRecordNum",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_arg_fnameBase,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_arg_maxBackupIndex,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_arg_maxRecordNum,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_7_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_fnameBase =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fnameBase",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_maxBackupIndex =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxBackupIndex",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_maxRecordNum =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxRecordNum",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_fnameBase,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_maxBackupIndex,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_maxRecordNum,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_formatter,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_8_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_fnameBase =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "fnameBase",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_maxBackupIndex =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxBackupIndex",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_maxRecordNum =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "maxRecordNum",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_fnameBase,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_maxBackupIndex,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_maxRecordNum,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "RollingFileConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  RollingFileConsumer::clazzInfo(), // returnType
  "_9_RollingFileConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  RollingFileConsumer_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  RollingFileConsumer_DmiProxy::_RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* RollingFileConsumer_methods[] = 
{
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I_Z,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_util_logging_Formatter_I_I,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I_Z,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I,
  &RollingFileConsumer_DmiProxy_methods__RollingFileConsumer_in_acdk_lang_String_I_I_in_acdk_util_logging_Formatter_I_I,
  0
};

::acdk::lang::dmi::ClazzInfo* RollingFileConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "RollingFileConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _RollingFileConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     RollingFileConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_RollingFileConsumer_DmiProxy(RollingFileConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class SimpleFormatter_DmiProxy
: extends SimpleFormatter
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(SimpleFormatter)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  SimpleFormatter::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, SimpleFormatter)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  SimpleFormatter_DmiProxy()
  : SimpleFormatter()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RString format(IN(::acdk::util::logging::RLogRecord) rec)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[2]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::format(rec);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("format", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void format(IN(::acdk::util::logging::RLogRecord) rec, IN(::acdk::io::RCharWriter) out)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[3]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::format(rec, out);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    __acdk_args[1] = ::acdk::lang::inOf(out);
    _dmiProxyGetTarget()->standardDispatch("format", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RString getFooter()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::getFooter();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFooter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::lang::RString getHeader()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, SimpleFormatter)::getHeader();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getHeader", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _SimpleFormatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new SimpleFormatter_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo SimpleFormatter_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SimpleFormatter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SimpleFormatter_DmiProxy_interfaces[] =
{
  &SimpleFormatter_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SimpleFormatter_methods__SimpleFormatter_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SimpleFormatter_DmiProxy_methods__SimpleFormatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "SimpleFormatter_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  SimpleFormatter::clazzInfo(), // returnType
  "_0_SimpleFormatter_DmiProxy", // altname
  -1, // altnamehashCode
  SimpleFormatter_methods__SimpleFormatter_args,
  0, // argumentCount
  0, // excpetions,
  SimpleFormatter_DmiProxy::_SimpleFormatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* SimpleFormatter_methods[] = 
{
  &SimpleFormatter_DmiProxy_methods__SimpleFormatter,
  0
};

::acdk::lang::dmi::ClazzInfo* SimpleFormatter_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "SimpleFormatter_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _SimpleFormatter_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     SimpleFormatter_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_SimpleFormatter_DmiProxy(SimpleFormatter_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class StdFormatter_DmiProxy
: extends StdFormatter
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(StdFormatter)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  StdFormatter::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, StdFormatter)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  StdFormatter_DmiProxy()
  : StdFormatter()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RString format(IN(::acdk::util::logging::RLogRecord) rec)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[2]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::format(rec);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("format", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void format(IN(::acdk::util::logging::RLogRecord) rec, IN(::acdk::io::RCharWriter) out)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[3]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::format(rec, out);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    __acdk_args[1] = ::acdk::lang::inOf(out);
    _dmiProxyGetTarget()->standardDispatch("format", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RString getFooter()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::getFooter();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFooter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::lang::RString getHeader()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, StdFormatter)::getHeader();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getHeader", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StdFormatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StdFormatter_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo StdFormatter_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  StdFormatter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StdFormatter_DmiProxy_interfaces[] =
{
  &StdFormatter_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StdFormatter_methods__StdFormatter_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StdFormatter_DmiProxy_methods__StdFormatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "StdFormatter_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StdFormatter::clazzInfo(), // returnType
  "_0_StdFormatter_DmiProxy", // altname
  -1, // altnamehashCode
  StdFormatter_methods__StdFormatter_args,
  0, // argumentCount
  0, // excpetions,
  StdFormatter_DmiProxy::_StdFormatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* StdFormatter_methods[] = 
{
  &StdFormatter_DmiProxy_methods__StdFormatter,
  0
};

::acdk::lang::dmi::ClazzInfo* StdFormatter_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "StdFormatter_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _StdFormatter_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     StdFormatter_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_StdFormatter_DmiProxy(StdFormatter_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class TransactionConsumer_DmiProxy
: extends TransactionConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(TransactionConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  TransactionConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, TransactionConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  TransactionConsumer_DmiProxy(IN(::acdk::util::logging::RLogConsumer) consumer, int rollBackMinLevel)
  : TransactionConsumer(consumer, rollBackMinLevel)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int getMaxLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::getMaxLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::getMinLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void setMaxLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[9]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::setMaxLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[10]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::setMinLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, TransactionConsumer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _TransactionConsumer_in_acdk_util_logging_LogConsumer_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new TransactionConsumer_DmiProxy((::acdk::util::logging::RLogConsumer)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo TransactionConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TransactionConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TransactionConsumer_DmiProxy_interfaces[] =
{
  &TransactionConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo TransactionConsumer_DmiProxy_methods__TransactionConsumer_in_acdk_util_logging_LogConsumer_I_arg_consumer =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "consumer",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::LogConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo TransactionConsumer_DmiProxy_methods__TransactionConsumer_in_acdk_util_logging_LogConsumer_I_arg_rollBackMinLevel =
{
  ::acdk::lang::dmi::MiMethodArgInfo,
  0, //AttributesRes
  "rollBackMinLevel",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* TransactionConsumer_methods__TransactionConsumer_in_acdk_util_logging_LogConsumer_I_args[] = 
{
  &TransactionConsumer_DmiProxy_methods__TransactionConsumer_in_acdk_util_logging_LogConsumer_I_arg_consumer,
  &TransactionConsumer_DmiProxy_methods__TransactionConsumer_in_acdk_util_logging_LogConsumer_I_arg_rollBackMinLevel,
  0
};

::acdk::lang::dmi::ClazzMethodInfo TransactionConsumer_DmiProxy_methods__TransactionConsumer_in_acdk_util_logging_LogConsumer_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "TransactionConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  TransactionConsumer::clazzInfo(), // returnType
  "_0_TransactionConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  TransactionConsumer_methods__TransactionConsumer_in_acdk_util_logging_LogConsumer_I_args,
  0, // argumentCount
  0, // excpetions,
  TransactionConsumer_DmiProxy::_TransactionConsumer_in_acdk_util_logging_LogConsumer_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* TransactionConsumer_methods[] = 
{
  &TransactionConsumer_DmiProxy_methods__TransactionConsumer_in_acdk_util_logging_LogConsumer_I,
  0
};

::acdk::lang::dmi::ClazzInfo* TransactionConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "TransactionConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _TransactionConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     TransactionConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_TransactionConsumer_DmiProxy(TransactionConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class Win32DbgFormatter_DmiProxy
: extends Win32DbgFormatter
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Win32DbgFormatter)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Win32DbgFormatter::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, Win32DbgFormatter)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Win32DbgFormatter_DmiProxy()
  : Win32DbgFormatter()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RString format(IN(::acdk::util::logging::RLogRecord) rec)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[2]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::format(rec);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("format", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void format(IN(::acdk::util::logging::RLogRecord) rec, IN(::acdk::io::RCharWriter) out)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[3]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::format(rec, out);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    __acdk_args[1] = ::acdk::lang::inOf(out);
    _dmiProxyGetTarget()->standardDispatch("format", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RString getFooter()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::getFooter();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFooter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  ::acdk::lang::RString getHeader()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Formatter)::clazzInfo()->methods[5]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgFormatter)::getHeader();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getHeader", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Win32DbgFormatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Win32DbgFormatter_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Win32DbgFormatter_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Win32DbgFormatter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Win32DbgFormatter_DmiProxy_interfaces[] =
{
  &Win32DbgFormatter_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgFormatter_methods__Win32DbgFormatter_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgFormatter_DmiProxy_methods__Win32DbgFormatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Win32DbgFormatter_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Win32DbgFormatter::clazzInfo(), // returnType
  "_0_Win32DbgFormatter_DmiProxy", // altname
  -1, // altnamehashCode
  Win32DbgFormatter_methods__Win32DbgFormatter_args,
  0, // argumentCount
  0, // excpetions,
  Win32DbgFormatter_DmiProxy::_Win32DbgFormatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Win32DbgFormatter_methods[] = 
{
  &Win32DbgFormatter_DmiProxy_methods__Win32DbgFormatter,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgFormatter_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Win32DbgFormatter_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Win32DbgFormatter_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Win32DbgFormatter_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Win32DbgFormatter_DmiProxy(Win32DbgFormatter_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class Win32DbgConsumer_DmiProxy
: extends Win32DbgConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(Win32DbgConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  Win32DbgConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, Win32DbgConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  Win32DbgConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : Win32DbgConsumer(formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Win32DbgConsumer_DmiProxy()
  : Win32DbgConsumer()
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Win32DbgConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter)
  : Win32DbgConsumer(formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  Win32DbgConsumer_DmiProxy(IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : Win32DbgConsumer(formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int getMaxLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::getMaxLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::getMinLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void setMaxLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[9]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::setMaxLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[10]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::setMinLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, Win32DbgConsumer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Win32DbgConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar(), args[2].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Win32DbgConsumer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Win32DbgConsumer_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Win32DbgConsumer_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Win32DbgConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _Win32DbgConsumer_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new Win32DbgConsumer_DmiProxy((::acdk::util::logging::RFormatter)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo Win32DbgConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  Win32DbgConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _Win32DbgConsumer_DmiProxy_interfaces[] =
{
  &Win32DbgConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "Win32DbgConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Win32DbgConsumer::clazzInfo(), // returnType
  "_0_Win32DbgConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  Win32DbgConsumer_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  Win32DbgConsumer_DmiProxy::_Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods__Win32DbgConsumer_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Win32DbgConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Win32DbgConsumer::clazzInfo(), // returnType
  "_1_Win32DbgConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  Win32DbgConsumer_methods__Win32DbgConsumer_args,
  0, // argumentCount
  0, // excpetions,
  Win32DbgConsumer_DmiProxy::_Win32DbgConsumer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_args[] = 
{
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Win32DbgConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Win32DbgConsumer::clazzInfo(), // returnType
  "_2_Win32DbgConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  Win32DbgConsumer_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  Win32DbgConsumer_DmiProxy::_Win32DbgConsumer_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* Win32DbgConsumer_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_args[] = 
{
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_arg_formatter,
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "Win32DbgConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  Win32DbgConsumer::clazzInfo(), // returnType
  "_3_Win32DbgConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  Win32DbgConsumer_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  Win32DbgConsumer_DmiProxy::_Win32DbgConsumer_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* Win32DbgConsumer_methods[] = 
{
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I_I,
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer,
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter,
  &Win32DbgConsumer_DmiProxy_methods__Win32DbgConsumer_in_acdk_util_logging_Formatter_I,
  0
};

::acdk::lang::dmi::ClazzInfo* Win32DbgConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "Win32DbgConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _Win32DbgConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     Win32DbgConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_Win32DbgConsumer_DmiProxy(Win32DbgConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging


namespace acdk { 
namespace util { 
namespace logging { 

class WriterConsumer_DmiProxy
: extends WriterConsumer
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(WriterConsumer)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci)
  {
    ::acdk::lang::Object* ret = _dmiProxyCast(ci);
    if (ret != 0)
      return ret;
    ret =  WriterConsumer::_cast(ci);
    return ret;
  }
  virtual void getCollectableFields(FieldReferences& fields)
  {
    ACDK_FQ_SUPER_QUALIFIER(acdk::util::logging::, WriterConsumer)::getCollectableFields(fields);
    fields.push_back((::acdk::lang::RObject*)_dmiTarget._ref_this());
  }
  virtual bool _gc_releaseRef(bool force = false) const { return ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_gc_releaseRef(this); }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  WriterConsumer_DmiProxy(IN(::acdk::io::RWriter) out, IN(::acdk::util::logging::RFormatter) formatter, int minll, int maxll)
  : WriterConsumer(out, formatter, minll, maxll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  WriterConsumer_DmiProxy(IN(::acdk::io::RWriter) out)
  : WriterConsumer(out)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  WriterConsumer_DmiProxy(IN(::acdk::io::RWriter) out, IN(::acdk::util::logging::RFormatter) formatter)
  : WriterConsumer(out, formatter)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  WriterConsumer_DmiProxy(IN(::acdk::io::RWriter) out, IN(::acdk::util::logging::RFormatter) formatter, int minll)
  : WriterConsumer(out, formatter, minll)
  {
     clazzInfo()->_resolveSupers(true, false);
     ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::dmi::, DmiProxyBase)::_initThis(this);
  }
  int getMaxLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::getMaxLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  int getMinLevel()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[7]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::getMinLevel();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void setMaxLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[9]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::setMaxLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMaxLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setMinLevel(int mn)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, AbstractLogConsumer)::clazzInfo()->methods[10]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::setMinLevel(mn);
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(mn);
    _dmiProxyGetTarget()->standardDispatch("setMinLevel", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RObject clone()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[3]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::clone();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("clone", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RObject)(::acdk::lang::RObject)__acdk_retval;
  }
  int compareTo(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[4]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::compareTo(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("compareTo", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  bool equals(IN(::acdk::lang::RObject) o)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[6]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::equals(o);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(o);
    _dmiProxyGetTarget()->standardDispatch("equals", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  void finalize()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[7]) == false)
    {
      ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::finalize();
      return;
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("finalize", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::lang::RClass getClass()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[8]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::getClass();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getClass", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RClass)(::acdk::lang::RObject)__acdk_retval;
  }
  int hashCode()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[9]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::hashCode();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("hashCode", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  ::acdk::lang::RString toString()
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::clazzInfo()->methods[15]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::util::logging::, WriterConsumer)::toString();
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("toString", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::lang::RString)(::acdk::lang::RObject)__acdk_retval;
  }
  void configure(IN(::acdk::lang::RString) propnameprefix, IN(::acdk::util::RProperties) props)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(2);
    __acdk_args[0] = ::acdk::lang::inOf(propnameprefix);
    __acdk_args[1] = ::acdk::lang::inOf(props);
    _dmiProxyGetTarget()->standardDispatch("configure", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  ::acdk::util::logging::RFormatter getFormatter()
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(0);
    _dmiProxyGetTarget()->standardDispatch("getFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return (::acdk::util::logging::RFormatter)(::acdk::lang::RObject)__acdk_retval;
  }
  void publish(IN(::acdk::util::logging::RLogRecord) rec)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(rec);
    _dmiProxyGetTarget()->standardDispatch("publish", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  void setFormatter(IN(::acdk::util::logging::RFormatter) formatter)
  {
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(formatter);
    _dmiProxyGetTarget()->standardDispatch("setFormatter", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new WriterConsumer_DmiProxy((::acdk::io::RWriter)args[0].getObjectVar(), (::acdk::util::logging::RFormatter)args[1].getObjectVar(), args[2].getIntVar(), args[3].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _WriterConsumer_in_acdk_io_Writer_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new WriterConsumer_DmiProxy((::acdk::io::RWriter)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new WriterConsumer_DmiProxy((::acdk::io::RWriter)args[0].getObjectVar(), (::acdk::util::logging::RFormatter)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new WriterConsumer_DmiProxy((::acdk::io::RWriter)args[0].getObjectVar(), (::acdk::util::logging::RFormatter)args[1].getObjectVar(), args[2].getIntVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo WriterConsumer_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  WriterConsumer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _WriterConsumer_DmiProxy_interfaces[] =
{
  &WriterConsumer_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_arg_out =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "out",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::Writer::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_arg_maxll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "maxll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_args[] = 
{
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_arg_out,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_arg_formatter,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_arg_minll,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_arg_maxll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "WriterConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  WriterConsumer::clazzInfo(), // returnType
  "_0_WriterConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  WriterConsumer_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_args,
  0, // argumentCount
  0, // excpetions,
  WriterConsumer_DmiProxy::_WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_arg_out =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "out",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::Writer::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods__WriterConsumer_in_acdk_io_Writer_args[] = 
{
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_arg_out,
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "WriterConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  WriterConsumer::clazzInfo(), // returnType
  "_1_WriterConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  WriterConsumer_methods__WriterConsumer_in_acdk_io_Writer_args,
  0, // argumentCount
  0, // excpetions,
  WriterConsumer_DmiProxy::_WriterConsumer_in_acdk_io_Writer_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_arg_out =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "out",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::Writer::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_args[] = 
{
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_arg_out,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_arg_formatter,
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "WriterConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  WriterConsumer::clazzInfo(), // returnType
  "_2_WriterConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  WriterConsumer_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_args,
  0, // argumentCount
  0, // excpetions,
  WriterConsumer_DmiProxy::_WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_arg_out =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "out",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::Writer::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_arg_formatter =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "formatter",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::logging::Formatter::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_arg_minll =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "minll",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* WriterConsumer_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_args[] = 
{
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_arg_out,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_arg_formatter,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_arg_minll,
  0
};

::acdk::lang::dmi::ClazzMethodInfo WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "WriterConsumer_DmiProxy",
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  WriterConsumer::clazzInfo(), // returnType
  "_3_WriterConsumer_DmiProxy", // altname
  -1, // altnamehashCode
  WriterConsumer_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_args,
  0, // argumentCount
  0, // excpetions,
  WriterConsumer_DmiProxy::_WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* WriterConsumer_methods[] = 
{
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I_I,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter,
  &WriterConsumer_DmiProxy_methods__WriterConsumer_in_acdk_io_Writer_in_acdk_util_logging_Formatter_I,
  0
};

::acdk::lang::dmi::ClazzInfo* WriterConsumer_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "WriterConsumer_DmiProxy", // name of class
  -1, // hashCode
    "acdk/util/logging", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     0, // _firstChild
     _WriterConsumer_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     WriterConsumer_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_WriterConsumer_DmiProxy(WriterConsumer_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace util
} // namespace logging

