// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "aunit.h"
#include "CfgScriptTestSuite.h"
#include "Config.h"
#include "DmiTestClass.h"
#include "DmiTestException.h"
#include "DmiTestInterface.h"
#include "McConfigTest.h"
#include "ProcessTestSuite.h"
#include "SayHelloInterface.h"
#include "Test.h"
#include "TestCollectorListener.h"
#include "TestConsoleListener.h"
#include "TestDebuggerListener.h"
#include "TestException.h"
#include "TestFailure.h"
#include "TestHtmlReport.h"
#include "TestListener.h"
#include "TestReport.h"
#include "TestResult.h"
#include "TestRunner.h"
#include "TestTextReport.h"
#include "TestUnit.h"

namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _CfgScriptTestCase_super_TestCase =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TestCase::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CfgScriptTestCase_interfaces[] =
{
  &_CfgScriptTestCase_super_TestCase,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestCase::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CfgScriptTestCase", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CfgScriptTestCase_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CfgScriptTestCase::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CfgScriptTestCase(CfgScriptTestCase::clazzInfo());

::acdk::lang::RClass
CfgScriptTestCase::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CfgScriptTestCase::getCollectableFields(FieldReferences& fields)
{
  TestCase::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_scriptFile._ref_this()); // RString _scriptFile 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _CfgScriptTestSuite_super_TestSuite =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TestSuite::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CfgScriptTestSuite_interfaces[] =
{
  &_CfgScriptTestSuite_super_TestSuite,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestSuite::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CfgScriptTestSuite", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CfgScriptTestSuite_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CfgScriptTestSuite::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CfgScriptTestSuite(CfgScriptTestSuite::clazzInfo());

::acdk::lang::RClass
CfgScriptTestSuite::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CfgScriptTestSuite::getCollectableFields(FieldReferences& fields)
{
  TestSuite::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_directory._ref_this()); // RString _directory 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


::acdk::lang::dmi::ClazzEnumValueInfo DmiTestEnumeration_EnumValue1 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "EnumValue1", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::EnumValue1, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DmiTestEnumeration_EnumValue2 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "EnumValue2", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::EnumValue2, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DmiTestEnumeration_EnumValue3 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "EnumValue3", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::EnumValue3, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo DmiTestEnumeration_EnumValue4 = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "EnumValue4", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::EnumValue4, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* DmiTestEnumeration_enumValues[] = {
  &DmiTestEnumeration_EnumValue1,
  &DmiTestEnumeration_EnumValue2,
  &DmiTestEnumeration_EnumValue3,
  &DmiTestEnumeration_EnumValue4,
0
};

::acdk::lang::dmi::ClazzEnumInfo* DmiTestEnumerationMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo DmiTestEnumeration_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "DmiTestEnumeration", // name
  -1, // hashCode
  "acdk/tools/aunit", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTestEnumeration_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_DmiTestEnumeration(&DmiTestEnumeration_enumInfo);

  return &DmiTestEnumeration_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_DmiTestEnumerationEnumInfo(DmiTestEnumerationMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _DmiTestClass_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DmiTestClass_interfaces[] =
{
  &_DmiTestClass_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DmiTestClass", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DmiTestClass_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 11, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DmiTestClass::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DmiTestClass(DmiTestClass::clazzInfo());

::acdk::lang::RClass
DmiTestClass::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DmiTestClass::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->privInteger._ref_this()); // RInteger privInteger 
  fields.push_back((::acdk::lang::RObject*)this->privString._ref_this()); // RString privString 
  fields.push_back((::acdk::lang::RObject*)this->pubInteger._ref_this()); // RInteger pubInteger 
  fields.push_back((::acdk::lang::RObject*)this->pubObject._ref_this()); // RObject pubObject 
  fields.push_back((::acdk::lang::RObject*)this->pubSet._ref_this()); // acdk::util::RSet pubSet 
  fields.push_back((::acdk::lang::RObject*)this->pubString._ref_this()); // RString pubString 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _DmiTestException_super___acdk__lang__RuntimeException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::RuntimeException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DmiTestException_interfaces[] =
{
  &_DmiTestException_super___acdk__lang__RuntimeException,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "DmiTestException", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DmiTestException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DmiTestException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DmiTestException(DmiTestException::clazzInfo());

::acdk::lang::RClass
DmiTestException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DmiTestException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, RuntimeException)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_causedObject._ref_this()); // RObject _causedObject 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo* _DmiTestInterface_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestInterface::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DmiTestInterface", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DmiTestInterface_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DmiTestInterface::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DmiTestInterface(DmiTestInterface::clazzInfo());

::acdk::lang::RClass
DmiTestInterface::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DmiTestInterface::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _McConfigTest_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _McConfigTest_interfaces[] =
{
  &_McConfigTest_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* McConfigTest::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "McConfigTest", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _McConfigTest_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    McConfigTest::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_McConfigTest(McConfigTest::clazzInfo());

::acdk::lang::RClass
McConfigTest::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
McConfigTest::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _ProcessTestSuite_super_TestSuite =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TestSuite::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ProcessTestSuite_interfaces[] =
{
  &_ProcessTestSuite_super_TestSuite,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ProcessTestSuite", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ProcessTestSuite_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ProcessTestSuite::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ProcessTestSuite(ProcessTestSuite::clazzInfo());

::acdk::lang::RClass
ProcessTestSuite::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ProcessTestSuite::getCollectableFields(FieldReferences& fields)
{
  TestSuite::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cerr._ref_this()); // acdk::io::RCharWriter _cerr 
  fields.push_back((::acdk::lang::RObject*)this->_cout._ref_this()); // acdk::io::RCharWriter _cout 
  fields.push_back((::acdk::lang::RObject*)this->_env._ref_this()); // acdk::util::RProperties _env 
  fields.push_back((::acdk::lang::RObject*)this->_executable._ref_this()); // RString _executable 
  fields.push_back((::acdk::lang::RObject*)this->_testName._ref_this()); // RString _testName 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _ProcessTestCase_super_TestCase =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TestCase::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ProcessTestCase_interfaces[] =
{
  &_ProcessTestCase_super_TestCase,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ProcessTestCase", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ProcessTestCase_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 5, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ProcessTestCase::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ProcessTestCase(ProcessTestCase::clazzInfo());

::acdk::lang::RClass
ProcessTestCase::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ProcessTestCase::getCollectableFields(FieldReferences& fields)
{
  TestCase::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cerr._ref_this()); // acdk::io::RCharWriter _cerr 
  fields.push_back((::acdk::lang::RObject*)this->_cout._ref_this()); // acdk::io::RCharWriter _cout 
  fields.push_back((::acdk::lang::RObject*)this->_env._ref_this()); // acdk::util::RProperties _env 
  fields.push_back((::acdk::lang::RObject*)this->_executable._ref_this()); // RString _executable 
  fields.push_back((::acdk::lang::RObject*)this->_testName._ref_this()); // RString _testName 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo* _SayHelloInterface_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* SayHelloInterface::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "SayHelloInterface", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SayHelloInterface_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SayHelloInterface::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SayHelloInterface(SayHelloInterface::clazzInfo());

::acdk::lang::RClass
SayHelloInterface::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SayHelloInterface::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _SayHelloInterfaceImpl_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SayHelloInterfaceImpl_super_SayHelloInterface =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  SayHelloInterface::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SayHelloInterfaceImpl_interfaces[] =
{
  &_SayHelloInterfaceImpl_super_acdk__lang__Object,
  &_SayHelloInterfaceImpl_super_SayHelloInterface,
  0
};

::acdk::lang::dmi::ClazzInfo* SayHelloInterfaceImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SayHelloInterfaceImpl", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SayHelloInterfaceImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SayHelloInterfaceImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SayHelloInterfaceImpl(SayHelloInterfaceImpl::clazzInfo());

::acdk::lang::RClass
SayHelloInterfaceImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SayHelloInterfaceImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo* _Test_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Test::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Test", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Test_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Test::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Test(Test::clazzInfo());

::acdk::lang::RClass
Test::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Test::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestCollectorListener_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestCollectorListener_super_TestListener =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  TestListener::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestCollectorListener_interfaces[] =
{
  &_TestCollectorListener_super_acdk__lang__Object,
  &_TestCollectorListener_super_TestListener,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestCollectorListener", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestCollectorListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestCollectorListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestCollectorListener(TestCollectorListener::clazzInfo());

::acdk::lang::RClass
TestCollectorListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestCollectorListener::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_err._ref_this()); // acdk::io::RStringWriter _err 
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // acdk::io::RStringWriter _out 
  fields.push_back((::acdk::lang::RObject*)this->_results._ref_this()); // RTestResultEntryArray _results 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestConsoleListener_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestConsoleListener_super_TestListener =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  TestListener::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestConsoleListener_interfaces[] =
{
  &_TestConsoleListener_super_acdk__lang__Object,
  &_TestConsoleListener_super_TestListener,
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestConsoleListener", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestConsoleListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestConsoleListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestConsoleListener(TestConsoleListener::clazzInfo());

::acdk::lang::RClass
TestConsoleListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestConsoleListener::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // acdk::io::RPrintWriter _out 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestDebuggerListener_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestDebuggerListener_super_TestListener =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  TestListener::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestDebuggerListener_interfaces[] =
{
  &_TestDebuggerListener_super_acdk__lang__Object,
  &_TestDebuggerListener_super_TestListener,
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestDebuggerListener", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestDebuggerListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestDebuggerListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestDebuggerListener(TestDebuggerListener::clazzInfo());

::acdk::lang::RClass
TestDebuggerListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestDebuggerListener::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // acdk::io::RPrintWriter _out 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestExpression_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestExpression_interfaces[] =
{
  &_TestExpression_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TestExpression::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestExpression", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestExpression_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestExpression::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestExpression(TestExpression::clazzInfo());

::acdk::lang::RClass
TestExpression::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestExpression::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->expression._ref_this()); // RString expression 
  fields.push_back((::acdk::lang::RObject*)this->fileName._ref_this()); // RString fileName 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestException_super___acdk__lang__Throwable =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Throwable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestException_interfaces[] =
{
  &_TestException_super___acdk__lang__Throwable,
  0
};

::acdk::lang::dmi::ClazzInfo* TestException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestException", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestException(TestException::clazzInfo());

::acdk::lang::RClass
TestException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Throwable)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_testExpr._ref_this()); // RTestExpression _testExpr 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestFailure_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestFailure_interfaces[] =
{
  &_TestFailure_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TestFailure::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestFailure", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestFailure_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestFailure::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestFailure(TestFailure::clazzInfo());

::acdk::lang::RClass
TestFailure::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestFailure::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_failedTest._ref_this()); // RTest _failedTest 
  fields.push_back((::acdk::lang::RObject*)this->_thrownException._ref_this()); // RThrowable _thrownException 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestHtmlReport_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestHtmlReport_super_TestReport =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  TestReport::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestHtmlReport_interfaces[] =
{
  &_TestHtmlReport_super_acdk__lang__Object,
  &_TestHtmlReport_super_TestReport,
  0
};

::acdk::lang::dmi::ClazzInfo* TestHtmlReport::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestHtmlReport", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestHtmlReport_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestHtmlReport::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestHtmlReport(TestHtmlReport::clazzInfo());

::acdk::lang::RClass
TestHtmlReport::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestHtmlReport::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // acdk::io::RPrintWriter _out 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo* _TestListener_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestListener::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "TestListener", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestListener_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestListener::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestListener(TestListener::clazzInfo());

::acdk::lang::RClass
TestListener::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestListener::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


::acdk::lang::dmi::ClazzEnumValueInfo TestReportOptions_ReportAllSummary = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReportAllSummary", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::ReportAllSummary, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TestReportOptions_ReportTestSummary = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReportTestSummary", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::ReportTestSummary, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TestReportOptions_ReportTestDetails = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReportTestDetails", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::ReportTestDetails, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TestReportOptions_ReportTestSuccess = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReportTestSuccess", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::ReportTestSuccess, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TestReportOptions_ReportStatistics = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReportStatistics", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::ReportStatistics, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo TestReportOptions_ReportStartEndTest = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "ReportStartEndTest", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::tools::aunit::ReportStartEndTest, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* TestReportOptions_enumValues[] = {
  &TestReportOptions_ReportAllSummary,
  &TestReportOptions_ReportTestSummary,
  &TestReportOptions_ReportTestDetails,
  &TestReportOptions_ReportTestSuccess,
  &TestReportOptions_ReportStatistics,
  &TestReportOptions_ReportStartEndTest,
0
};

::acdk::lang::dmi::ClazzEnumInfo* TestReportOptionsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo TestReportOptions_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "TestReportOptions", // name
  -1, // hashCode
  "acdk/tools/aunit", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestReportOptions_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_TestReportOptions(&TestReportOptions_enumInfo);

  return &TestReportOptions_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_TestReportOptionsEnumInfo(TestReportOptionsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestResultEntry_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestResultEntry_super_Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestResultEntry_interfaces[] =
{
  &_TestResultEntry_super_acdk__lang__Object,
  &_TestResultEntry_super_Comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResultEntry::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestResultEntry", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestResultEntry_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 6, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestResultEntry::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestResultEntry(TestResultEntry::clazzInfo());

::acdk::lang::RClass
TestResultEntry::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestResultEntry::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->errors._ref_this()); // RThrowableArray errors 
  fields.push_back((::acdk::lang::RObject*)this->errput._ref_this()); // RString errput 
  fields.push_back((::acdk::lang::RObject*)this->failures._ref_this()); // RTestExceptionArray failures 
  fields.push_back((::acdk::lang::RObject*)this->output._ref_this()); // RString output 
  fields.push_back((::acdk::lang::RObject*)this->success._ref_this()); // RTestExpressionArray success 
  fields.push_back((::acdk::lang::RObject*)this->test._ref_this()); // RTest test 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo* _TestReport_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestReport::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "TestReport", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestReport_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestReport::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestReport(TestReport::clazzInfo());

::acdk::lang::RClass
TestReport::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestReport::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestResult_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestResult_interfaces[] =
{
  &_TestResult_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestResult", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestResult_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestResult::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestResult(TestResult::clazzInfo());

::acdk::lang::RClass
TestResult::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestResult::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_listener._ref_this()); // RTestListenerArray _listener 
  fields.push_back((::acdk::lang::RObject*)this->_testCollector._ref_this()); // RTestCollectorListener _testCollector 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestTextReport_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestTextReport_super_TestReport =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  TestReport::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestTextReport_interfaces[] =
{
  &_TestTextReport_super_acdk__lang__Object,
  &_TestTextReport_super_TestReport,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTextReport::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestTextReport", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestTextReport_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestTextReport::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestTextReport(TestTextReport::clazzInfo());

::acdk::lang::RClass
TestTextReport::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestTextReport::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // acdk::io::RPrintWriter _out 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestCase_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestCase_super_Test =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Test::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestCase_interfaces[] =
{
  &_TestCase_super___acdk__lang__Object,
  &_TestCase_super_Test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "TestCase", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestCase_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestCase::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestCase(TestCase::clazzInfo());

::acdk::lang::RClass
TestCase::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestCase::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_activeResult._ref_this()); // RTestResult _activeResult 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
}


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 

::acdk::lang::dmi::ClazzSuperInfo _TestSuite_super_TestCase =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  TestCase::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TestSuite_super_Test =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Test::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TestSuite_interfaces[] =
{
  &_TestSuite_super_TestCase,
  &_TestSuite_super_Test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TestSuite", // name of class
  -1, // hashCode
  "acdk/tools/aunit", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TestSuite_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TestSuite::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TestSuite(TestSuite::clazzInfo());

::acdk::lang::RClass
TestSuite::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TestSuite::getCollectableFields(FieldReferences& fields)
{
  TestCase::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_tests._ref_this()); // RTestArray _tests 
}


} // namespace acdk
} // namespace tools
} // namespace aunit

