// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../mc.h"
#include "../ArgumentInfo.h"
#include "../ClassInfo.h"
#include "../ClassInitAttribute.h"
#include "../ClazzFlagAttribute.h"
#include "../ClazzNameAttribute.h"
#include "../CMCException.h"
#include "../CodeAttribute.h"
#include "../CodeInfo.h"
#include "../Config.h"
#include "../DispatchForwardAttributeTest.h"
#include "../DmiProxyAttribute.h"
#include "../DmiProxyGenerator.h"
#include "../DmiProxyGeneratorExt.h"
#include "../EnumArgAttribute.h"
#include "../EnumInfo.h"
#include "../FieldInfo.h"
#include "../InvokeForwardAttribute.h"
#include "../mc.h"
#include "../McConfigAttribute.h"
#include "../MetaCompiler.h"
#include "../MethodAltNameAttribute.h"
#include "../MethodInfo.h"
#include "../ModuleInfo.h"
#include "../SetDispatchAttribute.h"
#include "../StringTagAttribute.h"
#include "../SuperInfo.h"
#include "../ThrowableAttribute.h"
#include "../TokenStack.h"
#include "../TypeScope.h"
#include "../UnitInfo.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_tools_mc_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "mc", // name of unit
  -1, // hashCode
  "acdk/tools", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_tools_mc_unitInfo(&acdk_tools_mc_unitInfo);


struct _ModuleInitializer1
{
  _ModuleInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&acdk_tools_mc_unitInfo, "acdkx_orb_UnitInclude1", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("acdk_core.idl", false));
  }
};

static _ModuleInitializer1 _ModuleInitializer1_instance;



namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
ClassInitAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RClassInitAttribute>(length);
}

//static
::acdk::lang::RObject
ClassInitAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClassInitAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassInitAttribute_method_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassInitAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassInitAttribute_method_ClassInitAttribute__LRClassInitAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassInitAttribute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassInitAttribute_method_ClassInitAttribute_INLRString__LRClassInitAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClassInitAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassInitAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClassInitAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClassInitAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClassInitAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClassInitAttribute_fields__deinitFunction_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClassInitAttribute* This = dmi_cast<ClassInitAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_deinitFunction, flags);
    else
      This->_deinitFunction = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClassInitAttribute_fields__initFunction_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClassInitAttribute* This = dmi_cast<ClassInitAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_initFunction, flags);
    else
      This->_initFunction = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ClassInitAttribute_fields__deinitFunction = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_deinitFunction", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ClassInitAttribute_MetainfoWrapper::ClassInitAttribute_fields__deinitFunction_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ClassInitAttribute_fields__initFunction = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_initFunction", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ClassInitAttribute_MetainfoWrapper::ClassInitAttribute_fields__initFunction_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ClassInitAttribute_fields[] = 
{
  &ClassInitAttribute_fields__deinitFunction,
  &ClassInitAttribute_fields__initFunction,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassInitAttribute_methods_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__arg_initFunction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initFunction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassInitAttribute_methods_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__arg_deinitFunction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "deinitFunction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassInitAttribute_methods_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__args[] = 
{
  &ClassInitAttribute_methods_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__arg_initFunction,
  &ClassInitAttribute_methods_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__arg_deinitFunction,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassInitAttribute_methods_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassInitAttribute_method_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassInitAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassInitAttribute::clazzInfo(), // return type
  "_0_ClassInitAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClassInitAttribute_methods_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__args, // the arguments
  0, //arguments count
  ClassInitAttribute_methods_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__exceptions, // the declared exceptions
  ClassInitAttribute_MetainfoWrapper::ClassInitAttribute_method_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassInitAttribute_methods_ClassInitAttribute__LRClassInitAttribute__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassInitAttribute_methods_ClassInitAttribute__LRClassInitAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassInitAttribute_method_ClassInitAttribute__LRClassInitAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassInitAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassInitAttribute::clazzInfo(), // return type
  "_1_ClassInitAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClassInitAttribute_methods_ClassInitAttribute__LRClassInitAttribute__args, // the arguments
  0, //arguments count
  ClassInitAttribute_methods_ClassInitAttribute__LRClassInitAttribute__exceptions, // the declared exceptions
  ClassInitAttribute_MetainfoWrapper::ClassInitAttribute_method_ClassInitAttribute__LRClassInitAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassInitAttribute_methods_ClassInitAttribute_INLRString__LRClassInitAttribute__arg_initFunction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initFunction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassInitAttribute_methods_ClassInitAttribute_INLRString__LRClassInitAttribute__args[] = 
{
  &ClassInitAttribute_methods_ClassInitAttribute_INLRString__LRClassInitAttribute__arg_initFunction,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassInitAttribute_methods_ClassInitAttribute_INLRString__LRClassInitAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassInitAttribute_method_ClassInitAttribute_INLRString__LRClassInitAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ClassInitAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClassInitAttribute::clazzInfo(), // return type
  "_2_ClassInitAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClassInitAttribute_methods_ClassInitAttribute_INLRString__LRClassInitAttribute__args, // the arguments
  0, //arguments count
  ClassInitAttribute_methods_ClassInitAttribute_INLRString__LRClassInitAttribute__exceptions, // the declared exceptions
  ClassInitAttribute_MetainfoWrapper::ClassInitAttribute_method_ClassInitAttribute_INLRString__LRClassInitAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassInitAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClassInitAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassInitAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ClassInitAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClassInitAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClassInitAttribute_MetainfoWrapper::ClassInitAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassInitAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassInitAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &ClassInitAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassInitAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassInitAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClassInitAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  ClassInitAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  ClassInitAttribute_MetainfoWrapper::ClassInitAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClassInitAttribute_methods[] = 
{
  &ClassInitAttribute_method_ClassInitAttribute_INLRString_INLRString__LRClassInitAttribute_,
  &ClassInitAttribute_method_ClassInitAttribute__LRClassInitAttribute_,
  &ClassInitAttribute_method_ClassInitAttribute_INLRString__LRClassInitAttribute_,
  &ClassInitAttribute_method_GetClass__L_acdk_lang_RClass_,
  &ClassInitAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct ClassInitAttribute_MetaInfoInitializer
{  ClassInitAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClassInitAttribute::clazzInfo();
    ci->fields =  _ClassInitAttribute_fields;
    ci->methods =  _ClassInitAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClassInitAttribute_MetaInfoInitializer ClassInitAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
ClazzFlagAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RClazzFlagAttribute>(length);
}

//static
::acdk::lang::RObject
ClazzFlagAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClazzFlagAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClazzFlagAttribute_method_ClazzFlagAttribute_I_LRClazzFlagAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClazzFlagAttribute(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClazzFlagAttribute_method_ClazzFlagAttribute__LRClazzFlagAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClazzFlagAttribute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClazzFlagAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClazzFlagAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClazzFlagAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClazzFlagAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClazzFlagAttribute_fields__clazzFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClazzFlagAttribute* This = dmi_cast<ClazzFlagAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_clazzFlags, flags);
    else
      This->_clazzFlags = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ClazzFlagAttribute_fields__clazzFlags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_clazzFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ClazzFlagAttribute_MetainfoWrapper::ClazzFlagAttribute_fields__clazzFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ClazzFlagAttribute_fields[] = 
{
  &ClazzFlagAttribute_fields__clazzFlags,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClazzFlagAttribute_methods_ClazzFlagAttribute_I_LRClazzFlagAttribute__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzFlagAttribute_methods_ClazzFlagAttribute_I_LRClazzFlagAttribute__args[] = 
{
  &ClazzFlagAttribute_methods_ClazzFlagAttribute_I_LRClazzFlagAttribute__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzFlagAttribute_methods_ClazzFlagAttribute_I_LRClazzFlagAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzFlagAttribute_method_ClazzFlagAttribute_I_LRClazzFlagAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClazzFlagAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClazzFlagAttribute::clazzInfo(), // return type
  "_0_ClazzFlagAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClazzFlagAttribute_methods_ClazzFlagAttribute_I_LRClazzFlagAttribute__args, // the arguments
  0, //arguments count
  ClazzFlagAttribute_methods_ClazzFlagAttribute_I_LRClazzFlagAttribute__exceptions, // the declared exceptions
  ClazzFlagAttribute_MetainfoWrapper::ClazzFlagAttribute_method_ClazzFlagAttribute_I_LRClazzFlagAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzFlagAttribute_methods_ClazzFlagAttribute__LRClazzFlagAttribute__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzFlagAttribute_methods_ClazzFlagAttribute__LRClazzFlagAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzFlagAttribute_method_ClazzFlagAttribute__LRClazzFlagAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ClazzFlagAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClazzFlagAttribute::clazzInfo(), // return type
  "_1_ClazzFlagAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClazzFlagAttribute_methods_ClazzFlagAttribute__LRClazzFlagAttribute__args, // the arguments
  0, //arguments count
  ClazzFlagAttribute_methods_ClazzFlagAttribute__LRClazzFlagAttribute__exceptions, // the declared exceptions
  ClazzFlagAttribute_MetainfoWrapper::ClazzFlagAttribute_method_ClazzFlagAttribute__LRClazzFlagAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzFlagAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzFlagAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzFlagAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ClazzFlagAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClazzFlagAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClazzFlagAttribute_MetainfoWrapper::ClazzFlagAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClazzFlagAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzFlagAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &ClazzFlagAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzFlagAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzFlagAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClazzFlagAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  ClazzFlagAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  ClazzFlagAttribute_MetainfoWrapper::ClazzFlagAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClazzFlagAttribute_methods[] = 
{
  &ClazzFlagAttribute_method_ClazzFlagAttribute_I_LRClazzFlagAttribute_,
  &ClazzFlagAttribute_method_ClazzFlagAttribute__LRClazzFlagAttribute_,
  &ClazzFlagAttribute_method_GetClass__L_acdk_lang_RClass_,
  &ClazzFlagAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct ClazzFlagAttribute_MetaInfoInitializer
{  ClazzFlagAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClazzFlagAttribute::clazzInfo();
    ci->fields =  _ClazzFlagAttribute_fields;
    ci->methods =  _ClazzFlagAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClazzFlagAttribute_MetaInfoInitializer ClazzFlagAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
ClazzNameAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RClazzNameAttribute>(length);
}

//static
::acdk::lang::RObject
ClazzNameAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ClazzNameAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClazzNameAttribute_method_ClazzNameAttribute_INLRString__LRClazzNameAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClazzNameAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClazzNameAttribute_method_ClazzNameAttribute__LRClazzNameAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ClazzNameAttribute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClazzNameAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ClazzNameAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ClazzNameAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ClazzNameAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ClazzNameAttribute_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ClazzNameAttribute* This = dmi_cast<ClazzNameAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ClazzNameAttribute_fields__name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ClazzNameAttribute_MetainfoWrapper::ClazzNameAttribute_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ClazzNameAttribute_fields[] = 
{
  &ClazzNameAttribute_fields__name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClazzNameAttribute_methods_ClazzNameAttribute_INLRString__LRClazzNameAttribute__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzNameAttribute_methods_ClazzNameAttribute_INLRString__LRClazzNameAttribute__args[] = 
{
  &ClazzNameAttribute_methods_ClazzNameAttribute_INLRString__LRClazzNameAttribute__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzNameAttribute_methods_ClazzNameAttribute_INLRString__LRClazzNameAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzNameAttribute_method_ClazzNameAttribute_INLRString__LRClazzNameAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ClazzNameAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClazzNameAttribute::clazzInfo(), // return type
  "_0_ClazzNameAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClazzNameAttribute_methods_ClazzNameAttribute_INLRString__LRClazzNameAttribute__args, // the arguments
  0, //arguments count
  ClazzNameAttribute_methods_ClazzNameAttribute_INLRString__LRClazzNameAttribute__exceptions, // the declared exceptions
  ClazzNameAttribute_MetainfoWrapper::ClazzNameAttribute_method_ClazzNameAttribute_INLRString__LRClazzNameAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzNameAttribute_methods_ClazzNameAttribute__LRClazzNameAttribute__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzNameAttribute_methods_ClazzNameAttribute__LRClazzNameAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzNameAttribute_method_ClazzNameAttribute__LRClazzNameAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ClazzNameAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ClazzNameAttribute::clazzInfo(), // return type
  "_1_ClazzNameAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClazzNameAttribute_methods_ClazzNameAttribute__LRClazzNameAttribute__args, // the arguments
  0, //arguments count
  ClazzNameAttribute_methods_ClazzNameAttribute__LRClazzNameAttribute__exceptions, // the declared exceptions
  ClazzNameAttribute_MetainfoWrapper::ClazzNameAttribute_method_ClazzNameAttribute__LRClazzNameAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzNameAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzNameAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzNameAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ClazzNameAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ClazzNameAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ClazzNameAttribute_MetainfoWrapper::ClazzNameAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClazzNameAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzNameAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &ClazzNameAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzNameAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzNameAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  ClazzNameAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  ClazzNameAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  ClazzNameAttribute_MetainfoWrapper::ClazzNameAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ClazzNameAttribute_methods[] = 
{
  &ClazzNameAttribute_method_ClazzNameAttribute_INLRString__LRClazzNameAttribute_,
  &ClazzNameAttribute_method_ClazzNameAttribute__LRClazzNameAttribute_,
  &ClazzNameAttribute_method_GetClass__L_acdk_lang_RClass_,
  &ClazzNameAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct ClazzNameAttribute_MetaInfoInitializer
{  ClazzNameAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ClazzNameAttribute::clazzInfo();
    ci->fields =  _ClazzNameAttribute_fields;
    ci->methods =  _ClazzNameAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ClazzNameAttribute_MetaInfoInitializer ClazzNameAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
CodeAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RCodeAttribute>(length);
}

//static
::acdk::lang::RObject
CodeAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CodeAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CodeAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CodeAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CodeAttribute_method_apply_INLRCodeInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CodeAttribute* This = dmi_cast<CodeAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CodeAttribute::apply(::acdk::lang::dmi::castTo< RCodeInfo>(args[0], dc));
    else
      ret = This->apply(::acdk::lang::dmi::castTo< RCodeInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CodeAttribute_method_getCounter__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = CodeAttribute::getCounter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CodeAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CodeAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CodeAttribute_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CodeAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CodeAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CodeAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CodeAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CodeAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CodeAttribute_MetainfoWrapper::CodeAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CodeAttribute_methods_apply_INLRCodeInfo__Z_arg_cm = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cm", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCodeInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CodeAttribute_methods_apply_INLRCodeInfo__Z_args[] = 
{
  &CodeAttribute_methods_apply_INLRCodeInfo__Z_arg_cm,
  0
};

::acdk::lang::dmi::ClazzInfo* CodeAttribute_methods_apply_INLRCodeInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CodeAttribute_method_apply_INLRCodeInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "apply", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_apply", // alternative name of method
  -1, // altlabelHashCode
  CodeAttribute_methods_apply_INLRCodeInfo__Z_args, // the arguments
  0, //arguments count
  CodeAttribute_methods_apply_INLRCodeInfo__Z_exceptions, // the declared exceptions
  CodeAttribute_MetainfoWrapper::CodeAttribute_method_apply_INLRCodeInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CodeAttribute_methods_getCounter__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CodeAttribute_methods_getCounter__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CodeAttribute_method_getCounter__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCounter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getCounter", // alternative name of method
  -1, // altlabelHashCode
  CodeAttribute_methods_getCounter__I_args, // the arguments
  0, //arguments count
  CodeAttribute_methods_getCounter__I_exceptions, // the declared exceptions
  CodeAttribute_MetainfoWrapper::CodeAttribute_method_getCounter__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CodeAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CodeAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &CodeAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* CodeAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CodeAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  CodeAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  CodeAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  CodeAttribute_MetainfoWrapper::CodeAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CodeAttribute_methods[] = 
{
  &CodeAttribute_method_GetClass__L_acdk_lang_RClass_,
  &CodeAttribute_method_apply_INLRCodeInfo__Z,
  &CodeAttribute_method_getCounter__I,
  &CodeAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct CodeAttribute_MetaInfoInitializer
{  CodeAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CodeAttribute::clazzInfo();
    ci->fields =  _CodeAttribute_fields;
    ci->methods =  _CodeAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CodeAttribute_MetaInfoInitializer CodeAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
DispatchForwardAttributeTest_create_array(int length)
{
  return new ObjectArrayImpl<RDispatchForwardAttributeTest>(length);
}

//static
::acdk::lang::RObject
DispatchForwardAttributeTest_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DispatchForwardAttributeTest_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DispatchForwardAttributeTest_method_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DispatchForwardAttributeTest(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DispatchForwardAttributeTest_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DispatchForwardAttributeTest::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DispatchForwardAttributeTest_method_foo_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DispatchForwardAttributeTest* This = dmi_cast<DispatchForwardAttributeTest>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DispatchForwardAttributeTest::foo(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->foo(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DispatchForwardAttributeTest_fields_dummyvar_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DispatchForwardAttributeTest* This = dmi_cast<DispatchForwardAttributeTest>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->dummyvar, flags);
    else
      This->dummyvar = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DispatchForwardAttributeTest_fields_dummyvar = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "dummyvar", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  DispatchForwardAttributeTest::dummyacc, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DispatchForwardAttributeTest_fields[] = 
{
  &DispatchForwardAttributeTest_fields_dummyvar,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DispatchForwardAttributeTest_methods_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DispatchForwardAttributeTest_methods_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest__args[] = 
{
  &DispatchForwardAttributeTest_methods_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DispatchForwardAttributeTest_methods_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DispatchForwardAttributeTest_method_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DispatchForwardAttributeTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DispatchForwardAttributeTest::clazzInfo(), // return type
  "_0_DispatchForwardAttributeTest", // alternative name of method
  -1, // altlabelHashCode
  DispatchForwardAttributeTest_methods_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest__args, // the arguments
  0, //arguments count
  DispatchForwardAttributeTest_methods_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest__exceptions, // the declared exceptions
  DispatchForwardAttributeTest_MetainfoWrapper::DispatchForwardAttributeTest_method_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DispatchForwardAttributeTest_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DispatchForwardAttributeTest_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DispatchForwardAttributeTest_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DispatchForwardAttributeTest_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DispatchForwardAttributeTest_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DispatchForwardAttributeTest_MetainfoWrapper::DispatchForwardAttributeTest_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DispatchForwardAttributeTest_methods_foo_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DispatchForwardAttributeTest_methods_foo_INLRString__LRString__args[] = 
{
  &DispatchForwardAttributeTest_methods_foo_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* DispatchForwardAttributeTest_methods_foo_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DispatchForwardAttributeTest_method_foo_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "foo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_foo", // alternative name of method
  -1, // altlabelHashCode
  DispatchForwardAttributeTest_methods_foo_INLRString__LRString__args, // the arguments
  0, //arguments count
  DispatchForwardAttributeTest_methods_foo_INLRString__LRString__exceptions, // the declared exceptions
  DispatchForwardAttributeTest::fooDispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DispatchForwardAttributeTest_methods[] = 
{
  &DispatchForwardAttributeTest_method_DispatchForwardAttributeTest_INLRObject__LRDispatchForwardAttributeTest_,
  &DispatchForwardAttributeTest_method_GetClass__L_acdk_lang_RClass_,
  &DispatchForwardAttributeTest_method_foo_INLRString__LRString_,
  0
};


struct DispatchForwardAttributeTest_MetaInfoInitializer
{  DispatchForwardAttributeTest_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DispatchForwardAttributeTest::clazzInfo();
    ci->fields =  _DispatchForwardAttributeTest_fields;
    ci->methods =  _DispatchForwardAttributeTest_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DispatchForwardAttributeTest_MetaInfoInitializer DispatchForwardAttributeTest_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
DmiProxyAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RDmiProxyAttribute>(length);
}

//static
::acdk::lang::RObject
DmiProxyAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiProxyAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiProxyAttribute_method_DmiProxyAttribute_Z_LRDmiProxyAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiProxyAttribute(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiProxyAttribute_method_DmiProxyAttribute__LRDmiProxyAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiProxyAttribute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiProxyAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiProxyAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiProxyAttribute_method_generateProxy__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiProxyAttribute* This = dmi_cast<DmiProxyAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiProxyAttribute::generateProxy();
    else
      ret = This->generateProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiProxyAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiProxyAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiProxyAttribute_fields__genProxy_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiProxyAttribute* This = dmi_cast<DmiProxyAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_genProxy, flags);
    else
      This->_genProxy = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DmiProxyAttribute_fields__genProxy = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_genProxy", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DmiProxyAttribute_MetainfoWrapper::DmiProxyAttribute_fields__genProxy_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DmiProxyAttribute_fields[] = 
{
  &DmiProxyAttribute_fields__genProxy,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiProxyAttribute_methods_DmiProxyAttribute_Z_LRDmiProxyAttribute__arg_generateProxy = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "generateProxy", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiProxyAttribute_methods_DmiProxyAttribute_Z_LRDmiProxyAttribute__args[] = 
{
  &DmiProxyAttribute_methods_DmiProxyAttribute_Z_LRDmiProxyAttribute__arg_generateProxy,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiProxyAttribute_methods_DmiProxyAttribute_Z_LRDmiProxyAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiProxyAttribute_method_DmiProxyAttribute_Z_LRDmiProxyAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiProxyAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiProxyAttribute::clazzInfo(), // return type
  "_0_DmiProxyAttribute", // alternative name of method
  -1, // altlabelHashCode
  DmiProxyAttribute_methods_DmiProxyAttribute_Z_LRDmiProxyAttribute__args, // the arguments
  0, //arguments count
  DmiProxyAttribute_methods_DmiProxyAttribute_Z_LRDmiProxyAttribute__exceptions, // the declared exceptions
  DmiProxyAttribute_MetainfoWrapper::DmiProxyAttribute_method_DmiProxyAttribute_Z_LRDmiProxyAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiProxyAttribute_methods_DmiProxyAttribute__LRDmiProxyAttribute__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiProxyAttribute_methods_DmiProxyAttribute__LRDmiProxyAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiProxyAttribute_method_DmiProxyAttribute__LRDmiProxyAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiProxyAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiProxyAttribute::clazzInfo(), // return type
  "_1_DmiProxyAttribute", // alternative name of method
  -1, // altlabelHashCode
  DmiProxyAttribute_methods_DmiProxyAttribute__LRDmiProxyAttribute__args, // the arguments
  0, //arguments count
  DmiProxyAttribute_methods_DmiProxyAttribute__LRDmiProxyAttribute__exceptions, // the declared exceptions
  DmiProxyAttribute_MetainfoWrapper::DmiProxyAttribute_method_DmiProxyAttribute__LRDmiProxyAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiProxyAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiProxyAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiProxyAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiProxyAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiProxyAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiProxyAttribute_MetainfoWrapper::DmiProxyAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiProxyAttribute_methods_generateProxy__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiProxyAttribute_methods_generateProxy__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiProxyAttribute_method_generateProxy__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "generateProxy", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_generateProxy", // alternative name of method
  -1, // altlabelHashCode
  DmiProxyAttribute_methods_generateProxy__Z_args, // the arguments
  0, //arguments count
  DmiProxyAttribute_methods_generateProxy__Z_exceptions, // the declared exceptions
  DmiProxyAttribute_MetainfoWrapper::DmiProxyAttribute_method_generateProxy__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiProxyAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiProxyAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &DmiProxyAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiProxyAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiProxyAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  DmiProxyAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  DmiProxyAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  DmiProxyAttribute_MetainfoWrapper::DmiProxyAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiProxyAttribute_methods[] = 
{
  &DmiProxyAttribute_method_DmiProxyAttribute_Z_LRDmiProxyAttribute_,
  &DmiProxyAttribute_method_DmiProxyAttribute__LRDmiProxyAttribute_,
  &DmiProxyAttribute_method_GetClass__L_acdk_lang_RClass_,
  &DmiProxyAttribute_method_generateProxy__Z,
  &DmiProxyAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct DmiProxyAttribute_MetaInfoInitializer
{  DmiProxyAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiProxyAttribute::clazzInfo();
    ci->fields =  _DmiProxyAttribute_fields;
    ci->methods =  _DmiProxyAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiProxyAttribute_MetaInfoInitializer DmiProxyAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
InvokeForwardAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RInvokeForwardAttribute>(length);
}

//static
::acdk::lang::RObject
InvokeForwardAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InvokeForwardAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvokeForwardAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InvokeForwardAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvokeForwardAttribute_method_InvokeForwardAttribute_Z_LRInvokeForwardAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InvokeForwardAttribute(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvokeForwardAttribute_method_InvokeForwardAttribute__LRInvokeForwardAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InvokeForwardAttribute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvokeForwardAttribute_method_applyToMethod_INLRMethodInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    InvokeForwardAttribute* This = dmi_cast<InvokeForwardAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->InvokeForwardAttribute::applyToMethod(::acdk::lang::dmi::castTo< RMethodInfo>(args[0], dc));
    else
      ret = This->applyToMethod(::acdk::lang::dmi::castTo< RMethodInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  InvokeForwardAttribute_fields__generate_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    InvokeForwardAttribute* This = dmi_cast<InvokeForwardAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_generate, flags);
    else
      This->_generate = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo InvokeForwardAttribute_fields__generate = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_generate", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  InvokeForwardAttribute_MetainfoWrapper::InvokeForwardAttribute_fields__generate_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _InvokeForwardAttribute_fields[] = 
{
  &InvokeForwardAttribute_fields__generate,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvokeForwardAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvokeForwardAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvokeForwardAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InvokeForwardAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InvokeForwardAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InvokeForwardAttribute_MetainfoWrapper::InvokeForwardAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InvokeForwardAttribute_methods_InvokeForwardAttribute_Z_LRInvokeForwardAttribute__arg_generate = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "generate", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvokeForwardAttribute_methods_InvokeForwardAttribute_Z_LRInvokeForwardAttribute__args[] = 
{
  &InvokeForwardAttribute_methods_InvokeForwardAttribute_Z_LRInvokeForwardAttribute__arg_generate,
  0
};

::acdk::lang::dmi::ClazzInfo* InvokeForwardAttribute_methods_InvokeForwardAttribute_Z_LRInvokeForwardAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvokeForwardAttribute_method_InvokeForwardAttribute_Z_LRInvokeForwardAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InvokeForwardAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvokeForwardAttribute::clazzInfo(), // return type
  "_0_InvokeForwardAttribute", // alternative name of method
  -1, // altlabelHashCode
  InvokeForwardAttribute_methods_InvokeForwardAttribute_Z_LRInvokeForwardAttribute__args, // the arguments
  0, //arguments count
  InvokeForwardAttribute_methods_InvokeForwardAttribute_Z_LRInvokeForwardAttribute__exceptions, // the declared exceptions
  InvokeForwardAttribute_MetainfoWrapper::InvokeForwardAttribute_method_InvokeForwardAttribute_Z_LRInvokeForwardAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvokeForwardAttribute_methods_InvokeForwardAttribute__LRInvokeForwardAttribute__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvokeForwardAttribute_methods_InvokeForwardAttribute__LRInvokeForwardAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvokeForwardAttribute_method_InvokeForwardAttribute__LRInvokeForwardAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "InvokeForwardAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvokeForwardAttribute::clazzInfo(), // return type
  "_1_InvokeForwardAttribute", // alternative name of method
  -1, // altlabelHashCode
  InvokeForwardAttribute_methods_InvokeForwardAttribute__LRInvokeForwardAttribute__args, // the arguments
  0, //arguments count
  InvokeForwardAttribute_methods_InvokeForwardAttribute__LRInvokeForwardAttribute__exceptions, // the declared exceptions
  InvokeForwardAttribute_MetainfoWrapper::InvokeForwardAttribute_method_InvokeForwardAttribute__LRInvokeForwardAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InvokeForwardAttribute_methods_applyToMethod_INLRMethodInfo__Z_arg_methodinfo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "methodinfo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMethodInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvokeForwardAttribute_methods_applyToMethod_INLRMethodInfo__Z_args[] = 
{
  &InvokeForwardAttribute_methods_applyToMethod_INLRMethodInfo__Z_arg_methodinfo,
  0
};

::acdk::lang::dmi::ClazzInfo* InvokeForwardAttribute_methods_applyToMethod_INLRMethodInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvokeForwardAttribute_method_applyToMethod_INLRMethodInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "applyToMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_applyToMethod", // alternative name of method
  -1, // altlabelHashCode
  InvokeForwardAttribute_methods_applyToMethod_INLRMethodInfo__Z_args, // the arguments
  0, //arguments count
  InvokeForwardAttribute_methods_applyToMethod_INLRMethodInfo__Z_exceptions, // the declared exceptions
  InvokeForwardAttribute_MetainfoWrapper::InvokeForwardAttribute_method_applyToMethod_INLRMethodInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InvokeForwardAttribute_methods[] = 
{
  &InvokeForwardAttribute_method_GetClass__L_acdk_lang_RClass_,
  &InvokeForwardAttribute_method_InvokeForwardAttribute_Z_LRInvokeForwardAttribute_,
  &InvokeForwardAttribute_method_InvokeForwardAttribute__LRInvokeForwardAttribute_,
  &InvokeForwardAttribute_method_applyToMethod_INLRMethodInfo__Z,
  0
};


struct InvokeForwardAttribute_MetaInfoInitializer
{  InvokeForwardAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InvokeForwardAttribute::clazzInfo();
    ci->fields =  _InvokeForwardAttribute_fields;
    ci->methods =  _InvokeForwardAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InvokeForwardAttribute_MetaInfoInitializer InvokeForwardAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
McConfigAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RMcConfigAttribute>(length);
}

//static
::acdk::lang::RObject
McConfigAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class McConfigAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  McConfigAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)McConfigAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  McConfigAttribute_method_McConfigAttribute_I_LRMcConfigAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new McConfigAttribute(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  McConfigAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    McConfigAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  McConfigAttribute_fields_attributes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    McConfigAttribute* This = dmi_cast<McConfigAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->attributes, flags);
    else
      This->attributes = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo McConfigAttribute_fields_attributes = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "attributes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  McConfigAttribute_MetainfoWrapper::McConfigAttribute_fields_attributes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _McConfigAttribute_fields[] = 
{
  &McConfigAttribute_fields_attributes,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* McConfigAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* McConfigAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo McConfigAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  McConfigAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  McConfigAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  McConfigAttribute_MetainfoWrapper::McConfigAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo McConfigAttribute_methods_McConfigAttribute_I_LRMcConfigAttribute__arg_configAttributes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "configAttributes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* McConfigAttribute_methods_McConfigAttribute_I_LRMcConfigAttribute__args[] = 
{
  &McConfigAttribute_methods_McConfigAttribute_I_LRMcConfigAttribute__arg_configAttributes,
  0
};

::acdk::lang::dmi::ClazzInfo* McConfigAttribute_methods_McConfigAttribute_I_LRMcConfigAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo McConfigAttribute_method_McConfigAttribute_I_LRMcConfigAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "McConfigAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  McConfigAttribute::clazzInfo(), // return type
  "_0_McConfigAttribute", // alternative name of method
  -1, // altlabelHashCode
  McConfigAttribute_methods_McConfigAttribute_I_LRMcConfigAttribute__args, // the arguments
  0, //arguments count
  McConfigAttribute_methods_McConfigAttribute_I_LRMcConfigAttribute__exceptions, // the declared exceptions
  McConfigAttribute_MetainfoWrapper::McConfigAttribute_method_McConfigAttribute_I_LRMcConfigAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo McConfigAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* McConfigAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &McConfigAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* McConfigAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo McConfigAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  McConfigAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  McConfigAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  McConfigAttribute_MetainfoWrapper::McConfigAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _McConfigAttribute_methods[] = 
{
  &McConfigAttribute_method_GetClass__L_acdk_lang_RClass_,
  &McConfigAttribute_method_McConfigAttribute_I_LRMcConfigAttribute_,
  &McConfigAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct McConfigAttribute_MetaInfoInitializer
{  McConfigAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = McConfigAttribute::clazzInfo();
    ci->fields =  _McConfigAttribute_fields;
    ci->methods =  _McConfigAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
McConfigAttribute_MetaInfoInitializer McConfigAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
MethodAltNameAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RMethodAltNameAttribute>(length);
}

//static
::acdk::lang::RObject
MethodAltNameAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class MethodAltNameAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MethodAltNameAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)MethodAltNameAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MethodAltNameAttribute_method_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MethodAltNameAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MethodAltNameAttribute_method_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new MethodAltNameAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  MethodAltNameAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    MethodAltNameAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MethodAltNameAttribute_fields__altName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    MethodAltNameAttribute* This = dmi_cast<MethodAltNameAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_altName, flags);
    else
      This->_altName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  MethodAltNameAttribute_fields__paramCount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    MethodAltNameAttribute* This = dmi_cast<MethodAltNameAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_paramCount, flags);
    else
      This->_paramCount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo MethodAltNameAttribute_fields__altName = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_altName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  MethodAltNameAttribute_MetainfoWrapper::MethodAltNameAttribute_fields__altName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo MethodAltNameAttribute_fields__paramCount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_paramCount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  MethodAltNameAttribute_MetainfoWrapper::MethodAltNameAttribute_fields__paramCount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _MethodAltNameAttribute_fields[] = 
{
  &MethodAltNameAttribute_fields__altName,
  &MethodAltNameAttribute_fields__paramCount,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* MethodAltNameAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* MethodAltNameAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MethodAltNameAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  MethodAltNameAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  MethodAltNameAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  MethodAltNameAttribute_MetainfoWrapper::MethodAltNameAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__arg_altName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "altName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__arg_paramCount = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "paramCount", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__args[] = 
{
  &MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__arg_altName,
  &MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__arg_paramCount,
  0
};

::acdk::lang::dmi::ClazzInfo* MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MethodAltNameAttribute_method_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "MethodAltNameAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MethodAltNameAttribute::clazzInfo(), // return type
  "_0_MethodAltNameAttribute", // alternative name of method
  -1, // altlabelHashCode
  MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__args, // the arguments
  0, //arguments count
  MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__exceptions, // the declared exceptions
  MethodAltNameAttribute_MetainfoWrapper::MethodAltNameAttribute_method_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute__arg_altName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "altName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute__args[] = 
{
  &MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute__arg_altName,
  0
};

::acdk::lang::dmi::ClazzInfo* MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MethodAltNameAttribute_method_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "MethodAltNameAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  MethodAltNameAttribute::clazzInfo(), // return type
  "_1_MethodAltNameAttribute", // alternative name of method
  -1, // altlabelHashCode
  MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute__args, // the arguments
  0, //arguments count
  MethodAltNameAttribute_methods_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute__exceptions, // the declared exceptions
  MethodAltNameAttribute_MetainfoWrapper::MethodAltNameAttribute_method_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo MethodAltNameAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* MethodAltNameAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &MethodAltNameAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* MethodAltNameAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo MethodAltNameAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  MethodAltNameAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  MethodAltNameAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  MethodAltNameAttribute_MetainfoWrapper::MethodAltNameAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _MethodAltNameAttribute_methods[] = 
{
  &MethodAltNameAttribute_method_GetClass__L_acdk_lang_RClass_,
  &MethodAltNameAttribute_method_MethodAltNameAttribute_INLRString_I_LRMethodAltNameAttribute_,
  &MethodAltNameAttribute_method_MethodAltNameAttribute_INLRString__LRMethodAltNameAttribute_,
  &MethodAltNameAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct MethodAltNameAttribute_MetaInfoInitializer
{  MethodAltNameAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = MethodAltNameAttribute::clazzInfo();
    ci->fields =  _MethodAltNameAttribute_fields;
    ci->methods =  _MethodAltNameAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
MethodAltNameAttribute_MetaInfoInitializer MethodAltNameAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
SetDispatchAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RSetDispatchAttribute>(length);
}

//static
::acdk::lang::RObject
SetDispatchAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SetDispatchAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetDispatchAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SetDispatchAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetDispatchAttribute_method_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SetDispatchAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetDispatchAttribute_method_SetDispatchAttribute__LRSetDispatchAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SetDispatchAttribute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetDispatchAttribute_method_SetDispatchAttribute_INLRString__LRSetDispatchAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SetDispatchAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SetDispatchAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SetDispatchAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SetDispatchAttribute_fields__functionSignature_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SetDispatchAttribute* This = dmi_cast<SetDispatchAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_functionSignature, flags);
    else
      This->_functionSignature = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SetDispatchAttribute_fields__staticCall_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SetDispatchAttribute* This = dmi_cast<SetDispatchAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_staticCall, flags);
    else
      This->_staticCall = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SetDispatchAttribute_fields__functionSignature = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_functionSignature", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SetDispatchAttribute_MetainfoWrapper::SetDispatchAttribute_fields__functionSignature_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SetDispatchAttribute_fields__staticCall = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_staticCall", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  SetDispatchAttribute_MetainfoWrapper::SetDispatchAttribute_fields__staticCall_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SetDispatchAttribute_fields[] = 
{
  &SetDispatchAttribute_fields__functionSignature,
  &SetDispatchAttribute_fields__staticCall,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetDispatchAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SetDispatchAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetDispatchAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SetDispatchAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SetDispatchAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SetDispatchAttribute_MetainfoWrapper::SetDispatchAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SetDispatchAttribute_methods_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__arg_signature = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "signature", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SetDispatchAttribute_methods_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__arg_staticCall = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "staticCall", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetDispatchAttribute_methods_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__args[] = 
{
  &SetDispatchAttribute_methods_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__arg_signature,
  &SetDispatchAttribute_methods_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__arg_staticCall,
  0
};

::acdk::lang::dmi::ClazzInfo* SetDispatchAttribute_methods_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetDispatchAttribute_method_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SetDispatchAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SetDispatchAttribute::clazzInfo(), // return type
  "_0_SetDispatchAttribute", // alternative name of method
  -1, // altlabelHashCode
  SetDispatchAttribute_methods_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__args, // the arguments
  0, //arguments count
  SetDispatchAttribute_methods_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__exceptions, // the declared exceptions
  SetDispatchAttribute_MetainfoWrapper::SetDispatchAttribute_method_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetDispatchAttribute_methods_SetDispatchAttribute__LRSetDispatchAttribute__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SetDispatchAttribute_methods_SetDispatchAttribute__LRSetDispatchAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetDispatchAttribute_method_SetDispatchAttribute__LRSetDispatchAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SetDispatchAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SetDispatchAttribute::clazzInfo(), // return type
  "_1_SetDispatchAttribute", // alternative name of method
  -1, // altlabelHashCode
  SetDispatchAttribute_methods_SetDispatchAttribute__LRSetDispatchAttribute__args, // the arguments
  0, //arguments count
  SetDispatchAttribute_methods_SetDispatchAttribute__LRSetDispatchAttribute__exceptions, // the declared exceptions
  SetDispatchAttribute_MetainfoWrapper::SetDispatchAttribute_method_SetDispatchAttribute__LRSetDispatchAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SetDispatchAttribute_methods_SetDispatchAttribute_INLRString__LRSetDispatchAttribute__arg_signature = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "signature", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetDispatchAttribute_methods_SetDispatchAttribute_INLRString__LRSetDispatchAttribute__args[] = 
{
  &SetDispatchAttribute_methods_SetDispatchAttribute_INLRString__LRSetDispatchAttribute__arg_signature,
  0
};

::acdk::lang::dmi::ClazzInfo* SetDispatchAttribute_methods_SetDispatchAttribute_INLRString__LRSetDispatchAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetDispatchAttribute_method_SetDispatchAttribute_INLRString__LRSetDispatchAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SetDispatchAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SetDispatchAttribute::clazzInfo(), // return type
  "_2_SetDispatchAttribute", // alternative name of method
  -1, // altlabelHashCode
  SetDispatchAttribute_methods_SetDispatchAttribute_INLRString__LRSetDispatchAttribute__args, // the arguments
  0, //arguments count
  SetDispatchAttribute_methods_SetDispatchAttribute_INLRString__LRSetDispatchAttribute__exceptions, // the declared exceptions
  SetDispatchAttribute_MetainfoWrapper::SetDispatchAttribute_method_SetDispatchAttribute_INLRString__LRSetDispatchAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SetDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &SetDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* SetDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetDispatchAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  SetDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  SetDispatchAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  SetDispatchAttribute_MetainfoWrapper::SetDispatchAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SetDispatchAttribute_methods[] = 
{
  &SetDispatchAttribute_method_GetClass__L_acdk_lang_RClass_,
  &SetDispatchAttribute_method_SetDispatchAttribute_INLRString_Z_LRSetDispatchAttribute_,
  &SetDispatchAttribute_method_SetDispatchAttribute__LRSetDispatchAttribute_,
  &SetDispatchAttribute_method_SetDispatchAttribute_INLRString__LRSetDispatchAttribute_,
  &SetDispatchAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct SetDispatchAttribute_MetaInfoInitializer
{  SetDispatchAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SetDispatchAttribute::clazzInfo();
    ci->fields =  _SetDispatchAttribute_fields;
    ci->methods =  _SetDispatchAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SetDispatchAttribute_MetaInfoInitializer SetDispatchAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
StringTagAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RStringTagAttribute>(length);
}

//static
::acdk::lang::RObject
StringTagAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringTagAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTagAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringTagAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTagAttribute_method_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringTagAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTagAttribute_method_StringTagAttribute_INLRString__LRStringTagAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringTagAttribute(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringTagAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringTagAttribute::initAttribute(::acdk::lang::dmi::castTo< RMetaCompiler>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTagAttribute_fields_key_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTagAttribute* This = dmi_cast<StringTagAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->key, flags);
    else
      This->key = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringTagAttribute_fields_value_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringTagAttribute* This = dmi_cast<StringTagAttribute>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->value, flags);
    else
      This->value = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StringTagAttribute_fields_key = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "key", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StringTagAttribute_MetainfoWrapper::StringTagAttribute_fields_key_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringTagAttribute_fields_value = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "value", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StringTagAttribute_MetainfoWrapper::StringTagAttribute_fields_value_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StringTagAttribute_fields[] = 
{
  &StringTagAttribute_fields_key,
  &StringTagAttribute_fields_value,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTagAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringTagAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTagAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringTagAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringTagAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringTagAttribute_MetainfoWrapper::StringTagAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTagAttribute_methods_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__arg_k = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "k", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTagAttribute_methods_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTagAttribute_methods_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__args[] = 
{
  &StringTagAttribute_methods_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__arg_k,
  &StringTagAttribute_methods_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTagAttribute_methods_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTagAttribute_method_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringTagAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringTagAttribute::clazzInfo(), // return type
  "_0_StringTagAttribute", // alternative name of method
  -1, // altlabelHashCode
  StringTagAttribute_methods_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__args, // the arguments
  0, //arguments count
  StringTagAttribute_methods_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__exceptions, // the declared exceptions
  StringTagAttribute_MetainfoWrapper::StringTagAttribute_method_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTagAttribute_methods_StringTagAttribute_INLRString__LRStringTagAttribute__arg_k = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "k", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTagAttribute_methods_StringTagAttribute_INLRString__LRStringTagAttribute__args[] = 
{
  &StringTagAttribute_methods_StringTagAttribute_INLRString__LRStringTagAttribute__arg_k,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTagAttribute_methods_StringTagAttribute_INLRString__LRStringTagAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTagAttribute_method_StringTagAttribute_INLRString__LRStringTagAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StringTagAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringTagAttribute::clazzInfo(), // return type
  "_1_StringTagAttribute", // alternative name of method
  -1, // altlabelHashCode
  StringTagAttribute_methods_StringTagAttribute_INLRString__LRStringTagAttribute__args, // the arguments
  0, //arguments count
  StringTagAttribute_methods_StringTagAttribute_INLRString__LRStringTagAttribute__exceptions, // the declared exceptions
  StringTagAttribute_MetainfoWrapper::StringTagAttribute_method_StringTagAttribute_INLRString__LRStringTagAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTagAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RMetaCompiler::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTagAttribute_methods_initAttribute_INLRMetaCompiler__V_args[] = 
{
  &StringTagAttribute_methods_initAttribute_INLRMetaCompiler__V_arg_mc,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTagAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTagAttribute_method_initAttribute_INLRMetaCompiler__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_initAttribute", // alternative name of method
  -1, // altlabelHashCode
  StringTagAttribute_methods_initAttribute_INLRMetaCompiler__V_args, // the arguments
  0, //arguments count
  StringTagAttribute_methods_initAttribute_INLRMetaCompiler__V_exceptions, // the declared exceptions
  StringTagAttribute_MetainfoWrapper::StringTagAttribute_method_initAttribute_INLRMetaCompiler__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringTagAttribute_methods[] = 
{
  &StringTagAttribute_method_GetClass__L_acdk_lang_RClass_,
  &StringTagAttribute_method_StringTagAttribute_INLRString_INLRString__LRStringTagAttribute_,
  &StringTagAttribute_method_StringTagAttribute_INLRString__LRStringTagAttribute_,
  &StringTagAttribute_method_initAttribute_INLRMetaCompiler__V,
  0
};


struct StringTagAttribute_MetaInfoInitializer
{  StringTagAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringTagAttribute::clazzInfo();
    ci->fields =  _StringTagAttribute_fields;
    ci->methods =  _StringTagAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringTagAttribute_MetaInfoInitializer StringTagAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


//static
::acdk::lang::RObject
ThrowableAttribute_create_array(int length)
{
  return new ObjectArrayImpl<RThrowableAttribute>(length);
}

//static
::acdk::lang::RObject
ThrowableAttribute_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ThrowableAttribute_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowableAttribute_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThrowableAttribute::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowableAttribute_method_ThrowableAttribute__LRThrowableAttribute__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThrowableAttribute();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ThrowableAttribute_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowableAttribute_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowableAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowableAttribute_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ThrowableAttribute_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ThrowableAttribute_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ThrowableAttribute_MetainfoWrapper::ThrowableAttribute_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowableAttribute_methods_ThrowableAttribute__LRThrowableAttribute__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowableAttribute_methods_ThrowableAttribute__LRThrowableAttribute__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowableAttribute_method_ThrowableAttribute__LRThrowableAttribute_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThrowableAttribute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThrowableAttribute::clazzInfo(), // return type
  "_0_ThrowableAttribute", // alternative name of method
  -1, // altlabelHashCode
  ThrowableAttribute_methods_ThrowableAttribute__LRThrowableAttribute__args, // the arguments
  0, //arguments count
  ThrowableAttribute_methods_ThrowableAttribute__LRThrowableAttribute__exceptions, // the declared exceptions
  ThrowableAttribute_MetainfoWrapper::ThrowableAttribute_method_ThrowableAttribute__LRThrowableAttribute__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ThrowableAttribute_methods[] = 
{
  &ThrowableAttribute_method_GetClass__L_acdk_lang_RClass_,
  &ThrowableAttribute_method_ThrowableAttribute__LRThrowableAttribute_,
  0
};


struct ThrowableAttribute_MetaInfoInitializer
{  ThrowableAttribute_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ThrowableAttribute::clazzInfo();
    ci->fields =  _ThrowableAttribute_fields;
    ci->methods =  _ThrowableAttribute_methods;
    ci->_scopeParent = acdk_tools_mc_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ThrowableAttribute_MetaInfoInitializer ThrowableAttribute_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace mc


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) mc_dummyExportFunc() {}
#endif

