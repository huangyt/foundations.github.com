// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../aunit.h"
#include "../aunit.h"
#include "../CfgScriptTestSuite.h"
#include "../Config.h"
#include "../DmiTestClass.h"
#include "../DmiTestException.h"
#include "../DmiTestInterface.h"
#include "../McConfigTest.h"
#include "../ProcessTestSuite.h"
#include "../SayHelloInterface.h"
#include "../Test.h"
#include "../TestCollectorListener.h"
#include "../TestConsoleListener.h"
#include "../TestDebuggerListener.h"
#include "../TestException.h"
#include "../TestFailure.h"
#include "../TestHtmlReport.h"
#include "../TestListener.h"
#include "../TestReport.h"
#include "../TestResult.h"
#include "../TestRunner.h"
#include "../TestTextReport.h"
#include "../TestUnit.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestFailure_create_array(int length)
{
  return new ObjectArrayImpl<RTestFailure>(length);
}

//static
::acdk::lang::RObject
TestFailure_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestFailure_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestFailure_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestFailure::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestFailure_method_TestFailure_INLRTest_INLRThrowable__LRTestFailure__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestFailure_method_failedTest__LRTest__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestFailure* This = dmi_cast<TestFailure>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestFailure::failedTest();
    else
        ret = (::acdk::lang::RObject)This->failedTest();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestFailure_method_thrownException__LRThrowable__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestFailure* This = dmi_cast<TestFailure>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestFailure::thrownException();
    else
        ret = (::acdk::lang::RObject)This->thrownException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestFailure_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestFailure* This = dmi_cast<TestFailure>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestFailure::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestFailure_fields__failedTest_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestFailure* This = dmi_cast<TestFailure>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_failedTest, flags);
    else
      This->_failedTest = ::acdk::lang::dmi::castTo< RTest>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestFailure_fields__thrownException_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestFailure* This = dmi_cast<TestFailure>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_thrownException, flags);
    else
      This->_thrownException = ::acdk::lang::dmi::castTo< RThrowable>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestFailure_fields__failedTest = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_failedTest", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo(),
  TestFailure_MetainfoWrapper::TestFailure_fields__failedTest_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestFailure_fields__thrownException = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_thrownException", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(),
  TestFailure_MetainfoWrapper::TestFailure_fields__thrownException_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestFailure_fields[] = 
{
  &TestFailure_fields__failedTest,
  &TestFailure_fields__thrownException,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestFailure_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestFailure_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestFailure_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestFailure_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestFailure_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestFailure_MetainfoWrapper::TestFailure_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestFailure_methods_TestFailure_INLRTest_INLRThrowable__LRTestFailure__arg_failed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "failed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestFailure_methods_TestFailure_INLRTest_INLRThrowable__LRTestFailure__arg_thrown = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "thrown", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestFailure_methods_TestFailure_INLRTest_INLRThrowable__LRTestFailure__args[] = 
{
  &TestFailure_methods_TestFailure_INLRTest_INLRThrowable__LRTestFailure__arg_failed,
  &TestFailure_methods_TestFailure_INLRTest_INLRThrowable__LRTestFailure__arg_thrown,
  0
};

::acdk::lang::dmi::ClazzInfo* TestFailure_methods_TestFailure_INLRTest_INLRThrowable__LRTestFailure__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestFailure_method_TestFailure_INLRTest_INLRThrowable__LRTestFailure_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestFailure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestFailure::clazzInfo(), // return type
  "_0_TestFailure", // alternative name of method
  -1, // altlabelHashCode
  TestFailure_methods_TestFailure_INLRTest_INLRThrowable__LRTestFailure__args, // the arguments
  0, //arguments count
  TestFailure_methods_TestFailure_INLRTest_INLRThrowable__LRTestFailure__exceptions, // the declared exceptions
  TestFailure_MetainfoWrapper::TestFailure_method_TestFailure_INLRTest_INLRThrowable__LRTestFailure__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestFailure_methods_failedTest__LRTest__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestFailure_methods_failedTest__LRTest__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestFailure_method_failedTest__LRTest_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "failedTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo(), // return type
  "_1_failedTest", // alternative name of method
  -1, // altlabelHashCode
  TestFailure_methods_failedTest__LRTest__args, // the arguments
  0, //arguments count
  TestFailure_methods_failedTest__LRTest__exceptions, // the declared exceptions
  TestFailure_MetainfoWrapper::TestFailure_method_failedTest__LRTest__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestFailure_methods_thrownException__LRThrowable__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestFailure_methods_thrownException__LRThrowable__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestFailure_method_thrownException__LRThrowable_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "thrownException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo(), // return type
  "_2_thrownException", // alternative name of method
  -1, // altlabelHashCode
  TestFailure_methods_thrownException__LRThrowable__args, // the arguments
  0, //arguments count
  TestFailure_methods_thrownException__LRThrowable__exceptions, // the declared exceptions
  TestFailure_MetainfoWrapper::TestFailure_method_thrownException__LRThrowable__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestFailure_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestFailure_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestFailure_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  TestFailure_methods_toString__LRString__args, // the arguments
  0, //arguments count
  TestFailure_methods_toString__LRString__exceptions, // the declared exceptions
  TestFailure_MetainfoWrapper::TestFailure_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestFailure_methods[] = 
{
  &TestFailure_method_GetClass__L_acdk_lang_RClass_,
  &TestFailure_method_TestFailure_INLRTest_INLRThrowable__LRTestFailure_,
  &TestFailure_method_failedTest__LRTest_,
  &TestFailure_method_thrownException__LRThrowable_,
  &TestFailure_method_toString__LRString_,
  0
};


struct TestFailure_MetaInfoInitializer
{  TestFailure_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestFailure::clazzInfo();
    ci->fields =  _TestFailure_fields;
    ci->methods =  _TestFailure_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestFailure_MetaInfoInitializer TestFailure_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestHtmlReport_create_array(int length)
{
  return new ObjectArrayImpl<RTestHtmlReport>(length);
}

//static
::acdk::lang::RObject
TestHtmlReport_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestHtmlReport_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestHtmlReport_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestHtmlReport::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestHtmlReport_method_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestHtmlReport(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestHtmlReport_method_TestHtmlReport_I_LRTestHtmlReport__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestHtmlReport(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestHtmlReport_method_TestHtmlReport_IINLRString__LRTestHtmlReport__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestHtmlReport(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestHtmlReport_method_print_INLRTestResultEntryArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestHtmlReport* This = dmi_cast<TestHtmlReport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestHtmlReport::print(::acdk::lang::dmi::castTo< RTestResultEntryArray>(args[0], dc));
    else
        This->print(::acdk::lang::dmi::castTo< RTestResultEntryArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestHtmlReport_fields__options_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestHtmlReport* This = dmi_cast<TestHtmlReport>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_options, flags);
    else
      This->_options = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestHtmlReport_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestHtmlReport* This = dmi_cast<TestHtmlReport>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestHtmlReport_fields__options = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_options", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TestHtmlReport_MetainfoWrapper::TestHtmlReport_fields__options_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestHtmlReport_fields__out = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  TestHtmlReport_MetainfoWrapper::TestHtmlReport_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestHtmlReport_fields[] = 
{
  &TestHtmlReport_fields__options,
  &TestHtmlReport_fields__out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestHtmlReport_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestHtmlReport_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestHtmlReport_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestHtmlReport_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestHtmlReport_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestHtmlReport_MetainfoWrapper::TestHtmlReport_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestHtmlReport_methods_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__arg_options = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "options", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestHtmlReport_methods_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestHtmlReport_methods_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__args[] = 
{
  &TestHtmlReport_methods_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__arg_options,
  &TestHtmlReport_methods_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* TestHtmlReport_methods_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestHtmlReport_method_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestHtmlReport", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestHtmlReport::clazzInfo(), // return type
  "_0_TestHtmlReport", // alternative name of method
  -1, // altlabelHashCode
  TestHtmlReport_methods_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__args, // the arguments
  0, //arguments count
  TestHtmlReport_methods_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__exceptions, // the declared exceptions
  TestHtmlReport_MetainfoWrapper::TestHtmlReport_method_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestHtmlReport_methods_TestHtmlReport_I_LRTestHtmlReport__arg_options = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "options", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestHtmlReport_methods_TestHtmlReport_I_LRTestHtmlReport__args[] = 
{
  &TestHtmlReport_methods_TestHtmlReport_I_LRTestHtmlReport__arg_options,
  0
};

::acdk::lang::dmi::ClazzInfo* TestHtmlReport_methods_TestHtmlReport_I_LRTestHtmlReport__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestHtmlReport_method_TestHtmlReport_I_LRTestHtmlReport_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestHtmlReport", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestHtmlReport::clazzInfo(), // return type
  "_1_TestHtmlReport", // alternative name of method
  -1, // altlabelHashCode
  TestHtmlReport_methods_TestHtmlReport_I_LRTestHtmlReport__args, // the arguments
  0, //arguments count
  TestHtmlReport_methods_TestHtmlReport_I_LRTestHtmlReport__exceptions, // the declared exceptions
  TestHtmlReport_MetainfoWrapper::TestHtmlReport_method_TestHtmlReport_I_LRTestHtmlReport__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestHtmlReport_methods_TestHtmlReport_IINLRString__LRTestHtmlReport__arg_options = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "options", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestHtmlReport_methods_TestHtmlReport_IINLRString__LRTestHtmlReport__arg_fileName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestHtmlReport_methods_TestHtmlReport_IINLRString__LRTestHtmlReport__args[] = 
{
  &TestHtmlReport_methods_TestHtmlReport_IINLRString__LRTestHtmlReport__arg_options,
  &TestHtmlReport_methods_TestHtmlReport_IINLRString__LRTestHtmlReport__arg_fileName,
  0
};

::acdk::lang::dmi::ClazzInfo* TestHtmlReport_methods_TestHtmlReport_IINLRString__LRTestHtmlReport__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestHtmlReport_method_TestHtmlReport_IINLRString__LRTestHtmlReport_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestHtmlReport", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestHtmlReport::clazzInfo(), // return type
  "_2_TestHtmlReport", // alternative name of method
  -1, // altlabelHashCode
  TestHtmlReport_methods_TestHtmlReport_IINLRString__LRTestHtmlReport__args, // the arguments
  0, //arguments count
  TestHtmlReport_methods_TestHtmlReport_IINLRString__LRTestHtmlReport__exceptions, // the declared exceptions
  TestHtmlReport_MetainfoWrapper::TestHtmlReport_method_TestHtmlReport_IINLRString__LRTestHtmlReport__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestHtmlReport_methods_print_INLRTestResultEntryArray__V_arg_tests = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tests", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResultEntryArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestHtmlReport_methods_print_INLRTestResultEntryArray__V_args[] = 
{
  &TestHtmlReport_methods_print_INLRTestResultEntryArray__V_arg_tests,
  0
};

::acdk::lang::dmi::ClazzInfo* TestHtmlReport_methods_print_INLRTestResultEntryArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestHtmlReport_method_print_INLRTestResultEntryArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "print", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_print", // alternative name of method
  -1, // altlabelHashCode
  TestHtmlReport_methods_print_INLRTestResultEntryArray__V_args, // the arguments
  0, //arguments count
  TestHtmlReport_methods_print_INLRTestResultEntryArray__V_exceptions, // the declared exceptions
  TestHtmlReport_MetainfoWrapper::TestHtmlReport_method_print_INLRTestResultEntryArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestHtmlReport_methods[] = 
{
  &TestHtmlReport_method_GetClass__L_acdk_lang_RClass_,
  &TestHtmlReport_method_TestHtmlReport_IINLacdk_io_RPrintWriter__LRTestHtmlReport_,
  &TestHtmlReport_method_TestHtmlReport_I_LRTestHtmlReport_,
  &TestHtmlReport_method_TestHtmlReport_IINLRString__LRTestHtmlReport_,
  &TestHtmlReport_method_print_INLRTestResultEntryArray__V,
  0
};


struct TestHtmlReport_MetaInfoInitializer
{  TestHtmlReport_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestHtmlReport::clazzInfo();
    ci->fields =  _TestHtmlReport_fields;
    ci->methods =  _TestHtmlReport_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestHtmlReport_MetaInfoInitializer TestHtmlReport_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestListener_create_array(int length)
{
  return new ObjectArrayImpl<RTestListener>(length);
}

//static
::acdk::lang::RObject
TestListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestListener_method_addError_INLRTest_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestListener* This = dmi_cast<TestListener>(This_);
    This->addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestListener_method_addFailure_INLRTest_INLRTestException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestListener* This = dmi_cast<TestListener>(This_);
    This->addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestListener_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestListener* This = dmi_cast<TestListener>(This_);
    This->addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestListener_method_endTest_INLRTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestListener* This = dmi_cast<TestListener>(This_);
    This->endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestListener_method_startTest_INLRTest__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestListener* This = dmi_cast<TestListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestListener::startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
      ret = This->startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TestListener_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestListener_MetainfoWrapper::TestListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestListener_methods_addError_INLRTest_INLRThrowable__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestListener_methods_addError_INLRTest_INLRThrowable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestListener_methods_addError_INLRTest_INLRThrowable__V_args[] = 
{
  &TestListener_methods_addError_INLRTest_INLRThrowable__V_arg_test,
  &TestListener_methods_addError_INLRTest_INLRThrowable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* TestListener_methods_addError_INLRTest_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestListener_method_addError_INLRTest_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addError", // alternative name of method
  -1, // altlabelHashCode
  TestListener_methods_addError_INLRTest_INLRThrowable__V_args, // the arguments
  0, //arguments count
  TestListener_methods_addError_INLRTest_INLRThrowable__V_exceptions, // the declared exceptions
  TestListener_MetainfoWrapper::TestListener_method_addError_INLRTest_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestListener_methods_addFailure_INLRTest_INLRTestException__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestListener_methods_addFailure_INLRTest_INLRTestException__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestListener_methods_addFailure_INLRTest_INLRTestException__V_args[] = 
{
  &TestListener_methods_addFailure_INLRTest_INLRTestException__V_arg_test,
  &TestListener_methods_addFailure_INLRTest_INLRTestException__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* TestListener_methods_addFailure_INLRTest_INLRTestException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestListener_method_addFailure_INLRTest_INLRTestException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addFailure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addFailure", // alternative name of method
  -1, // altlabelHashCode
  TestListener_methods_addFailure_INLRTest_INLRTestException__V_args, // the arguments
  0, //arguments count
  TestListener_methods_addFailure_INLRTest_INLRTestException__V_exceptions, // the declared exceptions
  TestListener_MetainfoWrapper::TestListener_method_addFailure_INLRTest_INLRTestException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_testExpr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "testExpr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestExpression::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestListener_methods_addSuccess_INLRTest_INLRTestExpression__V_args[] = 
{
  &TestListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test,
  &TestListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_testExpr,
  0
};

::acdk::lang::dmi::ClazzInfo* TestListener_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestListener_method_addSuccess_INLRTest_INLRTestExpression__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSuccess", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addSuccess", // alternative name of method
  -1, // altlabelHashCode
  TestListener_methods_addSuccess_INLRTest_INLRTestExpression__V_args, // the arguments
  0, //arguments count
  TestListener_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions, // the declared exceptions
  TestListener_MetainfoWrapper::TestListener_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestListener_methods_endTest_INLRTest__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestListener_methods_endTest_INLRTest__V_args[] = 
{
  &TestListener_methods_endTest_INLRTest__V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestListener_methods_endTest_INLRTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestListener_method_endTest_INLRTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_endTest", // alternative name of method
  -1, // altlabelHashCode
  TestListener_methods_endTest_INLRTest__V_args, // the arguments
  0, //arguments count
  TestListener_methods_endTest_INLRTest__V_exceptions, // the declared exceptions
  TestListener_MetainfoWrapper::TestListener_method_endTest_INLRTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestListener_methods_startTest_INLRTest__Z_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestListener_methods_startTest_INLRTest__Z_args[] = 
{
  &TestListener_methods_startTest_INLRTest__Z_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestListener_methods_startTest_INLRTest__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestListener_method_startTest_INLRTest__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_startTest", // alternative name of method
  -1, // altlabelHashCode
  TestListener_methods_startTest_INLRTest__Z_args, // the arguments
  0, //arguments count
  TestListener_methods_startTest_INLRTest__Z_exceptions, // the declared exceptions
  TestListener_MetainfoWrapper::TestListener_method_startTest_INLRTest__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestListener_methods[] = 
{
  &TestListener_method_GetClass__L_acdk_lang_RClass_,
  &TestListener_method_addError_INLRTest_INLRThrowable__V,
  &TestListener_method_addFailure_INLRTest_INLRTestException__V,
  &TestListener_method_addSuccess_INLRTest_INLRTestExpression__V,
  &TestListener_method_endTest_INLRTest__V,
  &TestListener_method_startTest_INLRTest__Z,
  0
};


struct TestListener_MetaInfoInitializer
{  TestListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestListener::clazzInfo();
    ci->fields =  _TestListener_fields;
    ci->methods =  _TestListener_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestListener_MetaInfoInitializer TestListener_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestResultEntry_create_array(int length)
{
  return new ObjectArrayImpl<RTestResultEntry>(length);
}

//static
::acdk::lang::RObject
TestResultEntry_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestResultEntry_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResultEntry_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestResultEntry::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResultEntry_method_TestResultEntry_INLRTest__LRTestResultEntry__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestResultEntry(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResultEntry_fields_errors_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResultEntry* This = dmi_cast<TestResultEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->errors, flags);
    else
      This->errors = ::acdk::lang::dmi::castTo< RThrowableArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResultEntry_fields_errput_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResultEntry* This = dmi_cast<TestResultEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->errput, flags);
    else
      This->errput = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResultEntry_fields_failures_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResultEntry* This = dmi_cast<TestResultEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->failures, flags);
    else
      This->failures = ::acdk::lang::dmi::castTo< RTestExceptionArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResultEntry_fields_output_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResultEntry* This = dmi_cast<TestResultEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->output, flags);
    else
      This->output = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResultEntry_fields_success_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResultEntry* This = dmi_cast<TestResultEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->success, flags);
    else
      This->success = ::acdk::lang::dmi::castTo< RTestExpressionArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResultEntry_fields_test_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResultEntry* This = dmi_cast<TestResultEntry>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->test, flags);
    else
      This->test = ::acdk::lang::dmi::castTo< RTest>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestResultEntry_fields_errors = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "errors", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowableArray::clazzInfo(),
  TestResultEntry_MetainfoWrapper::TestResultEntry_fields_errors_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestResultEntry_fields_errput = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "errput", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TestResultEntry_MetainfoWrapper::TestResultEntry_fields_errput_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestResultEntry_fields_failures = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "failures", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestExceptionArray::clazzInfo(),
  TestResultEntry_MetainfoWrapper::TestResultEntry_fields_failures_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestResultEntry_fields_output = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "output", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TestResultEntry_MetainfoWrapper::TestResultEntry_fields_output_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestResultEntry_fields_success = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "success", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestExpressionArray::clazzInfo(),
  TestResultEntry_MetainfoWrapper::TestResultEntry_fields_success_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestResultEntry_fields_test = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "test", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo(),
  TestResultEntry_MetainfoWrapper::TestResultEntry_fields_test_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestResultEntry_fields[] = 
{
  &TestResultEntry_fields_errors,
  &TestResultEntry_fields_errput,
  &TestResultEntry_fields_failures,
  &TestResultEntry_fields_output,
  &TestResultEntry_fields_success,
  &TestResultEntry_fields_test,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResultEntry_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResultEntry_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResultEntry_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestResultEntry_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestResultEntry_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestResultEntry_MetainfoWrapper::TestResultEntry_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResultEntry_methods_TestResultEntry_INLRTest__LRTestResultEntry__arg_t = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "t", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResultEntry_methods_TestResultEntry_INLRTest__LRTestResultEntry__args[] = 
{
  &TestResultEntry_methods_TestResultEntry_INLRTest__LRTestResultEntry__arg_t,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResultEntry_methods_TestResultEntry_INLRTest__LRTestResultEntry__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResultEntry_method_TestResultEntry_INLRTest__LRTestResultEntry_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestResultEntry", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestResultEntry::clazzInfo(), // return type
  "_0_TestResultEntry", // alternative name of method
  -1, // altlabelHashCode
  TestResultEntry_methods_TestResultEntry_INLRTest__LRTestResultEntry__args, // the arguments
  0, //arguments count
  TestResultEntry_methods_TestResultEntry_INLRTest__LRTestResultEntry__exceptions, // the declared exceptions
  TestResultEntry_MetainfoWrapper::TestResultEntry_method_TestResultEntry_INLRTest__LRTestResultEntry__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestResultEntry_methods[] = 
{
  &TestResultEntry_method_GetClass__L_acdk_lang_RClass_,
  &TestResultEntry_method_TestResultEntry_INLRTest__LRTestResultEntry_,
  0
};


struct TestResultEntry_MetaInfoInitializer
{  TestResultEntry_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestResultEntry::clazzInfo();
    ci->fields =  _TestResultEntry_fields;
    ci->methods =  _TestResultEntry_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestResultEntry_MetaInfoInitializer TestResultEntry_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestReport_create_array(int length)
{
  return new ObjectArrayImpl<RTestReport>(length);
}

//static
::acdk::lang::RObject
TestReport_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestReport_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestReport_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestReport::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestReport_method_print_INLRTestResultEntryArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestReport* This = dmi_cast<TestReport>(This_);
    This->print(::acdk::lang::dmi::castTo< RTestResultEntryArray>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _TestReport_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestReport_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestReport_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestReport_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestReport_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestReport_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestReport_MetainfoWrapper::TestReport_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestReport_methods_print_INLRTestResultEntryArray__V_arg_tests = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tests", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResultEntryArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestReport_methods_print_INLRTestResultEntryArray__V_args[] = 
{
  &TestReport_methods_print_INLRTestResultEntryArray__V_arg_tests,
  0
};

::acdk::lang::dmi::ClazzInfo* TestReport_methods_print_INLRTestResultEntryArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestReport_method_print_INLRTestResultEntryArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "print", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_print", // alternative name of method
  -1, // altlabelHashCode
  TestReport_methods_print_INLRTestResultEntryArray__V_args, // the arguments
  0, //arguments count
  TestReport_methods_print_INLRTestResultEntryArray__V_exceptions, // the declared exceptions
  TestReport_MetainfoWrapper::TestReport_method_print_INLRTestResultEntryArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestReport_methods[] = 
{
  &TestReport_method_GetClass__L_acdk_lang_RClass_,
  &TestReport_method_print_INLRTestResultEntryArray__V,
  0
};


struct TestReport_MetaInfoInitializer
{  TestReport_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestReport::clazzInfo();
    ci->fields =  _TestReport_fields;
    ci->methods =  _TestReport_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestReport_MetaInfoInitializer TestReport_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestResult_create_array(int length)
{
  return new ObjectArrayImpl<RTestResult>(length);
}

//static
::acdk::lang::RObject
TestResult_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestResult_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestResult::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestResult(::acdk::lang::dmi::castTo< acdk::io::RStringWriter>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::io::RStringWriter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_TestResult__LRTestResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestResult();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_TestResult_INLacdk_io_RStringWriter__LRTestResult__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestResult(::acdk::lang::dmi::castTo< acdk::io::RStringWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_addError_INLRTest_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestResult::addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    else
        This->addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_addFailure_INLRTest_INLRTestException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestResult::addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    else
        This->addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestResult::addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    else
        This->addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_addTestListener_INLRTestListener__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestResult::addTestListener(::acdk::lang::dmi::castTo< RTestListener>(args[0], dc));
    else
        This->addTestListener(::acdk::lang::dmi::castTo< RTestListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_endTest_INLRTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestResult::endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
        This->endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_getResults__LRTestResultEntryArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestResult::getResults();
    else
        ret = (::acdk::lang::RObject)This->getResults();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_removeTestListener_INLRTestListener__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestResult::removeTestListener(::acdk::lang::dmi::castTo< RTestListener>(args[0], dc));
    else
        This->removeTestListener(::acdk::lang::dmi::castTo< RTestListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_shouldStop__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestResult::shouldStop();
    else
      ret = This->shouldStop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_startTest_INLRTest__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestResult::startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
      ret = This->startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_stop__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestResult::stop();
    else
        This->stop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_testErrors__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestResult::testErrors();
    else
      ret = This->testErrors();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_testFailures__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestResult::testFailures();
    else
      ret = This->testFailures();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestResult_method_wasSuccessful__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestResult::wasSuccessful();
    else
      ret = This->wasSuccessful();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResult_fields__listener_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_listener, flags);
    else
      This->_listener = ::acdk::lang::dmi::castTo< RTestListenerArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResult_fields__stop_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stop, flags);
    else
      This->_stop = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResult_fields__success_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_success, flags);
    else
      This->_success = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestResult_fields__testCollector_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestResult* This = dmi_cast<TestResult>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_testCollector, flags);
    else
      This->_testCollector = ::acdk::lang::dmi::castTo< RTestCollectorListener>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestResult_fields__listener = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_listener", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestListenerArray::clazzInfo(),
  TestResult_MetainfoWrapper::TestResult_fields__listener_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestResult_fields__stop = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stop", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TestResult_MetainfoWrapper::TestResult_fields__stop_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestResult_fields__success = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_success", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TestResult_MetainfoWrapper::TestResult_fields__success_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestResult_fields__testCollector = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_testCollector", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestCollectorListener::clazzInfo(),
  TestResult_MetainfoWrapper::TestResult_fields__testCollector_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestResult_fields[] = 
{
  &TestResult_fields__listener,
  &TestResult_fields__stop,
  &TestResult_fields__success,
  &TestResult_fields__testCollector,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestResult_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RStringWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__arg_err = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "err", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RStringWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__args[] = 
{
  &TestResult_methods_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__arg_out,
  &TestResult_methods_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__arg_err,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestResult::clazzInfo(), // return type
  "_0_TestResult", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__args, // the arguments
  0, //arguments count
  TestResult_methods_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_TestResult__LRTestResult__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_TestResult__LRTestResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_TestResult__LRTestResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestResult::clazzInfo(), // return type
  "_1_TestResult", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_TestResult__LRTestResult__args, // the arguments
  0, //arguments count
  TestResult_methods_TestResult__LRTestResult__exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_TestResult__LRTestResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_TestResult_INLacdk_io_RStringWriter__LRTestResult__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RStringWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_TestResult_INLacdk_io_RStringWriter__LRTestResult__args[] = 
{
  &TestResult_methods_TestResult_INLacdk_io_RStringWriter__LRTestResult__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_TestResult_INLacdk_io_RStringWriter__LRTestResult__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_TestResult_INLacdk_io_RStringWriter__LRTestResult_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestResult", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestResult::clazzInfo(), // return type
  "_2_TestResult", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_TestResult_INLacdk_io_RStringWriter__LRTestResult__args, // the arguments
  0, //arguments count
  TestResult_methods_TestResult_INLacdk_io_RStringWriter__LRTestResult__exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_TestResult_INLacdk_io_RStringWriter__LRTestResult__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_addError_INLRTest_INLRThrowable__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_addError_INLRTest_INLRThrowable__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_addError_INLRTest_INLRThrowable__V_args[] = 
{
  &TestResult_methods_addError_INLRTest_INLRThrowable__V_arg_test,
  &TestResult_methods_addError_INLRTest_INLRThrowable__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_addError_INLRTest_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_addError_INLRTest_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addError", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_addError_INLRTest_INLRThrowable__V_args, // the arguments
  0, //arguments count
  TestResult_methods_addError_INLRTest_INLRThrowable__V_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_addError_INLRTest_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_addFailure_INLRTest_INLRTestException__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_addFailure_INLRTest_INLRTestException__V_arg_e = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "e", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_addFailure_INLRTest_INLRTestException__V_args[] = 
{
  &TestResult_methods_addFailure_INLRTest_INLRTestException__V_arg_test,
  &TestResult_methods_addFailure_INLRTest_INLRTestException__V_arg_e,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_addFailure_INLRTest_INLRTestException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_addFailure_INLRTest_INLRTestException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addFailure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_addFailure", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_addFailure_INLRTest_INLRTestException__V_args, // the arguments
  0, //arguments count
  TestResult_methods_addFailure_INLRTest_INLRTestException__V_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_addFailure_INLRTest_INLRTestException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_expr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestExpression::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_addSuccess_INLRTest_INLRTestExpression__V_args[] = 
{
  &TestResult_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test,
  &TestResult_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_expr,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_addSuccess_INLRTest_INLRTestExpression__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSuccess", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_addSuccess", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_addSuccess_INLRTest_INLRTestExpression__V_args, // the arguments
  0, //arguments count
  TestResult_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_addTestListener_INLRTestListener__V_arg_listener = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listener", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_addTestListener_INLRTestListener__V_args[] = 
{
  &TestResult_methods_addTestListener_INLRTestListener__V_arg_listener,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_addTestListener_INLRTestListener__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_addTestListener_INLRTestListener__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addTestListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_addTestListener", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_addTestListener_INLRTestListener__V_args, // the arguments
  0, //arguments count
  TestResult_methods_addTestListener_INLRTestListener__V_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_addTestListener_INLRTestListener__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_endTest_INLRTest__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_endTest_INLRTest__V_args[] = 
{
  &TestResult_methods_endTest_INLRTest__V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_endTest_INLRTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_endTest_INLRTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_endTest", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_endTest_INLRTest__V_args, // the arguments
  0, //arguments count
  TestResult_methods_endTest_INLRTest__V_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_endTest_INLRTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_getResults__LRTestResultEntryArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_getResults__LRTestResultEntryArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_getResults__LRTestResultEntryArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResultEntryArray::clazzInfo(), // return type
  "_3_getResults", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_getResults__LRTestResultEntryArray__args, // the arguments
  0, //arguments count
  TestResult_methods_getResults__LRTestResultEntryArray__exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_getResults__LRTestResultEntryArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_removeTestListener_INLRTestListener__V_arg_listener = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listener", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_removeTestListener_INLRTestListener__V_args[] = 
{
  &TestResult_methods_removeTestListener_INLRTestListener__V_arg_listener,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_removeTestListener_INLRTestListener__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_removeTestListener_INLRTestListener__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeTestListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_removeTestListener", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_removeTestListener_INLRTestListener__V_args, // the arguments
  0, //arguments count
  TestResult_methods_removeTestListener_INLRTestListener__V_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_removeTestListener_INLRTestListener__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_shouldStop__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_shouldStop__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_shouldStop__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "shouldStop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_shouldStop", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_shouldStop__Z_args, // the arguments
  0, //arguments count
  TestResult_methods_shouldStop__Z_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_shouldStop__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestResult_methods_startTest_INLRTest__Z_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_startTest_INLRTest__Z_args[] = 
{
  &TestResult_methods_startTest_INLRTest__Z_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_startTest_INLRTest__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_startTest_INLRTest__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_startTest", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_startTest_INLRTest__Z_args, // the arguments
  0, //arguments count
  TestResult_methods_startTest_INLRTest__Z_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_startTest_INLRTest__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_stop__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_stop__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_stop__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "stop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_stop", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_stop__V_args, // the arguments
  0, //arguments count
  TestResult_methods_stop__V_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_stop__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_testErrors__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_testErrors__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_testErrors__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "testErrors", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_testErrors", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_testErrors__I_args, // the arguments
  0, //arguments count
  TestResult_methods_testErrors__I_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_testErrors__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_testFailures__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_testFailures__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_testFailures__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "testFailures", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_testFailures", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_testFailures__I_args, // the arguments
  0, //arguments count
  TestResult_methods_testFailures__I_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_testFailures__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestResult_methods_wasSuccessful__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestResult_methods_wasSuccessful__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestResult_method_wasSuccessful__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wasSuccessful", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_wasSuccessful", // alternative name of method
  -1, // altlabelHashCode
  TestResult_methods_wasSuccessful__Z_args, // the arguments
  0, //arguments count
  TestResult_methods_wasSuccessful__Z_exceptions, // the declared exceptions
  TestResult_MetainfoWrapper::TestResult_method_wasSuccessful__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestResult_methods[] = 
{
  &TestResult_method_GetClass__L_acdk_lang_RClass_,
  &TestResult_method_TestResult_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestResult_,
  &TestResult_method_TestResult__LRTestResult_,
  &TestResult_method_TestResult_INLacdk_io_RStringWriter__LRTestResult_,
  &TestResult_method_addError_INLRTest_INLRThrowable__V,
  &TestResult_method_addFailure_INLRTest_INLRTestException__V,
  &TestResult_method_addSuccess_INLRTest_INLRTestExpression__V,
  &TestResult_method_addTestListener_INLRTestListener__V,
  &TestResult_method_endTest_INLRTest__V,
  &TestResult_method_getResults__LRTestResultEntryArray_,
  &TestResult_method_removeTestListener_INLRTestListener__V,
  &TestResult_method_shouldStop__Z,
  &TestResult_method_startTest_INLRTest__Z,
  &TestResult_method_stop__V,
  &TestResult_method_testErrors__I,
  &TestResult_method_testFailures__I,
  &TestResult_method_wasSuccessful__Z,
  0
};


struct TestResult_MetaInfoInitializer
{  TestResult_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestResult::clazzInfo();
    ci->fields =  _TestResult_fields;
    ci->methods =  _TestResult_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestResult_MetaInfoInitializer TestResult_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestTextReport_create_array(int length)
{
  return new ObjectArrayImpl<RTestTextReport>(length);
}

//static
::acdk::lang::RObject
TestTextReport_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestTextReport_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTextReport_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestTextReport::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTextReport_method_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestTextReport(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTextReport_method_TestTextReport_I_LRTestTextReport__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestTextReport(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestTextReport_method_print_INLRTestResultEntryArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestTextReport* This = dmi_cast<TestTextReport>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestTextReport::print(::acdk::lang::dmi::castTo< RTestResultEntryArray>(args[0], dc));
    else
        This->print(::acdk::lang::dmi::castTo< RTestResultEntryArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestTextReport_fields__options_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestTextReport* This = dmi_cast<TestTextReport>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_options, flags);
    else
      This->_options = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestTextReport_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestTextReport* This = dmi_cast<TestTextReport>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestTextReport_fields__options = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_options", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TestTextReport_MetainfoWrapper::TestTextReport_fields__options_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestTextReport_fields__out = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  TestTextReport_MetainfoWrapper::TestTextReport_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestTextReport_fields[] = 
{
  &TestTextReport_fields__options,
  &TestTextReport_fields__out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTextReport_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestTextReport_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTextReport_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestTextReport_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestTextReport_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestTextReport_MetainfoWrapper::TestTextReport_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTextReport_methods_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__arg_options = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "options", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTextReport_methods_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTextReport_methods_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__args[] = 
{
  &TestTextReport_methods_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__arg_options,
  &TestTextReport_methods_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTextReport_methods_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTextReport_method_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestTextReport", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestTextReport::clazzInfo(), // return type
  "_0_TestTextReport", // alternative name of method
  -1, // altlabelHashCode
  TestTextReport_methods_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__args, // the arguments
  0, //arguments count
  TestTextReport_methods_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__exceptions, // the declared exceptions
  TestTextReport_MetainfoWrapper::TestTextReport_method_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTextReport_methods_TestTextReport_I_LRTestTextReport__arg_options = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "options", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTextReport_methods_TestTextReport_I_LRTestTextReport__args[] = 
{
  &TestTextReport_methods_TestTextReport_I_LRTestTextReport__arg_options,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTextReport_methods_TestTextReport_I_LRTestTextReport__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTextReport_method_TestTextReport_I_LRTestTextReport_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestTextReport", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestTextReport::clazzInfo(), // return type
  "_1_TestTextReport", // alternative name of method
  -1, // altlabelHashCode
  TestTextReport_methods_TestTextReport_I_LRTestTextReport__args, // the arguments
  0, //arguments count
  TestTextReport_methods_TestTextReport_I_LRTestTextReport__exceptions, // the declared exceptions
  TestTextReport_MetainfoWrapper::TestTextReport_method_TestTextReport_I_LRTestTextReport__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestTextReport_methods_print_INLRTestResultEntryArray__V_arg_tests = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "tests", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResultEntryArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestTextReport_methods_print_INLRTestResultEntryArray__V_args[] = 
{
  &TestTextReport_methods_print_INLRTestResultEntryArray__V_arg_tests,
  0
};

::acdk::lang::dmi::ClazzInfo* TestTextReport_methods_print_INLRTestResultEntryArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestTextReport_method_print_INLRTestResultEntryArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "print", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_print", // alternative name of method
  -1, // altlabelHashCode
  TestTextReport_methods_print_INLRTestResultEntryArray__V_args, // the arguments
  0, //arguments count
  TestTextReport_methods_print_INLRTestResultEntryArray__V_exceptions, // the declared exceptions
  TestTextReport_MetainfoWrapper::TestTextReport_method_print_INLRTestResultEntryArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestTextReport_methods[] = 
{
  &TestTextReport_method_GetClass__L_acdk_lang_RClass_,
  &TestTextReport_method_TestTextReport_IINLacdk_io_RPrintWriter__LRTestTextReport_,
  &TestTextReport_method_TestTextReport_I_LRTestTextReport_,
  &TestTextReport_method_print_INLRTestResultEntryArray__V,
  0
};


struct TestTextReport_MetaInfoInitializer
{  TestTextReport_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestTextReport::clazzInfo();
    ci->fields =  _TestTextReport_fields;
    ci->methods =  _TestTextReport_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestTextReport_MetaInfoInitializer TestTextReport_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestCase_create_array(int length)
{
  return new ObjectArrayImpl<RTestCase>(length);
}

//static
::acdk::lang::RObject
TestCase_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestCase_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestCase::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_assertImplementation_ZINLRString_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestCase::assertImplementation(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    else
        This->assertImplementation(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestCase::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_name__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestCase::name();
    else
        ret = (::acdk::lang::RObject)This->name();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_run_INLRTestResult__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestCase::run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    else
        This->run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_runTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    This->runTest();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_setUp__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestCase::setUp();
    else
        This->setUp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_tearDown__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestCase::tearDown();
    else
        This->tearDown();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_testCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestCase::testCount();
    else
      ret = This->testCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCase_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestCase::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestCase_fields_NoSuccessTestLogging_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TestCase::NoSuccessTestLogging, flags);
    else
      TestCase::NoSuccessTestLogging = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestCase_fields_TestInBatchMode_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(TestCase::TestInBatchMode, flags);
    else
      TestCase::TestInBatchMode = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestCase_fields__activeResult_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_activeResult, flags);
    else
      This->_activeResult = ::acdk::lang::dmi::castTo< RTestResult>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestCase_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestCase* This = dmi_cast<TestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestCase_fields_NoSuccessTestLogging = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "NoSuccessTestLogging", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TestCase_MetainfoWrapper::TestCase_fields_NoSuccessTestLogging_accessor, // read/write access to this fields
  (void*)&TestCase::NoSuccessTestLogging // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestCase_fields_TestInBatchMode = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "TestInBatchMode", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  TestCase_MetainfoWrapper::TestCase_fields_TestInBatchMode_accessor, // read/write access to this fields
  (void*)&TestCase::TestInBatchMode // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestCase_fields__activeResult = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_activeResult", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResult::clazzInfo(),
  TestCase_MetainfoWrapper::TestCase_fields__activeResult_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestCase_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TestCase_MetainfoWrapper::TestCase_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestCase_fields[] = 
{
  &TestCase_fields_NoSuccessTestLogging,
  &TestCase_fields_TestInBatchMode,
  &TestCase_fields__activeResult,
  &TestCase_fields__name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestCase_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCase_methods_TestCase_INLRString__LRTestCase__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_TestCase_INLRString__LRTestCase__args[] = 
{
  &TestCase_methods_TestCase_INLRString__LRTestCase__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_TestCase_INLRString__LRTestCase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_TestCase_INLRString__LRTestCase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestCase::clazzInfo(), // return type
  "_0_TestCase", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_TestCase_INLRString__LRTestCase__args, // the arguments
  0, //arguments count
  TestCase_methods_TestCase_INLRString__LRTestCase__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_arg_condition = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "condition", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_arg_linenum = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "linenum", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_arg_fileName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_args[] = 
{
  &TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_arg_condition,
  &TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_arg_str,
  &TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_arg_linenum,
  &TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_arg_fileName,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_assertImplementation_ZINLRString_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assertImplementation", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_assertImplementation", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_args, // the arguments
  0, //arguments count
  TestCase_methods_assertImplementation_ZINLRString_IINLRString__V_exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_assertImplementation_ZINLRString_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getName", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_getName__LRString__args, // the arguments
  0, //arguments count
  TestCase_methods_getName__LRString__exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_name__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_name__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_name__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "name", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_name", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_name__LRString__args, // the arguments
  0, //arguments count
  TestCase_methods_name__LRString__exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_name__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCase_methods_run_INLRTestResult__V_arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResult::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_run_INLRTestResult__V_args[] = 
{
  &TestCase_methods_run_INLRTestResult__V_arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_run_INLRTestResult__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_run_INLRTestResult__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_run", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_run_INLRTestResult__V_args, // the arguments
  0, //arguments count
  TestCase_methods_run_INLRTestResult__V_exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_run_INLRTestResult__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_runTest__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_runTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_runTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "runTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_runTest", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_runTest__V_args, // the arguments
  0, //arguments count
  TestCase_methods_runTest__V_exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_runTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_setUp__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_setUp__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_setUp__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setUp", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_setUp__V_args, // the arguments
  0, //arguments count
  TestCase_methods_setUp__V_exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_setUp__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_tearDown__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_tearDown__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_tearDown__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tearDown", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_tearDown", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_tearDown__V_args, // the arguments
  0, //arguments count
  TestCase_methods_tearDown__V_exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_tearDown__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_testCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_testCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_testCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "testCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_testCount", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_testCount__I_args, // the arguments
  0, //arguments count
  TestCase_methods_testCount__I_exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_testCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCase_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCase_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCase_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_toString", // alternative name of method
  -1, // altlabelHashCode
  TestCase_methods_toString__LRString__args, // the arguments
  0, //arguments count
  TestCase_methods_toString__LRString__exceptions, // the declared exceptions
  TestCase_MetainfoWrapper::TestCase_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestCase_methods[] = 
{
  &TestCase_method_GetClass__L_acdk_lang_RClass_,
  &TestCase_method_TestCase_INLRString__LRTestCase_,
  &TestCase_method_assertImplementation_ZINLRString_IINLRString__V,
  &TestCase_method_getName__LRString_,
  &TestCase_method_name__LRString_,
  &TestCase_method_run_INLRTestResult__V,
  &TestCase_method_runTest__V,
  &TestCase_method_setUp__V,
  &TestCase_method_tearDown__V,
  &TestCase_method_testCount__I,
  &TestCase_method_toString__LRString_,
  0
};


struct TestCase_MetaInfoInitializer
{  TestCase_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestCase::clazzInfo();
    ci->fields =  _TestCase_fields;
    ci->methods =  _TestCase_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestCase_MetaInfoInitializer TestCase_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestSuite_create_array(int length)
{
  return new ObjectArrayImpl<RTestSuite>(length);
}

//static
::acdk::lang::RObject
TestSuite_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestSuite_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestSuite::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_TestSuite_INLRString__LRTestSuite__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestSuite(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_TestSuite__LRTestSuite__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestSuite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_addTest_INLRTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestSuite::addTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
        This->addTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestSuite::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_run_INLRTestResult__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestSuite::run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    else
        This->run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_runTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestSuite::runTest();
    else
        This->runTest();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_suite__L_acdk_tools_aunit_RTest__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestSuite::suite();
    else
        ret = (::acdk::lang::RObject)This->suite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_testCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestSuite::testCount();
    else
      ret = This->testCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_tests__LRTestArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestSuite::tests();
    else
        ret = (::acdk::lang::RObject)This->tests();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestSuite_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestSuite::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestSuite_fields__tests_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestSuite* This = dmi_cast<TestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tests, flags);
    else
      This->_tests = ::acdk::lang::dmi::castTo< RTestArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestSuite_fields__tests = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tests", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestArray::clazzInfo(),
  TestSuite_MetainfoWrapper::TestSuite_fields__tests_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestSuite_fields[] = 
{
  &TestSuite_fields__tests,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestSuite_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestSuite_methods_TestSuite_INLRString__LRTestSuite__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_TestSuite_INLRString__LRTestSuite__args[] = 
{
  &TestSuite_methods_TestSuite_INLRString__LRTestSuite__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_TestSuite_INLRString__LRTestSuite__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_TestSuite_INLRString__LRTestSuite_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestSuite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestSuite::clazzInfo(), // return type
  "_0_TestSuite", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_TestSuite_INLRString__LRTestSuite__args, // the arguments
  0, //arguments count
  TestSuite_methods_TestSuite_INLRString__LRTestSuite__exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_TestSuite_INLRString__LRTestSuite__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_TestSuite__LRTestSuite__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_TestSuite__LRTestSuite__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_TestSuite__LRTestSuite_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestSuite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestSuite::clazzInfo(), // return type
  "_1_TestSuite", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_TestSuite__LRTestSuite__args, // the arguments
  0, //arguments count
  TestSuite_methods_TestSuite__LRTestSuite__exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_TestSuite__LRTestSuite__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestSuite_methods_addTest_INLRTest__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_addTest_INLRTest__V_args[] = 
{
  &TestSuite_methods_addTest_INLRTest__V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_addTest_INLRTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_addTest_INLRTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addTest", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_addTest_INLRTest__V_args, // the arguments
  0, //arguments count
  TestSuite_methods_addTest_INLRTest__V_exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_addTest_INLRTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getName", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_getName__LRString__args, // the arguments
  0, //arguments count
  TestSuite_methods_getName__LRString__exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestSuite_methods_run_INLRTestResult__V_arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResult::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_run_INLRTestResult__V_args[] = 
{
  &TestSuite_methods_run_INLRTestResult__V_arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_run_INLRTestResult__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_run_INLRTestResult__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_run", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_run_INLRTestResult__V_args, // the arguments
  0, //arguments count
  TestSuite_methods_run_INLRTestResult__V_exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_run_INLRTestResult__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_runTest__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_runTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_runTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "runTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_runTest", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_runTest__V_args, // the arguments
  0, //arguments count
  TestSuite_methods_runTest__V_exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_runTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_suite__L_acdk_tools_aunit_RTest__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_suite__L_acdk_tools_aunit_RTest__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_suite__L_acdk_tools_aunit_RTest_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "suite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::tools::aunit::RTest::clazzInfo(), // return type
  "_6_suite", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_suite__L_acdk_tools_aunit_RTest__args, // the arguments
  0, //arguments count
  TestSuite_methods_suite__L_acdk_tools_aunit_RTest__exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_suite__L_acdk_tools_aunit_RTest__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_testCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_testCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_testCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "testCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_testCount", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_testCount__I_args, // the arguments
  0, //arguments count
  TestSuite_methods_testCount__I_exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_testCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_tests__LRTestArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_tests__LRTestArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_tests__LRTestArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tests", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestArray::clazzInfo(), // return type
  "_9_tests", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_tests__LRTestArray__args, // the arguments
  0, //arguments count
  TestSuite_methods_tests__LRTestArray__exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_tests__LRTestArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestSuite_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestSuite_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestSuite_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_toString", // alternative name of method
  -1, // altlabelHashCode
  TestSuite_methods_toString__LRString__args, // the arguments
  0, //arguments count
  TestSuite_methods_toString__LRString__exceptions, // the declared exceptions
  TestSuite_MetainfoWrapper::TestSuite_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestSuite_methods[] = 
{
  &TestSuite_method_GetClass__L_acdk_lang_RClass_,
  &TestSuite_method_TestSuite_INLRString__LRTestSuite_,
  &TestSuite_method_TestSuite__LRTestSuite_,
  &TestSuite_method_addTest_INLRTest__V,
  &TestSuite_method_getName__LRString_,
  &TestSuite_method_run_INLRTestResult__V,
  &TestSuite_method_runTest__V,
  &TestSuite_method_suite__L_acdk_tools_aunit_RTest_,
  &TestSuite_method_testCount__I,
  &TestSuite_method_tests__LRTestArray_,
  &TestSuite_method_toString__LRString_,
  0
};


struct TestSuite_MetaInfoInitializer
{  TestSuite_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestSuite::clazzInfo();
    ci->fields =  _TestSuite_fields;
    ci->methods =  _TestSuite_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestSuite_MetaInfoInitializer TestSuite_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit

