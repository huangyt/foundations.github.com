// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../mc.h"
#include "../ArgumentInfo.h"
#include "../ClassInfo.h"
#include "../ClassInitAttribute.h"
#include "../ClazzFlagAttribute.h"
#include "../ClazzNameAttribute.h"
#include "../CMCException.h"
#include "../CodeAttribute.h"
#include "../CodeInfo.h"
#include "../Config.h"
#include "../DispatchForwardAttributeTest.h"
#include "../DmiProxyAttribute.h"
#include "../DmiProxyGenerator.h"
#include "../DmiProxyGeneratorExt.h"
#include "../EnumArgAttribute.h"
#include "../EnumInfo.h"
#include "../FieldInfo.h"
#include "../InvokeForwardAttribute.h"
#include "../mc.h"
#include "../McConfigAttribute.h"
#include "../MetaCompiler.h"
#include "../MethodAltNameAttribute.h"
#include "../MethodInfo.h"
#include "../ModuleInfo.h"
#include "../SetDispatchAttribute.h"
#include "../StringTagAttribute.h"
#include "../SuperInfo.h"
#include "../ThrowableAttribute.h"
#include "../TokenStack.h"
#include "../TypeScope.h"
#include "../UnitInfo.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace tools { 
namespace mc { 

class ClassInitAttribute_DmiProxy
: extends ClassInitAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ClassInitAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = ClassInitAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ClassInitAttribute_DmiProxy(IN(::acdk::lang::RString) initFunction, IN(::acdk::lang::RString) deinitFunction)
  : ClassInitAttribute(initFunction, deinitFunction)
  { clazzInfo()->_resolveSupers(true, false); }
  ClassInitAttribute_DmiProxy()
  : ClassInitAttribute()
  { clazzInfo()->_resolveSupers(true, false); }
  ClassInitAttribute_DmiProxy(IN(::acdk::lang::RString) initFunction)
  : ClassInitAttribute(initFunction)
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, ClassInitAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ClassInitAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ClassInitAttribute_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ClassInitAttribute_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ClassInitAttribute_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ClassInitAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ClassInitAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ClassInitAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ClassInitAttribute_DmiProxy_interfaces[] =
{
  &ClassInitAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String_arg_initFunction =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "initFunction",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String_arg_deinitFunction =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "deinitFunction",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassInitAttribute_methods__ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String_args[] = 
{
  &ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String_arg_initFunction,
  &ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String_arg_deinitFunction,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ClassInitAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ClassInitAttribute::clazzInfo(), // returnType
  "_0_ClassInitAttribute_DmiProxy", // altname
  ClassInitAttribute_methods__ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  ClassInitAttribute_DmiProxy::_ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassInitAttribute_methods__ClassInitAttribute_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassInitAttribute_DmiProxy_methods__ClassInitAttribute = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ClassInitAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ClassInitAttribute::clazzInfo(), // returnType
  "_1_ClassInitAttribute_DmiProxy", // altname
  ClassInitAttribute_methods__ClassInitAttribute_args,
  0, // argumentCount
  0, // excpetions,
  ClassInitAttribute_DmiProxy::_ClassInitAttribute_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String_arg_initFunction =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "initFunction",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClassInitAttribute_methods__ClassInitAttribute_in_acdk_lang_String_args[] = 
{
  &ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String_arg_initFunction,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ClassInitAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ClassInitAttribute::clazzInfo(), // returnType
  "_2_ClassInitAttribute_DmiProxy", // altname
  ClassInitAttribute_methods__ClassInitAttribute_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  ClassInitAttribute_DmiProxy::_ClassInitAttribute_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ClassInitAttribute_methods[] = 
{
  &ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String_in_acdk_lang_String,
  &ClassInitAttribute_DmiProxy_methods__ClassInitAttribute,
  &ClassInitAttribute_DmiProxy_methods__ClassInitAttribute_in_acdk_lang_String,
  0
};

::acdk::lang::dmi::ClazzInfo* ClassInitAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ClassInitAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _ClassInitAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ClassInitAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ClassInitAttribute_DmiProxy(ClassInitAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class ClazzFlagAttribute_DmiProxy
: extends ClazzFlagAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ClazzFlagAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = ClazzFlagAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ClazzFlagAttribute_DmiProxy(int flags)
  : ClazzFlagAttribute(flags)
  { clazzInfo()->_resolveSupers(true, false); }
  ClazzFlagAttribute_DmiProxy()
  : ClazzFlagAttribute()
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, ClazzFlagAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ClazzFlagAttribute_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ClazzFlagAttribute_DmiProxy(args[0].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ClazzFlagAttribute_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ClazzFlagAttribute_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ClazzFlagAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ClazzFlagAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ClazzFlagAttribute_DmiProxy_interfaces[] =
{
  &ClazzFlagAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClazzFlagAttribute_DmiProxy_methods__ClazzFlagAttribute_I_arg_flags =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "flags",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzFlagAttribute_methods__ClazzFlagAttribute_I_args[] = 
{
  &ClazzFlagAttribute_DmiProxy_methods__ClazzFlagAttribute_I_arg_flags,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzFlagAttribute_DmiProxy_methods__ClazzFlagAttribute_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ClazzFlagAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ClazzFlagAttribute::clazzInfo(), // returnType
  "_0_ClazzFlagAttribute_DmiProxy", // altname
  ClazzFlagAttribute_methods__ClazzFlagAttribute_I_args,
  0, // argumentCount
  0, // excpetions,
  ClazzFlagAttribute_DmiProxy::_ClazzFlagAttribute_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzFlagAttribute_methods__ClazzFlagAttribute_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzFlagAttribute_DmiProxy_methods__ClazzFlagAttribute = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ClazzFlagAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ClazzFlagAttribute::clazzInfo(), // returnType
  "_1_ClazzFlagAttribute_DmiProxy", // altname
  ClazzFlagAttribute_methods__ClazzFlagAttribute_args,
  0, // argumentCount
  0, // excpetions,
  ClazzFlagAttribute_DmiProxy::_ClazzFlagAttribute_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ClazzFlagAttribute_methods[] = 
{
  &ClazzFlagAttribute_DmiProxy_methods__ClazzFlagAttribute_I,
  &ClazzFlagAttribute_DmiProxy_methods__ClazzFlagAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzFlagAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ClazzFlagAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _ClazzFlagAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ClazzFlagAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ClazzFlagAttribute_DmiProxy(ClazzFlagAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class ClazzNameAttribute_DmiProxy
: extends ClazzNameAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ClazzNameAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = ClazzNameAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ClazzNameAttribute_DmiProxy(IN(::acdk::lang::RString) name)
  : ClazzNameAttribute(name)
  { clazzInfo()->_resolveSupers(true, false); }
  ClazzNameAttribute_DmiProxy()
  : ClazzNameAttribute()
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, ClazzNameAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ClazzNameAttribute_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ClazzNameAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ClazzNameAttribute_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ClazzNameAttribute_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ClazzNameAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ClazzNameAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ClazzNameAttribute_DmiProxy_interfaces[] =
{
  &ClazzNameAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ClazzNameAttribute_DmiProxy_methods__ClazzNameAttribute_in_acdk_lang_String_arg_name =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "name",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzNameAttribute_methods__ClazzNameAttribute_in_acdk_lang_String_args[] = 
{
  &ClazzNameAttribute_DmiProxy_methods__ClazzNameAttribute_in_acdk_lang_String_arg_name,
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzNameAttribute_DmiProxy_methods__ClazzNameAttribute_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ClazzNameAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ClazzNameAttribute::clazzInfo(), // returnType
  "_0_ClazzNameAttribute_DmiProxy", // altname
  ClazzNameAttribute_methods__ClazzNameAttribute_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  ClazzNameAttribute_DmiProxy::_ClazzNameAttribute_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ClazzNameAttribute_methods__ClazzNameAttribute_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ClazzNameAttribute_DmiProxy_methods__ClazzNameAttribute = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "ClazzNameAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ClazzNameAttribute::clazzInfo(), // returnType
  "_1_ClazzNameAttribute_DmiProxy", // altname
  ClazzNameAttribute_methods__ClazzNameAttribute_args,
  0, // argumentCount
  0, // excpetions,
  ClazzNameAttribute_DmiProxy::_ClazzNameAttribute_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ClazzNameAttribute_methods[] = 
{
  &ClazzNameAttribute_DmiProxy_methods__ClazzNameAttribute_in_acdk_lang_String,
  &ClazzNameAttribute_DmiProxy_methods__ClazzNameAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* ClazzNameAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ClazzNameAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _ClazzNameAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ClazzNameAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ClazzNameAttribute_DmiProxy(ClazzNameAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class CodeAttribute_DmiProxy
: extends CodeAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(CodeAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = CodeAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
};

::acdk::lang::dmi::ClazzSuperInfo CodeAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  CodeAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CodeAttribute_DmiProxy_interfaces[] =
{
  &CodeAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodInfo* CodeAttribute_methods[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CodeAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "CodeAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _CodeAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     CodeAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_CodeAttribute_DmiProxy(CodeAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class DmiProxyAttribute_DmiProxy
: extends DmiProxyAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(DmiProxyAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = DmiProxyAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  DmiProxyAttribute_DmiProxy(bool generateProxy)
  : DmiProxyAttribute(generateProxy)
  { clazzInfo()->_resolveSupers(true, false); }
  DmiProxyAttribute_DmiProxy()
  : DmiProxyAttribute()
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, DmiProxyAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _DmiProxyAttribute_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new DmiProxyAttribute_DmiProxy(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _DmiProxyAttribute_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new DmiProxyAttribute_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo DmiProxyAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  DmiProxyAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DmiProxyAttribute_DmiProxy_interfaces[] =
{
  &DmiProxyAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiProxyAttribute_DmiProxy_methods__DmiProxyAttribute_Z_arg_generateProxy =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "generateProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiProxyAttribute_methods__DmiProxyAttribute_Z_args[] = 
{
  &DmiProxyAttribute_DmiProxy_methods__DmiProxyAttribute_Z_arg_generateProxy,
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiProxyAttribute_DmiProxy_methods__DmiProxyAttribute_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "DmiProxyAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  DmiProxyAttribute::clazzInfo(), // returnType
  "_0_DmiProxyAttribute_DmiProxy", // altname
  DmiProxyAttribute_methods__DmiProxyAttribute_Z_args,
  0, // argumentCount
  0, // excpetions,
  DmiProxyAttribute_DmiProxy::_DmiProxyAttribute_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiProxyAttribute_methods__DmiProxyAttribute_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiProxyAttribute_DmiProxy_methods__DmiProxyAttribute = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "DmiProxyAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  DmiProxyAttribute::clazzInfo(), // returnType
  "_1_DmiProxyAttribute_DmiProxy", // altname
  DmiProxyAttribute_methods__DmiProxyAttribute_args,
  0, // argumentCount
  0, // excpetions,
  DmiProxyAttribute_DmiProxy::_DmiProxyAttribute_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* DmiProxyAttribute_methods[] = 
{
  &DmiProxyAttribute_DmiProxy_methods__DmiProxyAttribute_Z,
  &DmiProxyAttribute_DmiProxy_methods__DmiProxyAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiProxyAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "DmiProxyAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _DmiProxyAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     DmiProxyAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_DmiProxyAttribute_DmiProxy(DmiProxyAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class InvokeForwardAttribute_DmiProxy
: extends InvokeForwardAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(InvokeForwardAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = InvokeForwardAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  InvokeForwardAttribute_DmiProxy(bool generate)
  : InvokeForwardAttribute(generate)
  { clazzInfo()->_resolveSupers(true, false); }
  InvokeForwardAttribute_DmiProxy()
  : InvokeForwardAttribute()
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, InvokeForwardAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _InvokeForwardAttribute_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new InvokeForwardAttribute_DmiProxy(args[0].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _InvokeForwardAttribute_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new InvokeForwardAttribute_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo InvokeForwardAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  InvokeForwardAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InvokeForwardAttribute_DmiProxy_interfaces[] =
{
  &InvokeForwardAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo InvokeForwardAttribute_DmiProxy_methods__InvokeForwardAttribute_Z_arg_generate =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "generate",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvokeForwardAttribute_methods__InvokeForwardAttribute_Z_args[] = 
{
  &InvokeForwardAttribute_DmiProxy_methods__InvokeForwardAttribute_Z_arg_generate,
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvokeForwardAttribute_DmiProxy_methods__InvokeForwardAttribute_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "InvokeForwardAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  InvokeForwardAttribute::clazzInfo(), // returnType
  "_0_InvokeForwardAttribute_DmiProxy", // altname
  InvokeForwardAttribute_methods__InvokeForwardAttribute_Z_args,
  0, // argumentCount
  0, // excpetions,
  InvokeForwardAttribute_DmiProxy::_InvokeForwardAttribute_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvokeForwardAttribute_methods__InvokeForwardAttribute_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvokeForwardAttribute_DmiProxy_methods__InvokeForwardAttribute = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "InvokeForwardAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  InvokeForwardAttribute::clazzInfo(), // returnType
  "_1_InvokeForwardAttribute_DmiProxy", // altname
  InvokeForwardAttribute_methods__InvokeForwardAttribute_args,
  0, // argumentCount
  0, // excpetions,
  InvokeForwardAttribute_DmiProxy::_InvokeForwardAttribute_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* InvokeForwardAttribute_methods[] = 
{
  &InvokeForwardAttribute_DmiProxy_methods__InvokeForwardAttribute_Z,
  &InvokeForwardAttribute_DmiProxy_methods__InvokeForwardAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* InvokeForwardAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "InvokeForwardAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _InvokeForwardAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     InvokeForwardAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_InvokeForwardAttribute_DmiProxy(InvokeForwardAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class McConfigAttribute_DmiProxy
: extends McConfigAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(McConfigAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = McConfigAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  McConfigAttribute_DmiProxy(bool GenMethod, bool GenField)
  : McConfigAttribute(GenMethod, GenField)
  { clazzInfo()->_resolveSupers(true, false); }
  McConfigAttribute_DmiProxy()
  : McConfigAttribute()
  { clazzInfo()->_resolveSupers(true, false); }
  McConfigAttribute_DmiProxy(bool GenMethod)
  : McConfigAttribute(GenMethod)
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, McConfigAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _McConfigAttribute_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new McConfigAttribute_DmiProxy(args[0].getBoolVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _McConfigAttribute_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new McConfigAttribute_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _McConfigAttribute_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new McConfigAttribute_DmiProxy(args[0].getBoolVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo McConfigAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  McConfigAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _McConfigAttribute_DmiProxy_interfaces[] =
{
  &McConfigAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z_Z_arg_GenMethod =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "GenMethod",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z_Z_arg_GenField =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "GenField",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* McConfigAttribute_methods__McConfigAttribute_Z_Z_args[] = 
{
  &McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z_Z_arg_GenMethod,
  &McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z_Z_arg_GenField,
  0
};

::acdk::lang::dmi::ClazzMethodInfo McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "McConfigAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  McConfigAttribute::clazzInfo(), // returnType
  "_0_McConfigAttribute_DmiProxy", // altname
  McConfigAttribute_methods__McConfigAttribute_Z_Z_args,
  0, // argumentCount
  0, // excpetions,
  McConfigAttribute_DmiProxy::_McConfigAttribute_Z_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* McConfigAttribute_methods__McConfigAttribute_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo McConfigAttribute_DmiProxy_methods__McConfigAttribute = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "McConfigAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  McConfigAttribute::clazzInfo(), // returnType
  "_1_McConfigAttribute_DmiProxy", // altname
  McConfigAttribute_methods__McConfigAttribute_args,
  0, // argumentCount
  0, // excpetions,
  McConfigAttribute_DmiProxy::_McConfigAttribute_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z_arg_GenMethod =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "GenMethod",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* McConfigAttribute_methods__McConfigAttribute_Z_args[] = 
{
  &McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z_arg_GenMethod,
  0
};

::acdk::lang::dmi::ClazzMethodInfo McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "McConfigAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  McConfigAttribute::clazzInfo(), // returnType
  "_2_McConfigAttribute_DmiProxy", // altname
  McConfigAttribute_methods__McConfigAttribute_Z_args,
  0, // argumentCount
  0, // excpetions,
  McConfigAttribute_DmiProxy::_McConfigAttribute_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* McConfigAttribute_methods[] = 
{
  &McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z_Z,
  &McConfigAttribute_DmiProxy_methods__McConfigAttribute,
  &McConfigAttribute_DmiProxy_methods__McConfigAttribute_Z,
  0
};

::acdk::lang::dmi::ClazzInfo* McConfigAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "McConfigAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _McConfigAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     McConfigAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_McConfigAttribute_DmiProxy(McConfigAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class MethodAltNameAttribute_DmiProxy
: extends MethodAltNameAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(MethodAltNameAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = MethodAltNameAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  MethodAltNameAttribute_DmiProxy(IN(::acdk::lang::RString) altName, int paramCount)
  : MethodAltNameAttribute(altName, paramCount)
  { clazzInfo()->_resolveSupers(true, false); }
  MethodAltNameAttribute_DmiProxy(IN(::acdk::lang::RString) altName)
  : MethodAltNameAttribute(altName)
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, MethodAltNameAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _MethodAltNameAttribute_in_acdk_lang_String_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new MethodAltNameAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), args[1].getIntVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _MethodAltNameAttribute_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new MethodAltNameAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo MethodAltNameAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  MethodAltNameAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MethodAltNameAttribute_DmiProxy_interfaces[] =
{
  &MethodAltNameAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String_I_arg_altName =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "altName",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String_I_arg_paramCount =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "paramCount",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* MethodAltNameAttribute_methods__MethodAltNameAttribute_in_acdk_lang_String_I_args[] = 
{
  &MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String_I_arg_altName,
  &MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String_I_arg_paramCount,
  0
};

::acdk::lang::dmi::ClazzMethodInfo MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "MethodAltNameAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  MethodAltNameAttribute::clazzInfo(), // returnType
  "_0_MethodAltNameAttribute_DmiProxy", // altname
  MethodAltNameAttribute_methods__MethodAltNameAttribute_in_acdk_lang_String_I_args,
  0, // argumentCount
  0, // excpetions,
  MethodAltNameAttribute_DmiProxy::_MethodAltNameAttribute_in_acdk_lang_String_I_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String_arg_altName =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "altName",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* MethodAltNameAttribute_methods__MethodAltNameAttribute_in_acdk_lang_String_args[] = 
{
  &MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String_arg_altName,
  0
};

::acdk::lang::dmi::ClazzMethodInfo MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "MethodAltNameAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  MethodAltNameAttribute::clazzInfo(), // returnType
  "_1_MethodAltNameAttribute_DmiProxy", // altname
  MethodAltNameAttribute_methods__MethodAltNameAttribute_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  MethodAltNameAttribute_DmiProxy::_MethodAltNameAttribute_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* MethodAltNameAttribute_methods[] = 
{
  &MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String_I,
  &MethodAltNameAttribute_DmiProxy_methods__MethodAltNameAttribute_in_acdk_lang_String,
  0
};

::acdk::lang::dmi::ClazzInfo* MethodAltNameAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "MethodAltNameAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _MethodAltNameAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     MethodAltNameAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_MethodAltNameAttribute_DmiProxy(MethodAltNameAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class SetDispatchAttribute_DmiProxy
: extends SetDispatchAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(SetDispatchAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = SetDispatchAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  SetDispatchAttribute_DmiProxy(IN(::acdk::lang::RString) signature, bool staticCall)
  : SetDispatchAttribute(signature, staticCall)
  { clazzInfo()->_resolveSupers(true, false); }
  SetDispatchAttribute_DmiProxy()
  : SetDispatchAttribute()
  { clazzInfo()->_resolveSupers(true, false); }
  SetDispatchAttribute_DmiProxy(IN(::acdk::lang::RString) signature)
  : SetDispatchAttribute(signature)
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, SetDispatchAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _SetDispatchAttribute_in_acdk_lang_String_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new SetDispatchAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), args[1].getBoolVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _SetDispatchAttribute_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new SetDispatchAttribute_DmiProxy();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _SetDispatchAttribute_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new SetDispatchAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo SetDispatchAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  SetDispatchAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SetDispatchAttribute_DmiProxy_interfaces[] =
{
  &SetDispatchAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String_Z_arg_signature =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "signature",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String_Z_arg_staticCall =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "staticCall",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz()
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetDispatchAttribute_methods__SetDispatchAttribute_in_acdk_lang_String_Z_args[] = 
{
  &SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String_Z_arg_signature,
  &SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String_Z_arg_staticCall,
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "SetDispatchAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  SetDispatchAttribute::clazzInfo(), // returnType
  "_0_SetDispatchAttribute_DmiProxy", // altname
  SetDispatchAttribute_methods__SetDispatchAttribute_in_acdk_lang_String_Z_args,
  0, // argumentCount
  0, // excpetions,
  SetDispatchAttribute_DmiProxy::_SetDispatchAttribute_in_acdk_lang_String_Z_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetDispatchAttribute_methods__SetDispatchAttribute_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "SetDispatchAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  SetDispatchAttribute::clazzInfo(), // returnType
  "_1_SetDispatchAttribute_DmiProxy", // altname
  SetDispatchAttribute_methods__SetDispatchAttribute_args,
  0, // argumentCount
  0, // excpetions,
  SetDispatchAttribute_DmiProxy::_SetDispatchAttribute_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String_arg_signature =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "signature",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* SetDispatchAttribute_methods__SetDispatchAttribute_in_acdk_lang_String_args[] = 
{
  &SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String_arg_signature,
  0
};

::acdk::lang::dmi::ClazzMethodInfo SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "SetDispatchAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  SetDispatchAttribute::clazzInfo(), // returnType
  "_2_SetDispatchAttribute_DmiProxy", // altname
  SetDispatchAttribute_methods__SetDispatchAttribute_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  SetDispatchAttribute_DmiProxy::_SetDispatchAttribute_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* SetDispatchAttribute_methods[] = 
{
  &SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String_Z,
  &SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute,
  &SetDispatchAttribute_DmiProxy_methods__SetDispatchAttribute_in_acdk_lang_String,
  0
};

::acdk::lang::dmi::ClazzInfo* SetDispatchAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "SetDispatchAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _SetDispatchAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     SetDispatchAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_SetDispatchAttribute_DmiProxy(SetDispatchAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class StringTagAttribute_DmiProxy
: extends StringTagAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(StringTagAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = StringTagAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  StringTagAttribute_DmiProxy(IN(::acdk::lang::RString) k, IN(::acdk::lang::RString) val)
  : StringTagAttribute(k, val)
  { clazzInfo()->_resolveSupers(true, false); }
  StringTagAttribute_DmiProxy(IN(::acdk::lang::RString) k)
  : StringTagAttribute(k)
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, StringTagAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StringTagAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar(), (::acdk::lang::RString)args[1].getObjectVar());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _StringTagAttribute_in_acdk_lang_String_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new StringTagAttribute_DmiProxy((::acdk::lang::RString)args[0].getObjectVar());
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo StringTagAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  StringTagAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringTagAttribute_DmiProxy_interfaces[] =
{
  &StringTagAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String_arg_k =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "k",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String_arg_val =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit,
  0, //AttributesRes
  "val",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTagAttribute_methods__StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String_args[] = 
{
  &StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String_arg_k,
  &StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String_arg_val,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "StringTagAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StringTagAttribute::clazzInfo(), // returnType
  "_0_StringTagAttribute_DmiProxy", // altname
  StringTagAttribute_methods__StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  StringTagAttribute_DmiProxy::_StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String_arg_k =
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn,
  0, //AttributesRes
  "k",
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::String::clazzInfo()
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringTagAttribute_methods__StringTagAttribute_in_acdk_lang_String_args[] = 
{
  &StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String_arg_k,
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,
  0, //AttributesRes
  "StringTagAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  StringTagAttribute::clazzInfo(), // returnType
  "_1_StringTagAttribute_DmiProxy", // altname
  StringTagAttribute_methods__StringTagAttribute_in_acdk_lang_String_args,
  0, // argumentCount
  0, // excpetions,
  StringTagAttribute_DmiProxy::_StringTagAttribute_in_acdk_lang_String_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* StringTagAttribute_methods[] = 
{
  &StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String_in_acdk_lang_String,
  &StringTagAttribute_DmiProxy_methods__StringTagAttribute_in_acdk_lang_String,
  0
};

::acdk::lang::dmi::ClazzInfo* StringTagAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "StringTagAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _StringTagAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     StringTagAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_StringTagAttribute_DmiProxy(StringTagAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc


namespace acdk { 
namespace tools { 
namespace mc { 

class ThrowableAttribute_DmiProxy
: extends ThrowableAttribute
, implements ::acdk::lang::dmi::DmiProxyBase
{
  ACDK_PROXY_WITH_METAINFO(ThrowableAttribute)
public:
  ::acdk::lang::Object* _cast(const ::acdk::lang::dmi::ClazzInfo* ci) {     ::acdk::lang::Object* ret = ThrowableAttribute::_cast(ci);
    if (ret != 0) return ret;
    return (_dmiProxyCast(ci));
  }
  ::acdk::lang::Object* getDmiTarget(bool& forwarded, const ::acdk::lang::dmi::ClazzInfo*& ci) { return _dmiProxygetDmiTarget(forwarded, ci); }
  ThrowableAttribute_DmiProxy()
  : ThrowableAttribute()
  { clazzInfo()->_resolveSupers(true, false); }
  bool apply(IN(::acdk::lang::RObject) cm)
  {
    if (_dmiProxyIsOverloaded(getClazzInfo(), ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, CodeAttribute)::clazzInfo()->methods[1]) == false)
    {
      return ACDK_FQ_SUPER_QUALIFIER(::acdk::tools::mc::, ThrowableAttribute)::apply(cm);
    }
    ::acdk::lang::dmi::ScriptVar __acdk_retval;
    ::acdk::lang::dmi::ScriptVarArray __acdk_args(1);
    __acdk_args[0] = ::acdk::lang::inOf(cm);
    _dmiProxyGetTarget()->standardDispatch("apply", __acdk_retval, __acdk_args, _dmiClient, Nil, 0, _dmiProxyGetTarget()->clazzInfo(), 0);
    return __acdk_retval;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo*
  _ThrowableAttribute_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject) new ThrowableAttribute_DmiProxy();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzSuperInfo ThrowableAttribute_DmiProxy_super =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ThrowableAttribute::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ThrowableAttribute_DmiProxy_interfaces[] =
{
  &ThrowableAttribute_DmiProxy_super,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowableAttribute_methods__ThrowableAttribute_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowableAttribute_DmiProxy_methods__ThrowableAttribute = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,
  0, //AttributesRes
  "ThrowableAttribute_DmiProxy",
  "", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  ThrowableAttribute::clazzInfo(), // returnType
  "_0_ThrowableAttribute_DmiProxy", // altname
  ThrowableAttribute_methods__ThrowableAttribute_args,
  0, // argumentCount
  0, // excpetions,
  ThrowableAttribute_DmiProxy::_ThrowableAttribute_dispatch,
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, 
  0 // cached methodhash
};

::acdk::lang::dmi::ClazzMethodInfo* ThrowableAttribute_methods[] = 
{
  &ThrowableAttribute_DmiProxy_methods__ThrowableAttribute,
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowableAttribute_DmiProxy::clazzInfo()
{
static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
  {
    ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiResolved, // clazz-flags
    0, //AttributesRes
    "ThrowableAttribute_DmiProxy", // name of class
    "acdk/tools/mc", // the namespace
     0, // _scopeParent
     0, // _nextSibling
     0, // type
     _ThrowableAttribute_DmiProxy_interfaces, // pointer to Array of ClazzInfo references
     0, // count of Super / Interfaces
     0, // pointer to Array of fields
     0, // count of Fields
     ThrowableAttribute_methods, // pointer to Array of Methods
     0, // count of Methods
     0, // create-function for cloning/serializing
     0, // create-function for cloning/serializing arrays
     0, // create-function for cloning/serializing arrays
     0, // Class* thisClass; chaching instance
     0, // jlong serialVersionUID; for serialization
     ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
     ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
     0, // count off all collectable members in this class
     0, // user defined info
     0 // next ClazzInfo in chain
  };
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};
static ::acdk::lang::dmi::RegisterClazzInfo _register_ThrowableAttribute_DmiProxy(ThrowableAttribute_DmiProxy::clazzInfo());


} // namespace acdk
} // namespace tools
} // namespace mc

