// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../aunit.h"
#include "../aunit.h"
#include "../CfgScriptTestSuite.h"
#include "../Config.h"
#include "../DmiTestClass.h"
#include "../DmiTestException.h"
#include "../DmiTestInterface.h"
#include "../McConfigTest.h"
#include "../ProcessTestSuite.h"
#include "../SayHelloInterface.h"
#include "../Test.h"
#include "../TestCollectorListener.h"
#include "../TestConsoleListener.h"
#include "../TestDebuggerListener.h"
#include "../TestException.h"
#include "../TestFailure.h"
#include "../TestHtmlReport.h"
#include "../TestListener.h"
#include "../TestReport.h"
#include "../TestResult.h"
#include "../TestRunner.h"
#include "../TestTextReport.h"
#include "../TestUnit.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_tools_aunit_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "aunit", // name of unit
  -1, // hashCode
  "acdk/tools", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_tools_aunit_unitInfo(&acdk_tools_aunit_unitInfo);


struct _ModuleInitializer1
{
  _ModuleInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&acdk_tools_aunit_unitInfo, "acdkx_orb_UnitInclude1", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("acdk_core.idl", false));
  }
};

static _ModuleInitializer1 _ModuleInitializer1_instance;



namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
CfgScriptTestCase_create_array(int length)
{
  return new ObjectArrayImpl<RCfgScriptTestCase>(length);
}

//static
::acdk::lang::RObject
CfgScriptTestCase_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CfgScriptTestCase_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptTestCase_method_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CfgScriptTestCase(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptTestCase_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CfgScriptTestCase::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptTestCase_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptTestCase* This = dmi_cast<CfgScriptTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CfgScriptTestCase::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptTestCase_method_runTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptTestCase* This = dmi_cast<CfgScriptTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CfgScriptTestCase::runTest();
    else
        This->runTest();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CfgScriptTestCase_fields__scriptFile_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CfgScriptTestCase* This = dmi_cast<CfgScriptTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scriptFile, flags);
    else
      This->_scriptFile = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CfgScriptTestCase_fields__scriptFile = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scriptFile", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CfgScriptTestCase_MetainfoWrapper::CfgScriptTestCase_fields__scriptFile_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CfgScriptTestCase_fields[] = 
{
  &CfgScriptTestCase_fields__scriptFile,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptTestCase_methods_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptTestCase_methods_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__arg_scriptFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "scriptFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptTestCase_methods_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__args[] = 
{
  &CfgScriptTestCase_methods_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__arg_name,
  &CfgScriptTestCase_methods_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__arg_scriptFile,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestCase_methods_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptTestCase_method_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CfgScriptTestCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CfgScriptTestCase::clazzInfo(), // return type
  "_0_CfgScriptTestCase", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptTestCase_methods_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__args, // the arguments
  0, //arguments count
  CfgScriptTestCase_methods_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__exceptions, // the declared exceptions
  CfgScriptTestCase_MetainfoWrapper::CfgScriptTestCase_method_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptTestCase_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestCase_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptTestCase_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptTestCase_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CfgScriptTestCase_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CfgScriptTestCase_MetainfoWrapper::CfgScriptTestCase_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptTestCase_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestCase_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptTestCase_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getName", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptTestCase_methods_getName__LRString__args, // the arguments
  0, //arguments count
  CfgScriptTestCase_methods_getName__LRString__exceptions, // the declared exceptions
  CfgScriptTestCase_MetainfoWrapper::CfgScriptTestCase_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptTestCase_methods_runTest__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestCase_methods_runTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptTestCase_method_runTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "runTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_runTest", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptTestCase_methods_runTest__V_args, // the arguments
  0, //arguments count
  CfgScriptTestCase_methods_runTest__V_exceptions, // the declared exceptions
  CfgScriptTestCase_MetainfoWrapper::CfgScriptTestCase_method_runTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CfgScriptTestCase_methods[] = 
{
  &CfgScriptTestCase_method_CfgScriptTestCase_INLRString_INLRString__LRCfgScriptTestCase_,
  &CfgScriptTestCase_method_GetClass__L_acdk_lang_RClass_,
  &CfgScriptTestCase_method_getName__LRString_,
  &CfgScriptTestCase_method_runTest__V,
  0
};


struct CfgScriptTestCase_MetaInfoInitializer
{  CfgScriptTestCase_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CfgScriptTestCase::clazzInfo();
    ci->fields =  _CfgScriptTestCase_fields;
    ci->methods =  _CfgScriptTestCase_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CfgScriptTestCase_MetaInfoInitializer CfgScriptTestCase_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
CfgScriptTestSuite_create_array(int length)
{
  return new ObjectArrayImpl<RCfgScriptTestSuite>(length);
}

//static
::acdk::lang::RObject
CfgScriptTestSuite_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CfgScriptTestSuite_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptTestSuite_method_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CfgScriptTestSuite(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptTestSuite_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CfgScriptTestSuite::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptTestSuite_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptTestSuite* This = dmi_cast<CfgScriptTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CfgScriptTestSuite::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CfgScriptTestSuite_method_suite__LRTest__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CfgScriptTestSuite* This = dmi_cast<CfgScriptTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CfgScriptTestSuite::suite();
    else
        ret = (::acdk::lang::RObject)This->suite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CfgScriptTestSuite_fields__directory_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CfgScriptTestSuite* This = dmi_cast<CfgScriptTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_directory, flags);
    else
      This->_directory = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CfgScriptTestSuite_fields__recursive_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CfgScriptTestSuite* This = dmi_cast<CfgScriptTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_recursive, flags);
    else
      This->_recursive = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CfgScriptTestSuite_fields__directory = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_directory", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  CfgScriptTestSuite_MetainfoWrapper::CfgScriptTestSuite_fields__directory_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CfgScriptTestSuite_fields__recursive = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_recursive", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  CfgScriptTestSuite_MetainfoWrapper::CfgScriptTestSuite_fields__recursive_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CfgScriptTestSuite_fields[] = 
{
  &CfgScriptTestSuite_fields__directory,
  &CfgScriptTestSuite_fields__recursive,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptTestSuite_methods_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CfgScriptTestSuite_methods_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__arg_recursive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "recursive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptTestSuite_methods_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__args[] = 
{
  &CfgScriptTestSuite_methods_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__arg_dir,
  &CfgScriptTestSuite_methods_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__arg_recursive,
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestSuite_methods_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptTestSuite_method_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CfgScriptTestSuite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CfgScriptTestSuite::clazzInfo(), // return type
  "_0_CfgScriptTestSuite", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptTestSuite_methods_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__args, // the arguments
  0, //arguments count
  CfgScriptTestSuite_methods_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__exceptions, // the declared exceptions
  CfgScriptTestSuite_MetainfoWrapper::CfgScriptTestSuite_method_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptTestSuite_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestSuite_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptTestSuite_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptTestSuite_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CfgScriptTestSuite_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CfgScriptTestSuite_MetainfoWrapper::CfgScriptTestSuite_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptTestSuite_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestSuite_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptTestSuite_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getName", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptTestSuite_methods_getName__LRString__args, // the arguments
  0, //arguments count
  CfgScriptTestSuite_methods_getName__LRString__exceptions, // the declared exceptions
  CfgScriptTestSuite_MetainfoWrapper::CfgScriptTestSuite_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CfgScriptTestSuite_methods_suite__LRTest__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CfgScriptTestSuite_methods_suite__LRTest__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CfgScriptTestSuite_method_suite__LRTest_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "suite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo(), // return type
  "_2_suite", // alternative name of method
  -1, // altlabelHashCode
  CfgScriptTestSuite_methods_suite__LRTest__args, // the arguments
  0, //arguments count
  CfgScriptTestSuite_methods_suite__LRTest__exceptions, // the declared exceptions
  CfgScriptTestSuite_MetainfoWrapper::CfgScriptTestSuite_method_suite__LRTest__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CfgScriptTestSuite_methods[] = 
{
  &CfgScriptTestSuite_method_CfgScriptTestSuite_INLRString_Z_LRCfgScriptTestSuite_,
  &CfgScriptTestSuite_method_GetClass__L_acdk_lang_RClass_,
  &CfgScriptTestSuite_method_getName__LRString_,
  &CfgScriptTestSuite_method_suite__LRTest_,
  0
};


struct CfgScriptTestSuite_MetaInfoInitializer
{  CfgScriptTestSuite_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CfgScriptTestSuite::clazzInfo();
    ci->fields =  _CfgScriptTestSuite_fields;
    ci->methods =  _CfgScriptTestSuite_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CfgScriptTestSuite_MetaInfoInitializer CfgScriptTestSuite_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
DmiTestClass_create_array(int length)
{
  return new ObjectArrayImpl<RDmiTestClass>(length);
}

//static
::acdk::lang::RObject
DmiTestClass_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiTestClass_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_DmiTestClass_I_LRDmiTestClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTestClass(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_DmiTestClass__LRDmiTestClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTestClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_DmiTestClass_INLRString_I_LRDmiTestClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTestClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_DmiTestClass_INLRString__LRDmiTestClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTestClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestClass::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method__initializeClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass::_initializeClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_appendAll_INLRStringArray__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiTestClass::appendAll(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->appendAll(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_byValIn_BYVALINLRStringBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiTestClass::byValIn(::acdk::lang::dmi::castTo< RStringBuffer>(args[0], dc));
    else
        This->byValIn(::acdk::lang::dmi::castTo< RStringBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_byValInOut_BYVALINOUTLRStringBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiTestClass::byValInOut(::acdk::lang::dmi::castToObjectRef< RStringBuffer>(args[0], dc));
    else
        This->byValInOut(::acdk::lang::dmi::castToObjectRef< RStringBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_byValOut_BYVALOUTLRInteger__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiTestClass::byValOut(::acdk::lang::dmi::castToObjectRef< RInteger>(args[0], dc));
    else
        This->byValOut(::acdk::lang::dmi::castToObjectRef< RInteger>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiTestClass::dynamicMethodO(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
        ret = (::acdk::lang::RObject)This->dynamicMethodO(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethodb_ZCBSIJFDINLRObject__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::dynamicMethodb(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
      ret = This->dynamicMethodb(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethodc_ZCBSIJFDINLRObject__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::dynamicMethodc(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
      ret = This->dynamicMethodc(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethodd_ZCBSIJFDINLRObject__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::dynamicMethodd(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
      ret = This->dynamicMethodd(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethodf_ZCBSIJFDINLRObject__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::dynamicMethodf(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
      ret = This->dynamicMethodf(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethodi_ZCBSIJFDINLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::dynamicMethodi(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
      ret = This->dynamicMethodi(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethodl_ZCBSIJFDINLRObject__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::dynamicMethodl(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
      ret = This->dynamicMethodl(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethods_ZCBSIJFDINLRObject__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::dynamicMethods(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
      ret = This->dynamicMethods(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_dynamicMethodz_ZCBSIJFDINLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::dynamicMethodz(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    else
      ret = This->dynamicMethodz(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_getEnumeration_I_LDmiTestEnumeration__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (DmiTestEnumeration)This->DmiTestClass::getEnumeration((DmiTestEnumeration)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
      ret = (DmiTestEnumeration)This->getEnumeration((DmiTestEnumeration)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_getPubStaticInt__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::getPubStaticInt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_inOutMethod_INIINLRString_OUTIOUTLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiTestClass::inOutMethod(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castToIntRef(args[2], dc), ::acdk::lang::dmi::castToObjectRef< RString>(args[3], dc));
    else
        This->inOutMethod(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castToIntRef(args[2], dc), ::acdk::lang::dmi::castToObjectRef< RString>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_inOutMethodA_INOUTIINOUTLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiTestClass::inOutMethodA(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToObjectRef< RString>(args[1], dc));
    else
        This->inOutMethodA(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToObjectRef< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_makeNumSum_INLRNumberArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::makeNumSum(::acdk::lang::dmi::castTo< RNumberArray>(args[0], dc));
    else
      ret = This->makeNumSum(::acdk::lang::dmi::castTo< RNumberArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_makeSum_INLRintArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::makeSum(::acdk::lang::dmi::castTo< RintArray>(args[0], dc));
    else
      ret = This->makeSum(::acdk::lang::dmi::castTo< RintArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_makeSum_INLRIntegerArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::makeSum(::acdk::lang::dmi::castTo< RIntegerArray>(args[0], dc));
    else
      ret = This->makeSum(::acdk::lang::dmi::castTo< RIntegerArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithBasicArray_INLRintArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::methodWithBasicArray(::acdk::lang::dmi::castTo< RintArray>(args[0], dc));
    else
      ret = This->methodWithBasicArray(::acdk::lang::dmi::castTo< RintArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithBasicArray_INLRcharArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::methodWithBasicArray(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc));
    else
      ret = This->methodWithBasicArray(::acdk::lang::dmi::castTo< RcharArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithDefaultArgs_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::methodWithDefaultArgs(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->methodWithDefaultArgs(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithDefaultArgs__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::methodWithDefaultArgs();
    else
      ret = This->methodWithDefaultArgs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestClass::methodWithDefaults(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestClass::methodWithDefaults(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestClass::methodWithDefaults(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< int>(args[5], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithDefaults_INLRObject_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestClass::methodWithDefaults(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestClass::methodWithDefaults(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestClass::methodWithDefaults(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::namedArgsMethod(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[2], dc));
    else
      ret = This->namedArgsMethod(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RStringBuffer>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_operator_pl_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::operator+(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->operator+(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_outMethod_IOUTLRInteger__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiTestClass::outMethod(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castToObjectRef< RInteger>(args[1], dc));
    else
        This->outMethod(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castToObjectRef< RInteger>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_polymorphFunc_INLRInteger__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiTestClass::polymorphFunc(::acdk::lang::dmi::castTo< RInteger>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->polymorphFunc(::acdk::lang::dmi::castTo< RInteger>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_polymorphFunc_INLRNumber__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiTestClass::polymorphFunc(::acdk::lang::dmi::castTo< RNumber>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->polymorphFunc(::acdk::lang::dmi::castTo< RNumber>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_polymorphFunc_INLRComparable__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiTestClass::polymorphFunc(::acdk::lang::dmi::castTo< RComparable>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->polymorphFunc(::acdk::lang::dmi::castTo< RComparable>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_polymorphFunc_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiTestClass::polymorphFunc(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->polymorphFunc(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_privateMethod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiTestClass::privateMethod();
    else
        This->privateMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_privateStaticMethod__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass::privateStaticMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiTestClass::sayHelloViaInterface(::acdk::lang::dmi::castTo< RSayHelloInterface>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->sayHelloViaInterface(::acdk::lang::dmi::castTo< RSayHelloInterface>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_setGetPubStaticInt_IINLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::setGetPubStaticInt(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_setgetd_D_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::setgetd(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
      ret = This->setgetd(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_setgetf_F_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::setgetf(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
      ret = This->setgetf(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_setgetl_J_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::setgetl(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->setgetl(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_sorted_INLRComparableArray__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::sorted(::acdk::lang::dmi::castTo< RComparableArray>(args[0], dc));
    else
      ret = This->sorted(::acdk::lang::dmi::castTo< RComparableArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethodO_ZCBSIJFDINLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestClass::staticMethodO(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethodb_ZCBSIJFDINLRObject__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::staticMethodb(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethodc_ZCBSIJFDINLRObject__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::staticMethodc(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethodd_ZCBSIJFDINLRObject__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::staticMethodd(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethodf_ZCBSIJFDINLRObject__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::staticMethodf(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethodi_ZCBSIJFDINLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::staticMethodi(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethodl_ZCBSIJFDINLRObject__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::staticMethodl(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethods_ZCBSIJFDINLRObject__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::staticMethods(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_staticMethodz_ZCBSIJFDINLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = DmiTestClass::staticMethodz(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< byte>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc), ::acdk::lang::dmi::castTo< int>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc), ::acdk::lang::dmi::castTo< float>(args[6], dc), ::acdk::lang::dmi::castTo< double>(args[7], dc), ::acdk::lang::dmi::castTo< RObject>(args[8], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_throwExceptionMethod_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DmiTestClass::throwExceptionMethod(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->throwExceptionMethod(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DmiTestClass::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestClass_method_virtualMethod__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DmiTestClass::virtualMethod();
    else
      ret = This->virtualMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_privInt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->privInt, flags);
    else
      This->privInt = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_privInteger_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->privInteger, flags);
    else
      This->privInteger = ::acdk::lang::dmi::castTo< RInteger>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_privStaticInt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::privStaticInt, flags);
    else
      DmiTestClass::privStaticInt = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_privStaticInteger_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::privStaticInteger, flags);
    else
      DmiTestClass::privStaticInteger = ::acdk::lang::dmi::castTo< RInteger>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_privStaticString_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::privStaticString, flags);
    else
      DmiTestClass::privStaticString = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_privString_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->privString, flags);
    else
      This->privString = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubBool_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubBool, flags);
    else
      This->pubBool = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubByte_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubByte, flags);
    else
      This->pubByte = ::acdk::lang::dmi::castTo< byte>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubChar_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubChar, flags);
    else
      This->pubChar = ::acdk::lang::dmi::castTo< char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubDouble_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubDouble, flags);
    else
      This->pubDouble = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubFloat_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubFloat, flags);
    else
      This->pubFloat = ::acdk::lang::dmi::castTo< float>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubInt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubInt, flags);
    else
      This->pubInt = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubInteger_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubInteger, flags);
    else
      This->pubInteger = ::acdk::lang::dmi::castTo< RInteger>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubLong_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubLong, flags);
    else
      This->pubLong = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubObject_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubObject, flags);
    else
      This->pubObject = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubSet_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubSet, flags);
    else
      This->pubSet = ::acdk::lang::dmi::castTo< acdk::util::RSet>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubShort_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubShort, flags);
    else
      This->pubShort = ::acdk::lang::dmi::castTo< short>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticBool_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticBool, flags);
    else
      DmiTestClass::pubStaticBool = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticByte_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticByte, flags);
    else
      DmiTestClass::pubStaticByte = ::acdk::lang::dmi::castTo< byte>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticChar_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticChar, flags);
    else
      DmiTestClass::pubStaticChar = ::acdk::lang::dmi::castTo< char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticDouble_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticDouble, flags);
    else
      DmiTestClass::pubStaticDouble = ::acdk::lang::dmi::castTo< double>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticFloat_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticFloat, flags);
    else
      DmiTestClass::pubStaticFloat = ::acdk::lang::dmi::castTo< float>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticInt_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticInt, flags);
    else
      DmiTestClass::pubStaticInt = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticInteger_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticInteger, flags);
    else
      DmiTestClass::pubStaticInteger = ::acdk::lang::dmi::castTo< RInteger>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticLong_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticLong, flags);
    else
      DmiTestClass::pubStaticLong = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticObject_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticObject, flags);
    else
      DmiTestClass::pubStaticObject = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticShort_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticShort, flags);
    else
      DmiTestClass::pubStaticShort = ::acdk::lang::dmi::castTo< short>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubStaticString_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(DmiTestClass::pubStaticString, flags);
    else
      DmiTestClass::pubStaticString = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestClass_fields_pubString_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestClass* This = dmi_cast<DmiTestClass>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->pubString, flags);
    else
      This->pubString = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_privInt = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "privInt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_privInt_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_privInteger = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "privInteger", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_privInteger_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_privStaticInt = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "privStaticInt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_privStaticInt_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_privStaticInteger = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "privStaticInteger", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_privStaticInteger_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_privStaticString = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "privStaticString", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_privStaticString_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_privString = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "privString", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_privString_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubBool = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubBool", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubBool_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubByte = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubByte", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubByte_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubChar = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubChar", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubChar_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubDouble = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubDouble", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubDouble_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubFloat = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubFloat", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubFloat_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubInt = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubInt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubInt_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubInteger = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubInteger", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubInteger_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubLong = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubLong", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubLong_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubObject = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubObject", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubObject_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubSet = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubSet", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RSet::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubSet_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubShort = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubShort", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubShort_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticBool = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticBool", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticBool_accessor, // read/write access to this fields
  (void*)&DmiTestClass::pubStaticBool // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticByte = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticByte", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticByte_accessor, // read/write access to this fields
  (void*)&DmiTestClass::pubStaticByte // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticChar = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticChar", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticChar_accessor, // read/write access to this fields
  (void*)&DmiTestClass::pubStaticChar // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticDouble = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticDouble", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticDouble_accessor, // read/write access to this fields
  (void*)&DmiTestClass::pubStaticDouble // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticFloat = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticFloat", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticFloat_accessor, // read/write access to this fields
  (void*)&DmiTestClass::pubStaticFloat // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticInt = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticInt", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticInt_accessor, // read/write access to this fields
  (void*)&DmiTestClass::pubStaticInt // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticInteger = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticInteger", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticInteger_accessor, // read/write access to this fields
  (void*)DmiTestClass::pubStaticInteger._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticLong = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticLong", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticLong_accessor, // read/write access to this fields
  (void*)&DmiTestClass::pubStaticLong // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticObject = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticObject", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticObject_accessor, // read/write access to this fields
  (void*)DmiTestClass::pubStaticObject._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticShort = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticShort", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticShort_accessor, // read/write access to this fields
  (void*)&DmiTestClass::pubStaticShort // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubStaticString = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubStaticString", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubStaticString_accessor, // read/write access to this fields
  (void*)DmiTestClass::pubStaticString._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestClass_fields_pubString = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "pubString", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  DmiTestClass_MetainfoWrapper::DmiTestClass_fields_pubString_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DmiTestClass_fields[] = 
{
  &DmiTestClass_fields_privInt,
  &DmiTestClass_fields_privInteger,
  &DmiTestClass_fields_privStaticInt,
  &DmiTestClass_fields_privStaticInteger,
  &DmiTestClass_fields_privStaticString,
  &DmiTestClass_fields_privString,
  &DmiTestClass_fields_pubBool,
  &DmiTestClass_fields_pubByte,
  &DmiTestClass_fields_pubChar,
  &DmiTestClass_fields_pubDouble,
  &DmiTestClass_fields_pubFloat,
  &DmiTestClass_fields_pubInt,
  &DmiTestClass_fields_pubInteger,
  &DmiTestClass_fields_pubLong,
  &DmiTestClass_fields_pubObject,
  &DmiTestClass_fields_pubSet,
  &DmiTestClass_fields_pubShort,
  &DmiTestClass_fields_pubStaticBool,
  &DmiTestClass_fields_pubStaticByte,
  &DmiTestClass_fields_pubStaticChar,
  &DmiTestClass_fields_pubStaticDouble,
  &DmiTestClass_fields_pubStaticFloat,
  &DmiTestClass_fields_pubStaticInt,
  &DmiTestClass_fields_pubStaticInteger,
  &DmiTestClass_fields_pubStaticLong,
  &DmiTestClass_fields_pubStaticObject,
  &DmiTestClass_fields_pubStaticShort,
  &DmiTestClass_fields_pubStaticString,
  &DmiTestClass_fields_pubString,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_DmiTestClass_I_LRDmiTestClass__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_DmiTestClass_I_LRDmiTestClass__args[] = 
{
  &DmiTestClass_methods_DmiTestClass_I_LRDmiTestClass__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_DmiTestClass_I_LRDmiTestClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_DmiTestClass_I_LRDmiTestClass_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTestClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTestClass::clazzInfo(), // return type
  "_0_DmiTestClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_DmiTestClass_I_LRDmiTestClass__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_DmiTestClass_I_LRDmiTestClass__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_DmiTestClass_I_LRDmiTestClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_DmiTestClass__LRDmiTestClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_DmiTestClass__LRDmiTestClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_DmiTestClass__LRDmiTestClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTestClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTestClass::clazzInfo(), // return type
  "_4_DmiTestClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_DmiTestClass__LRDmiTestClass__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_DmiTestClass__LRDmiTestClass__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_DmiTestClass__LRDmiTestClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_DmiTestClass_INLRString_I_LRDmiTestClass__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_DmiTestClass_INLRString_I_LRDmiTestClass__arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_DmiTestClass_INLRString_I_LRDmiTestClass__args[] = 
{
  &DmiTestClass_methods_DmiTestClass_INLRString_I_LRDmiTestClass__arg_str,
  &DmiTestClass_methods_DmiTestClass_INLRString_I_LRDmiTestClass__arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_DmiTestClass_INLRString_I_LRDmiTestClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_DmiTestClass_INLRString_I_LRDmiTestClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTestClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTestClass::clazzInfo(), // return type
  "_5_DmiTestClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_DmiTestClass_INLRString_I_LRDmiTestClass__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_DmiTestClass_INLRString_I_LRDmiTestClass__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_DmiTestClass_INLRString_I_LRDmiTestClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_DmiTestClass_INLRString__LRDmiTestClass__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_DmiTestClass_INLRString__LRDmiTestClass__args[] = 
{
  &DmiTestClass_methods_DmiTestClass_INLRString__LRDmiTestClass__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_DmiTestClass_INLRString__LRDmiTestClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_DmiTestClass_INLRString__LRDmiTestClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTestClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTestClass::clazzInfo(), // return type
  "_6_DmiTestClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_DmiTestClass_INLRString__LRDmiTestClass__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_DmiTestClass_INLRString__LRDmiTestClass__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_DmiTestClass_INLRString__LRDmiTestClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_10_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods__initializeClass__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods__initializeClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method__initializeClass__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_initializeClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3__initializeClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods__initializeClass__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods__initializeClass__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method__initializeClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_appendAll_INLRStringArray__LRString__arg_sa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_appendAll_INLRStringArray__LRString__args[] = 
{
  &DmiTestClass_methods_appendAll_INLRStringArray__LRString__arg_sa,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_appendAll_INLRStringArray__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_appendAll_INLRStringArray__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_H_appendAll", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_appendAll_INLRStringArray__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_appendAll_INLRStringArray__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_appendAll_INLRStringArray__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_byValIn_BYVALINLRStringBuffer__V_arg_sb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiByval, 
  0, //AttributesRes
  "sb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_byValIn_BYVALINLRStringBuffer__V_args[] = 
{
  &DmiTestClass_methods_byValIn_BYVALINLRStringBuffer__V_arg_sb,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_byValIn_BYVALINLRStringBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_byValIn_BYVALINLRStringBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byValIn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_byValIn", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_byValIn_BYVALINLRStringBuffer__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_byValIn_BYVALINLRStringBuffer__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_byValIn_BYVALINLRStringBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_byValInOut_BYVALINOUTLRStringBuffer__V_arg_sb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut | ::acdk::lang::dmi::MiAiByval, 
  0, //AttributesRes
  "sb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_byValInOut_BYVALINOUTLRStringBuffer__V_args[] = 
{
  &DmiTestClass_methods_byValInOut_BYVALINOUTLRStringBuffer__V_arg_sb,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_byValInOut_BYVALINOUTLRStringBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_byValInOut_BYVALINOUTLRStringBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byValInOut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_byValInOut", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_byValInOut_BYVALINOUTLRStringBuffer__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_byValInOut_BYVALINOUTLRStringBuffer__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_byValInOut_BYVALINOUTLRStringBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_byValOut_BYVALOUTLRInteger__V_arg_integer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut | ::acdk::lang::dmi::MiAiByval, 
  0, //AttributesRes
  "integer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_byValOut_BYVALOUTLRInteger__V_args[] = 
{
  &DmiTestClass_methods_byValOut_BYVALOUTLRInteger__V_arg_integer,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_byValOut_BYVALOUTLRInteger__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_byValOut_BYVALOUTLRInteger__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byValOut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_byValOut", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_byValOut_BYVALOUTLRInteger__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_byValOut_BYVALOUTLRInteger__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_byValOut_BYVALOUTLRInteger__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__args[] = 
{
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_bv,
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_cvar,
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_bvar,
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_svar,
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_ivar,
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_jlvar,
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_fvar,
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_dvar,
  &DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethodO_ZCBSIJFDINLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethodO", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_i_dynamicMethodO", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethodO_ZCBSIJFDINLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_args[] = 
{
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_bv,
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_cvar,
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_bvar,
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_svar,
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_ivar,
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_jlvar,
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_fvar,
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_dvar,
  &DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethodb_ZCBSIJFDINLRObject__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethodb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_c_dynamicMethodb", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethodb_ZCBSIJFDINLRObject__B_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethodb_ZCBSIJFDINLRObject__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_args[] = 
{
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_bv,
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_cvar,
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_bvar,
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_svar,
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_ivar,
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_jlvar,
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_fvar,
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_dvar,
  &DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethodc_ZCBSIJFDINLRObject__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethodc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_b_dynamicMethodc", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethodc_ZCBSIJFDINLRObject__C_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethodc_ZCBSIJFDINLRObject__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_args[] = 
{
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_bv,
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_cvar,
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_bvar,
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_svar,
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_ivar,
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_jlvar,
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_fvar,
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_dvar,
  &DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethodd_ZCBSIJFDINLRObject__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethodd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_h_dynamicMethodd", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethodd_ZCBSIJFDINLRObject__D_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethodd_ZCBSIJFDINLRObject__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_args[] = 
{
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_bv,
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_cvar,
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_bvar,
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_svar,
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_ivar,
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_jlvar,
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_fvar,
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_dvar,
  &DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethodf_ZCBSIJFDINLRObject__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethodf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_g_dynamicMethodf", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethodf_ZCBSIJFDINLRObject__F_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethodf_ZCBSIJFDINLRObject__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_args[] = 
{
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_bv,
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_cvar,
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_bvar,
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_svar,
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_ivar,
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_jlvar,
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_fvar,
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_dvar,
  &DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethodi_ZCBSIJFDINLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethodi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_dynamicMethodi", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethodi_ZCBSIJFDINLRObject__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethodi_ZCBSIJFDINLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_args[] = 
{
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_bv,
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_cvar,
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_bvar,
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_svar,
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_ivar,
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_jlvar,
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_fvar,
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_dvar,
  &DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethodl_ZCBSIJFDINLRObject__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethodl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_f_dynamicMethodl", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethodl_ZCBSIJFDINLRObject__J_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethodl_ZCBSIJFDINLRObject__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_args[] = 
{
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_bv,
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_cvar,
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_bvar,
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_svar,
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_ivar,
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_jlvar,
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_fvar,
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_dvar,
  &DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethods_ZCBSIJFDINLRObject__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethods", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_d_dynamicMethods", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethods_ZCBSIJFDINLRObject__S_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethods_ZCBSIJFDINLRObject__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_args[] = 
{
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_bv,
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_cvar,
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_bvar,
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_svar,
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_ivar,
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_jlvar,
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_fvar,
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_dvar,
  &DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_dynamicMethodz_ZCBSIJFDINLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dynamicMethodz", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_dynamicMethodz", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_dynamicMethodz_ZCBSIJFDINLRObject__Z_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_dynamicMethodz_ZCBSIJFDINLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_getEnumeration_I_LDmiTestEnumeration__arg_en = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "en", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_getEnumeration_I_LDmiTestEnumeration__args[] = 
{
  &DmiTestClass_methods_getEnumeration_I_LDmiTestEnumeration__arg_en,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_getEnumeration_I_LDmiTestEnumeration__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_getEnumeration_I_LDmiTestEnumeration_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnumeration", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_S_getEnumeration", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_getEnumeration_I_LDmiTestEnumeration__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_getEnumeration_I_LDmiTestEnumeration__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_getEnumeration_I_LDmiTestEnumeration__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_getPubStaticInt__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_getPubStaticInt__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_getPubStaticInt__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPubStaticInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "altGetPubStaticInt", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_getPubStaticInt__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_getPubStaticInt__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_getPubStaticInt__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_arg_ini = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ini", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_arg_instr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "instr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_arg_outi = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "outi", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_arg_outstr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "outstr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_args[] = 
{
  &DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_arg_ini,
  &DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_arg_instr,
  &DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_arg_outi,
  &DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_arg_outstr,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_inOutMethod_INIINLRString_OUTIOUTLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "inOutMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_inOutMethod", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_inOutMethod_INIINLRString_OUTIOUTLRString__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_inOutMethod_INIINLRString_OUTIOUTLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_inOutMethodA_INOUTIINOUTLRString__V_arg_count = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "count", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_inOutMethodA_INOUTIINOUTLRString__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_inOutMethodA_INOUTIINOUTLRString__V_args[] = 
{
  &DmiTestClass_methods_inOutMethodA_INOUTIINOUTLRString__V_arg_count,
  &DmiTestClass_methods_inOutMethodA_INOUTIINOUTLRString__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_inOutMethodA_INOUTIINOUTLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_inOutMethodA_INOUTIINOUTLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "inOutMethodA", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_inOutMethodA", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_inOutMethodA_INOUTIINOUTLRString__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_inOutMethodA_INOUTIINOUTLRString__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_inOutMethodA_INOUTIINOUTLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_makeNumSum_INLRNumberArray__I_arg_na = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "na", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumberArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_makeNumSum_INLRNumberArray__I_args[] = 
{
  &DmiTestClass_methods_makeNumSum_INLRNumberArray__I_arg_na,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_makeNumSum_INLRNumberArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_makeNumSum_INLRNumberArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeNumSum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_K_makeNumSum", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_makeNumSum_INLRNumberArray__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_makeNumSum_INLRNumberArray__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_makeNumSum_INLRNumberArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_makeSum_INLRintArray__I_arg_ia = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ia", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_makeSum_INLRintArray__I_args[] = 
{
  &DmiTestClass_methods_makeSum_INLRintArray__I_arg_ia,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_makeSum_INLRintArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_makeSum_INLRintArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeSum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_I_makeSum", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_makeSum_INLRintArray__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_makeSum_INLRintArray__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_makeSum_INLRintArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_makeSum_INLRIntegerArray__I_arg_ia = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ia", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RIntegerArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_makeSum_INLRIntegerArray__I_args[] = 
{
  &DmiTestClass_methods_makeSum_INLRIntegerArray__I_arg_ia,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_makeSum_INLRIntegerArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_makeSum_INLRIntegerArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeSum", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_J_makeSum", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_makeSum_INLRIntegerArray__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_makeSum_INLRIntegerArray__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_makeSum_INLRIntegerArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithBasicArray_INLRintArray__I_arg_iarray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "iarray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RintArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithBasicArray_INLRintArray__I_args[] = 
{
  &DmiTestClass_methods_methodWithBasicArray_INLRintArray__I_arg_iarray,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithBasicArray_INLRintArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithBasicArray_INLRintArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithBasicArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_E_methodWithBasicArray", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithBasicArray_INLRintArray__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithBasicArray_INLRintArray__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithBasicArray_INLRintArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithBasicArray_INLRcharArray__I_arg_carray = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "carray", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RcharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithBasicArray_INLRcharArray__I_args[] = 
{
  &DmiTestClass_methods_methodWithBasicArray_INLRcharArray__I_arg_carray,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithBasicArray_INLRcharArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithBasicArray_INLRcharArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithBasicArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_F_methodWithBasicArray", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithBasicArray_INLRcharArray__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithBasicArray_INLRcharArray__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithBasicArray_INLRcharArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaultArgs_I_I_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithDefaultArgs_I_I_args[] = 
{
  &DmiTestClass_methods_methodWithDefaultArgs_I_I_arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithDefaultArgs_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithDefaultArgs_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithDefaultArgs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "methodWithOneArgs", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithDefaultArgs_I_I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithDefaultArgs_I_I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithDefaultArgs_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithDefaultArgs__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithDefaultArgs__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithDefaultArgs__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithDefaultArgs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "methodWithoutArgs", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithDefaultArgs__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithDefaultArgs__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithDefaultArgs__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_defaultFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_wildCard = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "wildCard", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__args[] = 
{
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_obj,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_message,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_defaultDir,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_defaultFile,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__arg_wildCard,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithDefaults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Y_methodWithDefaults", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_defaultFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_wildCard = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "wildCard", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__args[] = 
{
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_obj,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_message,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_defaultDir,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_defaultFile,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_wildCard,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__arg_style,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithDefaults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Z_methodWithDefaults", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_defaultFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_wildCard = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "wildCard", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_style = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "style", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_pos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "pos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__args[] = 
{
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_obj,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_message,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_defaultDir,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_defaultFile,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_wildCard,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_style,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__arg_pos,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithDefaults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_U_methodWithDefaults", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString__LRString__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString__LRString__args[] = 
{
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString__LRString__arg_obj,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString__LRString__arg_message,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithDefaults_INLRObject_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithDefaults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_V_methodWithDefaults", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithDefaults_INLRObject_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__args[] = 
{
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__arg_obj,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__arg_message,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__arg_defaultDir,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithDefaults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_W_methodWithDefaults", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__arg_message = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "message", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__arg_defaultDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__arg_defaultFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "defaultFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__args[] = 
{
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__arg_obj,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__arg_message,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__arg_defaultDir,
  &DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__arg_defaultFile,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "methodWithDefaults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_X_methodWithDefaults", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_arg_iarg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "iarg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_arg_sarg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sarg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_arg_sbarg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sbarg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_args[] = 
{
  &DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_arg_iarg,
  &DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_arg_sarg,
  &DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_arg_sbarg,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_namedArgsMethod_INIINLRString_INLRStringBuffer__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "namedArgsMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_y_namedArgsMethod", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_namedArgsMethod_INIINLRString_INLRStringBuffer__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_operator_pl_I_I_arg_otherint = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "otherint", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_operator_pl_I_I_args[] = 
{
  &DmiTestClass_methods_operator_pl_I_I_arg_otherint,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_operator_pl_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_operator_pl_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "operator_pl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_M_operator_pl", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_operator_pl_I_I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_operator_pl_I_I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_operator_pl_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_outMethod_IOUTLRInteger__V_arg_toset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "toset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_outMethod_IOUTLRInteger__V_arg_toret = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "toret", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_outMethod_IOUTLRInteger__V_args[] = 
{
  &DmiTestClass_methods_outMethod_IOUTLRInteger__V_arg_toset,
  &DmiTestClass_methods_outMethod_IOUTLRInteger__V_arg_toret,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_outMethod_IOUTLRInteger__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_outMethod_IOUTLRInteger__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "outMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_outMethod", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_outMethod_IOUTLRInteger__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_outMethod_IOUTLRInteger__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_outMethod_IOUTLRInteger__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_polymorphFunc_INLRInteger__LRString__arg_integer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "integer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RInteger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_polymorphFunc_INLRInteger__LRString__args[] = 
{
  &DmiTestClass_methods_polymorphFunc_INLRInteger__LRString__arg_integer,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_polymorphFunc_INLRInteger__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_polymorphFunc_INLRInteger__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "polymorphFunc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_N_polymorphFunc", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_polymorphFunc_INLRInteger__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_polymorphFunc_INLRInteger__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_polymorphFunc_INLRInteger__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_polymorphFunc_INLRNumber__LRString__arg_number = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "number", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_polymorphFunc_INLRNumber__LRString__args[] = 
{
  &DmiTestClass_methods_polymorphFunc_INLRNumber__LRString__arg_number,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_polymorphFunc_INLRNumber__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_polymorphFunc_INLRNumber__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "polymorphFunc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_O_polymorphFunc", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_polymorphFunc_INLRNumber__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_polymorphFunc_INLRNumber__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_polymorphFunc_INLRNumber__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_polymorphFunc_INLRComparable__LRString__arg_comparable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "comparable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_polymorphFunc_INLRComparable__LRString__args[] = 
{
  &DmiTestClass_methods_polymorphFunc_INLRComparable__LRString__arg_comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_polymorphFunc_INLRComparable__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_polymorphFunc_INLRComparable__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "polymorphFunc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_P_polymorphFunc", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_polymorphFunc_INLRComparable__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_polymorphFunc_INLRComparable__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_polymorphFunc_INLRComparable__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_polymorphFunc_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_polymorphFunc_INLRString__LRString__args[] = 
{
  &DmiTestClass_methods_polymorphFunc_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_polymorphFunc_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_polymorphFunc_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "polymorphFunc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Q_polymorphFunc", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_polymorphFunc_INLRString__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_polymorphFunc_INLRString__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_polymorphFunc_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_privateMethod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_privateMethod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_privateMethod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "privateMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_privateMethod", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_privateMethod__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_privateMethod__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_privateMethod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_privateStaticMethod__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_privateStaticMethod__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_privateStaticMethod__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "privateStaticMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_privateStaticMethod", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_privateStaticMethod__V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_privateStaticMethod__V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_privateStaticMethod__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__arg_helloi = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "helloi", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSayHelloInterface::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__arg_sayto = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sayto", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__args[] = 
{
  &DmiTestClass_methods_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__arg_helloi,
  &DmiTestClass_methods_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__arg_sayto,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sayHelloViaInterface", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_T_sayHelloViaInterface", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_setGetPubStaticInt_IINLRString__I_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_setGetPubStaticInt_IINLRString__I_arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_setGetPubStaticInt_IINLRString__I_args[] = 
{
  &DmiTestClass_methods_setGetPubStaticInt_IINLRString__I_arg_i,
  &DmiTestClass_methods_setGetPubStaticInt_IINLRString__I_arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_setGetPubStaticInt_IINLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_setGetPubStaticInt_IINLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setGetPubStaticInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_setGetPubStaticInt", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_setGetPubStaticInt_IINLRString__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_setGetPubStaticInt_IINLRString__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_setGetPubStaticInt_IINLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_setgetd_D_D_arg_d = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "d", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_setgetd_D_D_args[] = 
{
  &DmiTestClass_methods_setgetd_D_D_arg_d,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_setgetd_D_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_setgetd_D_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setgetd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_u_setgetd", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_setgetd_D_D_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_setgetd_D_D_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_setgetd_D_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_setgetf_F_F_arg_f = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_setgetf_F_F_args[] = 
{
  &DmiTestClass_methods_setgetf_F_F_arg_f,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_setgetf_F_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_setgetf_F_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setgetf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_t_setgetf", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_setgetf_F_F_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_setgetf_F_F_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_setgetf_F_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_setgetl_J_J_arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_setgetl_J_J_args[] = 
{
  &DmiTestClass_methods_setgetl_J_J_arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_setgetl_J_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_setgetl_J_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setgetl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_s_setgetl", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_setgetl_J_J_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_setgetl_J_J_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_setgetl_J_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_sorted_INLRComparableArray__Z_arg_ca = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ca", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RComparableArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_sorted_INLRComparableArray__Z_args[] = 
{
  &DmiTestClass_methods_sorted_INLRComparableArray__Z_arg_ca,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_sorted_INLRComparableArray__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_sorted_INLRComparableArray__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sorted", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L_sorted", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_sorted_INLRComparableArray__Z_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_sorted_INLRComparableArray__Z_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_sorted_INLRComparableArray__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__args[] = 
{
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_bv,
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_cvar,
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_bvar,
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_svar,
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_ivar,
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_jlvar,
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_fvar,
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_dvar,
  &DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethodO_ZCBSIJFDINLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethodO", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_r_staticMethodO", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethodO_ZCBSIJFDINLRObject__LRObject__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethodO_ZCBSIJFDINLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_args[] = 
{
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_bv,
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_cvar,
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_bvar,
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_svar,
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_ivar,
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_jlvar,
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_fvar,
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_dvar,
  &DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethodb_ZCBSIJFDINLRObject__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethodb", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_l_staticMethodb", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethodb_ZCBSIJFDINLRObject__B_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethodb_ZCBSIJFDINLRObject__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_args[] = 
{
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_bv,
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_cvar,
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_bvar,
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_svar,
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_ivar,
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_jlvar,
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_fvar,
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_dvar,
  &DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethodc_ZCBSIJFDINLRObject__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethodc", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_k_staticMethodc", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethodc_ZCBSIJFDINLRObject__C_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethodc_ZCBSIJFDINLRObject__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_args[] = 
{
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_bv,
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_cvar,
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_bvar,
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_svar,
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_ivar,
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_jlvar,
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_fvar,
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_dvar,
  &DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethodd_ZCBSIJFDINLRObject__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethodd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_q_staticMethodd", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethodd_ZCBSIJFDINLRObject__D_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethodd_ZCBSIJFDINLRObject__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_args[] = 
{
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_bv,
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_cvar,
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_bvar,
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_svar,
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_ivar,
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_jlvar,
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_fvar,
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_dvar,
  &DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethodf_ZCBSIJFDINLRObject__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethodf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_p_staticMethodf", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethodf_ZCBSIJFDINLRObject__F_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethodf_ZCBSIJFDINLRObject__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_args[] = 
{
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_bv,
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_cvar,
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_bvar,
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_svar,
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_ivar,
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_jlvar,
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_fvar,
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_dvar,
  &DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethodi_ZCBSIJFDINLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethodi", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_staticMethodi", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethodi_ZCBSIJFDINLRObject__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethodi_ZCBSIJFDINLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_args[] = 
{
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_bv,
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_cvar,
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_bvar,
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_svar,
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_ivar,
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_jlvar,
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_fvar,
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_dvar,
  &DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethodl_ZCBSIJFDINLRObject__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethodl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_o_staticMethodl", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethodl_ZCBSIJFDINLRObject__J_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethodl_ZCBSIJFDINLRObject__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_args[] = 
{
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_bv,
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_cvar,
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_bvar,
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_svar,
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_ivar,
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_jlvar,
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_fvar,
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_dvar,
  &DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethods_ZCBSIJFDINLRObject__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethods", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_m_staticMethods", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethods_ZCBSIJFDINLRObject__S_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethods_ZCBSIJFDINLRObject__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_bv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_cvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "cvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_bvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "bvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_svar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "svar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_ivar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ivar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_jlvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "jlvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_fvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_dvar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "dvar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_args[] = 
{
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_bv,
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_cvar,
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_bvar,
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_svar,
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_ivar,
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_jlvar,
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_fvar,
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_dvar,
  &DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_staticMethodz_ZCBSIJFDINLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "staticMethodz", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_staticMethodz", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_staticMethodz_ZCBSIJFDINLRObject__Z_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_staticMethodz_ZCBSIJFDINLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestClass_methods_throwExceptionMethod_I_V_arg_exectiontype = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "exectiontype", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_throwExceptionMethod_I_V_args[] = 
{
  &DmiTestClass_methods_throwExceptionMethod_I_V_arg_exectiontype,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_throwExceptionMethod_I_V_exceptions[] =
{
  RNumberFormatException::clazzInfo(), 
  RUnsupportedOperationException::clazzInfo(), 
  0
};

void DmiTestClass_throwExceptionMethod_I_V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, NumberFormatException) == true)
    THROW_INSTANCE( RNumberFormatException(ex));
 if (instanceof(ex, UnsupportedOperationException) == true)
    THROW_INSTANCE( RUnsupportedOperationException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_throwExceptionMethod_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "throwExceptionMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_throwExceptionMethod", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_throwExceptionMethod_I_V_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_throwExceptionMethod_I_V_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_throwExceptionMethod_I_V_dispatch, // invoke this method
  DmiTestClass_throwExceptionMethod_I_V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_toString", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_toString__LRString__args, // the arguments
  0, //arguments count
  DmiTestClass_methods_toString__LRString__exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestClass_methods_virtualMethod__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestClass_methods_virtualMethod__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestClass_method_virtualMethod__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "virtualMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_R_virtualMethod", // alternative name of method
  -1, // altlabelHashCode
  DmiTestClass_methods_virtualMethod__I_args, // the arguments
  0, //arguments count
  DmiTestClass_methods_virtualMethod__I_exceptions, // the declared exceptions
  DmiTestClass_MetainfoWrapper::DmiTestClass_method_virtualMethod__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiTestClass_methods[] = 
{
  &DmiTestClass_method_DmiTestClass_I_LRDmiTestClass_,
  &DmiTestClass_method_DmiTestClass__LRDmiTestClass_,
  &DmiTestClass_method_DmiTestClass_INLRString_I_LRDmiTestClass_,
  &DmiTestClass_method_DmiTestClass_INLRString__LRDmiTestClass_,
  &DmiTestClass_method_GetClass__L_acdk_lang_RClass_,
  &DmiTestClass_method__initializeClass__V,
  &DmiTestClass_method_appendAll_INLRStringArray__LRString_,
  &DmiTestClass_method_byValIn_BYVALINLRStringBuffer__V,
  &DmiTestClass_method_byValInOut_BYVALINOUTLRStringBuffer__V,
  &DmiTestClass_method_byValOut_BYVALOUTLRInteger__V,
  &DmiTestClass_method_dynamicMethodO_ZCBSIJFDINLRObject__LRObject_,
  &DmiTestClass_method_dynamicMethodb_ZCBSIJFDINLRObject__B,
  &DmiTestClass_method_dynamicMethodc_ZCBSIJFDINLRObject__C,
  &DmiTestClass_method_dynamicMethodd_ZCBSIJFDINLRObject__D,
  &DmiTestClass_method_dynamicMethodf_ZCBSIJFDINLRObject__F,
  &DmiTestClass_method_dynamicMethodi_ZCBSIJFDINLRObject__I,
  &DmiTestClass_method_dynamicMethodl_ZCBSIJFDINLRObject__J,
  &DmiTestClass_method_dynamicMethods_ZCBSIJFDINLRObject__S,
  &DmiTestClass_method_dynamicMethodz_ZCBSIJFDINLRObject__Z,
  &DmiTestClass_method_getEnumeration_I_LDmiTestEnumeration_,
  &DmiTestClass_method_getPubStaticInt__I,
  &DmiTestClass_method_inOutMethod_INIINLRString_OUTIOUTLRString__V,
  &DmiTestClass_method_inOutMethodA_INOUTIINOUTLRString__V,
  &DmiTestClass_method_makeNumSum_INLRNumberArray__I,
  &DmiTestClass_method_makeSum_INLRintArray__I,
  &DmiTestClass_method_makeSum_INLRIntegerArray__I,
  &DmiTestClass_method_methodWithBasicArray_INLRintArray__I,
  &DmiTestClass_method_methodWithBasicArray_INLRcharArray__I,
  &DmiTestClass_method_methodWithDefaultArgs_I_I,
  &DmiTestClass_method_methodWithDefaultArgs__I,
  &DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString__LRString_,
  &DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_I_LRString_,
  &DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString_INLRString_ILRStringBuffer__LRString_,
  &DmiTestClass_method_methodWithDefaults_INLRObject_INLRString__LRString_,
  &DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString__LRString_,
  &DmiTestClass_method_methodWithDefaults_INLRObject_INLRString_INLRString_INLRString__LRString_,
  &DmiTestClass_method_namedArgsMethod_INIINLRString_INLRStringBuffer__Z,
  &DmiTestClass_method_operator_pl_I_I,
  &DmiTestClass_method_outMethod_IOUTLRInteger__V,
  &DmiTestClass_method_polymorphFunc_INLRInteger__LRString_,
  &DmiTestClass_method_polymorphFunc_INLRNumber__LRString_,
  &DmiTestClass_method_polymorphFunc_INLRComparable__LRString_,
  &DmiTestClass_method_polymorphFunc_INLRString__LRString_,
  &DmiTestClass_method_privateMethod__V,
  &DmiTestClass_method_privateStaticMethod__V,
  &DmiTestClass_method_sayHelloViaInterface_INLRSayHelloInterface_INLRString__LRString_,
  &DmiTestClass_method_setGetPubStaticInt_IINLRString__I,
  &DmiTestClass_method_setgetd_D_D,
  &DmiTestClass_method_setgetf_F_F,
  &DmiTestClass_method_setgetl_J_J,
  &DmiTestClass_method_sorted_INLRComparableArray__Z,
  &DmiTestClass_method_staticMethodO_ZCBSIJFDINLRObject__LRObject_,
  &DmiTestClass_method_staticMethodb_ZCBSIJFDINLRObject__B,
  &DmiTestClass_method_staticMethodc_ZCBSIJFDINLRObject__C,
  &DmiTestClass_method_staticMethodd_ZCBSIJFDINLRObject__D,
  &DmiTestClass_method_staticMethodf_ZCBSIJFDINLRObject__F,
  &DmiTestClass_method_staticMethodi_ZCBSIJFDINLRObject__I,
  &DmiTestClass_method_staticMethodl_ZCBSIJFDINLRObject__J,
  &DmiTestClass_method_staticMethods_ZCBSIJFDINLRObject__S,
  &DmiTestClass_method_staticMethodz_ZCBSIJFDINLRObject__Z,
  &DmiTestClass_method_throwExceptionMethod_I_V,
  &DmiTestClass_method_toString__LRString_,
  &DmiTestClass_method_virtualMethod__I,
  0
};


struct DmiTestClass_MetaInfoInitializer
{  DmiTestClass_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiTestClass::clazzInfo();
    ci->fields =  _DmiTestClass_fields;
    ci->methods =  _DmiTestClass_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiTestClass_MetaInfoInitializer DmiTestClass_MetaInfoInitializer_staticinstance__;


struct DmiTestClass_clazzInfo_ClazzAttributesResInitializer2
{
  DmiTestClass_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DmiTestClass_method_toString__LRString_, "Key3", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("Val3", false));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DmiTestClass_methods_getEnumeration_I_LDmiTestEnumeration__arg_en, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DmiTestEnumerationMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&DmiTestClass_method_getEnumeration_I_LDmiTestEnumeration_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DmiTestEnumerationMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)DmiTestClass::clazzInfo(), "Key1", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("Val1", false));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)DmiTestClass::clazzInfo(), "Key2", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("Val2", false));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)DmiTestClass::clazzInfo(), "__acdk_classinitfunction", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("_initializeClass", false));
    DmiTestClass::clazzInfo()->callClassInitializer();
  }
};

DmiTestClass_clazzInfo_ClazzAttributesResInitializer2 DmiTestClass_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
DmiTestException_create_array(int length)
{
  return new ObjectArrayImpl<RDmiTestException>(length);
}

//static
::acdk::lang::RObject
DmiTestException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiTestException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestException_method_DmiTestException__LRDmiTestException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTestException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestException_method_DmiTestException_INLRString__LRDmiTestException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTestException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestException_method_DmiTestException_INLRString_IINLRObject__LRDmiTestException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DmiTestException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestException_fields__causedObject_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestException* This = dmi_cast<DmiTestException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_causedObject, flags);
    else
      This->_causedObject = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DmiTestException_fields__code_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DmiTestException* This = dmi_cast<DmiTestException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_code, flags);
    else
      This->_code = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};


void ThrowException_DmiTestException(IN(::acdk::lang::RThrowable) ex)
{
  throw RDmiTestException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo DmiTestException_fields__causedObject = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_causedObject", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  DmiTestException_MetainfoWrapper::DmiTestException_fields__causedObject_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DmiTestException_fields__code = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_code", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DmiTestException_MetainfoWrapper::DmiTestException_fields__code_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DmiTestException_fields[] = 
{
  &DmiTestException_fields__causedObject,
  &DmiTestException_fields__code,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestException_methods_DmiTestException__LRDmiTestException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestException_methods_DmiTestException__LRDmiTestException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestException_method_DmiTestException__LRDmiTestException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTestException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTestException::clazzInfo(), // return type
  "_0_DmiTestException", // alternative name of method
  -1, // altlabelHashCode
  DmiTestException_methods_DmiTestException__LRDmiTestException__args, // the arguments
  0, //arguments count
  DmiTestException_methods_DmiTestException__LRDmiTestException__exceptions, // the declared exceptions
  DmiTestException_MetainfoWrapper::DmiTestException_method_DmiTestException__LRDmiTestException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestException_methods_DmiTestException_INLRString__LRDmiTestException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestException_methods_DmiTestException_INLRString__LRDmiTestException__args[] = 
{
  &DmiTestException_methods_DmiTestException_INLRString__LRDmiTestException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestException_methods_DmiTestException_INLRString__LRDmiTestException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestException_method_DmiTestException_INLRString__LRDmiTestException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTestException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTestException::clazzInfo(), // return type
  "_1_DmiTestException", // alternative name of method
  -1, // altlabelHashCode
  DmiTestException_methods_DmiTestException_INLRString__LRDmiTestException__args, // the arguments
  0, //arguments count
  DmiTestException_methods_DmiTestException_INLRString__LRDmiTestException__exceptions, // the declared exceptions
  DmiTestException_MetainfoWrapper::DmiTestException_method_DmiTestException_INLRString__LRDmiTestException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__args[] = 
{
  &DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__arg_what,
  &DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__arg_code,
  &DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestException_method_DmiTestException_INLRString_IINLRObject__LRDmiTestException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DmiTestException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DmiTestException::clazzInfo(), // return type
  "_2_DmiTestException", // alternative name of method
  -1, // altlabelHashCode
  DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__args, // the arguments
  0, //arguments count
  DmiTestException_methods_DmiTestException_INLRString_IINLRObject__LRDmiTestException__exceptions, // the declared exceptions
  DmiTestException_MetainfoWrapper::DmiTestException_method_DmiTestException_INLRString_IINLRObject__LRDmiTestException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTestException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiTestException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiTestException_MetainfoWrapper::DmiTestException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiTestException_methods[] = 
{
  &DmiTestException_method_DmiTestException__LRDmiTestException_,
  &DmiTestException_method_DmiTestException_INLRString__LRDmiTestException_,
  &DmiTestException_method_DmiTestException_INLRString_IINLRObject__LRDmiTestException_,
  &DmiTestException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct DmiTestException_MetaInfoInitializer
{  DmiTestException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiTestException::clazzInfo();
    ci->fields =  _DmiTestException_fields;
    ci->methods =  _DmiTestException_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiTestException_MetaInfoInitializer DmiTestException_MetaInfoInitializer_staticinstance__;


struct DmiTestException_clazzInfo_ClazzAttributesResInitializer3
{
  DmiTestException_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)DmiTestException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_DmiTestException));
  }
};

DmiTestException_clazzInfo_ClazzAttributesResInitializer3 DmiTestException_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
DmiTestInterface_create_array(int length)
{
  return new ObjectArrayImpl<RDmiTestInterface>(length);
}

//static
::acdk::lang::RObject
DmiTestInterface_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DmiTestInterface_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestInterface_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DmiTestInterface::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestInterface_method_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestInterface* This = dmi_cast<DmiTestInterface>(This_);
    ret = (::acdk::lang::RObject)This->bar(::acdk::lang::dmi::castTo< ::acdk::lang::RStringBuffer>(args[0], dc), ::acdk::lang::dmi::castToObjectRef< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DmiTestInterface_method_foo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DmiTestInterface* This = dmi_cast<DmiTestInterface>(This_);
    This->foo();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DmiTestInterface_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestInterface_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestInterface_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestInterface_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DmiTestInterface_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DmiTestInterface_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DmiTestInterface_MetainfoWrapper::DmiTestInterface_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestInterface_methods_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__arg_sb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DmiTestInterface_methods_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestInterface_methods_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__args[] = 
{
  &DmiTestInterface_methods_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__arg_sb,
  &DmiTestInterface_methods_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestInterface_methods_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DmiTestInterface_method_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RStringBuffer::clazzInfo(), // return type
  "_1_bar", // alternative name of method
  -1, // altlabelHashCode
  DmiTestInterface_methods_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__args, // the arguments
  0, //arguments count
  DmiTestInterface_methods_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__exceptions, // the declared exceptions
  DmiTestInterface_MetainfoWrapper::DmiTestInterface_method_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DmiTestInterface_methods_foo__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DmiTestInterface_methods_foo__V_exceptions[] =
{
  RIndexOutOfBoundsException::clazzInfo(), 
  RClassNotFoundException::clazzInfo(), 
  0
};

void DmiTestInterface_foo__V_throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IndexOutOfBoundsException) == true)
    THROW_INSTANCE( RIndexOutOfBoundsException(ex));
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo DmiTestInterface_method_foo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "foo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_foo", // alternative name of method
  -1, // altlabelHashCode
  DmiTestInterface_methods_foo__V_args, // the arguments
  0, //arguments count
  DmiTestInterface_methods_foo__V_exceptions, // the declared exceptions
  DmiTestInterface_MetainfoWrapper::DmiTestInterface_method_foo__V_dispatch, // invoke this method
  DmiTestInterface_foo__V_throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DmiTestInterface_methods[] = 
{
  &DmiTestInterface_method_GetClass__L_acdk_lang_RClass_,
  &DmiTestInterface_method_bar_INL_acdk_lang_RStringBuffer_OUTLRString__L_acdk_lang_RStringBuffer_,
  &DmiTestInterface_method_foo__V,
  0
};


struct DmiTestInterface_MetaInfoInitializer
{  DmiTestInterface_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DmiTestInterface::clazzInfo();
    ci->fields =  _DmiTestInterface_fields;
    ci->methods =  _DmiTestInterface_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DmiTestInterface_MetaInfoInitializer DmiTestInterface_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
McConfigTest_create_array(int length)
{
  return new ObjectArrayImpl<RMcConfigTest>(length);
}

//static
::acdk::lang::RObject
McConfigTest_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class McConfigTest_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  McConfigTest_fields_firstMember_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    McConfigTest* This = dmi_cast<McConfigTest>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->firstMember, flags);
    else
      This->firstMember = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  McConfigTest_fields_secondMember_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    McConfigTest* This = dmi_cast<McConfigTest>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->secondMember, flags);
    else
      This->secondMember = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo McConfigTest_fields_secondMember = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "secondMember", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  McConfigTest_MetainfoWrapper::McConfigTest_fields_secondMember_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _McConfigTest_fields[] = 
{
  &McConfigTest_fields_secondMember,
  0
};

::acdk::lang::dmi::ClazzMethodInfo* _McConfigTest_methods[] = 
{
  0
};


struct McConfigTest_MetaInfoInitializer
{  McConfigTest_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = McConfigTest::clazzInfo();
    ci->fields =  _McConfigTest_fields;
    ci->methods =  _McConfigTest_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
McConfigTest_MetaInfoInitializer McConfigTest_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
ProcessTestSuite_create_array(int length)
{
  return new ObjectArrayImpl<RProcessTestSuite>(length);
}

//static
::acdk::lang::RObject
ProcessTestSuite_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ProcessTestSuite_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ProcessTestSuite::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProcessTestSuite(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_ProcessTestSuite_INLRString__LRProcessTestSuite__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProcessTestSuite(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProcessTestSuite(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method__fillTestNames__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ProcessTestSuite::_fillTestNames();
    else
      ret = This->_fillTestNames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ProcessTestSuite::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_run_INLRTestResult__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProcessTestSuite::run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    else
        This->run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_runTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProcessTestSuite::runTest();
    else
        This->runTest();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_setErrWriter_INLacdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProcessTestSuite::setErrWriter(::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(args[0], dc));
    else
        This->setErrWriter(::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_setOutWriter_INLacdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProcessTestSuite::setOutWriter(::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(args[0], dc));
    else
        This->setOutWriter(::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_tests__LRTestArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ProcessTestSuite::tests();
    else
        ret = (::acdk::lang::RObject)This->tests();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestSuite_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ProcessTestSuite::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestSuite_fields__cerr_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cerr, flags);
    else
      This->_cerr = ::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestSuite_fields__cout_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cout, flags);
    else
      This->_cout = ::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestSuite_fields__env_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_env, flags);
    else
      This->_env = ::acdk::lang::dmi::castTo< acdk::util::RProperties>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestSuite_fields__executable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_executable, flags);
    else
      This->_executable = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestSuite_fields__testFilled_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_testFilled, flags);
    else
      This->_testFilled = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestSuite_fields__testName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestSuite* This = dmi_cast<ProcessTestSuite>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_testName, flags);
    else
      This->_testName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestSuite_fields__cerr = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cerr", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo(),
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_fields__cerr_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestSuite_fields__cout = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cout", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo(),
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_fields__cout_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestSuite_fields__env = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_env", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(),
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_fields__env_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestSuite_fields__executable = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_executable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_fields__executable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestSuite_fields__testFilled = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_testFilled", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_fields__testFilled_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestSuite_fields__testName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_testName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_fields__testName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ProcessTestSuite_fields[] = 
{
  &ProcessTestSuite_fields__cerr,
  &ProcessTestSuite_fields__cout,
  &ProcessTestSuite_fields__env,
  &ProcessTestSuite_fields__executable,
  &ProcessTestSuite_fields__testFilled,
  &ProcessTestSuite_fields__testName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__arg_executable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "executable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__args[] = 
{
  &ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__arg_executable,
  &ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__arg_name,
  &ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ProcessTestSuite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcessTestSuite::clazzInfo(), // return type
  "_0_ProcessTestSuite", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_ProcessTestSuite_INLRString__LRProcessTestSuite__arg_executable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "executable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_ProcessTestSuite_INLRString__LRProcessTestSuite__args[] = 
{
  &ProcessTestSuite_methods_ProcessTestSuite_INLRString__LRProcessTestSuite__arg_executable,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_ProcessTestSuite_INLRString__LRProcessTestSuite__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_ProcessTestSuite_INLRString__LRProcessTestSuite_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ProcessTestSuite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcessTestSuite::clazzInfo(), // return type
  "_1_ProcessTestSuite", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_ProcessTestSuite_INLRString__LRProcessTestSuite__args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_ProcessTestSuite_INLRString__LRProcessTestSuite__exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_ProcessTestSuite_INLRString__LRProcessTestSuite__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__arg_executable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "executable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__args[] = 
{
  &ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__arg_executable,
  &ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ProcessTestSuite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcessTestSuite::clazzInfo(), // return type
  "_2_ProcessTestSuite", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods__fillTestNames__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods__fillTestNames__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method__fillTestNames__Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_fillTestNames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a__fillTestNames", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods__fillTestNames__Z_args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods__fillTestNames__Z_exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method__fillTestNames__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getName", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_getName__LRString__args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_getName__LRString__exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_run_INLRTestResult__V_arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResult::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_run_INLRTestResult__V_args[] = 
{
  &ProcessTestSuite_methods_run_INLRTestResult__V_arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_run_INLRTestResult__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_run_INLRTestResult__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_run", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_run_INLRTestResult__V_args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_run_INLRTestResult__V_exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_run_INLRTestResult__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_runTest__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_runTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_runTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "runTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_runTest", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_runTest__V_args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_runTest__V_exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_runTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_setErrWriter_INLacdk_io_RCharWriter__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_setErrWriter_INLacdk_io_RCharWriter__V_args[] = 
{
  &ProcessTestSuite_methods_setErrWriter_INLacdk_io_RCharWriter__V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_setErrWriter_INLacdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_setErrWriter_INLacdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setErrWriter", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_setErrWriter_INLacdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_setErrWriter_INLacdk_io_RCharWriter__V_exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_setErrWriter_INLacdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestSuite_methods_setOutWriter_INLacdk_io_RCharWriter__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_setOutWriter_INLacdk_io_RCharWriter__V_args[] = 
{
  &ProcessTestSuite_methods_setOutWriter_INLacdk_io_RCharWriter__V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_setOutWriter_INLacdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_setOutWriter_INLacdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOutWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setOutWriter", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_setOutWriter_INLacdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_setOutWriter_INLacdk_io_RCharWriter__V_exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_setOutWriter_INLacdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_tests__LRTestArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_tests__LRTestArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_tests__LRTestArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tests", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestArray::clazzInfo(), // return type
  "_8_tests", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_tests__LRTestArray__args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_tests__LRTestArray__exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_tests__LRTestArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestSuite_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestSuite_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestSuite_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toString", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestSuite_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ProcessTestSuite_methods_toString__LRString__exceptions, // the declared exceptions
  ProcessTestSuite_MetainfoWrapper::ProcessTestSuite_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ProcessTestSuite_methods[] = 
{
  &ProcessTestSuite_method_GetClass__L_acdk_lang_RClass_,
  &ProcessTestSuite_method_ProcessTestSuite_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestSuite_,
  &ProcessTestSuite_method_ProcessTestSuite_INLRString__LRProcessTestSuite_,
  &ProcessTestSuite_method_ProcessTestSuite_INLRString_INLRString__LRProcessTestSuite_,
  &ProcessTestSuite_method__fillTestNames__Z,
  &ProcessTestSuite_method_getName__LRString_,
  &ProcessTestSuite_method_run_INLRTestResult__V,
  &ProcessTestSuite_method_runTest__V,
  &ProcessTestSuite_method_setErrWriter_INLacdk_io_RCharWriter__V,
  &ProcessTestSuite_method_setOutWriter_INLacdk_io_RCharWriter__V,
  &ProcessTestSuite_method_tests__LRTestArray_,
  &ProcessTestSuite_method_toString__LRString_,
  0
};


struct ProcessTestSuite_MetaInfoInitializer
{  ProcessTestSuite_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ProcessTestSuite::clazzInfo();
    ci->fields =  _ProcessTestSuite_fields;
    ci->methods =  _ProcessTestSuite_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ProcessTestSuite_MetaInfoInitializer ProcessTestSuite_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
ProcessTestCase_create_array(int length)
{
  return new ObjectArrayImpl<RProcessTestCase>(length);
}

//static
::acdk::lang::RObject
ProcessTestCase_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ProcessTestCase_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ProcessTestCase::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProcessTestCase(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< acdk::util::RProperties>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_ProcessTestCase_INLRString__LRProcessTestCase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProcessTestCase(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ProcessTestCase(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ProcessTestCase::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_run_INLRTestResult__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProcessTestCase::run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    else
        This->run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_runTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProcessTestCase::runTest();
    else
        This->runTest();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_setErrWriter_INLacdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProcessTestCase::setErrWriter(::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(args[0], dc));
    else
        This->setErrWriter(::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_setOutWriter_INLacdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ProcessTestCase::setOutWriter(::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(args[0], dc));
    else
        This->setOutWriter(::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ProcessTestCase_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ProcessTestCase::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestCase_fields__cerr_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cerr, flags);
    else
      This->_cerr = ::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestCase_fields__cout_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cout, flags);
    else
      This->_cout = ::acdk::lang::dmi::castTo< acdk::io::RCharWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestCase_fields__env_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_env, flags);
    else
      This->_env = ::acdk::lang::dmi::castTo< acdk::util::RProperties>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestCase_fields__executable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_executable, flags);
    else
      This->_executable = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ProcessTestCase_fields__testName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ProcessTestCase* This = dmi_cast<ProcessTestCase>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_testName, flags);
    else
      This->_testName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestCase_fields__cerr = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cerr", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo(),
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_fields__cerr_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestCase_fields__cout = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cout", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo(),
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_fields__cout_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestCase_fields__env = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_env", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo(),
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_fields__env_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestCase_fields__executable = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_executable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_fields__executable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ProcessTestCase_fields__testName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_testName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_fields__testName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ProcessTestCase_fields[] = 
{
  &ProcessTestCase_fields__cerr,
  &ProcessTestCase_fields__cout,
  &ProcessTestCase_fields__env,
  &ProcessTestCase_fields__executable,
  &ProcessTestCase_fields__testName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__arg_executable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "executable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RProperties::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__args[] = 
{
  &ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__arg_executable,
  &ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__arg_name,
  &ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ProcessTestCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcessTestCase::clazzInfo(), // return type
  "_0_ProcessTestCase", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_ProcessTestCase_INLRString__LRProcessTestCase__arg_executable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "executable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_ProcessTestCase_INLRString__LRProcessTestCase__args[] = 
{
  &ProcessTestCase_methods_ProcessTestCase_INLRString__LRProcessTestCase__arg_executable,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_ProcessTestCase_INLRString__LRProcessTestCase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_ProcessTestCase_INLRString__LRProcessTestCase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ProcessTestCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcessTestCase::clazzInfo(), // return type
  "_1_ProcessTestCase", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_ProcessTestCase_INLRString__LRProcessTestCase__args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_ProcessTestCase_INLRString__LRProcessTestCase__exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_ProcessTestCase_INLRString__LRProcessTestCase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__arg_executable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "executable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__args[] = 
{
  &ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__arg_executable,
  &ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_ProcessTestCase_INLRString_INLRString__LRProcessTestCase_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ProcessTestCase", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ProcessTestCase::clazzInfo(), // return type
  "_2_ProcessTestCase", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_ProcessTestCase_INLRString_INLRString__LRProcessTestCase__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getName", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_getName__LRString__args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_getName__LRString__exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_run_INLRTestResult__V_arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResult::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_run_INLRTestResult__V_args[] = 
{
  &ProcessTestCase_methods_run_INLRTestResult__V_arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_run_INLRTestResult__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_run_INLRTestResult__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_run", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_run_INLRTestResult__V_args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_run_INLRTestResult__V_exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_run_INLRTestResult__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_runTest__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_runTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_runTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "runTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_runTest", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_runTest__V_args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_runTest__V_exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_runTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_setErrWriter_INLacdk_io_RCharWriter__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_setErrWriter_INLacdk_io_RCharWriter__V_args[] = 
{
  &ProcessTestCase_methods_setErrWriter_INLacdk_io_RCharWriter__V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_setErrWriter_INLacdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_setErrWriter_INLacdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setErrWriter", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_setErrWriter_INLacdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_setErrWriter_INLacdk_io_RCharWriter__V_exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_setErrWriter_INLacdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ProcessTestCase_methods_setOutWriter_INLacdk_io_RCharWriter__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_setOutWriter_INLacdk_io_RCharWriter__V_args[] = 
{
  &ProcessTestCase_methods_setOutWriter_INLacdk_io_RCharWriter__V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_setOutWriter_INLacdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_setOutWriter_INLacdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOutWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setOutWriter", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_setOutWriter_INLacdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_setOutWriter_INLacdk_io_RCharWriter__V_exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_setOutWriter_INLacdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ProcessTestCase_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ProcessTestCase_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ProcessTestCase_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toString", // alternative name of method
  -1, // altlabelHashCode
  ProcessTestCase_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ProcessTestCase_methods_toString__LRString__exceptions, // the declared exceptions
  ProcessTestCase_MetainfoWrapper::ProcessTestCase_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ProcessTestCase_methods[] = 
{
  &ProcessTestCase_method_GetClass__L_acdk_lang_RClass_,
  &ProcessTestCase_method_ProcessTestCase_INLRString_INLRString_INLacdk_util_RProperties__LRProcessTestCase_,
  &ProcessTestCase_method_ProcessTestCase_INLRString__LRProcessTestCase_,
  &ProcessTestCase_method_ProcessTestCase_INLRString_INLRString__LRProcessTestCase_,
  &ProcessTestCase_method_getName__LRString_,
  &ProcessTestCase_method_run_INLRTestResult__V,
  &ProcessTestCase_method_runTest__V,
  &ProcessTestCase_method_setErrWriter_INLacdk_io_RCharWriter__V,
  &ProcessTestCase_method_setOutWriter_INLacdk_io_RCharWriter__V,
  &ProcessTestCase_method_toString__LRString_,
  0
};


struct ProcessTestCase_MetaInfoInitializer
{  ProcessTestCase_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ProcessTestCase::clazzInfo();
    ci->fields =  _ProcessTestCase_fields;
    ci->methods =  _ProcessTestCase_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ProcessTestCase_MetaInfoInitializer ProcessTestCase_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
SayHelloInterface_create_array(int length)
{
  return new ObjectArrayImpl<RSayHelloInterface>(length);
}

//static
::acdk::lang::RObject
SayHelloInterface_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SayHelloInterface_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SayHelloInterface_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SayHelloInterface::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SayHelloInterface_method_sayHello_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SayHelloInterface* This = dmi_cast<SayHelloInterface>(This_);
    ret = (::acdk::lang::RObject)This->sayHello(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SayHelloInterface_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SayHelloInterface_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SayHelloInterface_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SayHelloInterface_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SayHelloInterface_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SayHelloInterface_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SayHelloInterface_MetainfoWrapper::SayHelloInterface_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SayHelloInterface_methods_sayHello_INLRString__LRString__arg_sayto = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sayto", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SayHelloInterface_methods_sayHello_INLRString__LRString__args[] = 
{
  &SayHelloInterface_methods_sayHello_INLRString__LRString__arg_sayto,
  0
};

::acdk::lang::dmi::ClazzInfo* SayHelloInterface_methods_sayHello_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SayHelloInterface_method_sayHello_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sayHello", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_sayHello", // alternative name of method
  -1, // altlabelHashCode
  SayHelloInterface_methods_sayHello_INLRString__LRString__args, // the arguments
  0, //arguments count
  SayHelloInterface_methods_sayHello_INLRString__LRString__exceptions, // the declared exceptions
  SayHelloInterface_MetainfoWrapper::SayHelloInterface_method_sayHello_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SayHelloInterface_methods[] = 
{
  &SayHelloInterface_method_GetClass__L_acdk_lang_RClass_,
  &SayHelloInterface_method_sayHello_INLRString__LRString_,
  0
};


struct SayHelloInterface_MetaInfoInitializer
{  SayHelloInterface_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SayHelloInterface::clazzInfo();
    ci->fields =  _SayHelloInterface_fields;
    ci->methods =  _SayHelloInterface_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SayHelloInterface_MetaInfoInitializer SayHelloInterface_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
SayHelloInterfaceImpl_create_array(int length)
{
  return new ObjectArrayImpl<RSayHelloInterfaceImpl>(length);
}

//static
::acdk::lang::RObject
SayHelloInterfaceImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SayHelloInterfaceImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SayHelloInterfaceImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SayHelloInterfaceImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SayHelloInterfaceImpl_method_SayHelloInterfaceImpl__LRSayHelloInterfaceImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SayHelloInterfaceImpl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SayHelloInterfaceImpl_method_sayHello_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SayHelloInterfaceImpl* This = dmi_cast<SayHelloInterfaceImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SayHelloInterfaceImpl::sayHello(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->sayHello(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _SayHelloInterfaceImpl_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SayHelloInterfaceImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SayHelloInterfaceImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SayHelloInterfaceImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SayHelloInterfaceImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SayHelloInterfaceImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SayHelloInterfaceImpl_MetainfoWrapper::SayHelloInterfaceImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SayHelloInterfaceImpl_methods_SayHelloInterfaceImpl__LRSayHelloInterfaceImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SayHelloInterfaceImpl_methods_SayHelloInterfaceImpl__LRSayHelloInterfaceImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SayHelloInterfaceImpl_method_SayHelloInterfaceImpl__LRSayHelloInterfaceImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SayHelloInterfaceImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SayHelloInterfaceImpl::clazzInfo(), // return type
  "_0_SayHelloInterfaceImpl", // alternative name of method
  -1, // altlabelHashCode
  SayHelloInterfaceImpl_methods_SayHelloInterfaceImpl__LRSayHelloInterfaceImpl__args, // the arguments
  0, //arguments count
  SayHelloInterfaceImpl_methods_SayHelloInterfaceImpl__LRSayHelloInterfaceImpl__exceptions, // the declared exceptions
  SayHelloInterfaceImpl_MetainfoWrapper::SayHelloInterfaceImpl_method_SayHelloInterfaceImpl__LRSayHelloInterfaceImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SayHelloInterfaceImpl_methods_sayHello_INLRString__LRString__arg_sayto = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sayto", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SayHelloInterfaceImpl_methods_sayHello_INLRString__LRString__args[] = 
{
  &SayHelloInterfaceImpl_methods_sayHello_INLRString__LRString__arg_sayto,
  0
};

::acdk::lang::dmi::ClazzInfo* SayHelloInterfaceImpl_methods_sayHello_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SayHelloInterfaceImpl_method_sayHello_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sayHello", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_sayHello", // alternative name of method
  -1, // altlabelHashCode
  SayHelloInterfaceImpl_methods_sayHello_INLRString__LRString__args, // the arguments
  0, //arguments count
  SayHelloInterfaceImpl_methods_sayHello_INLRString__LRString__exceptions, // the declared exceptions
  SayHelloInterfaceImpl_MetainfoWrapper::SayHelloInterfaceImpl_method_sayHello_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SayHelloInterfaceImpl_methods[] = 
{
  &SayHelloInterfaceImpl_method_GetClass__L_acdk_lang_RClass_,
  &SayHelloInterfaceImpl_method_SayHelloInterfaceImpl__LRSayHelloInterfaceImpl_,
  &SayHelloInterfaceImpl_method_sayHello_INLRString__LRString_,
  0
};


struct SayHelloInterfaceImpl_MetaInfoInitializer
{  SayHelloInterfaceImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SayHelloInterfaceImpl::clazzInfo();
    ci->fields =  _SayHelloInterfaceImpl_fields;
    ci->methods =  _SayHelloInterfaceImpl_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SayHelloInterfaceImpl_MetaInfoInitializer SayHelloInterfaceImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
Test_create_array(int length)
{
  return new ObjectArrayImpl<RTest>(length);
}

//static
::acdk::lang::RObject
Test_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Test_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Test_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Test::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Test_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Test* This = dmi_cast<Test>(This_);
    ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Test_method_run_INLRTestResult__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Test* This = dmi_cast<Test>(This_);
    This->run(::acdk::lang::dmi::castTo< RTestResult>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Test_method_runTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Test* This = dmi_cast<Test>(This_);
    This->runTest();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Test_method_testCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Test* This = dmi_cast<Test>(This_);
  ret = This->testCount();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Test_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Test_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Test_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Test_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Test_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Test_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Test_MetainfoWrapper::Test_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Test_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Test_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Test_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getName", // alternative name of method
  -1, // altlabelHashCode
  Test_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Test_methods_getName__LRString__exceptions, // the declared exceptions
  Test_MetainfoWrapper::Test_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Test_methods_run_INLRTestResult__V_arg_result = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "result", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResult::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Test_methods_run_INLRTestResult__V_args[] = 
{
  &Test_methods_run_INLRTestResult__V_arg_result,
  0
};

::acdk::lang::dmi::ClazzInfo* Test_methods_run_INLRTestResult__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Test_method_run_INLRTestResult__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "run", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_run", // alternative name of method
  -1, // altlabelHashCode
  Test_methods_run_INLRTestResult__V_args, // the arguments
  0, //arguments count
  Test_methods_run_INLRTestResult__V_exceptions, // the declared exceptions
  Test_MetainfoWrapper::Test_method_run_INLRTestResult__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Test_methods_runTest__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Test_methods_runTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Test_method_runTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "runTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_runTest", // alternative name of method
  -1, // altlabelHashCode
  Test_methods_runTest__V_args, // the arguments
  0, //arguments count
  Test_methods_runTest__V_exceptions, // the declared exceptions
  Test_MetainfoWrapper::Test_method_runTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Test_methods_testCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Test_methods_testCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Test_method_testCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "testCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_testCount", // alternative name of method
  -1, // altlabelHashCode
  Test_methods_testCount__I_args, // the arguments
  0, //arguments count
  Test_methods_testCount__I_exceptions, // the declared exceptions
  Test_MetainfoWrapper::Test_method_testCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Test_methods[] = 
{
  &Test_method_GetClass__L_acdk_lang_RClass_,
  &Test_method_getName__LRString_,
  &Test_method_run_INLRTestResult__V,
  &Test_method_runTest__V,
  &Test_method_testCount__I,
  0
};


struct Test_MetaInfoInitializer
{  Test_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Test::clazzInfo();
    ci->fields =  _Test_fields;
    ci->methods =  _Test_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Test_MetaInfoInitializer Test_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestCollectorListener_create_array(int length)
{
  return new ObjectArrayImpl<RTestCollectorListener>(length);
}

//static
::acdk::lang::RObject
TestCollectorListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestCollectorListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCollectorListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestCollectorListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCollectorListener_method_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestCollectorListener(::acdk::lang::dmi::castTo< acdk::io::RStringWriter>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::io::RStringWriter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCollectorListener_method_addError_INLRTest_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestCollectorListener::addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    else
        This->addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCollectorListener_method_addFailure_INLRTest_INLRTestException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestCollectorListener::addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    else
        This->addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCollectorListener_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestCollectorListener::addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    else
        This->addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCollectorListener_method_endTest_INLRTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestCollectorListener::endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
        This->endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCollectorListener_method_getResults__LRTestResultEntryArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestCollectorListener::getResults();
    else
        ret = (::acdk::lang::RObject)This->getResults();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestCollectorListener_method_startTest_INLRTest__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestCollectorListener::startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
      ret = This->startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestCollectorListener_fields__err_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_err, flags);
    else
      This->_err = ::acdk::lang::dmi::castTo< acdk::io::RStringWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestCollectorListener_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< acdk::io::RStringWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestCollectorListener_fields__results_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestCollectorListener* This = dmi_cast<TestCollectorListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_results, flags);
    else
      This->_results = ::acdk::lang::dmi::castTo< RTestResultEntryArray>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestCollectorListener_fields__err = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_err", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RStringWriter::clazzInfo(),
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_fields__err_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestCollectorListener_fields__out = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RStringWriter::clazzInfo(),
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestCollectorListener_fields__results = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_results", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResultEntryArray::clazzInfo(),
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_fields__results_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestCollectorListener_fields[] = 
{
  &TestCollectorListener_fields__err,
  &TestCollectorListener_fields__out,
  &TestCollectorListener_fields__results,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCollectorListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCollectorListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestCollectorListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestCollectorListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RStringWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__arg_err = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "err", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RStringWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCollectorListener_methods_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__args[] = 
{
  &TestCollectorListener_methods_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__arg_out,
  &TestCollectorListener_methods_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__arg_err,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener_methods_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCollectorListener_method_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestCollectorListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestCollectorListener::clazzInfo(), // return type
  "_0_TestCollectorListener", // alternative name of method
  -1, // altlabelHashCode
  TestCollectorListener_methods_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__args, // the arguments
  0, //arguments count
  TestCollectorListener_methods_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__exceptions, // the declared exceptions
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_method_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_addError_INLRTest_INLRThrowable__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_addError_INLRTest_INLRThrowable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCollectorListener_methods_addError_INLRTest_INLRThrowable__V_args[] = 
{
  &TestCollectorListener_methods_addError_INLRTest_INLRThrowable__V_arg_test,
  &TestCollectorListener_methods_addError_INLRTest_INLRThrowable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener_methods_addError_INLRTest_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCollectorListener_method_addError_INLRTest_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_addError", // alternative name of method
  -1, // altlabelHashCode
  TestCollectorListener_methods_addError_INLRTest_INLRThrowable__V_args, // the arguments
  0, //arguments count
  TestCollectorListener_methods_addError_INLRTest_INLRThrowable__V_exceptions, // the declared exceptions
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_method_addError_INLRTest_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_addFailure_INLRTest_INLRTestException__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_addFailure_INLRTest_INLRTestException__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCollectorListener_methods_addFailure_INLRTest_INLRTestException__V_args[] = 
{
  &TestCollectorListener_methods_addFailure_INLRTest_INLRTestException__V_arg_test,
  &TestCollectorListener_methods_addFailure_INLRTest_INLRTestException__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener_methods_addFailure_INLRTest_INLRTestException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCollectorListener_method_addFailure_INLRTest_INLRTestException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addFailure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addFailure", // alternative name of method
  -1, // altlabelHashCode
  TestCollectorListener_methods_addFailure_INLRTest_INLRTestException__V_args, // the arguments
  0, //arguments count
  TestCollectorListener_methods_addFailure_INLRTest_INLRTestException__V_exceptions, // the declared exceptions
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_method_addFailure_INLRTest_INLRTestException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_testExpr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "testExpr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestExpression::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCollectorListener_methods_addSuccess_INLRTest_INLRTestExpression__V_args[] = 
{
  &TestCollectorListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test,
  &TestCollectorListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_testExpr,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCollectorListener_method_addSuccess_INLRTest_INLRTestExpression__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSuccess", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addSuccess", // alternative name of method
  -1, // altlabelHashCode
  TestCollectorListener_methods_addSuccess_INLRTest_INLRTestExpression__V_args, // the arguments
  0, //arguments count
  TestCollectorListener_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions, // the declared exceptions
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_endTest_INLRTest__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCollectorListener_methods_endTest_INLRTest__V_args[] = 
{
  &TestCollectorListener_methods_endTest_INLRTest__V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener_methods_endTest_INLRTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCollectorListener_method_endTest_INLRTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_endTest", // alternative name of method
  -1, // altlabelHashCode
  TestCollectorListener_methods_endTest_INLRTest__V_args, // the arguments
  0, //arguments count
  TestCollectorListener_methods_endTest_INLRTest__V_exceptions, // the declared exceptions
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_method_endTest_INLRTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCollectorListener_methods_getResults__LRTestResultEntryArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener_methods_getResults__LRTestResultEntryArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCollectorListener_method_getResults__LRTestResultEntryArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getResults", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestResultEntryArray::clazzInfo(), // return type
  "_6_getResults", // alternative name of method
  -1, // altlabelHashCode
  TestCollectorListener_methods_getResults__LRTestResultEntryArray__args, // the arguments
  0, //arguments count
  TestCollectorListener_methods_getResults__LRTestResultEntryArray__exceptions, // the declared exceptions
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_method_getResults__LRTestResultEntryArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestCollectorListener_methods_startTest_INLRTest__Z_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestCollectorListener_methods_startTest_INLRTest__Z_args[] = 
{
  &TestCollectorListener_methods_startTest_INLRTest__Z_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestCollectorListener_methods_startTest_INLRTest__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestCollectorListener_method_startTest_INLRTest__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_startTest", // alternative name of method
  -1, // altlabelHashCode
  TestCollectorListener_methods_startTest_INLRTest__Z_args, // the arguments
  0, //arguments count
  TestCollectorListener_methods_startTest_INLRTest__Z_exceptions, // the declared exceptions
  TestCollectorListener_MetainfoWrapper::TestCollectorListener_method_startTest_INLRTest__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestCollectorListener_methods[] = 
{
  &TestCollectorListener_method_GetClass__L_acdk_lang_RClass_,
  &TestCollectorListener_method_TestCollectorListener_INLacdk_io_RStringWriter_INLacdk_io_RStringWriter__LRTestCollectorListener_,
  &TestCollectorListener_method_addError_INLRTest_INLRThrowable__V,
  &TestCollectorListener_method_addFailure_INLRTest_INLRTestException__V,
  &TestCollectorListener_method_addSuccess_INLRTest_INLRTestExpression__V,
  &TestCollectorListener_method_endTest_INLRTest__V,
  &TestCollectorListener_method_getResults__LRTestResultEntryArray_,
  &TestCollectorListener_method_startTest_INLRTest__Z,
  0
};


struct TestCollectorListener_MetaInfoInitializer
{  TestCollectorListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestCollectorListener::clazzInfo();
    ci->fields =  _TestCollectorListener_fields;
    ci->methods =  _TestCollectorListener_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestCollectorListener_MetaInfoInitializer TestCollectorListener_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestConsoleListener_create_array(int length)
{
  return new ObjectArrayImpl<RTestConsoleListener>(length);
}

//static
::acdk::lang::RObject
TestConsoleListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestConsoleListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestConsoleListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestConsoleListener(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_TestConsoleListener__LRTestConsoleListener__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestConsoleListener();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestConsoleListener(::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_addError_INLRTest_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestConsoleListener* This = dmi_cast<TestConsoleListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestConsoleListener::addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    else
        This->addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_addFailure_INLRTest_INLRTestException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestConsoleListener* This = dmi_cast<TestConsoleListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestConsoleListener::addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    else
        This->addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestConsoleListener* This = dmi_cast<TestConsoleListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestConsoleListener::addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    else
        This->addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_endTest_INLRTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestConsoleListener* This = dmi_cast<TestConsoleListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestConsoleListener::endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
        This->endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestConsoleListener_method_startTest_INLRTest__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestConsoleListener* This = dmi_cast<TestConsoleListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestConsoleListener::startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
      ret = This->startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestConsoleListener_fields__options_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestConsoleListener* This = dmi_cast<TestConsoleListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_options, flags);
    else
      This->_options = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestConsoleListener_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestConsoleListener* This = dmi_cast<TestConsoleListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestConsoleListener_fields__options = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_options", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_fields__options_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestConsoleListener_fields__out = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestConsoleListener_fields[] = 
{
  &TestConsoleListener_fields__options,
  &TestConsoleListener_fields__out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__arg_options = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "options", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__args[] = 
{
  &TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__arg_out,
  &TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__arg_options,
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestConsoleListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestConsoleListener::clazzInfo(), // return type
  "_0_TestConsoleListener", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_TestConsoleListener__LRTestConsoleListener__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_TestConsoleListener__LRTestConsoleListener__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_TestConsoleListener__LRTestConsoleListener_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestConsoleListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestConsoleListener::clazzInfo(), // return type
  "_1_TestConsoleListener", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_TestConsoleListener__LRTestConsoleListener__args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_TestConsoleListener__LRTestConsoleListener__exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_TestConsoleListener__LRTestConsoleListener__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener__args[] = 
{
  &TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestConsoleListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestConsoleListener::clazzInfo(), // return type
  "_2_TestConsoleListener", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener__args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener__exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_addError_INLRTest_INLRThrowable__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_addError_INLRTest_INLRThrowable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_addError_INLRTest_INLRThrowable__V_args[] = 
{
  &TestConsoleListener_methods_addError_INLRTest_INLRThrowable__V_arg_test,
  &TestConsoleListener_methods_addError_INLRTest_INLRThrowable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_addError_INLRTest_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_addError_INLRTest_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addError", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_addError_INLRTest_INLRThrowable__V_args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_addError_INLRTest_INLRThrowable__V_exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_addError_INLRTest_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_addFailure_INLRTest_INLRTestException__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_addFailure_INLRTest_INLRTestException__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_addFailure_INLRTest_INLRTestException__V_args[] = 
{
  &TestConsoleListener_methods_addFailure_INLRTest_INLRTestException__V_arg_test,
  &TestConsoleListener_methods_addFailure_INLRTest_INLRTestException__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_addFailure_INLRTest_INLRTestException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_addFailure_INLRTest_INLRTestException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addFailure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addFailure", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_addFailure_INLRTest_INLRTestException__V_args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_addFailure_INLRTest_INLRTestException__V_exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_addFailure_INLRTest_INLRTestException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_testExpr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "testExpr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestExpression::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_addSuccess_INLRTest_INLRTestExpression__V_args[] = 
{
  &TestConsoleListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test,
  &TestConsoleListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_testExpr,
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_addSuccess_INLRTest_INLRTestExpression__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSuccess", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_addSuccess", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_addSuccess_INLRTest_INLRTestExpression__V_args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_endTest_INLRTest__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_endTest_INLRTest__V_args[] = 
{
  &TestConsoleListener_methods_endTest_INLRTest__V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_endTest_INLRTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_endTest_INLRTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_endTest", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_endTest_INLRTest__V_args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_endTest_INLRTest__V_exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_endTest_INLRTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestConsoleListener_methods_startTest_INLRTest__Z_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestConsoleListener_methods_startTest_INLRTest__Z_args[] = 
{
  &TestConsoleListener_methods_startTest_INLRTest__Z_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestConsoleListener_methods_startTest_INLRTest__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestConsoleListener_method_startTest_INLRTest__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_startTest", // alternative name of method
  -1, // altlabelHashCode
  TestConsoleListener_methods_startTest_INLRTest__Z_args, // the arguments
  0, //arguments count
  TestConsoleListener_methods_startTest_INLRTest__Z_exceptions, // the declared exceptions
  TestConsoleListener_MetainfoWrapper::TestConsoleListener_method_startTest_INLRTest__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestConsoleListener_methods[] = 
{
  &TestConsoleListener_method_GetClass__L_acdk_lang_RClass_,
  &TestConsoleListener_method_TestConsoleListener_INLacdk_io_RPrintWriter_I_LRTestConsoleListener_,
  &TestConsoleListener_method_TestConsoleListener__LRTestConsoleListener_,
  &TestConsoleListener_method_TestConsoleListener_INLacdk_io_RPrintWriter__LRTestConsoleListener_,
  &TestConsoleListener_method_addError_INLRTest_INLRThrowable__V,
  &TestConsoleListener_method_addFailure_INLRTest_INLRTestException__V,
  &TestConsoleListener_method_addSuccess_INLRTest_INLRTestExpression__V,
  &TestConsoleListener_method_endTest_INLRTest__V,
  &TestConsoleListener_method_startTest_INLRTest__Z,
  0
};


struct TestConsoleListener_MetaInfoInitializer
{  TestConsoleListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestConsoleListener::clazzInfo();
    ci->fields =  _TestConsoleListener_fields;
    ci->methods =  _TestConsoleListener_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestConsoleListener_MetaInfoInitializer TestConsoleListener_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestDebuggerListener_create_array(int length)
{
  return new ObjectArrayImpl<RTestDebuggerListener>(length);
}

//static
::acdk::lang::RObject
TestDebuggerListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestDebuggerListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestDebuggerListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestDebuggerListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestDebuggerListener_method_TestDebuggerListener_I_LRTestDebuggerListener__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestDebuggerListener(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestDebuggerListener_method_TestDebuggerListener__LRTestDebuggerListener__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestDebuggerListener();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestDebuggerListener_method_addError_INLRTest_INLRThrowable__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestDebuggerListener* This = dmi_cast<TestDebuggerListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestDebuggerListener::addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    else
        This->addError(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RThrowable>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestDebuggerListener_method_addFailure_INLRTest_INLRTestException__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestDebuggerListener* This = dmi_cast<TestDebuggerListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestDebuggerListener::addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    else
        This->addFailure(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestException>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestDebuggerListener_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestDebuggerListener* This = dmi_cast<TestDebuggerListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestDebuggerListener::addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    else
        This->addSuccess(::acdk::lang::dmi::castTo< RTest>(args[0], dc), ::acdk::lang::dmi::castTo< RTestExpression>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestDebuggerListener_method_endTest_INLRTest__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestDebuggerListener* This = dmi_cast<TestDebuggerListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TestDebuggerListener::endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
        This->endTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestDebuggerListener_method_startTest_INLRTest__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestDebuggerListener* This = dmi_cast<TestDebuggerListener>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestDebuggerListener::startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    else
      ret = This->startTest(::acdk::lang::dmi::castTo< RTest>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestDebuggerListener_fields__options_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestDebuggerListener* This = dmi_cast<TestDebuggerListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_options, flags);
    else
      This->_options = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestDebuggerListener_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestDebuggerListener* This = dmi_cast<TestDebuggerListener>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< acdk::io::RPrintWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestDebuggerListener_fields__options = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_options", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_fields__options_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestDebuggerListener_fields__out = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RPrintWriter::clazzInfo(),
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestDebuggerListener_fields[] = 
{
  &TestDebuggerListener_fields__options,
  &TestDebuggerListener_fields__out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestDebuggerListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestDebuggerListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestDebuggerListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestDebuggerListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_TestDebuggerListener_I_LRTestDebuggerListener__arg_options = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "options", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestDebuggerListener_methods_TestDebuggerListener_I_LRTestDebuggerListener__args[] = 
{
  &TestDebuggerListener_methods_TestDebuggerListener_I_LRTestDebuggerListener__arg_options,
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener_methods_TestDebuggerListener_I_LRTestDebuggerListener__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestDebuggerListener_method_TestDebuggerListener_I_LRTestDebuggerListener_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestDebuggerListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestDebuggerListener::clazzInfo(), // return type
  "_0_TestDebuggerListener", // alternative name of method
  -1, // altlabelHashCode
  TestDebuggerListener_methods_TestDebuggerListener_I_LRTestDebuggerListener__args, // the arguments
  0, //arguments count
  TestDebuggerListener_methods_TestDebuggerListener_I_LRTestDebuggerListener__exceptions, // the declared exceptions
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_method_TestDebuggerListener_I_LRTestDebuggerListener__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestDebuggerListener_methods_TestDebuggerListener__LRTestDebuggerListener__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener_methods_TestDebuggerListener__LRTestDebuggerListener__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestDebuggerListener_method_TestDebuggerListener__LRTestDebuggerListener_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestDebuggerListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestDebuggerListener::clazzInfo(), // return type
  "_1_TestDebuggerListener", // alternative name of method
  -1, // altlabelHashCode
  TestDebuggerListener_methods_TestDebuggerListener__LRTestDebuggerListener__args, // the arguments
  0, //arguments count
  TestDebuggerListener_methods_TestDebuggerListener__LRTestDebuggerListener__exceptions, // the declared exceptions
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_method_TestDebuggerListener__LRTestDebuggerListener__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_addError_INLRTest_INLRThrowable__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_addError_INLRTest_INLRThrowable__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestDebuggerListener_methods_addError_INLRTest_INLRThrowable__V_args[] = 
{
  &TestDebuggerListener_methods_addError_INLRTest_INLRThrowable__V_arg_test,
  &TestDebuggerListener_methods_addError_INLRTest_INLRThrowable__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener_methods_addError_INLRTest_INLRThrowable__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestDebuggerListener_method_addError_INLRTest_INLRThrowable__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addError", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_addError", // alternative name of method
  -1, // altlabelHashCode
  TestDebuggerListener_methods_addError_INLRTest_INLRThrowable__V_args, // the arguments
  0, //arguments count
  TestDebuggerListener_methods_addError_INLRTest_INLRThrowable__V_exceptions, // the declared exceptions
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_method_addError_INLRTest_INLRThrowable__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_addFailure_INLRTest_INLRTestException__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_addFailure_INLRTest_INLRTestException__V_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestException::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestDebuggerListener_methods_addFailure_INLRTest_INLRTestException__V_args[] = 
{
  &TestDebuggerListener_methods_addFailure_INLRTest_INLRTestException__V_arg_test,
  &TestDebuggerListener_methods_addFailure_INLRTest_INLRTestException__V_arg_ex,
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener_methods_addFailure_INLRTest_INLRTestException__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestDebuggerListener_method_addFailure_INLRTest_INLRTestException__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addFailure", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_addFailure", // alternative name of method
  -1, // altlabelHashCode
  TestDebuggerListener_methods_addFailure_INLRTest_INLRTestException__V_args, // the arguments
  0, //arguments count
  TestDebuggerListener_methods_addFailure_INLRTest_INLRTestException__V_exceptions, // the declared exceptions
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_method_addFailure_INLRTest_INLRTestException__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_testExpr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "testExpr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestExpression::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestDebuggerListener_methods_addSuccess_INLRTest_INLRTestExpression__V_args[] = 
{
  &TestDebuggerListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_test,
  &TestDebuggerListener_methods_addSuccess_INLRTest_INLRTestExpression__V_arg_testExpr,
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestDebuggerListener_method_addSuccess_INLRTest_INLRTestExpression__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addSuccess", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addSuccess", // alternative name of method
  -1, // altlabelHashCode
  TestDebuggerListener_methods_addSuccess_INLRTest_INLRTestExpression__V_args, // the arguments
  0, //arguments count
  TestDebuggerListener_methods_addSuccess_INLRTest_INLRTestExpression__V_exceptions, // the declared exceptions
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_method_addSuccess_INLRTest_INLRTestExpression__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_endTest_INLRTest__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestDebuggerListener_methods_endTest_INLRTest__V_args[] = 
{
  &TestDebuggerListener_methods_endTest_INLRTest__V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener_methods_endTest_INLRTest__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestDebuggerListener_method_endTest_INLRTest__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_endTest", // alternative name of method
  -1, // altlabelHashCode
  TestDebuggerListener_methods_endTest_INLRTest__V_args, // the arguments
  0, //arguments count
  TestDebuggerListener_methods_endTest_INLRTest__V_exceptions, // the declared exceptions
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_method_endTest_INLRTest__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestDebuggerListener_methods_startTest_INLRTest__Z_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTest::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestDebuggerListener_methods_startTest_INLRTest__Z_args[] = 
{
  &TestDebuggerListener_methods_startTest_INLRTest__Z_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* TestDebuggerListener_methods_startTest_INLRTest__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestDebuggerListener_method_startTest_INLRTest__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_startTest", // alternative name of method
  -1, // altlabelHashCode
  TestDebuggerListener_methods_startTest_INLRTest__Z_args, // the arguments
  0, //arguments count
  TestDebuggerListener_methods_startTest_INLRTest__Z_exceptions, // the declared exceptions
  TestDebuggerListener_MetainfoWrapper::TestDebuggerListener_method_startTest_INLRTest__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestDebuggerListener_methods[] = 
{
  &TestDebuggerListener_method_GetClass__L_acdk_lang_RClass_,
  &TestDebuggerListener_method_TestDebuggerListener_I_LRTestDebuggerListener_,
  &TestDebuggerListener_method_TestDebuggerListener__LRTestDebuggerListener_,
  &TestDebuggerListener_method_addError_INLRTest_INLRThrowable__V,
  &TestDebuggerListener_method_addFailure_INLRTest_INLRTestException__V,
  &TestDebuggerListener_method_addSuccess_INLRTest_INLRTestExpression__V,
  &TestDebuggerListener_method_endTest_INLRTest__V,
  &TestDebuggerListener_method_startTest_INLRTest__Z,
  0
};


struct TestDebuggerListener_MetaInfoInitializer
{  TestDebuggerListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestDebuggerListener::clazzInfo();
    ci->fields =  _TestDebuggerListener_fields;
    ci->methods =  _TestDebuggerListener_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestDebuggerListener_MetaInfoInitializer TestDebuggerListener_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestExpression_create_array(int length)
{
  return new ObjectArrayImpl<RTestExpression>(length);
}

//static
::acdk::lang::RObject
TestExpression_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestExpression_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestExpression_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestExpression::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestExpression_method_TestExpression_INLRString_INLRString_I_LRTestExpression__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestExpression(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestExpression_method_TestExpression_INLRString__LRTestExpression__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestExpression(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestExpression_method_TestExpression_INLRString_INLRString__LRTestExpression__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestExpression(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestExpression_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestExpression* This = dmi_cast<TestExpression>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestExpression::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestExpression_fields_expression_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestExpression* This = dmi_cast<TestExpression>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->expression, flags);
    else
      This->expression = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestExpression_fields_fileName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestExpression* This = dmi_cast<TestExpression>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->fileName, flags);
    else
      This->fileName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestExpression_fields_lineNo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestExpression* This = dmi_cast<TestExpression>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->lineNo, flags);
    else
      This->lineNo = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TestExpression_fields_expression = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "expression", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TestExpression_MetainfoWrapper::TestExpression_fields_expression_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestExpression_fields_fileName = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "fileName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  TestExpression_MetainfoWrapper::TestExpression_fields_fileName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TestExpression_fields_lineNo = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "lineNo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  TestExpression_MetainfoWrapper::TestExpression_fields_lineNo_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestExpression_fields[] = 
{
  &TestExpression_fields_expression,
  &TestExpression_fields_fileName,
  &TestExpression_fields_lineNo,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestExpression_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestExpression_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestExpression_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestExpression_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestExpression_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestExpression_MetainfoWrapper::TestExpression_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__arg_expr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__args[] = 
{
  &TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__arg_expr,
  &TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__arg_file,
  &TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestExpression_method_TestExpression_INLRString_INLRString_I_LRTestExpression_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestExpression", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestExpression::clazzInfo(), // return type
  "_0_TestExpression", // alternative name of method
  -1, // altlabelHashCode
  TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__args, // the arguments
  0, //arguments count
  TestExpression_methods_TestExpression_INLRString_INLRString_I_LRTestExpression__exceptions, // the declared exceptions
  TestExpression_MetainfoWrapper::TestExpression_method_TestExpression_INLRString_INLRString_I_LRTestExpression__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestExpression_methods_TestExpression_INLRString__LRTestExpression__arg_expr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestExpression_methods_TestExpression_INLRString__LRTestExpression__args[] = 
{
  &TestExpression_methods_TestExpression_INLRString__LRTestExpression__arg_expr,
  0
};

::acdk::lang::dmi::ClazzInfo* TestExpression_methods_TestExpression_INLRString__LRTestExpression__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestExpression_method_TestExpression_INLRString__LRTestExpression_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestExpression", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestExpression::clazzInfo(), // return type
  "_1_TestExpression", // alternative name of method
  -1, // altlabelHashCode
  TestExpression_methods_TestExpression_INLRString__LRTestExpression__args, // the arguments
  0, //arguments count
  TestExpression_methods_TestExpression_INLRString__LRTestExpression__exceptions, // the declared exceptions
  TestExpression_MetainfoWrapper::TestExpression_method_TestExpression_INLRString__LRTestExpression__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestExpression_methods_TestExpression_INLRString_INLRString__LRTestExpression__arg_expr = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "expr", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestExpression_methods_TestExpression_INLRString_INLRString__LRTestExpression__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestExpression_methods_TestExpression_INLRString_INLRString__LRTestExpression__args[] = 
{
  &TestExpression_methods_TestExpression_INLRString_INLRString__LRTestExpression__arg_expr,
  &TestExpression_methods_TestExpression_INLRString_INLRString__LRTestExpression__arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* TestExpression_methods_TestExpression_INLRString_INLRString__LRTestExpression__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestExpression_method_TestExpression_INLRString_INLRString__LRTestExpression_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestExpression", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestExpression::clazzInfo(), // return type
  "_2_TestExpression", // alternative name of method
  -1, // altlabelHashCode
  TestExpression_methods_TestExpression_INLRString_INLRString__LRTestExpression__args, // the arguments
  0, //arguments count
  TestExpression_methods_TestExpression_INLRString_INLRString__LRTestExpression__exceptions, // the declared exceptions
  TestExpression_MetainfoWrapper::TestExpression_method_TestExpression_INLRString_INLRString__LRTestExpression__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestExpression_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestExpression_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestExpression_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  TestExpression_methods_toString__LRString__args, // the arguments
  0, //arguments count
  TestExpression_methods_toString__LRString__exceptions, // the declared exceptions
  TestExpression_MetainfoWrapper::TestExpression_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestExpression_methods[] = 
{
  &TestExpression_method_GetClass__L_acdk_lang_RClass_,
  &TestExpression_method_TestExpression_INLRString_INLRString_I_LRTestExpression_,
  &TestExpression_method_TestExpression_INLRString__LRTestExpression_,
  &TestExpression_method_TestExpression_INLRString_INLRString__LRTestExpression_,
  &TestExpression_method_toString__LRString_,
  0
};


struct TestExpression_MetaInfoInitializer
{  TestExpression_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestExpression::clazzInfo();
    ci->fields =  _TestExpression_fields;
    ci->methods =  _TestExpression_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestExpression_MetaInfoInitializer TestExpression_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace tools
} // namespace aunit


namespace acdk { 
namespace tools { 
namespace aunit { 


//static
::acdk::lang::RObject
TestException_create_array(int length)
{
  return new ObjectArrayImpl<RTestException>(length);
}

//static
::acdk::lang::RObject
TestException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TestException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TestException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestException_method_TestException_INLRString_INLRString_I_LRTestException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestException_method_TestException_INLRString__LRTestException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestException_method_TestException_INLRString_INLRString__LRTestException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TestException(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestException_method_getFileName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestException* This = dmi_cast<TestException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestException::getFileName();
    else
        ret = (::acdk::lang::RObject)This->getFileName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestException_method_getLineNumber__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestException* This = dmi_cast<TestException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->TestException::getLineNumber();
    else
      ret = This->getLineNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TestException_method_getMessage__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TestException* This = dmi_cast<TestException>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TestException::getMessage();
    else
        ret = (::acdk::lang::RObject)This->getMessage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TestException_fields__testExpr_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TestException* This = dmi_cast<TestException>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_testExpr, flags);
    else
      This->_testExpr = ::acdk::lang::dmi::castTo< RTestExpression>(var, dc);
    return fieldinf;
  }
};


void ThrowException_TestException(IN(::acdk::lang::RThrowable) ex)
{
  throw RTestException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo TestException_fields__testExpr = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_testExpr", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTestExpression::clazzInfo(),
  TestException_MetainfoWrapper::TestException_fields__testExpr_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TestException_fields[] = 
{
  &TestException_fields__testExpr,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TestException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TestException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TestException_MetainfoWrapper::TestException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestException_methods_TestException_INLRString_INLRString_I_LRTestException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestException_methods_TestException_INLRString_INLRString_I_LRTestException__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestException_methods_TestException_INLRString_INLRString_I_LRTestException__arg_lineNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "lineNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestException_methods_TestException_INLRString_INLRString_I_LRTestException__args[] = 
{
  &TestException_methods_TestException_INLRString_INLRString_I_LRTestException__arg_msg,
  &TestException_methods_TestException_INLRString_INLRString_I_LRTestException__arg_filename,
  &TestException_methods_TestException_INLRString_INLRString_I_LRTestException__arg_lineNo,
  0
};

::acdk::lang::dmi::ClazzInfo* TestException_methods_TestException_INLRString_INLRString_I_LRTestException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestException_method_TestException_INLRString_INLRString_I_LRTestException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TestException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestException::clazzInfo(), // return type
  "_0_TestException", // alternative name of method
  -1, // altlabelHashCode
  TestException_methods_TestException_INLRString_INLRString_I_LRTestException__args, // the arguments
  0, //arguments count
  TestException_methods_TestException_INLRString_INLRString_I_LRTestException__exceptions, // the declared exceptions
  TestException_MetainfoWrapper::TestException_method_TestException_INLRString_INLRString_I_LRTestException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestException_methods_TestException_INLRString__LRTestException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestException_methods_TestException_INLRString__LRTestException__args[] = 
{
  &TestException_methods_TestException_INLRString__LRTestException__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* TestException_methods_TestException_INLRString__LRTestException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestException_method_TestException_INLRString__LRTestException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestException::clazzInfo(), // return type
  "_1_TestException", // alternative name of method
  -1, // altlabelHashCode
  TestException_methods_TestException_INLRString__LRTestException__args, // the arguments
  0, //arguments count
  TestException_methods_TestException_INLRString__LRTestException__exceptions, // the declared exceptions
  TestException_MetainfoWrapper::TestException_method_TestException_INLRString__LRTestException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TestException_methods_TestException_INLRString_INLRString__LRTestException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TestException_methods_TestException_INLRString_INLRString__LRTestException__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestException_methods_TestException_INLRString_INLRString__LRTestException__args[] = 
{
  &TestException_methods_TestException_INLRString_INLRString__LRTestException__arg_msg,
  &TestException_methods_TestException_INLRString_INLRString__LRTestException__arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* TestException_methods_TestException_INLRString_INLRString__LRTestException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestException_method_TestException_INLRString_INLRString__LRTestException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TestException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TestException::clazzInfo(), // return type
  "_2_TestException", // alternative name of method
  -1, // altlabelHashCode
  TestException_methods_TestException_INLRString_INLRString__LRTestException__args, // the arguments
  0, //arguments count
  TestException_methods_TestException_INLRString_INLRString__LRTestException__exceptions, // the declared exceptions
  TestException_MetainfoWrapper::TestException_method_TestException_INLRString_INLRString__LRTestException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestException_methods_getFileName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestException_methods_getFileName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestException_method_getFileName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getFileName", // alternative name of method
  -1, // altlabelHashCode
  TestException_methods_getFileName__LRString__args, // the arguments
  0, //arguments count
  TestException_methods_getFileName__LRString__exceptions, // the declared exceptions
  TestException_MetainfoWrapper::TestException_method_getFileName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestException_methods_getLineNumber__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestException_methods_getLineNumber__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestException_method_getLineNumber__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLineNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getLineNumber", // alternative name of method
  -1, // altlabelHashCode
  TestException_methods_getLineNumber__I_args, // the arguments
  0, //arguments count
  TestException_methods_getLineNumber__I_exceptions, // the declared exceptions
  TestException_MetainfoWrapper::TestException_method_getLineNumber__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TestException_methods_getMessage__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TestException_methods_getMessage__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TestException_method_getMessage__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMessage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getMessage", // alternative name of method
  -1, // altlabelHashCode
  TestException_methods_getMessage__LRString__args, // the arguments
  0, //arguments count
  TestException_methods_getMessage__LRString__exceptions, // the declared exceptions
  TestException_MetainfoWrapper::TestException_method_getMessage__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TestException_methods[] = 
{
  &TestException_method_GetClass__L_acdk_lang_RClass_,
  &TestException_method_TestException_INLRString_INLRString_I_LRTestException_,
  &TestException_method_TestException_INLRString__LRTestException_,
  &TestException_method_TestException_INLRString_INLRString__LRTestException_,
  &TestException_method_getFileName__LRString_,
  &TestException_method_getLineNumber__I,
  &TestException_method_getMessage__LRString_,
  0
};


struct TestException_MetaInfoInitializer
{  TestException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TestException::clazzInfo();
    ci->fields =  _TestException_fields;
    ci->methods =  _TestException_methods;
    ci->_scopeParent = acdk_tools_aunit_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TestException_MetaInfoInitializer TestException_MetaInfoInitializer_staticinstance__;


struct TestException_clazzInfo_ClazzAttributesResInitializer4
{
  TestException_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)TestException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_TestException));
  }
};

TestException_clazzInfo_ClazzAttributesResInitializer4 TestException_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace tools
} // namespace aunit


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) aunit_dummyExportFunc() {}
#endif

