// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../cfgscript.h"
#include "../cfgscript.h"
#include "../ChDir.h"
#include "../Config.h"
#include "../ExecutionStack.h"
#include "../Props.h"
#include "../Script.h"
#include "../ScriptClassLoader.h"
#include "../ScriptDebug.h"
#include "../ScriptEval.h"
#include "../ScriptException.h"
#include "../ScriptExpr.h"
#include "../ScriptGlobals.h"
#include "../ScriptObject.h"
#include "../ScriptSource.h"
#include "../ShellExecutor.h"
#include "../SourceTokenizer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ScriptClassLoader_create_array(int length)
{
  return new ObjectArrayImpl<RScriptClassLoader>(length);
}

//static
::acdk::lang::RObject
ScriptClassLoader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScriptClassLoader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptClassLoader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_ScriptClassLoader__LRScriptClassLoader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScriptClassLoader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_findClass_INLRString_Z_LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptClassLoader::findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_findClass_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptClassLoader::findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_findLoadedClass_INLRString_Z_LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptClassLoader::findLoadedClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->findLoadedClass(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_findLoadedClass_INLRString__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptClassLoader::findLoadedClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findLoadedClass(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_findResources_INLRString__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptClassLoader::findResources(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findResources(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_loadClassLibrary_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptClassLoader::loadClassLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->loadClassLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_loadClassLibrary_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptClassLoader::loadClassLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
      ret = This->loadClassLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_loadDmiProxyLibrary_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptClassLoader::loadDmiProxyLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->loadDmiProxyLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_loadMetaInfoLibrary_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptClassLoader::loadMetaInfoLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->loadMetaInfoLibrary(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptClassLoader_method_resolveClass_INLRClass__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptClassLoader* This = dmi_cast<ScriptClassLoader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScriptClassLoader::resolveClass(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    else
        This->resolveClass(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ScriptClassLoader_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_ScriptClassLoader__LRScriptClassLoader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_ScriptClassLoader__LRScriptClassLoader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_ScriptClassLoader__LRScriptClassLoader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScriptClassLoader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScriptClassLoader::clazzInfo(), // return type
  "_0_ScriptClassLoader", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_ScriptClassLoader__LRScriptClassLoader__args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_ScriptClassLoader__LRScriptClassLoader__exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_ScriptClassLoader__LRScriptClassLoader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_findClass_INLRString_Z_LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_findClass_INLRString_Z_LRClass__arg_nothrow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nothrow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_findClass_INLRString_Z_LRClass__args[] = 
{
  &ScriptClassLoader_methods_findClass_INLRString_Z_LRClass__arg_name,
  &ScriptClassLoader_methods_findClass_INLRString_Z_LRClass__arg_nothrow,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_findClass_INLRString_Z_LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ScriptClassLoader_findClass_INLRString_Z_LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_findClass_INLRString_Z_LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_1_findClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_findClass_INLRString_Z_LRClass__args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_findClass_INLRString_Z_LRClass__exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_findClass_INLRString_Z_LRClass__dispatch, // invoke this method
  ScriptClassLoader_findClass_INLRString_Z_LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_findClass_INLRString__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_findClass_INLRString__LRClass__args[] = 
{
  &ScriptClassLoader_methods_findClass_INLRString__LRClass__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_findClass_INLRString__LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ScriptClassLoader_findClass_INLRString__LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_findClass_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "findClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_2_findClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_findClass_INLRString__LRClass__args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_findClass_INLRString__LRClass__exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_findClass_INLRString__LRClass__dispatch, // invoke this method
  ScriptClassLoader_findClass_INLRString__LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__arg_nothrow = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "nothrow", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__args[] = 
{
  &ScriptClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__arg_name,
  &ScriptClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__arg_nothrow,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ScriptClassLoader_findLoadedClass_INLRString_Z_LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_findLoadedClass_INLRString_Z_LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findLoadedClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_4_findLoadedClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_findLoadedClass_INLRString_Z_LRClass__exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_findLoadedClass_INLRString_Z_LRClass__dispatch, // invoke this method
  ScriptClassLoader_findLoadedClass_INLRString_Z_LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_findLoadedClass_INLRString__LRClass__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_findLoadedClass_INLRString__LRClass__args[] = 
{
  &ScriptClassLoader_methods_findLoadedClass_INLRString__LRClass__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_findLoadedClass_INLRString__LRClass__exceptions[] =
{
  RClassNotFoundException::clazzInfo(), 
  0
};

void ScriptClassLoader_findLoadedClass_INLRString__LRClass__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ClassNotFoundException) == true)
    THROW_INSTANCE( RClassNotFoundException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_findLoadedClass_INLRString__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "findLoadedClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_5_findLoadedClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_findLoadedClass_INLRString__LRClass__args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_findLoadedClass_INLRString__LRClass__exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_findLoadedClass_INLRString__LRClass__dispatch, // invoke this method
  ScriptClassLoader_findLoadedClass_INLRString__LRClass__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__args[] = 
{
  &ScriptClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_findResources_INLRString__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findResources", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_6_findResources", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_findResources_INLRString__Lacdk_util_RIterator__exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_findResources_INLRString__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_loadClassLibrary_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_loadClassLibrary_INLRString__Z_args[] = 
{
  &ScriptClassLoader_methods_loadClassLibrary_INLRString__Z_arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_loadClassLibrary_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_loadClassLibrary_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadClassLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_loadClassLibrary", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_loadClassLibrary_INLRString__Z_args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_loadClassLibrary_INLRString__Z_exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_loadClassLibrary_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_loadClassLibrary_INLRString_INLRString__Z_arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_loadClassLibrary_INLRString_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_loadClassLibrary_INLRString_INLRString__Z_args[] = 
{
  &ScriptClassLoader_methods_loadClassLibrary_INLRString_INLRString__Z_arg_path,
  &ScriptClassLoader_methods_loadClassLibrary_INLRString_INLRString__Z_arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_loadClassLibrary_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_loadClassLibrary_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadClassLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_loadClassLibrary", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_loadClassLibrary_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_loadClassLibrary_INLRString_INLRString__Z_exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_loadClassLibrary_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_args[] = 
{
  &ScriptClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_loadDmiProxyLibrary_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadDmiProxyLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_loadDmiProxyLibrary", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_loadDmiProxyLibrary_INLRString__Z_exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_loadDmiProxyLibrary_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_arg_classname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "classname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_args[] = 
{
  &ScriptClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_arg_classname,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_loadMetaInfoLibrary_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadMetaInfoLibrary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_loadMetaInfoLibrary", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_loadMetaInfoLibrary_INLRString__Z_exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_loadMetaInfoLibrary_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptClassLoader_methods_resolveClass_INLRClass__V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptClassLoader_methods_resolveClass_INLRClass__V_args[] = 
{
  &ScriptClassLoader_methods_resolveClass_INLRClass__V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptClassLoader_methods_resolveClass_INLRClass__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptClassLoader_method_resolveClass_INLRClass__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resolveClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_resolveClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptClassLoader_methods_resolveClass_INLRClass__V_args, // the arguments
  0, //arguments count
  ScriptClassLoader_methods_resolveClass_INLRClass__V_exceptions, // the declared exceptions
  ScriptClassLoader_MetainfoWrapper::ScriptClassLoader_method_resolveClass_INLRClass__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScriptClassLoader_methods[] = 
{
  &ScriptClassLoader_method_GetClass__L_acdk_lang_RClass_,
  &ScriptClassLoader_method_ScriptClassLoader__LRScriptClassLoader_,
  &ScriptClassLoader_method_findClass_INLRString_Z_LRClass_,
  &ScriptClassLoader_method_findClass_INLRString__LRClass_,
  &ScriptClassLoader_method_findLoadedClass_INLRString_Z_LRClass_,
  &ScriptClassLoader_method_findLoadedClass_INLRString__LRClass_,
  &ScriptClassLoader_method_findResources_INLRString__Lacdk_util_RIterator_,
  &ScriptClassLoader_method_loadClassLibrary_INLRString__Z,
  &ScriptClassLoader_method_loadClassLibrary_INLRString_INLRString__Z,
  &ScriptClassLoader_method_loadDmiProxyLibrary_INLRString__Z,
  &ScriptClassLoader_method_loadMetaInfoLibrary_INLRString__Z,
  &ScriptClassLoader_method_resolveClass_INLRClass__V,
  0
};


struct ScriptClassLoader_MetaInfoInitializer
{  ScriptClassLoader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScriptClassLoader::clazzInfo();
    ci->fields =  _ScriptClassLoader_fields;
    ci->methods =  _ScriptClassLoader_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScriptClassLoader_MetaInfoInitializer ScriptClassLoader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
DebugPoint_create_array(int length)
{
  return new ObjectArrayImpl<RDebugPoint>(length);
}

//static
::acdk::lang::RObject
DebugPoint_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DebugPoint_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DebugPoint::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugPoint* This = dmi_cast<DebugPoint>(This_);
  ret = This->doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugPoint_method_getIdentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugPoint* This = dmi_cast<DebugPoint>(This_);
    ret = (::acdk::lang::RObject)This->getIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugPoint_method_isBreakPoint_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugPoint* This = dmi_cast<DebugPoint>(This_);
  ret = This->isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugPoint_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugPoint* This = dmi_cast<DebugPoint>(This_);
    ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DebugPoint_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugPoint_methods_DebugPoint__LRDebugPoint__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugPoint_methods_DebugPoint__LRDebugPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugPoint_method_DebugPoint__LRDebugPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DebugPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DebugPoint::clazzInfo(), // return type
  "_0_DebugPoint", // alternative name of method
  -1, // altlabelHashCode
  DebugPoint_methods_DebugPoint__LRDebugPoint__args, // the arguments
  0, //arguments count
  DebugPoint_methods_DebugPoint__LRDebugPoint__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugPoint_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugPoint_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DebugPoint_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DebugPoint_MetainfoWrapper::DebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "action", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args[] = 
{
  &DebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action,
  &DebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugPoint_method_doBreak_IINLRExecutionStackFrame__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_doBreak", // alternative name of method
  -1, // altlabelHashCode
  DebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args, // the arguments
  0, //arguments count
  DebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions, // the declared exceptions
  DebugPoint_MetainfoWrapper::DebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugPoint_methods_getIdentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugPoint_methods_getIdentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugPoint_method_getIdentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getIdentifier", // alternative name of method
  -1, // altlabelHashCode
  DebugPoint_methods_getIdentifier__LRString__args, // the arguments
  0, //arguments count
  DebugPoint_methods_getIdentifier__LRString__exceptions, // the declared exceptions
  DebugPoint_MetainfoWrapper::DebugPoint_method_getIdentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ident", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugPoint_methods_isBreakPoint_INLRString__Z_args[] = 
{
  &DebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugPoint_methods_isBreakPoint_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugPoint_method_isBreakPoint_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBreakPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isBreakPoint", // alternative name of method
  -1, // altlabelHashCode
  DebugPoint_methods_isBreakPoint_INLRString__Z_args, // the arguments
  0, //arguments count
  DebugPoint_methods_isBreakPoint_INLRString__Z_exceptions, // the declared exceptions
  DebugPoint_MetainfoWrapper::DebugPoint_method_isBreakPoint_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugPoint_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugPoint_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugPoint_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_toString", // alternative name of method
  -1, // altlabelHashCode
  DebugPoint_methods_toString__LRString__args, // the arguments
  0, //arguments count
  DebugPoint_methods_toString__LRString__exceptions, // the declared exceptions
  DebugPoint_MetainfoWrapper::DebugPoint_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DebugPoint_methods[] = 
{
  &DebugPoint_method_DebugPoint__LRDebugPoint_,
  &DebugPoint_method_GetClass__L_acdk_lang_RClass_,
  &DebugPoint_method_doBreak_IINLRExecutionStackFrame__Z,
  &DebugPoint_method_getIdentifier__LRString_,
  &DebugPoint_method_isBreakPoint_INLRString__Z,
  &DebugPoint_method_toString__LRString_,
  0
};


struct DebugPoint_MetaInfoInitializer
{  DebugPoint_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DebugPoint::clazzInfo();
    ci->fields =  _DebugPoint_fields;
    ci->methods =  _DebugPoint_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DebugPoint_MetaInfoInitializer DebugPoint_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
FunctionEnterDebugPoint_create_array(int length)
{
  return new ObjectArrayImpl<RFunctionEnterDebugPoint>(length);
}

//static
::acdk::lang::RObject
FunctionEnterDebugPoint_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FunctionEnterDebugPoint_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FunctionEnterDebugPoint_method_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FunctionEnterDebugPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FunctionEnterDebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FunctionEnterDebugPoint::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FunctionEnterDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FunctionEnterDebugPoint* This = dmi_cast<FunctionEnterDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FunctionEnterDebugPoint::doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    else
      ret = This->doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FunctionEnterDebugPoint_method_getIdentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FunctionEnterDebugPoint* This = dmi_cast<FunctionEnterDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FunctionEnterDebugPoint::getIdentifier();
    else
        ret = (::acdk::lang::RObject)This->getIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FunctionEnterDebugPoint_method_isBreakPoint_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FunctionEnterDebugPoint* This = dmi_cast<FunctionEnterDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FunctionEnterDebugPoint::isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FunctionEnterDebugPoint_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FunctionEnterDebugPoint* This = dmi_cast<FunctionEnterDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FunctionEnterDebugPoint::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FunctionEnterDebugPoint_fields__functionName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FunctionEnterDebugPoint* This = dmi_cast<FunctionEnterDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_functionName, flags);
    else
      This->_functionName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FunctionEnterDebugPoint_fields__functionName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_functionName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FunctionEnterDebugPoint_MetainfoWrapper::FunctionEnterDebugPoint_fields__functionName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FunctionEnterDebugPoint_fields[] = 
{
  &FunctionEnterDebugPoint_fields__functionName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FunctionEnterDebugPoint_methods_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint__arg_functionName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "functionName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FunctionEnterDebugPoint_methods_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint__args[] = 
{
  &FunctionEnterDebugPoint_methods_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint__arg_functionName,
  0
};

::acdk::lang::dmi::ClazzInfo* FunctionEnterDebugPoint_methods_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FunctionEnterDebugPoint_method_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FunctionEnterDebugPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FunctionEnterDebugPoint::clazzInfo(), // return type
  "_0_FunctionEnterDebugPoint", // alternative name of method
  -1, // altlabelHashCode
  FunctionEnterDebugPoint_methods_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint__args, // the arguments
  0, //arguments count
  FunctionEnterDebugPoint_methods_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint__exceptions, // the declared exceptions
  FunctionEnterDebugPoint_MetainfoWrapper::FunctionEnterDebugPoint_method_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FunctionEnterDebugPoint_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FunctionEnterDebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FunctionEnterDebugPoint_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FunctionEnterDebugPoint_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FunctionEnterDebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FunctionEnterDebugPoint_MetainfoWrapper::FunctionEnterDebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FunctionEnterDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "action", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FunctionEnterDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FunctionEnterDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args[] = 
{
  &FunctionEnterDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action,
  &FunctionEnterDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame,
  0
};

::acdk::lang::dmi::ClazzInfo* FunctionEnterDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FunctionEnterDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_doBreak", // alternative name of method
  -1, // altlabelHashCode
  FunctionEnterDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args, // the arguments
  0, //arguments count
  FunctionEnterDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions, // the declared exceptions
  FunctionEnterDebugPoint_MetainfoWrapper::FunctionEnterDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FunctionEnterDebugPoint_methods_getIdentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FunctionEnterDebugPoint_methods_getIdentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FunctionEnterDebugPoint_method_getIdentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getIdentifier", // alternative name of method
  -1, // altlabelHashCode
  FunctionEnterDebugPoint_methods_getIdentifier__LRString__args, // the arguments
  0, //arguments count
  FunctionEnterDebugPoint_methods_getIdentifier__LRString__exceptions, // the declared exceptions
  FunctionEnterDebugPoint_MetainfoWrapper::FunctionEnterDebugPoint_method_getIdentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FunctionEnterDebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ident", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FunctionEnterDebugPoint_methods_isBreakPoint_INLRString__Z_args[] = 
{
  &FunctionEnterDebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident,
  0
};

::acdk::lang::dmi::ClazzInfo* FunctionEnterDebugPoint_methods_isBreakPoint_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FunctionEnterDebugPoint_method_isBreakPoint_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBreakPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isBreakPoint", // alternative name of method
  -1, // altlabelHashCode
  FunctionEnterDebugPoint_methods_isBreakPoint_INLRString__Z_args, // the arguments
  0, //arguments count
  FunctionEnterDebugPoint_methods_isBreakPoint_INLRString__Z_exceptions, // the declared exceptions
  FunctionEnterDebugPoint_MetainfoWrapper::FunctionEnterDebugPoint_method_isBreakPoint_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FunctionEnterDebugPoint_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FunctionEnterDebugPoint_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FunctionEnterDebugPoint_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  FunctionEnterDebugPoint_methods_toString__LRString__args, // the arguments
  0, //arguments count
  FunctionEnterDebugPoint_methods_toString__LRString__exceptions, // the declared exceptions
  FunctionEnterDebugPoint_MetainfoWrapper::FunctionEnterDebugPoint_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FunctionEnterDebugPoint_methods[] = 
{
  &FunctionEnterDebugPoint_method_FunctionEnterDebugPoint_INLRString__LRFunctionEnterDebugPoint_,
  &FunctionEnterDebugPoint_method_GetClass__L_acdk_lang_RClass_,
  &FunctionEnterDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z,
  &FunctionEnterDebugPoint_method_getIdentifier__LRString_,
  &FunctionEnterDebugPoint_method_isBreakPoint_INLRString__Z,
  &FunctionEnterDebugPoint_method_toString__LRString_,
  0
};


struct FunctionEnterDebugPoint_MetaInfoInitializer
{  FunctionEnterDebugPoint_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FunctionEnterDebugPoint::clazzInfo();
    ci->fields =  _FunctionEnterDebugPoint_fields;
    ci->methods =  _FunctionEnterDebugPoint_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FunctionEnterDebugPoint_MetaInfoInitializer FunctionEnterDebugPoint_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
SourceLineDebugPoint_create_array(int length)
{
  return new ObjectArrayImpl<RSourceLineDebugPoint>(length);
}

//static
::acdk::lang::RObject
SourceLineDebugPoint_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SourceLineDebugPoint_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SourceLineDebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SourceLineDebugPoint::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SourceLineDebugPoint_method_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SourceLineDebugPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SourceLineDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SourceLineDebugPoint* This = dmi_cast<SourceLineDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SourceLineDebugPoint::doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    else
      ret = This->doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SourceLineDebugPoint_method_getIdentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SourceLineDebugPoint* This = dmi_cast<SourceLineDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SourceLineDebugPoint::getIdentifier();
    else
        ret = (::acdk::lang::RObject)This->getIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SourceLineDebugPoint_method_isBreakPoint_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SourceLineDebugPoint* This = dmi_cast<SourceLineDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SourceLineDebugPoint::isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SourceLineDebugPoint_method_parse_INLRString__LRSourceLineDebugPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SourceLineDebugPoint::parse(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SourceLineDebugPoint_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SourceLineDebugPoint* This = dmi_cast<SourceLineDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SourceLineDebugPoint::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SourceLineDebugPoint_fields__sourceLine_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SourceLineDebugPoint* This = dmi_cast<SourceLineDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sourceLine, flags);
    else
      This->_sourceLine = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SourceLineDebugPoint_fields__sourceName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SourceLineDebugPoint* This = dmi_cast<SourceLineDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sourceName, flags);
    else
      This->_sourceName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SourceLineDebugPoint_fields__sourceLine = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sourceLine", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_fields__sourceLine_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SourceLineDebugPoint_fields__sourceName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sourceName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_fields__sourceName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SourceLineDebugPoint_fields[] = 
{
  &SourceLineDebugPoint_fields__sourceLine,
  &SourceLineDebugPoint_fields__sourceName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SourceLineDebugPoint_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SourceLineDebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SourceLineDebugPoint_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SourceLineDebugPoint_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SourceLineDebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SourceLineDebugPoint_methods_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__arg_sourceName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sourceName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SourceLineDebugPoint_methods_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__arg_sourceLine = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "sourceLine", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SourceLineDebugPoint_methods_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__args[] = 
{
  &SourceLineDebugPoint_methods_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__arg_sourceName,
  &SourceLineDebugPoint_methods_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__arg_sourceLine,
  0
};

::acdk::lang::dmi::ClazzInfo* SourceLineDebugPoint_methods_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SourceLineDebugPoint_method_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SourceLineDebugPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SourceLineDebugPoint::clazzInfo(), // return type
  "_0_SourceLineDebugPoint", // alternative name of method
  -1, // altlabelHashCode
  SourceLineDebugPoint_methods_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__args, // the arguments
  0, //arguments count
  SourceLineDebugPoint_methods_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__exceptions, // the declared exceptions
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_method_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SourceLineDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "action", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SourceLineDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SourceLineDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args[] = 
{
  &SourceLineDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action,
  &SourceLineDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame,
  0
};

::acdk::lang::dmi::ClazzInfo* SourceLineDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SourceLineDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_doBreak", // alternative name of method
  -1, // altlabelHashCode
  SourceLineDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args, // the arguments
  0, //arguments count
  SourceLineDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions, // the declared exceptions
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SourceLineDebugPoint_methods_getIdentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SourceLineDebugPoint_methods_getIdentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SourceLineDebugPoint_method_getIdentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getIdentifier", // alternative name of method
  -1, // altlabelHashCode
  SourceLineDebugPoint_methods_getIdentifier__LRString__args, // the arguments
  0, //arguments count
  SourceLineDebugPoint_methods_getIdentifier__LRString__exceptions, // the declared exceptions
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_method_getIdentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SourceLineDebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ident", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SourceLineDebugPoint_methods_isBreakPoint_INLRString__Z_args[] = 
{
  &SourceLineDebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident,
  0
};

::acdk::lang::dmi::ClazzInfo* SourceLineDebugPoint_methods_isBreakPoint_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SourceLineDebugPoint_method_isBreakPoint_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBreakPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isBreakPoint", // alternative name of method
  -1, // altlabelHashCode
  SourceLineDebugPoint_methods_isBreakPoint_INLRString__Z_args, // the arguments
  0, //arguments count
  SourceLineDebugPoint_methods_isBreakPoint_INLRString__Z_exceptions, // the declared exceptions
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_method_isBreakPoint_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SourceLineDebugPoint_methods_parse_INLRString__LRSourceLineDebugPoint__arg_ident = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ident", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SourceLineDebugPoint_methods_parse_INLRString__LRSourceLineDebugPoint__args[] = 
{
  &SourceLineDebugPoint_methods_parse_INLRString__LRSourceLineDebugPoint__arg_ident,
  0
};

::acdk::lang::dmi::ClazzInfo* SourceLineDebugPoint_methods_parse_INLRString__LRSourceLineDebugPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SourceLineDebugPoint_method_parse_INLRString__LRSourceLineDebugPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parse", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSourceLineDebugPoint::clazzInfo(), // return type
  "_5_parse", // alternative name of method
  -1, // altlabelHashCode
  SourceLineDebugPoint_methods_parse_INLRString__LRSourceLineDebugPoint__args, // the arguments
  0, //arguments count
  SourceLineDebugPoint_methods_parse_INLRString__LRSourceLineDebugPoint__exceptions, // the declared exceptions
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_method_parse_INLRString__LRSourceLineDebugPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SourceLineDebugPoint_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SourceLineDebugPoint_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SourceLineDebugPoint_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  SourceLineDebugPoint_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SourceLineDebugPoint_methods_toString__LRString__exceptions, // the declared exceptions
  SourceLineDebugPoint_MetainfoWrapper::SourceLineDebugPoint_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SourceLineDebugPoint_methods[] = 
{
  &SourceLineDebugPoint_method_GetClass__L_acdk_lang_RClass_,
  &SourceLineDebugPoint_method_SourceLineDebugPoint_INLRString_I_LRSourceLineDebugPoint_,
  &SourceLineDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z,
  &SourceLineDebugPoint_method_getIdentifier__LRString_,
  &SourceLineDebugPoint_method_isBreakPoint_INLRString__Z,
  &SourceLineDebugPoint_method_parse_INLRString__LRSourceLineDebugPoint_,
  &SourceLineDebugPoint_method_toString__LRString_,
  0
};


struct SourceLineDebugPoint_MetaInfoInitializer
{  SourceLineDebugPoint_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SourceLineDebugPoint::clazzInfo();
    ci->fields =  _SourceLineDebugPoint_fields;
    ci->methods =  _SourceLineDebugPoint_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SourceLineDebugPoint_MetaInfoInitializer SourceLineDebugPoint_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ThrowExceptionDebugPoint_create_array(int length)
{
  return new ObjectArrayImpl<RThrowExceptionDebugPoint>(length);
}

//static
::acdk::lang::RObject
ThrowExceptionDebugPoint_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ThrowExceptionDebugPoint_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowExceptionDebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ThrowExceptionDebugPoint::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowExceptionDebugPoint_method_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ThrowExceptionDebugPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowExceptionDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThrowExceptionDebugPoint* This = dmi_cast<ThrowExceptionDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThrowExceptionDebugPoint::doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    else
      ret = This->doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowExceptionDebugPoint_method_getIdentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThrowExceptionDebugPoint* This = dmi_cast<ThrowExceptionDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ThrowExceptionDebugPoint::getIdentifier();
    else
        ret = (::acdk::lang::RObject)This->getIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowExceptionDebugPoint_method_isBreakPoint_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThrowExceptionDebugPoint* This = dmi_cast<ThrowExceptionDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThrowExceptionDebugPoint::isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowExceptionDebugPoint_method_onThrow_INLRThrowable_IINLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThrowExceptionDebugPoint* This = dmi_cast<ThrowExceptionDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ThrowExceptionDebugPoint::onThrow(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    else
      ret = This->onThrow(::acdk::lang::dmi::castTo< RThrowable>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ThrowExceptionDebugPoint_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ThrowExceptionDebugPoint* This = dmi_cast<ThrowExceptionDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ThrowExceptionDebugPoint::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ThrowExceptionDebugPoint_fields__exceptionName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ThrowExceptionDebugPoint* This = dmi_cast<ThrowExceptionDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_exceptionName, flags);
    else
      This->_exceptionName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ThrowExceptionDebugPoint_fields__exceptionName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_exceptionName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ThrowExceptionDebugPoint_MetainfoWrapper::ThrowExceptionDebugPoint_fields__exceptionName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ThrowExceptionDebugPoint_fields[] = 
{
  &ThrowExceptionDebugPoint_fields__exceptionName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowExceptionDebugPoint_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowExceptionDebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowExceptionDebugPoint_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ThrowExceptionDebugPoint_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ThrowExceptionDebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ThrowExceptionDebugPoint_MetainfoWrapper::ThrowExceptionDebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowExceptionDebugPoint_methods_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint__arg_exName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "exName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowExceptionDebugPoint_methods_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint__args[] = 
{
  &ThrowExceptionDebugPoint_methods_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint__arg_exName,
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowExceptionDebugPoint_methods_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowExceptionDebugPoint_method_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ThrowExceptionDebugPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ThrowExceptionDebugPoint::clazzInfo(), // return type
  "_0_ThrowExceptionDebugPoint", // alternative name of method
  -1, // altlabelHashCode
  ThrowExceptionDebugPoint_methods_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint__args, // the arguments
  0, //arguments count
  ThrowExceptionDebugPoint_methods_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint__exceptions, // the declared exceptions
  ThrowExceptionDebugPoint_MetainfoWrapper::ThrowExceptionDebugPoint_method_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowExceptionDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "action", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowExceptionDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowExceptionDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args[] = 
{
  &ThrowExceptionDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action,
  &ThrowExceptionDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame,
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowExceptionDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowExceptionDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_doBreak", // alternative name of method
  -1, // altlabelHashCode
  ThrowExceptionDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args, // the arguments
  0, //arguments count
  ThrowExceptionDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions, // the declared exceptions
  ThrowExceptionDebugPoint_MetainfoWrapper::ThrowExceptionDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowExceptionDebugPoint_methods_getIdentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowExceptionDebugPoint_methods_getIdentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowExceptionDebugPoint_method_getIdentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getIdentifier", // alternative name of method
  -1, // altlabelHashCode
  ThrowExceptionDebugPoint_methods_getIdentifier__LRString__args, // the arguments
  0, //arguments count
  ThrowExceptionDebugPoint_methods_getIdentifier__LRString__exceptions, // the declared exceptions
  ThrowExceptionDebugPoint_MetainfoWrapper::ThrowExceptionDebugPoint_method_getIdentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowExceptionDebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ident", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowExceptionDebugPoint_methods_isBreakPoint_INLRString__Z_args[] = 
{
  &ThrowExceptionDebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident,
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowExceptionDebugPoint_methods_isBreakPoint_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowExceptionDebugPoint_method_isBreakPoint_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBreakPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isBreakPoint", // alternative name of method
  -1, // altlabelHashCode
  ThrowExceptionDebugPoint_methods_isBreakPoint_INLRString__Z_args, // the arguments
  0, //arguments count
  ThrowExceptionDebugPoint_methods_isBreakPoint_INLRString__Z_exceptions, // the declared exceptions
  ThrowExceptionDebugPoint_MetainfoWrapper::ThrowExceptionDebugPoint_method_isBreakPoint_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_arg_ex = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ex", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RThrowable::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_args[] = 
{
  &ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_arg_ex,
  &ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_arg_line,
  &ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowExceptionDebugPoint_method_onThrow_INLRThrowable_IINLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onThrow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_onThrow", // alternative name of method
  -1, // altlabelHashCode
  ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_args, // the arguments
  0, //arguments count
  ThrowExceptionDebugPoint_methods_onThrow_INLRThrowable_IINLRString__Z_exceptions, // the declared exceptions
  ThrowExceptionDebugPoint_MetainfoWrapper::ThrowExceptionDebugPoint_method_onThrow_INLRThrowable_IINLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ThrowExceptionDebugPoint_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ThrowExceptionDebugPoint_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ThrowExceptionDebugPoint_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  ThrowExceptionDebugPoint_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ThrowExceptionDebugPoint_methods_toString__LRString__exceptions, // the declared exceptions
  ThrowExceptionDebugPoint_MetainfoWrapper::ThrowExceptionDebugPoint_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ThrowExceptionDebugPoint_methods[] = 
{
  &ThrowExceptionDebugPoint_method_GetClass__L_acdk_lang_RClass_,
  &ThrowExceptionDebugPoint_method_ThrowExceptionDebugPoint_INLRString__LRThrowExceptionDebugPoint_,
  &ThrowExceptionDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z,
  &ThrowExceptionDebugPoint_method_getIdentifier__LRString_,
  &ThrowExceptionDebugPoint_method_isBreakPoint_INLRString__Z,
  &ThrowExceptionDebugPoint_method_onThrow_INLRThrowable_IINLRString__Z,
  &ThrowExceptionDebugPoint_method_toString__LRString_,
  0
};


struct ThrowExceptionDebugPoint_MetaInfoInitializer
{  ThrowExceptionDebugPoint_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ThrowExceptionDebugPoint::clazzInfo();
    ci->fields =  _ThrowExceptionDebugPoint_fields;
    ci->methods =  _ThrowExceptionDebugPoint_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ThrowExceptionDebugPoint_MetaInfoInitializer ThrowExceptionDebugPoint_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
WalkDebugPoint_create_array(int length)
{
  return new ObjectArrayImpl<RWalkDebugPoint>(length);
}

//static
::acdk::lang::RObject
WalkDebugPoint_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class WalkDebugPoint_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WalkDebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)WalkDebugPoint::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WalkDebugPoint_method_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new WalkDebugPoint(::acdk::lang::dmi::castTo< RExecutionStack>(args[0], dc), (DebugNextAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WalkDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WalkDebugPoint* This = dmi_cast<WalkDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->WalkDebugPoint::doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    else
      ret = This->doBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WalkDebugPoint_method_getIdentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WalkDebugPoint* This = dmi_cast<WalkDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->WalkDebugPoint::getIdentifier();
    else
        ret = (::acdk::lang::RObject)This->getIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WalkDebugPoint_method_isBreakPoint_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WalkDebugPoint* This = dmi_cast<WalkDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->WalkDebugPoint::isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->isBreakPoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  WalkDebugPoint_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    WalkDebugPoint* This = dmi_cast<WalkDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->WalkDebugPoint::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  WalkDebugPoint_fields__frame_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    WalkDebugPoint* This = dmi_cast<WalkDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_frame, flags);
    else
      This->_frame = ::acdk::lang::dmi::castTo< RExecutionStackFrame>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  WalkDebugPoint_fields__nextAction_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    WalkDebugPoint* This = dmi_cast<WalkDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_nextAction), flags);
    else
      This->_nextAction = (DebugNextAction)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  WalkDebugPoint_fields__sourceLine_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    WalkDebugPoint* This = dmi_cast<WalkDebugPoint>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sourceLine, flags);
    else
      This->_sourceLine = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo WalkDebugPoint_fields__frame = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_frame", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo(),
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_fields__frame_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo WalkDebugPoint_fields__nextAction = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nextAction", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_fields__nextAction_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo WalkDebugPoint_fields__sourceLine = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sourceLine", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_fields__sourceLine_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _WalkDebugPoint_fields[] = 
{
  &WalkDebugPoint_fields__frame,
  &WalkDebugPoint_fields__nextAction,
  &WalkDebugPoint_fields__sourceLine,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* WalkDebugPoint_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WalkDebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WalkDebugPoint_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  WalkDebugPoint_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  WalkDebugPoint_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__arg_stack = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "stack", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStack::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__arg_nextAction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nextAction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__args[] = 
{
  &WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__arg_stack,
  &WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__arg_nextAction,
  0
};

::acdk::lang::dmi::ClazzInfo* WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WalkDebugPoint_method_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "WalkDebugPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  WalkDebugPoint::clazzInfo(), // return type
  "_0_WalkDebugPoint", // alternative name of method
  -1, // altlabelHashCode
  WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__args, // the arguments
  0, //arguments count
  WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__exceptions, // the declared exceptions
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_method_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WalkDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "action", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo WalkDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WalkDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args[] = 
{
  &WalkDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_action,
  &WalkDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_arg_frame,
  0
};

::acdk::lang::dmi::ClazzInfo* WalkDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WalkDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_doBreak", // alternative name of method
  -1, // altlabelHashCode
  WalkDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_args, // the arguments
  0, //arguments count
  WalkDebugPoint_methods_doBreak_IINLRExecutionStackFrame__Z_exceptions, // the declared exceptions
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WalkDebugPoint_methods_getIdentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WalkDebugPoint_methods_getIdentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WalkDebugPoint_method_getIdentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getIdentifier", // alternative name of method
  -1, // altlabelHashCode
  WalkDebugPoint_methods_getIdentifier__LRString__args, // the arguments
  0, //arguments count
  WalkDebugPoint_methods_getIdentifier__LRString__exceptions, // the declared exceptions
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_method_getIdentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo WalkDebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ident", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* WalkDebugPoint_methods_isBreakPoint_INLRString__Z_args[] = 
{
  &WalkDebugPoint_methods_isBreakPoint_INLRString__Z_arg_ident,
  0
};

::acdk::lang::dmi::ClazzInfo* WalkDebugPoint_methods_isBreakPoint_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WalkDebugPoint_method_isBreakPoint_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isBreakPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_isBreakPoint", // alternative name of method
  -1, // altlabelHashCode
  WalkDebugPoint_methods_isBreakPoint_INLRString__Z_args, // the arguments
  0, //arguments count
  WalkDebugPoint_methods_isBreakPoint_INLRString__Z_exceptions, // the declared exceptions
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_method_isBreakPoint_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* WalkDebugPoint_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* WalkDebugPoint_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo WalkDebugPoint_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  WalkDebugPoint_methods_toString__LRString__args, // the arguments
  0, //arguments count
  WalkDebugPoint_methods_toString__LRString__exceptions, // the declared exceptions
  WalkDebugPoint_MetainfoWrapper::WalkDebugPoint_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _WalkDebugPoint_methods[] = 
{
  &WalkDebugPoint_method_GetClass__L_acdk_lang_RClass_,
  &WalkDebugPoint_method_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint_,
  &WalkDebugPoint_method_doBreak_IINLRExecutionStackFrame__Z,
  &WalkDebugPoint_method_getIdentifier__LRString_,
  &WalkDebugPoint_method_isBreakPoint_INLRString__Z,
  &WalkDebugPoint_method_toString__LRString_,
  0
};


struct WalkDebugPoint_MetaInfoInitializer
{  WalkDebugPoint_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = WalkDebugPoint::clazzInfo();
    ci->fields =  _WalkDebugPoint_fields;
    ci->methods =  _WalkDebugPoint_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
WalkDebugPoint_MetaInfoInitializer WalkDebugPoint_MetaInfoInitializer_staticinstance__;


struct WalkDebugPoint_clazzInfo_ClazzAttributesResInitializer3
{
  WalkDebugPoint_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&WalkDebugPoint_methods_WalkDebugPoint_INLRExecutionStack_I_LRWalkDebugPoint__arg_nextAction, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)DebugNextActionMetaInf::GetEnumInfo()));
  }
};

WalkDebugPoint_clazzInfo_ClazzAttributesResInitializer3 WalkDebugPoint_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
Debugger_create_array(int length)
{
  return new ObjectArrayImpl<RDebugger>(length);
}

//static
::acdk::lang::RObject
Debugger_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Debugger_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Debugger_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Debugger::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Debugger_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Debugger_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Debugger_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Debugger_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Debugger_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Debugger_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Debugger_MetainfoWrapper::Debugger_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Debugger_methods[] = 
{
  &Debugger_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct Debugger_MetaInfoInitializer
{  Debugger_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Debugger::clazzInfo();
    ci->fields =  _Debugger_fields;
    ci->methods =  _Debugger_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Debugger_MetaInfoInitializer Debugger_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ConsoleDebugger_create_array(int length)
{
  return new ObjectArrayImpl<RConsoleDebugger>(length);
}

//static
::acdk::lang::RObject
ConsoleDebugger_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ConsoleDebugger_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleDebugger_method_ConsoleDebugger__LRConsoleDebugger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleDebugger();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleDebugger_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ConsoleDebugger::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ConsoleDebugger_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleDebugger_methods_ConsoleDebugger__LRConsoleDebugger__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleDebugger_methods_ConsoleDebugger__LRConsoleDebugger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleDebugger_method_ConsoleDebugger__LRConsoleDebugger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleDebugger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleDebugger::clazzInfo(), // return type
  "_0_ConsoleDebugger", // alternative name of method
  -1, // altlabelHashCode
  ConsoleDebugger_methods_ConsoleDebugger__LRConsoleDebugger__args, // the arguments
  0, //arguments count
  ConsoleDebugger_methods_ConsoleDebugger__LRConsoleDebugger__exceptions, // the declared exceptions
  ConsoleDebugger_MetainfoWrapper::ConsoleDebugger_method_ConsoleDebugger__LRConsoleDebugger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleDebugger_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleDebugger_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleDebugger_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ConsoleDebugger_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ConsoleDebugger_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ConsoleDebugger_MetainfoWrapper::ConsoleDebugger_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ConsoleDebugger_methods[] = 
{
  &ConsoleDebugger_method_ConsoleDebugger__LRConsoleDebugger_,
  &ConsoleDebugger_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ConsoleDebugger_MetaInfoInitializer
{  ConsoleDebugger_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ConsoleDebugger::clazzInfo();
    ci->fields =  _ConsoleDebugger_fields;
    ci->methods =  _ConsoleDebugger_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ConsoleDebugger_MetaInfoInitializer ConsoleDebugger_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
DebugBreakPoints_create_array(int length)
{
  return new ObjectArrayImpl<RDebugBreakPoints>(length);
}

//static
::acdk::lang::RObject
DebugBreakPoints_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DebugBreakPoints_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_DebugBreakPoints__LRDebugBreakPoints__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new DebugBreakPoints();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DebugBreakPoints::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method__wantBreak_IINLRExecutionStackFrame__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DebugBreakPoints::_wantBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    else
      ret = This->_wantBreak(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_addBreakPoint_INLRDebugPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::addBreakPoint(::acdk::lang::dmi::castTo< RDebugPoint>(args[0], dc));
    else
        This->addBreakPoint(::acdk::lang::dmi::castTo< RDebugPoint>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_addDbgFlag_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::addDbgFlag(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->addDbgFlag(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->DebugBreakPoints::doBreakOnBreakPoint(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    else
      ret = This->doBreakOnBreakPoint(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_get__LRDebugBreakPoints__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(DebugBreakPoints::get());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_getBreakPoints__LRDebugPointArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = outOf(This->DebugBreakPoints::getBreakPoints());
    else
        ret = outOf(This->getBreakPoints());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_getDebugger__LRDebugger__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DebugBreakPoints::getDebugger();
    else
        ret = (::acdk::lang::RObject)This->getDebugger();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_removeBreakpoint_INLRString__LRDebugPoint__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DebugBreakPoints::removeBreakpoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->removeBreakpoint(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_removeBreakpoint_INLRDebugPoint__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::removeBreakpoint(::acdk::lang::dmi::castTo< RDebugPoint>(args[0], dc));
    else
        This->removeBreakpoint(::acdk::lang::dmi::castTo< RDebugPoint>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_removeDbgFlag_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::removeDbgFlag(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->removeDbgFlag(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_setBreakEachStmt__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::setBreakEachStmt();
    else
        This->setBreakEachStmt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_setContinue__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::setContinue();
    else
        This->setContinue();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_setDebugger_INLRDebugger__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::setDebugger(::acdk::lang::dmi::castTo< RDebugger>(args[0], dc));
    else
        This->setDebugger(::acdk::lang::dmi::castTo< RDebugger>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_setTraceOff__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::setTraceOff();
    else
        This->setTraceOff();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DebugBreakPoints_method_setTraceOn__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DebugBreakPoints::setTraceOn();
    else
        This->setTraceOn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DebugBreakPoints_fields__debugPoints_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_debugPoints, flags);
    else
      This->_debugPoints = ::acdk::lang::dmi::castTo< RDebugPointArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DebugBreakPoints_fields__debugger_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_debugger, flags);
    else
      This->_debugger = ::acdk::lang::dmi::castTo< RDebugger>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  DebugBreakPoints_fields__lastInspectedLine_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    DebugBreakPoints* This = dmi_cast<DebugBreakPoints>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lastInspectedLine, flags);
    else
      This->_lastInspectedLine = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo DebugBreakPoints_fields__debugPoints = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_debugPoints", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugPointArray::clazzInfo(),
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_fields__debugPoints_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DebugBreakPoints_fields__debugger = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_debugger", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugger::clazzInfo(),
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_fields__debugger_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo DebugBreakPoints_fields__lastInspectedLine = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lastInspectedLine", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_fields__lastInspectedLine_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _DebugBreakPoints_fields[] = 
{
  &DebugBreakPoints_fields__debugPoints,
  &DebugBreakPoints_fields__debugger,
  &DebugBreakPoints_fields__lastInspectedLine,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_DebugBreakPoints__LRDebugBreakPoints__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_DebugBreakPoints__LRDebugBreakPoints__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_DebugBreakPoints__LRDebugBreakPoints_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "DebugBreakPoints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  DebugBreakPoints::clazzInfo(), // return type
  "_0_DebugBreakPoints", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_DebugBreakPoints__LRDebugBreakPoints__args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_DebugBreakPoints__LRDebugBreakPoints__exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_DebugBreakPoints__LRDebugBreakPoints__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods__wantBreak_IINLRExecutionStackFrame__Z_arg_action = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "action", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods__wantBreak_IINLRExecutionStackFrame__Z_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods__wantBreak_IINLRExecutionStackFrame__Z_args[] = 
{
  &DebugBreakPoints_methods__wantBreak_IINLRExecutionStackFrame__Z_arg_action,
  &DebugBreakPoints_methods__wantBreak_IINLRExecutionStackFrame__Z_arg_frame,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods__wantBreak_IINLRExecutionStackFrame__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method__wantBreak_IINLRExecutionStackFrame__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_wantBreak", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5__wantBreak", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods__wantBreak_IINLRExecutionStackFrame__Z_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods__wantBreak_IINLRExecutionStackFrame__Z_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method__wantBreak_IINLRExecutionStackFrame__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods_addBreakPoint_INLRDebugPoint__V_arg_dbgPoint = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dbgPoint", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_addBreakPoint_INLRDebugPoint__V_args[] = 
{
  &DebugBreakPoints_methods_addBreakPoint_INLRDebugPoint__V_arg_dbgPoint,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_addBreakPoint_INLRDebugPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_addBreakPoint_INLRDebugPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addBreakPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_addBreakPoint", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_addBreakPoint_INLRDebugPoint__V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_addBreakPoint_INLRDebugPoint__V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_addBreakPoint_INLRDebugPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods_addDbgFlag_I_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_addDbgFlag_I_V_args[] = 
{
  &DebugBreakPoints_methods_addDbgFlag_I_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_addDbgFlag_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_addDbgFlag_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addDbgFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_addDbgFlag", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_addDbgFlag_I_V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_addDbgFlag_I_V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_addDbgFlag_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_arg_action = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "action", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_arg_frame = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "frame", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_args[] = 
{
  &DebugBreakPoints_methods_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_arg_action,
  &DebugBreakPoints_methods_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_arg_frame,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "doBreakOnBreakPoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_doBreakOnBreakPoint", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_get__LRDebugBreakPoints__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_get__LRDebugBreakPoints__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_get__LRDebugBreakPoints_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugBreakPoints::clazzInfo(), // return type
  "_1_get", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_get__LRDebugBreakPoints__args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_get__LRDebugBreakPoints__exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_get__LRDebugBreakPoints__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_getBreakPoints__LRDebugPointArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_getBreakPoints__LRDebugPointArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_getBreakPoints__LRDebugPointArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBreakPoints", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugPointArray::clazzInfo(), // return type
  "_3_getBreakPoints", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_getBreakPoints__LRDebugPointArray__args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_getBreakPoints__LRDebugPointArray__exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_getBreakPoints__LRDebugPointArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_getDebugger__LRDebugger__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_getDebugger__LRDebugger__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_getDebugger__LRDebugger_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDebugger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugger::clazzInfo(), // return type
  "_e_getDebugger", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_getDebugger__LRDebugger__args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_getDebugger__LRDebugger__exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_getDebugger__LRDebugger__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods_removeBreakpoint_INLRString__LRDebugPoint__arg_ident = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ident", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_removeBreakpoint_INLRString__LRDebugPoint__args[] = 
{
  &DebugBreakPoints_methods_removeBreakpoint_INLRString__LRDebugPoint__arg_ident,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_removeBreakpoint_INLRString__LRDebugPoint__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_removeBreakpoint_INLRString__LRDebugPoint_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeBreakpoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugPoint::clazzInfo(), // return type
  "_c_removeBreakpoint", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_removeBreakpoint_INLRString__LRDebugPoint__args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_removeBreakpoint_INLRString__LRDebugPoint__exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_removeBreakpoint_INLRString__LRDebugPoint__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods_removeBreakpoint_INLRDebugPoint__V_arg_dbgPoint = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dbgPoint", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugPoint::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_removeBreakpoint_INLRDebugPoint__V_args[] = 
{
  &DebugBreakPoints_methods_removeBreakpoint_INLRDebugPoint__V_arg_dbgPoint,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_removeBreakpoint_INLRDebugPoint__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_removeBreakpoint_INLRDebugPoint__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeBreakpoint", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_removeBreakpoint", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_removeBreakpoint_INLRDebugPoint__V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_removeBreakpoint_INLRDebugPoint__V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_removeBreakpoint_INLRDebugPoint__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods_removeDbgFlag_I_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_removeDbgFlag_I_V_args[] = 
{
  &DebugBreakPoints_methods_removeDbgFlag_I_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_removeDbgFlag_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_removeDbgFlag_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeDbgFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_removeDbgFlag", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_removeDbgFlag_I_V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_removeDbgFlag_I_V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_removeDbgFlag_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_setBreakEachStmt__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_setBreakEachStmt__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_setBreakEachStmt__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBreakEachStmt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setBreakEachStmt", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_setBreakEachStmt__V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_setBreakEachStmt__V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_setBreakEachStmt__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_setContinue__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_setContinue__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_setContinue__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setContinue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setContinue", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_setContinue__V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_setContinue__V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_setContinue__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DebugBreakPoints_methods_setDebugger_INLRDebugger__V_arg_debugger = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "debugger", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDebugger::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_setDebugger_INLRDebugger__V_args[] = 
{
  &DebugBreakPoints_methods_setDebugger_INLRDebugger__V_arg_debugger,
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_setDebugger_INLRDebugger__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_setDebugger_INLRDebugger__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDebugger", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setDebugger", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_setDebugger_INLRDebugger__V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_setDebugger_INLRDebugger__V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_setDebugger_INLRDebugger__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_setTraceOff__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_setTraceOff__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_setTraceOff__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTraceOff", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_setTraceOff", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_setTraceOff__V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_setTraceOff__V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_setTraceOff__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DebugBreakPoints_methods_setTraceOn__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DebugBreakPoints_methods_setTraceOn__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DebugBreakPoints_method_setTraceOn__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTraceOn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setTraceOn", // alternative name of method
  -1, // altlabelHashCode
  DebugBreakPoints_methods_setTraceOn__V_args, // the arguments
  0, //arguments count
  DebugBreakPoints_methods_setTraceOn__V_exceptions, // the declared exceptions
  DebugBreakPoints_MetainfoWrapper::DebugBreakPoints_method_setTraceOn__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DebugBreakPoints_methods[] = 
{
  &DebugBreakPoints_method_DebugBreakPoints__LRDebugBreakPoints_,
  &DebugBreakPoints_method_GetClass__L_acdk_lang_RClass_,
  &DebugBreakPoints_method__wantBreak_IINLRExecutionStackFrame__Z,
  &DebugBreakPoints_method_addBreakPoint_INLRDebugPoint__V,
  &DebugBreakPoints_method_addDbgFlag_I_V,
  &DebugBreakPoints_method_doBreakOnBreakPoint_IINLRExecutionStackFrame__Z,
  &DebugBreakPoints_method_get__LRDebugBreakPoints_,
  &DebugBreakPoints_method_getBreakPoints__LRDebugPointArray_,
  &DebugBreakPoints_method_getDebugger__LRDebugger_,
  &DebugBreakPoints_method_removeBreakpoint_INLRString__LRDebugPoint_,
  &DebugBreakPoints_method_removeBreakpoint_INLRDebugPoint__V,
  &DebugBreakPoints_method_removeDbgFlag_I_V,
  &DebugBreakPoints_method_setBreakEachStmt__V,
  &DebugBreakPoints_method_setContinue__V,
  &DebugBreakPoints_method_setDebugger_INLRDebugger__V,
  &DebugBreakPoints_method_setTraceOff__V,
  &DebugBreakPoints_method_setTraceOn__V,
  0
};


struct DebugBreakPoints_MetaInfoInitializer
{  DebugBreakPoints_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DebugBreakPoints::clazzInfo();
    ci->fields =  _DebugBreakPoints_fields;
    ci->methods =  _DebugBreakPoints_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DebugBreakPoints_MetaInfoInitializer DebugBreakPoints_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ScriptException_create_array(int length)
{
  return new ObjectArrayImpl<RScriptException>(length);
}

//static
::acdk::lang::RObject
ScriptException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScriptException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptException_method_ScriptException_INLRString__LRScriptException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScriptException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_ScriptException(IN(::acdk::lang::RThrowable) ex)
{
  throw RScriptException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _ScriptException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScriptException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScriptException_MetainfoWrapper::ScriptException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptException_methods_ScriptException_INLRString__LRScriptException__arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptException_methods_ScriptException_INLRString__LRScriptException__args[] = 
{
  &ScriptException_methods_ScriptException_INLRString__LRScriptException__arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptException_methods_ScriptException_INLRString__LRScriptException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptException_method_ScriptException_INLRString__LRScriptException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScriptException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScriptException::clazzInfo(), // return type
  "_0_ScriptException", // alternative name of method
  -1, // altlabelHashCode
  ScriptException_methods_ScriptException_INLRString__LRScriptException__args, // the arguments
  0, //arguments count
  ScriptException_methods_ScriptException_INLRString__LRScriptException__exceptions, // the declared exceptions
  ScriptException_MetainfoWrapper::ScriptException_method_ScriptException_INLRString__LRScriptException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScriptException_methods[] = 
{
  &ScriptException_method_GetClass__L_acdk_lang_RClass_,
  &ScriptException_method_ScriptException_INLRString__LRScriptException_,
  0
};


struct ScriptException_MetaInfoInitializer
{  ScriptException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScriptException::clazzInfo();
    ci->fields =  _ScriptException_fields;
    ci->methods =  _ScriptException_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScriptException_MetaInfoInitializer ScriptException_MetaInfoInitializer_staticinstance__;


struct ScriptException_clazzInfo_ClazzAttributesResInitializer4
{
  ScriptException_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)ScriptException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_ScriptException));
  }
};

ScriptException_clazzInfo_ClazzAttributesResInitializer4 ScriptException_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ScriptGlobals_create_array(int length)
{
  return new ObjectArrayImpl<RScriptGlobals>(length);
}

//static
::acdk::lang::RObject
ScriptGlobals_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScriptGlobals_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::byRef(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::byRefAs(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::lang::RClass>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::byVal(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::byValAs(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::lang::RClass>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::castTo(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::lang::RClass>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::inOf(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::inoutOf(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptGlobals_method_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptGlobals::outOf(::acdk::lang::dmi::castTo< RDmiObject>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ScriptGlobals_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &ScriptGlobals_methods_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byRef", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_5_byRef", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &ScriptGlobals_methods_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_val,
  &ScriptGlobals_methods_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byRefAs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_6_byRefAs", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &ScriptGlobals_methods_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_4_byVal", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &ScriptGlobals_methods_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_val,
  &ScriptGlobals_methods_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "byValAs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_7_byValAs", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &ScriptGlobals_methods_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_val,
  &ScriptGlobals_methods_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "castTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_0_castTo", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &ScriptGlobals_methods_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "inOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_1_inOf", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &ScriptGlobals_methods_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "inoutOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_3_inoutOf", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptGlobals_methods_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptGlobals_methods_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  &ScriptGlobals_methods_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptGlobals_methods_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptGlobals_method_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "outOf", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_2_outOf", // alternative name of method
  -1, // altlabelHashCode
  ScriptGlobals_methods_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  ScriptGlobals_methods_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  ScriptGlobals_MetainfoWrapper::ScriptGlobals_method_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScriptGlobals_methods[] = 
{
  &ScriptGlobals_method_GetClass__L_acdk_lang_RClass_,
  &ScriptGlobals_method_byRef_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_,
  &ScriptGlobals_method_byRefAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject_,
  &ScriptGlobals_method_byVal_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_,
  &ScriptGlobals_method_byValAs_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject_,
  &ScriptGlobals_method_castTo_INLRDmiObject_INLacdk_lang_RClass__Lacdk_lang_dmi_RDmiObject_,
  &ScriptGlobals_method_inOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_,
  &ScriptGlobals_method_inoutOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_,
  &ScriptGlobals_method_outOf_INLRDmiObject__Lacdk_lang_dmi_RDmiObject_,
  0
};


struct ScriptGlobals_MetaInfoInitializer
{  ScriptGlobals_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScriptGlobals::clazzInfo();
    ci->fields =  _ScriptGlobals_fields;
    ci->methods =  _ScriptGlobals_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScriptGlobals_MetaInfoInitializer ScriptGlobals_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ScriptSource_create_array(int length)
{
  return new ObjectArrayImpl<RScriptSource>(length);
}

//static
::acdk::lang::RObject
ScriptSource_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ScriptSource_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ScriptSource::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScriptSource(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::io::RCharReader>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_ScriptSource_INLRString_INLRString__LRScriptSource__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ScriptSource(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method__fetchNextLine_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptSource::_fetchNextLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->_fetchNextLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method__incrementReaded_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScriptSource::_incrementReaded(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->_incrementReaded(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method__setCharPos_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScriptSource::_setCharPos(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->_setCharPos(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_charPos__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptSource::charPos();
    else
      ret = This->charPos();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptSource::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ScriptSource::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_getLine_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptSource::getLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getLine(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptSource::getReader(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getReader(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_getReader__Lacdk_io_RReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptSource::getReader();
    else
        ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_isEof__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptSource::isEof();
    else
      ret = This->isEof();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_readChar__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptSource::readChar();
    else
      ret = This->readChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_readString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ScriptSource::readString();
    else
        ret = (::acdk::lang::RObject)This->readString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ScriptSource_method_seekCharBack__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ScriptSource::seekCharBack();
    else
      ret = This->seekCharBack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptSource_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RStringBuffer>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptSource_fields__charPos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_charPos, flags);
    else
      This->_charPos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptSource_fields__columnPos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_columnPos, flags);
    else
      This->_columnPos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptSource_fields__eof_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_eof, flags);
    else
      This->_eof = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptSource_fields__in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in, flags);
    else
      This->_in = ::acdk::lang::dmi::castTo< acdk::io::RCharReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptSource_fields__linePos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_linePos, flags);
    else
      This->_linePos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ScriptSource_fields__sourceName_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ScriptSource* This = dmi_cast<ScriptSource>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sourceName, flags);
    else
      This->_sourceName = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ScriptSource_fields__buffer = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(),
  ScriptSource_MetainfoWrapper::ScriptSource_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScriptSource_fields__charPos = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_charPos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScriptSource_MetainfoWrapper::ScriptSource_fields__charPos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScriptSource_fields__columnPos = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_columnPos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScriptSource_MetainfoWrapper::ScriptSource_fields__columnPos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScriptSource_fields__eof = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_eof", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ScriptSource_MetainfoWrapper::ScriptSource_fields__eof_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScriptSource_fields__in = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharReader::clazzInfo(),
  ScriptSource_MetainfoWrapper::ScriptSource_fields__in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScriptSource_fields__linePos = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_linePos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ScriptSource_MetainfoWrapper::ScriptSource_fields__linePos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ScriptSource_fields__sourceName = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sourceName", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ScriptSource_MetainfoWrapper::ScriptSource_fields__sourceName_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ScriptSource_fields[] = 
{
  &ScriptSource_fields__buffer,
  &ScriptSource_fields__charPos,
  &ScriptSource_fields__columnPos,
  &ScriptSource_fields__eof,
  &ScriptSource_fields__in,
  &ScriptSource_fields__linePos,
  &ScriptSource_fields__sourceName,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ScriptSource_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__args[] = 
{
  &ScriptSource_methods_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__arg_name,
  &ScriptSource_methods_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScriptSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScriptSource::clazzInfo(), // return type
  "_0_ScriptSource", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__args, // the arguments
  0, //arguments count
  ScriptSource_methods_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods_ScriptSource_INLRString_INLRString__LRScriptSource__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods_ScriptSource_INLRString_INLRString__LRScriptSource__arg_sourcetext = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sourcetext", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_ScriptSource_INLRString_INLRString__LRScriptSource__args[] = 
{
  &ScriptSource_methods_ScriptSource_INLRString_INLRString__LRScriptSource__arg_name,
  &ScriptSource_methods_ScriptSource_INLRString_INLRString__LRScriptSource__arg_sourcetext,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_ScriptSource_INLRString_INLRString__LRScriptSource__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_ScriptSource_INLRString_INLRString__LRScriptSource_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ScriptSource", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ScriptSource::clazzInfo(), // return type
  "_1_ScriptSource", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_ScriptSource_INLRString_INLRString__LRScriptSource__args, // the arguments
  0, //arguments count
  ScriptSource_methods_ScriptSource_INLRString_INLRString__LRScriptSource__exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_ScriptSource_INLRString_INLRString__LRScriptSource__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods__fetchNextLine_I_Z_arg_lineNo = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "lineNo", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods__fetchNextLine_I_Z_args[] = 
{
  &ScriptSource_methods__fetchNextLine_I_Z_arg_lineNo,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods__fetchNextLine_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method__fetchNextLine_I_Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_fetchNextLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e__fetchNextLine", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods__fetchNextLine_I_Z_args, // the arguments
  0, //arguments count
  ScriptSource_methods__fetchNextLine_I_Z_exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method__fetchNextLine_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods__incrementReaded_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods__incrementReaded_INLRString__V_args[] = 
{
  &ScriptSource_methods__incrementReaded_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods__incrementReaded_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method__incrementReaded_INLRString__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_incrementReaded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c__incrementReaded", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods__incrementReaded_INLRString__V_args, // the arguments
  0, //arguments count
  ScriptSource_methods__incrementReaded_INLRString__V_exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method__incrementReaded_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods__setCharPos_I_V_arg_newCharPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newCharPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods__setCharPos_I_V_args[] = 
{
  &ScriptSource_methods__setCharPos_I_V_arg_newCharPos,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods__setCharPos_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method__setCharPos_I_V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_setCharPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f__setCharPos", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods__setCharPos_I_V_args, // the arguments
  0, //arguments count
  ScriptSource_methods__setCharPos_I_V_exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method__setCharPos_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_charPos__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_charPos__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_charPos__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "charPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_charPos", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_charPos__I_args, // the arguments
  0, //arguments count
  ScriptSource_methods_charPos__I_exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_charPos__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_8_clone", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  ScriptSource_methods_clone__LRObject__exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_close__V_args, // the arguments
  0, //arguments count
  ScriptSource_methods_close__V_exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods_getLine_I_LRString__arg_line = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "line", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_getLine_I_LRString__args[] = 
{
  &ScriptSource_methods_getLine_I_LRString__arg_line,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_getLine_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_getLine_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getLine", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_getLine_I_LRString__args, // the arguments
  0, //arguments count
  ScriptSource_methods_getLine_I_LRString__exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_getLine_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ScriptSource_methods_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader__arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader__args[] = 
{
  &ScriptSource_methods_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader__arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_6_getReader", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ScriptSource_methods_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader__exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_getReader__Lacdk_io_RReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_getReader__Lacdk_io_RReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_getReader__Lacdk_io_RReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo(), // return type
  "_7_getReader", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_getReader__Lacdk_io_RReader__args, // the arguments
  0, //arguments count
  ScriptSource_methods_getReader__Lacdk_io_RReader__exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_getReader__Lacdk_io_RReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_isEof__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_isEof__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_isEof__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isEof", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_isEof", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_isEof__Z_args, // the arguments
  0, //arguments count
  ScriptSource_methods_isEof__Z_exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_isEof__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_readChar__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_readChar__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_readChar__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_readChar", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_readChar__I_args, // the arguments
  0, //arguments count
  ScriptSource_methods_readChar__I_exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_readChar__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_readString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_readString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_readString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_readString", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_readString__LRString__args, // the arguments
  0, //arguments count
  ScriptSource_methods_readString__LRString__exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_readString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ScriptSource_methods_seekCharBack__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ScriptSource_methods_seekCharBack__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ScriptSource_method_seekCharBack__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "seekCharBack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_seekCharBack", // alternative name of method
  -1, // altlabelHashCode
  ScriptSource_methods_seekCharBack__I_args, // the arguments
  0, //arguments count
  ScriptSource_methods_seekCharBack__I_exceptions, // the declared exceptions
  ScriptSource_MetainfoWrapper::ScriptSource_method_seekCharBack__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ScriptSource_methods[] = 
{
  &ScriptSource_method_GetClass__L_acdk_lang_RClass_,
  &ScriptSource_method_ScriptSource_INLRString_INLacdk_io_RCharReader__LRScriptSource_,
  &ScriptSource_method_ScriptSource_INLRString_INLRString__LRScriptSource_,
  &ScriptSource_method__fetchNextLine_I_Z,
  &ScriptSource_method__incrementReaded_INLRString__V,
  &ScriptSource_method__setCharPos_I_V,
  &ScriptSource_method_charPos__I,
  &ScriptSource_method_clone__LRObject_,
  &ScriptSource_method_close__V,
  &ScriptSource_method_getLine_I_LRString_,
  &ScriptSource_method_getReader_INLacdk_locale_REncoder__Lacdk_io_RReader_,
  &ScriptSource_method_getReader__Lacdk_io_RReader_,
  &ScriptSource_method_isEof__Z,
  &ScriptSource_method_readChar__I,
  &ScriptSource_method_readString__LRString_,
  &ScriptSource_method_seekCharBack__I,
  0
};


struct ScriptSource_MetaInfoInitializer
{  ScriptSource_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ScriptSource::clazzInfo();
    ci->fields =  _ScriptSource_fields;
    ci->methods =  _ScriptSource_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ScriptSource_MetaInfoInitializer ScriptSource_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ShellExecutor_create_array(int length)
{
  return new ObjectArrayImpl<RShellExecutor>(length);
}

//static
::acdk::lang::RObject
ShellExecutor_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ShellExecutor_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ShellExecutor::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ShellExecutor(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_ShellExecutor_INLRString_I_LRShellExecutor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ShellExecutor(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_evaluateOptions_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecutor::evaluateOptions(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
        This->evaluateOptions(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_execute_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ShellExecutor::execute(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
      ret = This->execute(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_getErrString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ShellExecutor::getErrString();
    else
        ret = (::acdk::lang::RObject)This->getErrString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_getOutString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ShellExecutor::getOutString();
    else
        ret = (::acdk::lang::RObject)This->getOutString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_getShell_INLRProps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ShellExecutor::getShell(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_getShellExecuteOpt_INLRProps__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ShellExecutor::getShellExecuteOpt(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_getTimeout__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ShellExecutor::getTimeout();
    else
      ret = This->getTimeout();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_setCommandLine_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecutor::setCommandLine(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setCommandLine(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_setErrWriter_INL_acdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecutor::setErrWriter(::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(args[0], dc));
    else
        This->setErrWriter(::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_setOutWriter_INL_acdk_io_RCharWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecutor::setOutWriter(::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(args[0], dc));
    else
        This->setOutWriter(::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_setTimeOut_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecutor::setTimeOut(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setTimeOut(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ShellExecutor_method_setWorkingDir_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ShellExecutor::setWorkingDir(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setWorkingDir(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__cmdline_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cmdline, flags);
    else
      This->_cmdline = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__env_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_env, flags);
    else
      This->_env = ::acdk::lang::dmi::castTo< RStringArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__errWriter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errWriter, flags);
    else
      This->_errWriter = ::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__errs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_errs, flags);
    else
      This->_errs = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_flags, flags);
    else
      This->_flags = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__outWriter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_outWriter, flags);
    else
      This->_outWriter = ::acdk::lang::dmi::castTo< ::acdk::io::RCharWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__outs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_outs, flags);
    else
      This->_outs = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__timeOut_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_timeOut, flags);
    else
      This->_timeOut = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ShellExecutor_fields__workDir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ShellExecutor* This = dmi_cast<ShellExecutor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_workDir, flags);
    else
      This->_workDir = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__cmdline = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cmdline", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__cmdline_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__env = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_env", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__env_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__errWriter = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errWriter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__errWriter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__errs = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_errs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__errs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__flags = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__outWriter = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_outWriter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__outWriter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__outs = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_outs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__outs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__timeOut = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_timeOut", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__timeOut_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ShellExecutor_fields__workDir = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_workDir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  ShellExecutor_MetainfoWrapper::ShellExecutor_fields__workDir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ShellExecutor_fields[] = 
{
  &ShellExecutor_fields__cmdline,
  &ShellExecutor_fields__env,
  &ShellExecutor_fields__errWriter,
  &ShellExecutor_fields__errs,
  &ShellExecutor_fields__flags,
  &ShellExecutor_fields__outWriter,
  &ShellExecutor_fields__outs,
  &ShellExecutor_fields__timeOut,
  &ShellExecutor_fields__workDir,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ShellExecutor_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__arg_cmdline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__arg_env = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "env", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__args[] = 
{
  &ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__arg_cmdline,
  &ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__arg_flags,
  &ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__arg_env,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ShellExecutor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ShellExecutor::clazzInfo(), // return type
  "_0_ShellExecutor", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__args, // the arguments
  0, //arguments count
  ShellExecutor_methods_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_ShellExecutor_INLRString_I_LRShellExecutor__arg_cmdline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_ShellExecutor_INLRString_I_LRShellExecutor__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_ShellExecutor_INLRString_I_LRShellExecutor__args[] = 
{
  &ShellExecutor_methods_ShellExecutor_INLRString_I_LRShellExecutor__arg_cmdline,
  &ShellExecutor_methods_ShellExecutor_INLRString_I_LRShellExecutor__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_ShellExecutor_INLRString_I_LRShellExecutor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_ShellExecutor_INLRString_I_LRShellExecutor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ShellExecutor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ShellExecutor::clazzInfo(), // return type
  "_1_ShellExecutor", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_ShellExecutor_INLRString_I_LRShellExecutor__args, // the arguments
  0, //arguments count
  ShellExecutor_methods_ShellExecutor_INLRString_I_LRShellExecutor__exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_ShellExecutor_INLRString_I_LRShellExecutor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_evaluateOptions_INLRProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_evaluateOptions_INLRProps__V_args[] = 
{
  &ShellExecutor_methods_evaluateOptions_INLRProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_evaluateOptions_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_evaluateOptions_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evaluateOptions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_evaluateOptions", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_evaluateOptions_INLRProps__V_args, // the arguments
  0, //arguments count
  ShellExecutor_methods_evaluateOptions_INLRProps__V_exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_evaluateOptions_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_execute_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_execute_INLRProps__Z_args[] = 
{
  &ShellExecutor_methods_execute_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_execute_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_execute_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_4_execute", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_execute_INLRProps__Z_args, // the arguments
  0, //arguments count
  ShellExecutor_methods_execute_INLRProps__Z_exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_execute_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_getErrString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_getErrString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_getErrString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getErrString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_getErrString", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_getErrString__LRString__args, // the arguments
  0, //arguments count
  ShellExecutor_methods_getErrString__LRString__exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_getErrString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_getOutString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_getOutString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_getOutString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getOutString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getOutString", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_getOutString__LRString__args, // the arguments
  0, //arguments count
  ShellExecutor_methods_getOutString__LRString__exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_getOutString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_getShell_INLRProps__LRString__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_getShell_INLRProps__LRString__args[] = 
{
  &ShellExecutor_methods_getShell_INLRProps__LRString__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_getShell_INLRProps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_getShell_INLRProps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShell", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_getShell", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_getShell_INLRProps__LRString__args, // the arguments
  0, //arguments count
  ShellExecutor_methods_getShell_INLRProps__LRString__exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_getShell_INLRProps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_getShellExecuteOpt_INLRProps__LRString__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_getShellExecuteOpt_INLRProps__LRString__args[] = 
{
  &ShellExecutor_methods_getShellExecuteOpt_INLRProps__LRString__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_getShellExecuteOpt_INLRProps__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_getShellExecuteOpt_INLRProps__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShellExecuteOpt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_getShellExecuteOpt", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_getShellExecuteOpt_INLRProps__LRString__args, // the arguments
  0, //arguments count
  ShellExecutor_methods_getShellExecuteOpt_INLRProps__LRString__exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_getShellExecuteOpt_INLRProps__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_getTimeout__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_getTimeout__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_getTimeout__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTimeout", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getTimeout", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_getTimeout__I_args, // the arguments
  0, //arguments count
  ShellExecutor_methods_getTimeout__I_exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_getTimeout__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_setCommandLine_INLRString__V_arg_cmdline = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cmdline", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_setCommandLine_INLRString__V_args[] = 
{
  &ShellExecutor_methods_setCommandLine_INLRString__V_arg_cmdline,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_setCommandLine_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_setCommandLine_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCommandLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setCommandLine", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_setCommandLine_INLRString__V_args, // the arguments
  0, //arguments count
  ShellExecutor_methods_setCommandLine_INLRString__V_exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_setCommandLine_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_setErrWriter_INL_acdk_io_RCharWriter__V_arg_errWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "errWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_setErrWriter_INL_acdk_io_RCharWriter__V_args[] = 
{
  &ShellExecutor_methods_setErrWriter_INL_acdk_io_RCharWriter__V_arg_errWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_setErrWriter_INL_acdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_setErrWriter_INL_acdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setErrWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setErrWriter", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_setErrWriter_INL_acdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  ShellExecutor_methods_setErrWriter_INL_acdk_io_RCharWriter__V_exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_setErrWriter_INL_acdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_setOutWriter_INL_acdk_io_RCharWriter__V_arg_outWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "outWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_setOutWriter_INL_acdk_io_RCharWriter__V_args[] = 
{
  &ShellExecutor_methods_setOutWriter_INL_acdk_io_RCharWriter__V_arg_outWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_setOutWriter_INL_acdk_io_RCharWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_setOutWriter_INL_acdk_io_RCharWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setOutWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_setOutWriter", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_setOutWriter_INL_acdk_io_RCharWriter__V_args, // the arguments
  0, //arguments count
  ShellExecutor_methods_setOutWriter_INL_acdk_io_RCharWriter__V_exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_setOutWriter_INL_acdk_io_RCharWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_setTimeOut_I_V_arg_timeOut = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "timeOut", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_setTimeOut_I_V_args[] = 
{
  &ShellExecutor_methods_setTimeOut_I_V_arg_timeOut,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_setTimeOut_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_setTimeOut_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setTimeOut", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setTimeOut", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_setTimeOut_I_V_args, // the arguments
  0, //arguments count
  ShellExecutor_methods_setTimeOut_I_V_exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_setTimeOut_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ShellExecutor_methods_setWorkingDir_INLRString__V_arg_wdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "wdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ShellExecutor_methods_setWorkingDir_INLRString__V_args[] = 
{
  &ShellExecutor_methods_setWorkingDir_INLRString__V_arg_wdir,
  0
};

::acdk::lang::dmi::ClazzInfo* ShellExecutor_methods_setWorkingDir_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ShellExecutor_method_setWorkingDir_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setWorkingDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setWorkingDir", // alternative name of method
  -1, // altlabelHashCode
  ShellExecutor_methods_setWorkingDir_INLRString__V_args, // the arguments
  0, //arguments count
  ShellExecutor_methods_setWorkingDir_INLRString__V_exceptions, // the declared exceptions
  ShellExecutor_MetainfoWrapper::ShellExecutor_method_setWorkingDir_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ShellExecutor_methods[] = 
{
  &ShellExecutor_method_GetClass__L_acdk_lang_RClass_,
  &ShellExecutor_method_ShellExecutor_INLRString_IINLRStringArray__LRShellExecutor_,
  &ShellExecutor_method_ShellExecutor_INLRString_I_LRShellExecutor_,
  &ShellExecutor_method_evaluateOptions_INLRProps__V,
  &ShellExecutor_method_execute_INLRProps__Z,
  &ShellExecutor_method_getErrString__LRString_,
  &ShellExecutor_method_getOutString__LRString_,
  &ShellExecutor_method_getShell_INLRProps__LRString_,
  &ShellExecutor_method_getShellExecuteOpt_INLRProps__LRString_,
  &ShellExecutor_method_getTimeout__I,
  &ShellExecutor_method_setCommandLine_INLRString__V,
  &ShellExecutor_method_setErrWriter_INL_acdk_io_RCharWriter__V,
  &ShellExecutor_method_setOutWriter_INL_acdk_io_RCharWriter__V,
  &ShellExecutor_method_setTimeOut_I_V,
  &ShellExecutor_method_setWorkingDir_INLRString__V,
  0
};


struct ShellExecutor_MetaInfoInitializer
{  ShellExecutor_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ShellExecutor::clazzInfo();
    ci->fields =  _ShellExecutor_fields;
    ci->methods =  _ShellExecutor_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ShellExecutor_MetaInfoInitializer ShellExecutor_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript

