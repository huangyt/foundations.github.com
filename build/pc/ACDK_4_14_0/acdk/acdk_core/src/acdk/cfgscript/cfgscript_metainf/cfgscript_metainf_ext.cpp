// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../cfgscript.h"
#include "../cfgscript.h"
#include "../ChDir.h"
#include "../Config.h"
#include "../ExecutionStack.h"
#include "../Props.h"
#include "../Script.h"
#include "../ScriptClassLoader.h"
#include "../ScriptDebug.h"
#include "../ScriptEval.h"
#include "../ScriptException.h"
#include "../ScriptExpr.h"
#include "../ScriptGlobals.h"
#include "../ScriptObject.h"
#include "../ScriptSource.h"
#include "../ShellExecutor.h"
#include "../SourceTokenizer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_cfgscript_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "cfgscript", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_cfgscript_unitInfo(&acdk_cfgscript_unitInfo);


struct _ModuleInitializer1
{
  _ModuleInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&acdk_cfgscript_unitInfo, "acdkx_orb_UnitInclude1", ::acdk::lang::dmi::ClazzAttributeResValue::makeStringRes("acdk_core.idl", false));
  }
};

static _ModuleInitializer1 _ModuleInitializer1_instance;



namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ExecutionStackFrame_create_array(int length)
{
  return new ObjectArrayImpl<RExecutionStackFrame>(length);
}

//static
::acdk::lang::RObject
ExecutionStackFrame_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ExecutionStackFrame_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ExecutionStackFrame::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getCurrentSourceLine__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getCurrentSourceLine();
    else
        ret = (::acdk::lang::RObject)This->getCurrentSourceLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getFileLineNo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::getFileLineNo();
    else
      ret = This->getFileLineNo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getFileName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getFileName();
    else
        ret = (::acdk::lang::RObject)This->getFileName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getFrameProps__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = outOf(This->ExecutionStackFrame::getFrameProps());
    else
        ret = outOf(This->getFrameProps());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getFunctionSignature__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getFunctionSignature();
    else
        ret = (::acdk::lang::RObject)This->getFunctionSignature();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getLibraryName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getLibraryName();
    else
        ret = (::acdk::lang::RObject)This->getLibraryName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getLocals__LRStackFrameLocalArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getLocals();
    else
        ret = (::acdk::lang::RObject)This->getLocals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getMethod__Lacdk_lang_reflect_RMethod__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getMethod();
    else
        ret = (::acdk::lang::RObject)This->getMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getScopeProps__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = outOf(This->ExecutionStackFrame::getScopeProps());
    else
        ret = outOf(This->getScopeProps());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getScriptBackTrace_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getScriptBackTrace(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getScriptBackTrace(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getScriptBackTrace_ZZ_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getScriptBackTrace(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getScriptBackTrace(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getScriptBackTrace__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getScriptBackTrace();
    else
        ret = (::acdk::lang::RObject)This->getScriptBackTrace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getSourceFile__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::getSourceFile();
    else
        ret = (::acdk::lang::RObject)This->getSourceFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_getSourceLine__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::getSourceLine();
    else
      ret = This->getSourceLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_hasCurrentSourceLine__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::hasCurrentSourceLine();
    else
      ret = This->hasCurrentSourceLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_hasFileAndLine__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::hasFileAndLine();
    else
      ret = This->hasFileAndLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_hasFunctionSignature__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::hasFunctionSignature();
    else
      ret = This->hasFunctionSignature();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_hasLibararyName__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::hasLibararyName();
    else
      ret = This->hasLibararyName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_hasLocals__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::hasLocals();
    else
      ret = This->hasLocals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_hasMethod__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::hasMethod();
    else
      ret = This->hasMethod();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_isNative__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStackFrame::isNative();
    else
      ret = This->isNative();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_setFrameProps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStackFrame::setFrameProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
        This->setFrameProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_setScopeProps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStackFrame::setScopeProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
        This->setScopeProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStackFrame_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStackFrame::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStackFrame_fields__curTokenIndex_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curTokenIndex, flags);
    else
      This->_curTokenIndex = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStackFrame_fields__executionFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_executionFlags, flags);
    else
      This->_executionFlags = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStackFrame_fields__frameProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_frameProps, flags);
    else
      This->_frameProps = ::acdk::lang::dmi::castTo< RProps>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStackFrame_fields__scopeProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_scopeProps, flags);
    else
      This->_scopeProps = ::acdk::lang::dmi::castTo< RProps>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStackFrame_fields__script_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStackFrame* This = dmi_cast<ExecutionStackFrame>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_script, flags);
    else
      This->_script = ::acdk::lang::dmi::castTo< RScript>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStackFrame_fields__curTokenIndex = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curTokenIndex", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_fields__curTokenIndex_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStackFrame_fields__executionFlags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_executionFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_fields__executionFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStackFrame_fields__frameProps = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_frameProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_fields__frameProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStackFrame_fields__scopeProps = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_scopeProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_fields__scopeProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStackFrame_fields__script = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_script", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RScript::clazzInfo(),
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_fields__script_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ExecutionStackFrame_fields[] = 
{
  &ExecutionStackFrame_fields__curTokenIndex,
  &ExecutionStackFrame_fields__executionFlags,
  &ExecutionStackFrame_fields__frameProps,
  &ExecutionStackFrame_fields__scopeProps,
  &ExecutionStackFrame_fields__script,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_o_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getCurrentSourceLine__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getCurrentSourceLine__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getCurrentSourceLine__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentSourceLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_k_getCurrentSourceLine", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getCurrentSourceLine__LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getCurrentSourceLine__LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getCurrentSourceLine__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getFileLineNo__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getFileLineNo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getFileLineNo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileLineNo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_getFileLineNo", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getFileLineNo__I_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getFileLineNo__I_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getFileLineNo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getFileName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getFileName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getFileName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_i_getFileName", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getFileName__LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getFileName__LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getFileName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getFrameProps__LRProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getFrameProps__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getFrameProps__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFrameProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_3_getFrameProps", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getFrameProps__LRProps__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getFrameProps__LRProps__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getFrameProps__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getFunctionSignature__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getFunctionSignature__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getFunctionSignature__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFunctionSignature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getFunctionSignature", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getFunctionSignature__LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getFunctionSignature__LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getFunctionSignature__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getLibraryName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getLibraryName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getLibraryName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLibraryName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_l_getLibraryName", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getLibraryName__LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getLibraryName__LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getLibraryName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getLocals__LRStackFrameLocalArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getLocals__LRStackFrameLocalArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getLocals__LRStackFrameLocalArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLocals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStackFrameLocalArray::clazzInfo(), // return type
  "_n_getLocals", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getLocals__LRStackFrameLocalArray__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getLocals__LRStackFrameLocalArray__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getLocals__LRStackFrameLocalArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getMethod__Lacdk_lang_reflect_RMethod_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::reflect::RMethod::clazzInfo(), // return type
  "_m_getMethod", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getMethod__Lacdk_lang_reflect_RMethod__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getMethod__Lacdk_lang_reflect_RMethod__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getScopeProps__LRProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getScopeProps__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getScopeProps__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScopeProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_5_getScopeProps", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getScopeProps__LRProps__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getScopeProps__LRProps__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getScopeProps__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStackFrame_methods_getScriptBackTrace_Z_LRString__arg_withSourcePos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withSourcePos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getScriptBackTrace_Z_LRString__args[] = 
{
  &ExecutionStackFrame_methods_getScriptBackTrace_Z_LRString__arg_withSourcePos,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getScriptBackTrace_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getScriptBackTrace_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getScriptBackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getScriptBackTrace", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getScriptBackTrace_Z_LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getScriptBackTrace_Z_LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getScriptBackTrace_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStackFrame_methods_getScriptBackTrace_ZZ_LRString__arg_withSourcePos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withSourcePos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStackFrame_methods_getScriptBackTrace_ZZ_LRString__arg_withLocals = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withLocals", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getScriptBackTrace_ZZ_LRString__args[] = 
{
  &ExecutionStackFrame_methods_getScriptBackTrace_ZZ_LRString__arg_withSourcePos,
  &ExecutionStackFrame_methods_getScriptBackTrace_ZZ_LRString__arg_withLocals,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getScriptBackTrace_ZZ_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getScriptBackTrace_ZZ_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScriptBackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getScriptBackTrace", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getScriptBackTrace_ZZ_LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getScriptBackTrace_ZZ_LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getScriptBackTrace_ZZ_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getScriptBackTrace__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getScriptBackTrace__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getScriptBackTrace__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getScriptBackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getScriptBackTrace", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getScriptBackTrace__LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getScriptBackTrace__LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getScriptBackTrace__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getSourceFile__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getSourceFile__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getSourceFile__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSourceFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_getSourceFile", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getSourceFile__LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getSourceFile__LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getSourceFile__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_getSourceLine__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_getSourceLine__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_getSourceLine__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSourceLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_getSourceLine", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_getSourceLine__I_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_getSourceLine__I_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_getSourceLine__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_hasCurrentSourceLine__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_hasCurrentSourceLine__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_hasCurrentSourceLine__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasCurrentSourceLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_hasCurrentSourceLine", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_hasCurrentSourceLine__Z_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_hasCurrentSourceLine__Z_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_hasCurrentSourceLine__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_hasFileAndLine__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_hasFileAndLine__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_hasFileAndLine__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFileAndLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_hasFileAndLine", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_hasFileAndLine__Z_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_hasFileAndLine__Z_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_hasFileAndLine__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_hasFunctionSignature__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_hasFunctionSignature__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_hasFunctionSignature__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasFunctionSignature", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_hasFunctionSignature", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_hasFunctionSignature__Z_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_hasFunctionSignature__Z_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_hasFunctionSignature__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_hasLibararyName__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_hasLibararyName__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_hasLibararyName__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasLibararyName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_hasLibararyName", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_hasLibararyName__Z_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_hasLibararyName__Z_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_hasLibararyName__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_hasLocals__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_hasLocals__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_hasLocals__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasLocals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_hasLocals", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_hasLocals__Z_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_hasLocals__Z_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_hasLocals__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_hasMethod__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_hasMethod__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_hasMethod__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasMethod", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_hasMethod", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_hasMethod__Z_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_hasMethod__Z_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_hasMethod__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_isNative__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_isNative__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_isNative__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isNative", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isNative", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_isNative__Z_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_isNative__Z_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_isNative__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStackFrame_methods_setFrameProps_INLRProps__V_arg_prop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_setFrameProps_INLRProps__V_args[] = 
{
  &ExecutionStackFrame_methods_setFrameProps_INLRProps__V_arg_prop,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_setFrameProps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_setFrameProps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFrameProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setFrameProps", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_setFrameProps_INLRProps__V_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_setFrameProps_INLRProps__V_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_setFrameProps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStackFrame_methods_setScopeProps_INLRProps__V_arg_prop = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prop", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_setScopeProps_INLRProps__V_args[] = 
{
  &ExecutionStackFrame_methods_setScopeProps_INLRProps__V_arg_prop,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_setScopeProps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_setScopeProps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setScopeProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setScopeProps", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_setScopeProps_INLRProps__V_args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_setScopeProps_INLRProps__V_exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_setScopeProps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStackFrame_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStackFrame_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStackFrame_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_toString", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStackFrame_methods_toString__LRString__args, // the arguments
  0, //arguments count
  ExecutionStackFrame_methods_toString__LRString__exceptions, // the declared exceptions
  ExecutionStackFrame_MetainfoWrapper::ExecutionStackFrame_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ExecutionStackFrame_methods[] = 
{
  &ExecutionStackFrame_method_GetClass__L_acdk_lang_RClass_,
  &ExecutionStackFrame_method_getCurrentSourceLine__LRString_,
  &ExecutionStackFrame_method_getFileLineNo__I,
  &ExecutionStackFrame_method_getFileName__LRString_,
  &ExecutionStackFrame_method_getFrameProps__LRProps_,
  &ExecutionStackFrame_method_getFunctionSignature__LRString_,
  &ExecutionStackFrame_method_getLibraryName__LRString_,
  &ExecutionStackFrame_method_getLocals__LRStackFrameLocalArray_,
  &ExecutionStackFrame_method_getMethod__Lacdk_lang_reflect_RMethod_,
  &ExecutionStackFrame_method_getScopeProps__LRProps_,
  &ExecutionStackFrame_method_getScriptBackTrace_Z_LRString_,
  &ExecutionStackFrame_method_getScriptBackTrace_ZZ_LRString_,
  &ExecutionStackFrame_method_getScriptBackTrace__LRString_,
  &ExecutionStackFrame_method_getSourceFile__LRString_,
  &ExecutionStackFrame_method_getSourceLine__I,
  &ExecutionStackFrame_method_hasCurrentSourceLine__Z,
  &ExecutionStackFrame_method_hasFileAndLine__Z,
  &ExecutionStackFrame_method_hasFunctionSignature__Z,
  &ExecutionStackFrame_method_hasLibararyName__Z,
  &ExecutionStackFrame_method_hasLocals__Z,
  &ExecutionStackFrame_method_hasMethod__Z,
  &ExecutionStackFrame_method_isNative__Z,
  &ExecutionStackFrame_method_setFrameProps_INLRProps__V,
  &ExecutionStackFrame_method_setScopeProps_INLRProps__V,
  &ExecutionStackFrame_method_toString__LRString_,
  0
};


struct ExecutionStackFrame_MetaInfoInitializer
{  ExecutionStackFrame_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ExecutionStackFrame::clazzInfo();
    ci->fields =  _ExecutionStackFrame_fields;
    ci->methods =  _ExecutionStackFrame_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ExecutionStackFrame_MetaInfoInitializer ExecutionStackFrame_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
ExecutionStack_create_array(int length)
{
  return new ObjectArrayImpl<RExecutionStack>(length);
}

//static
::acdk::lang::RObject
ExecutionStack_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ExecutionStack_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_ExecutionStack__LRExecutionStack__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ExecutionStack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ExecutionStack::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_addDbgFlag_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::addDbgFlag(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->addDbgFlag(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_breakToDebug__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::breakToDebug();
    else
        This->breakToDebug();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_get__LRExecutionStack__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ExecutionStack::get();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_getCurrentTokenIndex__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ExecutionStack::getCurrentTokenIndex();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_getDebugFlags__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ExecutionStack::getDebugFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_getFrames__LRExecutionStackFrameArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStack::getFrames();
    else
        ret = (::acdk::lang::RObject)This->getFrames();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_getScriptBackTrace_ZZ_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ExecutionStack::getScriptBackTrace(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getScriptBackTrace(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_getTop__LRExecutionStackFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = outOf(ExecutionStack::getTop());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_onRegister_INLacdk_lang_dmi_RMetaObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::onRegister(::acdk::lang::dmi::castTo< acdk::lang::dmi::RMetaObject>(args[0], dc));
    else
        This->onRegister(::acdk::lang::dmi::castTo< acdk::lang::dmi::RMetaObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_onUnregister_INLacdk_lang_dmi_RMetaObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::onUnregister(::acdk::lang::dmi::castTo< acdk::lang::dmi::RMetaObject>(args[0], dc));
    else
        This->onUnregister(::acdk::lang::dmi::castTo< acdk::lang::dmi::RMetaObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_pop__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::pop();
    else
        This->pop();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_pop_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::pop(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->pop(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_push_INLRExecutionStackFrame__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ExecutionStack::push(::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[0], dc));
    else
      ret = This->push(::acdk::lang::dmi::castTo< RExecutionStackFrame>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_removeDbgFlag_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::removeDbgFlag(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->removeDbgFlag(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_rollbackMetaInfo__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::rollbackMetaInfo();
    else
        This->rollbackMetaInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_setCurrentTokenIndex_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack::setCurrentTokenIndex(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_setDebugFlags_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack::setDebugFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_startTransMetaInfo_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ExecutionStack::startTransMetaInfo(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->startTransMetaInfo(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_throwOnFail__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = ExecutionStack::throwOnFail();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ExecutionStack_method_top__LRExecutionStackFrame__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = outOf(This->ExecutionStack::top());
    else
        ret = outOf(This->top());
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStack_fields__debugFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_debugFlags, flags);
    else
      This->_debugFlags = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStack_fields__executeStack_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_executeStack, flags);
    else
      This->_executeStack = ::acdk::lang::dmi::castTo< RExecutionStackFrameArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStack_fields__nullFrame_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_nullFrame, flags);
    else
      This->_nullFrame = ::acdk::lang::dmi::castTo< RExecutionStackFrame>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStack_fields__registeredMetaInfo_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_registeredMetaInfo, flags);
    else
      This->_registeredMetaInfo = ::acdk::lang::dmi::castTo< acdk::lang::dmi::RMetaObjectArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ExecutionStack_fields__throwOnFail_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ExecutionStack* This = dmi_cast<ExecutionStack>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_throwOnFail, flags);
    else
      This->_throwOnFail = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStack_fields__debugFlags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_debugFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ExecutionStack_MetainfoWrapper::ExecutionStack_fields__debugFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStack_fields__executeStack = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_executeStack", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrameArray::clazzInfo(),
  ExecutionStack_MetainfoWrapper::ExecutionStack_fields__executeStack_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStack_fields__nullFrame = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_nullFrame", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo(),
  ExecutionStack_MetainfoWrapper::ExecutionStack_fields__nullFrame_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStack_fields__registeredMetaInfo = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_registeredMetaInfo", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RMetaObjectArray::clazzInfo(),
  ExecutionStack_MetainfoWrapper::ExecutionStack_fields__registeredMetaInfo_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ExecutionStack_fields__throwOnFail = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_throwOnFail", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ExecutionStack_MetainfoWrapper::ExecutionStack_fields__throwOnFail_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ExecutionStack_fields[] = 
{
  &ExecutionStack_fields__debugFlags,
  &ExecutionStack_fields__executeStack,
  &ExecutionStack_fields__nullFrame,
  &ExecutionStack_fields__registeredMetaInfo,
  &ExecutionStack_fields__throwOnFail,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_ExecutionStack__LRExecutionStack__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_ExecutionStack__LRExecutionStack__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_ExecutionStack__LRExecutionStack_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ExecutionStack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ExecutionStack::clazzInfo(), // return type
  "_0_ExecutionStack", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_ExecutionStack__LRExecutionStack__args, // the arguments
  0, //arguments count
  ExecutionStack_methods_ExecutionStack__LRExecutionStack__exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_ExecutionStack__LRExecutionStack__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_l_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ExecutionStack_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_addDbgFlag_I_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_addDbgFlag_I_V_args[] = 
{
  &ExecutionStack_methods_addDbgFlag_I_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_addDbgFlag_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_addDbgFlag_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addDbgFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_addDbgFlag", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_addDbgFlag_I_V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_addDbgFlag_I_V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_addDbgFlag_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_breakToDebug__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_breakToDebug__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_breakToDebug__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "breakToDebug", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_breakToDebug", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_breakToDebug__V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_breakToDebug__V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_breakToDebug__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_get__LRExecutionStack__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_get__LRExecutionStack__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_get__LRExecutionStack_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStack::clazzInfo(), // return type
  "_1_get", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_get__LRExecutionStack__args, // the arguments
  0, //arguments count
  ExecutionStack_methods_get__LRExecutionStack__exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_get__LRExecutionStack__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_getCurrentTokenIndex__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_getCurrentTokenIndex__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_getCurrentTokenIndex__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentTokenIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_getCurrentTokenIndex", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_getCurrentTokenIndex__I_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_getCurrentTokenIndex__I_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_getCurrentTokenIndex__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_getDebugFlags__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_getDebugFlags__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_getDebugFlags__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDebugFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_getDebugFlags", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_getDebugFlags__I_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_getDebugFlags__I_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_getDebugFlags__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_getFrames__LRExecutionStackFrameArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_getFrames__LRExecutionStackFrameArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_getFrames__LRExecutionStackFrameArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFrames", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrameArray::clazzInfo(), // return type
  "_g_getFrames", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_getFrames__LRExecutionStackFrameArray__args, // the arguments
  0, //arguments count
  ExecutionStack_methods_getFrames__LRExecutionStackFrameArray__exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_getFrames__LRExecutionStackFrameArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_getScriptBackTrace_ZZ_LRString__arg_withLocals = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "withLocals", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_getScriptBackTrace_ZZ_LRString__arg_withSourcePos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "withSourcePos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_getScriptBackTrace_ZZ_LRString__args[] = 
{
  &ExecutionStack_methods_getScriptBackTrace_ZZ_LRString__arg_withLocals,
  &ExecutionStack_methods_getScriptBackTrace_ZZ_LRString__arg_withSourcePos,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_getScriptBackTrace_ZZ_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_getScriptBackTrace_ZZ_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScriptBackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_getScriptBackTrace", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_getScriptBackTrace_ZZ_LRString__args, // the arguments
  0, //arguments count
  ExecutionStack_methods_getScriptBackTrace_ZZ_LRString__exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_getScriptBackTrace_ZZ_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_getTop__LRExecutionStackFrame__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_getTop__LRExecutionStackFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_getTop__LRExecutionStackFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo(), // return type
  "_8_getTop", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_getTop__LRExecutionStackFrame__args, // the arguments
  0, //arguments count
  ExecutionStack_methods_getTop__LRExecutionStackFrame__exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_getTop__LRExecutionStackFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_onRegister_INLacdk_lang_dmi_RMetaObject__V_arg_metaObject = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "metaObject", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RMetaObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_onRegister_INLacdk_lang_dmi_RMetaObject__V_args[] = 
{
  &ExecutionStack_methods_onRegister_INLacdk_lang_dmi_RMetaObject__V_arg_metaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_onRegister_INLacdk_lang_dmi_RMetaObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_onRegister_INLacdk_lang_dmi_RMetaObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onRegister", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_onRegister", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_onRegister_INLacdk_lang_dmi_RMetaObject__V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_onRegister_INLacdk_lang_dmi_RMetaObject__V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_onRegister_INLacdk_lang_dmi_RMetaObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_onUnregister_INLacdk_lang_dmi_RMetaObject__V_arg_metaObject = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "metaObject", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RMetaObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_onUnregister_INLacdk_lang_dmi_RMetaObject__V_args[] = 
{
  &ExecutionStack_methods_onUnregister_INLacdk_lang_dmi_RMetaObject__V_arg_metaObject,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_onUnregister_INLacdk_lang_dmi_RMetaObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_onUnregister_INLacdk_lang_dmi_RMetaObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onUnregister", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_k_onUnregister", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_onUnregister_INLacdk_lang_dmi_RMetaObject__V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_onUnregister_INLacdk_lang_dmi_RMetaObject__V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_onUnregister_INLacdk_lang_dmi_RMetaObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_pop__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_pop__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_pop__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_pop", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_pop__V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_pop__V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_pop__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_pop_I_V_arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_pop_I_V_args[] = 
{
  &ExecutionStack_methods_pop_I_V_arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_pop_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_pop_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pop", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_pop", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_pop_I_V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_pop_I_V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_pop_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_push_INLRExecutionStackFrame__I_arg_st = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "st", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_push_INLRExecutionStackFrame__I_args[] = 
{
  &ExecutionStack_methods_push_INLRExecutionStackFrame__I_arg_st,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_push_INLRExecutionStackFrame__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_push_INLRExecutionStackFrame__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "push", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_push", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_push_INLRExecutionStackFrame__I_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_push_INLRExecutionStackFrame__I_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_push_INLRExecutionStackFrame__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_removeDbgFlag_I_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_removeDbgFlag_I_V_args[] = 
{
  &ExecutionStack_methods_removeDbgFlag_I_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_removeDbgFlag_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_removeDbgFlag_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeDbgFlag", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_removeDbgFlag", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_removeDbgFlag_I_V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_removeDbgFlag_I_V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_removeDbgFlag_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_rollbackMetaInfo__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_rollbackMetaInfo__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_rollbackMetaInfo__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "rollbackMetaInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_i_rollbackMetaInfo", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_rollbackMetaInfo__V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_rollbackMetaInfo__V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_rollbackMetaInfo__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_setCurrentTokenIndex_I_V_arg_index = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "index", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_setCurrentTokenIndex_I_V_args[] = 
{
  &ExecutionStack_methods_setCurrentTokenIndex_I_V_arg_index,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_setCurrentTokenIndex_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_setCurrentTokenIndex_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCurrentTokenIndex", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_setCurrentTokenIndex", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_setCurrentTokenIndex_I_V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_setCurrentTokenIndex_I_V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_setCurrentTokenIndex_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_setDebugFlags_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_setDebugFlags_I_V_args[] = 
{
  &ExecutionStack_methods_setDebugFlags_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_setDebugFlags_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_setDebugFlags_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDebugFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_setDebugFlags", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_setDebugFlags_I_V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_setDebugFlags_I_V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_setDebugFlags_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ExecutionStack_methods_startTransMetaInfo_I_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_startTransMetaInfo_I_V_args[] = 
{
  &ExecutionStack_methods_startTransMetaInfo_I_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_startTransMetaInfo_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_startTransMetaInfo_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "startTransMetaInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_startTransMetaInfo", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_startTransMetaInfo_I_V_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_startTransMetaInfo_I_V_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_startTransMetaInfo_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_throwOnFail__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_throwOnFail__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_throwOnFail__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "throwOnFail", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_throwOnFail", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_throwOnFail__Z_args, // the arguments
  0, //arguments count
  ExecutionStack_methods_throwOnFail__Z_exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_throwOnFail__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ExecutionStack_methods_top__LRExecutionStackFrame__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ExecutionStack_methods_top__LRExecutionStackFrame__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ExecutionStack_method_top__LRExecutionStackFrame_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOut | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "top", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStackFrame::clazzInfo(), // return type
  "_5_top", // alternative name of method
  -1, // altlabelHashCode
  ExecutionStack_methods_top__LRExecutionStackFrame__args, // the arguments
  0, //arguments count
  ExecutionStack_methods_top__LRExecutionStackFrame__exceptions, // the declared exceptions
  ExecutionStack_MetainfoWrapper::ExecutionStack_method_top__LRExecutionStackFrame__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ExecutionStack_methods[] = 
{
  &ExecutionStack_method_ExecutionStack__LRExecutionStack_,
  &ExecutionStack_method_GetClass__L_acdk_lang_RClass_,
  &ExecutionStack_method_addDbgFlag_I_V,
  &ExecutionStack_method_breakToDebug__V,
  &ExecutionStack_method_get__LRExecutionStack_,
  &ExecutionStack_method_getCurrentTokenIndex__I,
  &ExecutionStack_method_getDebugFlags__I,
  &ExecutionStack_method_getFrames__LRExecutionStackFrameArray_,
  &ExecutionStack_method_getScriptBackTrace_ZZ_LRString_,
  &ExecutionStack_method_getTop__LRExecutionStackFrame_,
  &ExecutionStack_method_onRegister_INLacdk_lang_dmi_RMetaObject__V,
  &ExecutionStack_method_onUnregister_INLacdk_lang_dmi_RMetaObject__V,
  &ExecutionStack_method_pop__V,
  &ExecutionStack_method_pop_I_V,
  &ExecutionStack_method_push_INLRExecutionStackFrame__I,
  &ExecutionStack_method_removeDbgFlag_I_V,
  &ExecutionStack_method_rollbackMetaInfo__V,
  &ExecutionStack_method_setCurrentTokenIndex_I_V,
  &ExecutionStack_method_setDebugFlags_I_V,
  &ExecutionStack_method_startTransMetaInfo_I_V,
  &ExecutionStack_method_throwOnFail__Z,
  &ExecutionStack_method_top__LRExecutionStackFrame_,
  0
};


struct ExecutionStack_MetaInfoInitializer
{  ExecutionStack_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ExecutionStack::clazzInfo();
    ci->fields =  _ExecutionStack_fields;
    ci->methods =  _ExecutionStack_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ExecutionStack_MetaInfoInitializer ExecutionStack_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
PropsChangeListener_create_array(int length)
{
  return new ObjectArrayImpl<RPropsChangeListener>(length);
}

//static
::acdk::lang::RObject
PropsChangeListener_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PropsChangeListener_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropsChangeListener_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PropsChangeListener::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PropsChangeListener_method_afterChange_IINLRProps_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PropsChangeListener* This = dmi_cast<PropsChangeListener>(This_);
    This->afterChange((PropChangeEvents)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _PropsChangeListener_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropsChangeListener_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PropsChangeListener_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropsChangeListener_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PropsChangeListener_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PropsChangeListener_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PropsChangeListener_MetainfoWrapper::PropsChangeListener_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_arg_event = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "event", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_args[] = 
{
  &PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_arg_event,
  &PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_arg_props,
  &PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PropsChangeListener_method_afterChange_IINLRProps_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "afterChange", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_afterChange", // alternative name of method
  -1, // altlabelHashCode
  PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_args, // the arguments
  0, //arguments count
  PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_exceptions, // the declared exceptions
  PropsChangeListener_MetainfoWrapper::PropsChangeListener_method_afterChange_IINLRProps_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PropsChangeListener_methods[] = 
{
  &PropsChangeListener_method_GetClass__L_acdk_lang_RClass_,
  &PropsChangeListener_method_afterChange_IINLRProps_INLRString__V,
  0
};


struct PropsChangeListener_MetaInfoInitializer
{  PropsChangeListener_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PropsChangeListener::clazzInfo();
    ci->fields =  _PropsChangeListener_fields;
    ci->methods =  _PropsChangeListener_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PropsChangeListener_MetaInfoInitializer PropsChangeListener_MetaInfoInitializer_staticinstance__;


struct PropsChangeListener_clazzInfo_ClazzAttributesResInitializer2
{
  PropsChangeListener_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&PropsChangeListener_methods_afterChange_IINLRProps_INLRString__V_arg_event, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)PropChangeEventsMetaInf::GetEnumInfo()));
  }
};

PropsChangeListener_clazzInfo_ClazzAttributesResInitializer2 PropsChangeListener_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
Props_create_array(int length)
{
  return new ObjectArrayImpl<RProps>(length);
}

//static
::acdk::lang::RObject
Props_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Props_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_INLRString_SINLRProps_Z_LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc), ::acdk::lang::dmi::castTo< RProps>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_INLRString__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_INLRString_S_LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_INLRString_SINLRProps__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc), ::acdk::lang::dmi::castTo< RProps>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_SINLRProps_Z_LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< short>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_S_LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_SINLRProps__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< short>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< acdk::lang::dmi::RDmiNamedArgArray>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Props(::acdk::lang::dmi::castTo< acdk::lang::dmi::RDmiNamedArgArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__get_INLRString_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::_get(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->_get(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__getKeys_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::_getKeys(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    else
        This->_getKeys(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__importNameSpace_INLRString_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::_importNameSpace(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    else
      ret = This->_importNameSpace(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__init__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::_init();
    else
        This->_init();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__readParent_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::_readParent(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->_readParent(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__set_INLRString_INLRDmiObject_SZ_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::_set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    else
        This->_set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc), ::acdk::lang::dmi::castTo< bool>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__set_INLRString_INLRDmiObject_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::_set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->_set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__warnRead_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::_warnRead(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->_warnRead(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__warnWrite_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::_warnWrite(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->_warnWrite(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method__writeParent_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::_writeParent(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->_writeParent(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_addListener_INLRPropsChangeListener__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::addListener(::acdk::lang::dmi::castTo< RPropsChangeListener>(args[0], dc));
    else
        This->addListener(::acdk::lang::dmi::castTo< RPropsChangeListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_addParentProps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::addParentProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
        This->addParentProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_appendObjectList_INLRString_INLRObject_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::appendObjectList(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->appendObjectList(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_appendObjectList_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::appendObjectList(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->appendObjectList(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_appendStringArrayVal_INLRString_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::appendStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->appendStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_appendStringArrayVal_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::appendStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->appendStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_appendStringVal_INLRString_INLRString_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::appendStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc));
    else
        This->appendStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< short>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_appendStringVal_INLRString_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::appendStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    else
        This->appendStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_asCfgScriptLiteral_INLRString_INLRString_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::asCfgScriptLiteral(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->asCfgScriptLiteral(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_asCfgScriptLiteral_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::asCfgScriptLiteral(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->asCfgScriptLiteral(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_asCfgScriptLiteral_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::asCfgScriptLiteral(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->asCfgScriptLiteral(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_assign_INLRString_INLRDmiObject_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::assign(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->assign(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_assign_INLRString_INLRDmiObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::assign(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc));
    else
        This->assign(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_clone__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::clone();
    else
        ret = (::acdk::lang::RObject)This->clone();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_containsInStringArrayVal_INLRString_INLRString_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::containsInStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
      ret = This->containsInStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_containsInStringArrayVal_INLRString_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::containsInStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
      ret = This->containsInStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_create_INLRString_INLRDmiObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::create(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc));
    else
        This->create(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_dump_IL_acdk_util_RTreeSet_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::dump(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RTreeSet>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    else
        This->dump(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RTreeSet>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_dump_IL_acdk_util_RTreeSet__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::dump(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RTreeSet>(args[1], dc));
    else
        This->dump(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< ::acdk::util::RTreeSet>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_dump__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::dump();
    else
        This->dump();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_dump_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::dump(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->dump(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_eval_INLRString_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::eval(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->eval(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_eval_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::eval(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->eval(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_evalShellExecute_INLRString_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::evalShellExecute(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->evalShellExecute(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_execScript_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::execScript(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->execScript(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_execScript_INLRString_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::execScript(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->execScript(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_execScript_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::execScript(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->execScript(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_findOwnerHeap_INLRString__LRHashMap__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::findOwnerHeap(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findOwnerHeap(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_get_INLRString_S_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::get(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_get_INLRString__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::get(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getAcdkHome_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getAcdkHome(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getAcdkHome(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getAcdkHome__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getAcdkHome();
    else
        ret = (::acdk::lang::RObject)This->getAcdkHome();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getAcdkToolsHome_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getAcdkToolsHome(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getAcdkToolsHome(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getAcdkToolsHome__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getAcdkToolsHome();
    else
        ret = (::acdk::lang::RObject)This->getAcdkToolsHome();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getAllStringArrayVal_INLRString_S_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getAllStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getAllStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getAllStringArrayVal_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getAllStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getAllStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getAllStringVals_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getAllStringVals(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getAllStringVals(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getAllStringVals_INLRString_S_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getAllStringVals(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getAllStringVals(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getBoolVal_INLRString_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getBoolVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
      ret = This->getBoolVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getBoolVal_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getBoolVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->getBoolVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getCastFlags__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getCastFlags();
    else
      ret = This->getCastFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getDefaultFlags__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getDefaultFlags();
    else
      ret = This->getDefaultFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getDoubleVal_INLRString_S_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getDoubleVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
      ret = This->getDoubleVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getDoubleVal_INLRString__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getDoubleVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->getDoubleVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getEvaluatedStringVal_INLRString_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getEvaluatedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getEvaluatedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getEvaluatedStringVal_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getEvaluatedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getEvaluatedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getIntVal_INLRString_S_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getIntVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
      ret = This->getIntVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getIntVal_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getIntVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->getIntVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getKeys_S_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getKeys(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getKeys(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getKeys__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getKeys();
    else
        ret = (::acdk::lang::RObject)This->getKeys();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getObjectVal_INLRString_S_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getObjectVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getObjectVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getObjectVal_INLRString__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getObjectVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getObjectVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getParentProps__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getParentProps();
    else
        ret = (::acdk::lang::RObject)This->getParentProps();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getParentsProps__LRPropsArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getParentsProps();
    else
        ret = (::acdk::lang::RObject)This->getParentsProps();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getProps_INLRString_S_LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getProps(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getProps(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getProps_INLRString__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getProps(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getProps(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getQuotedStringVal_INLRString_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getQuotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getQuotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getQuotedStringVal_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getQuotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getQuotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getSingleThreaded__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::getSingleThreaded();
    else
      ret = This->getSingleThreaded();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getStringArrayVal_INLRString_S_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getStringArrayVal_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getStringVal_INLRString_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getStringVal_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getUnquotedStringVal_INLRString_S_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getUnquotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getUnquotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_getUnquotedStringVal_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::getUnquotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getUnquotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_hasParentProps_INLRProps__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::hasParentProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
      ret = This->hasParentProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_hasValue_INLRString_S_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::hasValue(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
      ret = This->hasValue(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_hasValue_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::hasValue(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->hasValue(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_importNameSpace_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::importNameSpace(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->importNameSpace(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_keys__Lacdk_util_RIterator__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::keys();
    else
        ret = (::acdk::lang::RObject)This->keys();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_lock__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::lock();
    else
        This->lock();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc), ::acdk::lang::dmi::castTo< RString>(args[6], dc), ::acdk::lang::dmi::castTo< RString>(args[7], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray_INLRString_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Props::makeStringArray(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc), ::acdk::lang::dmi::castTo< RString>(args[4], dc), ::acdk::lang::dmi::castTo< RString>(args[5], dc), ::acdk::lang::dmi::castTo< RString>(args[6], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_merge_INLRProps_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::merge(::acdk::lang::dmi::castTo< RProps>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        This->merge(::acdk::lang::dmi::castTo< RProps>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_merge_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::merge(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
        This->merge(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_removeListener_INLRPropsChangeListener__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::removeListener(::acdk::lang::dmi::castTo< RPropsChangeListener>(args[0], dc));
    else
        This->removeListener(::acdk::lang::dmi::castTo< RPropsChangeListener>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_removeParentProps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::removeParentProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
        This->removeParentProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_set_INLRString_INLRDmiObject_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_set_INLRString_INLRDmiObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc));
    else
        This->set(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RDmiObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setBoolVal_INLRString_ZS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setBoolVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->setBoolVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setBoolVal_INLRString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setBoolVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->setBoolVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setCastFlags_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setCastFlags(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        This->setCastFlags(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setDefaultFlags_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setDefaultFlags(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        This->setDefaultFlags(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setDoubleVal_INLRString_DS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setDoubleVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->setDoubleVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setDoubleVal_INLRString_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setDoubleVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc));
    else
        This->setDoubleVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setIntVal_INLRString_IS_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setIntVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->setIntVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setIntVal_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setIntVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setIntVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setName_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setObjectVal_INLRString_INLRObject_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setObjectVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->setObjectVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setObjectVal_INLRString_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setObjectVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->setObjectVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setProps_INLRString_INLRProps_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setProps(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->setProps(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setProps_INLRString_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setProps(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    else
        This->setProps(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setQuotedStringVal_INLRString_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setQuotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->setQuotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setQuotedStringVal_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setQuotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->setQuotedStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setSingleThreaded_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setSingleThreaded(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setSingleThreaded(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setStringArrayVal_INLRString_INLRStringArray_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->setStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setStringArrayVal_INLRString_INLRStringArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    else
        This->setStringArrayVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RStringArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setStringVal_INLRString_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    else
        This->setStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< short>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_setStringVal_INLRString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::setStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->setStringVal(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_size_S_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::size(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
      ret = This->size(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Props::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Props::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_unlock__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::unlock();
    else
        This->unlock();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_unset_INLRString_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::unset(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        This->unset(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Props_method_unset_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Props::unset(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->unset(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Props_fields__castFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_castFlags, flags);
    else
      This->_castFlags = ::acdk::lang::dmi::castTo< short>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Props_fields__curHeap_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curHeap, flags);
    else
      This->_curHeap = ::acdk::lang::dmi::castTo< RHashMap>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Props_fields__defaultFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_defaultFlags, flags);
    else
      This->_defaultFlags = ::acdk::lang::dmi::castTo< short>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Props_fields__listeners_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_listeners, flags);
    else
      This->_listeners = ::acdk::lang::dmi::castTo< RPropsChangeListenerArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Props_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Props_fields__parents_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parents, flags);
    else
      This->_parents = ::acdk::lang::dmi::castTo< RPropsArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Props_fields__singleThreaded_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Props* This = dmi_cast<Props>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_singleThreaded, flags);
    else
      This->_singleThreaded = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Props_fields__castFlags = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_castFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  Props_MetainfoWrapper::Props_fields__castFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Props_fields__curHeap = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curHeap", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(),
  Props_MetainfoWrapper::Props_fields__curHeap_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Props_fields__defaultFlags = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_defaultFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  Props_MetainfoWrapper::Props_fields__defaultFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Props_fields__listeners = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_listeners", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPropsChangeListenerArray::clazzInfo(),
  Props_MetainfoWrapper::Props_fields__listeners_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Props_fields__name = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Props_MetainfoWrapper::Props_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Props_fields__parents = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parents", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPropsArray::clazzInfo(),
  Props_MetainfoWrapper::Props_fields__parents_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Props_fields__singleThreaded = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_singleThreaded", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Props_MetainfoWrapper::Props_fields__singleThreaded_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Props_fields[] = 
{
  &Props_fields__castFlags,
  &Props_fields__curHeap,
  &Props_fields__defaultFlags,
  &Props_fields__listeners,
  &Props_fields__name,
  &Props_fields__parents,
  &Props_fields__singleThreaded,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Props_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_SINLRProps_Z_LRProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_SINLRProps_Z_LRProps__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_SINLRProps_Z_LRProps__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_SINLRProps_Z_LRProps__arg_private_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "private_props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_INLRString_SINLRProps_Z_LRProps__args[] = 
{
  &Props_methods_Props_INLRString_SINLRProps_Z_LRProps__arg_name,
  &Props_methods_Props_INLRString_SINLRProps_Z_LRProps__arg_flags,
  &Props_methods_Props_INLRString_SINLRProps_Z_LRProps__arg_parent,
  &Props_methods_Props_INLRString_SINLRProps_Z_LRProps__arg_private_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_INLRString_SINLRProps_Z_LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_INLRString_SINLRProps_Z_LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_0_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_INLRString_SINLRProps_Z_LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_INLRString_SINLRProps_Z_LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_INLRString_SINLRProps_Z_LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString__LRProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_INLRString__LRProps__args[] = 
{
  &Props_methods_Props_INLRString__LRProps__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_INLRString__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_INLRString__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_1_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_INLRString__LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_INLRString__LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_INLRString__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_S_LRProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_S_LRProps__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_INLRString_S_LRProps__args[] = 
{
  &Props_methods_Props_INLRString_S_LRProps__arg_name,
  &Props_methods_Props_INLRString_S_LRProps__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_INLRString_S_LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_INLRString_S_LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_2_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_INLRString_S_LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_INLRString_S_LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_INLRString_S_LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_SINLRProps__LRProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_SINLRProps__LRProps__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLRString_SINLRProps__LRProps__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_INLRString_SINLRProps__LRProps__args[] = 
{
  &Props_methods_Props_INLRString_SINLRProps__LRProps__arg_name,
  &Props_methods_Props_INLRString_SINLRProps__LRProps__arg_flags,
  &Props_methods_Props_INLRString_SINLRProps__LRProps__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_INLRString_SINLRProps__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_INLRString_SINLRProps__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_3_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_INLRString_SINLRProps__LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_INLRString_SINLRProps__LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_INLRString_SINLRProps__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_SINLRProps_Z_LRProps__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_SINLRProps_Z_LRProps__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_SINLRProps_Z_LRProps__arg_private_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "private_props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_SINLRProps_Z_LRProps__args[] = 
{
  &Props_methods_Props_SINLRProps_Z_LRProps__arg_flags,
  &Props_methods_Props_SINLRProps_Z_LRProps__arg_parent,
  &Props_methods_Props_SINLRProps_Z_LRProps__arg_private_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_SINLRProps_Z_LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_SINLRProps_Z_LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_4_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_SINLRProps_Z_LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_SINLRProps_Z_LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_SINLRProps_Z_LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props__LRProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_5_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props__LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props__LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_S_LRProps__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_S_LRProps__args[] = 
{
  &Props_methods_Props_S_LRProps__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_S_LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_S_LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_6_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_S_LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_S_LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_S_LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_SINLRProps__LRProps__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_SINLRProps__LRProps__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_SINLRProps__LRProps__args[] = 
{
  &Props_methods_Props_SINLRProps__LRProps__arg_flags,
  &Props_methods_Props_SINLRProps__LRProps__arg_parent,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_SINLRProps__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_SINLRProps__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_7_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_SINLRProps__LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_SINLRProps__LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_SINLRProps__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__arg_namedArgs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namedArgs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiNamedArgArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__args[] = 
{
  &Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__arg_namedArgs,
  &Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_8_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps__arg_namedArgs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namedArgs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiNamedArgArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps__args[] = 
{
  &Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps__arg_namedArgs,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Props", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Props::clazzInfo(), // return type
  "_9_Props", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps__args, // the arguments
  0, //arguments count
  Props_methods_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__get_INLRString_S_LRDmiObject__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__get_INLRString_S_LRDmiObject__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__get_INLRString_S_LRDmiObject__args[] = 
{
  &Props_methods__get_INLRString_S_LRDmiObject__arg_name,
  &Props_methods__get_INLRString_S_LRDmiObject__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__get_INLRString_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__get_INLRString_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_23__get", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__get_INLRString_S_LRDmiObject__args, // the arguments
  0, //arguments count
  Props_methods__get_INLRString_S_LRDmiObject__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__get_INLRString_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__getKeys_INLRStringArray__V_arg_sa = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sa", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__getKeys_INLRStringArray__V_args[] = 
{
  &Props_methods__getKeys_INLRStringArray__V_arg_sa,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__getKeys_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__getKeys_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_getKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_22__getKeys", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__getKeys_INLRStringArray__V_args, // the arguments
  0, //arguments count
  Props_methods__getKeys_INLRStringArray__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__getKeys_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__importNameSpace_INLRString_INLRProps__Z_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__importNameSpace_INLRString_INLRProps__Z_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__importNameSpace_INLRString_INLRProps__Z_args[] = 
{
  &Props_methods__importNameSpace_INLRString_INLRProps__Z_arg_prefix,
  &Props_methods__importNameSpace_INLRString_INLRProps__Z_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__importNameSpace_INLRString_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__importNameSpace_INLRString_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_importNameSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_21__importNameSpace", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__importNameSpace_INLRString_INLRProps__Z_args, // the arguments
  0, //arguments count
  Props_methods__importNameSpace_INLRString_INLRProps__Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__importNameSpace_INLRString_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__init__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__init__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__init__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_init", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_20__init", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__init__V_args, // the arguments
  0, //arguments count
  Props_methods__init__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__init__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__readParent_S_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__readParent_S_Z_args[] = 
{
  &Props_methods__readParent_S_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__readParent_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__readParent_S_Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_26__readParent", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__readParent_S_Z_args, // the arguments
  0, //arguments count
  Props_methods__readParent_S_Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__readParent_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__set_INLRString_INLRDmiObject_SZ_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__set_INLRString_INLRDmiObject_SZ_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__set_INLRString_INLRDmiObject_SZ_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__set_INLRString_INLRDmiObject_SZ_V_arg_notify = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "notify", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__set_INLRString_INLRDmiObject_SZ_V_args[] = 
{
  &Props_methods__set_INLRString_INLRDmiObject_SZ_V_arg_name,
  &Props_methods__set_INLRString_INLRDmiObject_SZ_V_arg_val,
  &Props_methods__set_INLRString_INLRDmiObject_SZ_V_arg_flags,
  &Props_methods__set_INLRString_INLRDmiObject_SZ_V_arg_notify,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__set_INLRString_INLRDmiObject_SZ_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__set_INLRString_INLRDmiObject_SZ_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_24__set", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__set_INLRString_INLRDmiObject_SZ_V_args, // the arguments
  0, //arguments count
  Props_methods__set_INLRString_INLRDmiObject_SZ_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__set_INLRString_INLRDmiObject_SZ_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__set_INLRString_INLRDmiObject_S_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__set_INLRString_INLRDmiObject_S_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__set_INLRString_INLRDmiObject_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__set_INLRString_INLRDmiObject_S_V_args[] = 
{
  &Props_methods__set_INLRString_INLRDmiObject_S_V_arg_name,
  &Props_methods__set_INLRString_INLRDmiObject_S_V_arg_val,
  &Props_methods__set_INLRString_INLRDmiObject_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__set_INLRString_INLRDmiObject_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__set_INLRString_INLRDmiObject_S_V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "_set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_25__set", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__set_INLRString_INLRDmiObject_S_V_args, // the arguments
  0, //arguments count
  Props_methods__set_INLRString_INLRDmiObject_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__set_INLRString_INLRDmiObject_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__warnRead_S_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__warnRead_S_Z_args[] = 
{
  &Props_methods__warnRead_S_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__warnRead_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__warnRead_S_Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_warnRead", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_28__warnRead", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__warnRead_S_Z_args, // the arguments
  0, //arguments count
  Props_methods__warnRead_S_Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__warnRead_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__warnWrite_S_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__warnWrite_S_Z_args[] = 
{
  &Props_methods__warnWrite_S_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__warnWrite_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__warnWrite_S_Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_warnWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_29__warnWrite", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__warnWrite_S_Z_args, // the arguments
  0, //arguments count
  Props_methods__warnWrite_S_Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__warnWrite_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods__writeParent_S_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods__writeParent_S_Z_args[] = 
{
  &Props_methods__writeParent_S_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods__writeParent_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method__writeParent_S_Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_writeParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_27__writeParent", // alternative name of method
  -1, // altlabelHashCode
  Props_methods__writeParent_S_Z_args, // the arguments
  0, //arguments count
  Props_methods__writeParent_S_Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method__writeParent_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_addListener_INLRPropsChangeListener__V_arg_listener = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listener", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPropsChangeListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_addListener_INLRPropsChangeListener__V_args[] = 
{
  &Props_methods_addListener_INLRPropsChangeListener__V_arg_listener,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_addListener_INLRPropsChangeListener__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_addListener_INLRPropsChangeListener__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1Y_addListener", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_addListener_INLRPropsChangeListener__V_args, // the arguments
  0, //arguments count
  Props_methods_addListener_INLRPropsChangeListener__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_addListener_INLRPropsChangeListener__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_addParentProps_INLRProps__V_arg_nparent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nparent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_addParentProps_INLRProps__V_args[] = 
{
  &Props_methods_addParentProps_INLRProps__V_arg_nparent,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_addParentProps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_addParentProps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "addParentProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_addParentProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_addParentProps_INLRProps__V_args, // the arguments
  0, //arguments count
  Props_methods_addParentProps_INLRProps__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_addParentProps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendObjectList_INLRString_INLRObject_S_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendObjectList_INLRString_INLRObject_S_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendObjectList_INLRString_INLRObject_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_appendObjectList_INLRString_INLRObject_S_V_args[] = 
{
  &Props_methods_appendObjectList_INLRString_INLRObject_S_V_arg_key,
  &Props_methods_appendObjectList_INLRString_INLRObject_S_V_arg_val,
  &Props_methods_appendObjectList_INLRString_INLRObject_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_appendObjectList_INLRString_INLRObject_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_appendObjectList_INLRString_INLRObject_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendObjectList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1k_appendObjectList", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_appendObjectList_INLRString_INLRObject_S_V_args, // the arguments
  0, //arguments count
  Props_methods_appendObjectList_INLRString_INLRObject_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_appendObjectList_INLRString_INLRObject_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendObjectList_INLRString_INLRObject__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendObjectList_INLRString_INLRObject__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_appendObjectList_INLRString_INLRObject__V_args[] = 
{
  &Props_methods_appendObjectList_INLRString_INLRObject__V_arg_key,
  &Props_methods_appendObjectList_INLRString_INLRObject__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_appendObjectList_INLRString_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_appendObjectList_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "appendObjectList", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1l_appendObjectList", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_appendObjectList_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  Props_methods_appendObjectList_INLRString_INLRObject__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_appendObjectList_INLRString_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_args[] = 
{
  &Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_arg_key,
  &Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_arg_value,
  &Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_appendStringArrayVal_INLRString_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1c_appendStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_args, // the arguments
  0, //arguments count
  Props_methods_appendStringArrayVal_INLRString_INLRString_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_appendStringArrayVal_INLRString_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringArrayVal_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringArrayVal_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_appendStringArrayVal_INLRString_INLRString__V_args[] = 
{
  &Props_methods_appendStringArrayVal_INLRString_INLRString__V_arg_key,
  &Props_methods_appendStringArrayVal_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_appendStringArrayVal_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_appendStringArrayVal_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "appendStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1d_appendStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_appendStringArrayVal_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_appendStringArrayVal_INLRString_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_appendStringArrayVal_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_arg_joiner = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "joiner", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_args[] = 
{
  &Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_arg_key,
  &Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_arg_value,
  &Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_arg_joiner,
  &Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_appendStringVal_INLRString_INLRString_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "appendStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_18_appendStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_args, // the arguments
  0, //arguments count
  Props_methods_appendStringVal_INLRString_INLRString_INLRString_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_appendStringVal_INLRString_INLRString_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_arg_joiner = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "joiner", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_args[] = 
{
  &Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_arg_key,
  &Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_arg_value,
  &Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_arg_joiner,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_appendStringVal_INLRString_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "appendStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_19_appendStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_appendStringVal_INLRString_INLRString_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_appendStringVal_INLRString_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__arg_keyName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__args[] = 
{
  &Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__arg_keyName,
  &Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__arg_indent,
  &Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_asCfgScriptLiteral_INLRString_INLRString_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "asCfgScriptLiteral", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1R_asCfgScriptLiteral", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__args, // the arguments
  0, //arguments count
  Props_methods_asCfgScriptLiteral_INLRString_INLRString_S_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_asCfgScriptLiteral_INLRString_INLRString_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_asCfgScriptLiteral_INLRString__LRString__arg_keyName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_asCfgScriptLiteral_INLRString__LRString__args[] = 
{
  &Props_methods_asCfgScriptLiteral_INLRString__LRString__arg_keyName,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_asCfgScriptLiteral_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_asCfgScriptLiteral_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "asCfgScriptLiteral", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1S_asCfgScriptLiteral", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_asCfgScriptLiteral_INLRString__LRString__args, // the arguments
  0, //arguments count
  Props_methods_asCfgScriptLiteral_INLRString__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_asCfgScriptLiteral_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_asCfgScriptLiteral_INLRString_INLRString__LRString__arg_keyName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "keyName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_asCfgScriptLiteral_INLRString_INLRString__LRString__arg_indent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "indent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_asCfgScriptLiteral_INLRString_INLRString__LRString__args[] = 
{
  &Props_methods_asCfgScriptLiteral_INLRString_INLRString__LRString__arg_keyName,
  &Props_methods_asCfgScriptLiteral_INLRString_INLRString__LRString__arg_indent,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_asCfgScriptLiteral_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_asCfgScriptLiteral_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "asCfgScriptLiteral", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1T_asCfgScriptLiteral", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_asCfgScriptLiteral_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  Props_methods_asCfgScriptLiteral_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_asCfgScriptLiteral_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_assign_INLRString_INLRDmiObject_S_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_assign_INLRString_INLRDmiObject_S_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_assign_INLRString_INLRDmiObject_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_assign_INLRString_INLRDmiObject_S_V_args[] = 
{
  &Props_methods_assign_INLRString_INLRDmiObject_S_V_arg_name,
  &Props_methods_assign_INLRString_INLRDmiObject_S_V_arg_val,
  &Props_methods_assign_INLRString_INLRDmiObject_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_assign_INLRString_INLRDmiObject_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_assign_INLRString_INLRDmiObject_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_assign", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_assign_INLRString_INLRDmiObject_S_V_args, // the arguments
  0, //arguments count
  Props_methods_assign_INLRString_INLRDmiObject_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_assign_INLRString_INLRDmiObject_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_assign_INLRString_INLRDmiObject__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_assign_INLRString_INLRDmiObject__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_assign_INLRString_INLRDmiObject__V_args[] = 
{
  &Props_methods_assign_INLRString_INLRDmiObject__V_arg_name,
  &Props_methods_assign_INLRString_INLRDmiObject__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_assign_INLRString_INLRDmiObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_assign_INLRString_INLRDmiObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "assign", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_assign", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_assign_INLRString_INLRDmiObject__V_args, // the arguments
  0, //arguments count
  Props_methods_assign_INLRString_INLRDmiObject__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_assign_INLRString_INLRDmiObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_clone__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_clone__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_clone__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clone", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_a_clone", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_clone__LRObject__args, // the arguments
  0, //arguments count
  Props_methods_clone__LRObject__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_clone__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_args[] = 
{
  &Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_arg_key,
  &Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_arg_value,
  &Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_containsInStringArrayVal_INLRString_INLRString_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "containsInStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1i_containsInStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_args, // the arguments
  0, //arguments count
  Props_methods_containsInStringArrayVal_INLRString_INLRString_S_Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_containsInStringArrayVal_INLRString_INLRString_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_containsInStringArrayVal_INLRString_INLRString__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_containsInStringArrayVal_INLRString_INLRString__Z_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_containsInStringArrayVal_INLRString_INLRString__Z_args[] = 
{
  &Props_methods_containsInStringArrayVal_INLRString_INLRString__Z_arg_key,
  &Props_methods_containsInStringArrayVal_INLRString_INLRString__Z_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_containsInStringArrayVal_INLRString_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_containsInStringArrayVal_INLRString_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "containsInStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1j_containsInStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_containsInStringArrayVal_INLRString_INLRString__Z_args, // the arguments
  0, //arguments count
  Props_methods_containsInStringArrayVal_INLRString_INLRString__Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_containsInStringArrayVal_INLRString_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_create_INLRString_INLRDmiObject__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_create_INLRString_INLRDmiObject__V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_create_INLRString_INLRDmiObject__V_args[] = 
{
  &Props_methods_create_INLRString_INLRDmiObject__V_arg_name,
  &Props_methods_create_INLRString_INLRDmiObject__V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_create_INLRString_INLRDmiObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_create_INLRString_INLRDmiObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_create", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_create_INLRString_INLRDmiObject__V_args, // the arguments
  0, //arguments count
  Props_methods_create_INLRString_INLRDmiObject__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_create_INLRString_INLRDmiObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_arg_dumpFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dumpFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_arg_keys = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "keys", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RTreeSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_arg_ident = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ident", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_args[] = 
{
  &Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_arg_dumpFlags,
  &Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_arg_keys,
  &Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_arg_ident,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_dump_IL_acdk_util_RTreeSet_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dump", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1N_dump", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_dump_IL_acdk_util_RTreeSet_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_dump_IL_acdk_util_RTreeSet_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_dump_IL_acdk_util_RTreeSet__V_arg_dumpFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dumpFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_dump_IL_acdk_util_RTreeSet__V_arg_keys = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "keys", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::util::RTreeSet::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_dump_IL_acdk_util_RTreeSet__V_args[] = 
{
  &Props_methods_dump_IL_acdk_util_RTreeSet__V_arg_dumpFlags,
  &Props_methods_dump_IL_acdk_util_RTreeSet__V_arg_keys,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_dump_IL_acdk_util_RTreeSet__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_dump_IL_acdk_util_RTreeSet__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "dump", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1Q_dump", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_dump_IL_acdk_util_RTreeSet__V_args, // the arguments
  0, //arguments count
  Props_methods_dump_IL_acdk_util_RTreeSet__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_dump_IL_acdk_util_RTreeSet__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_dump__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_dump__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_dump__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "dump", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1O_dump", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_dump__V_args, // the arguments
  0, //arguments count
  Props_methods_dump__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_dump__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_dump_I_V_arg_dumpFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dumpFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_dump_I_V_args[] = 
{
  &Props_methods_dump_I_V_arg_dumpFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_dump_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_dump_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "dump", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1P_dump", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_dump_I_V_args, // the arguments
  0, //arguments count
  Props_methods_dump_I_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_dump_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_eval_INLRString_S_LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_eval_INLRString_S_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_eval_INLRString_S_LRString__args[] = 
{
  &Props_methods_eval_INLRString_S_LRString__arg_str,
  &Props_methods_eval_INLRString_S_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_eval_INLRString_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_eval_INLRString_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1E_eval", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_eval_INLRString_S_LRString__args, // the arguments
  0, //arguments count
  Props_methods_eval_INLRString_S_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_eval_INLRString_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_eval_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_eval_INLRString__LRString__args[] = 
{
  &Props_methods_eval_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_eval_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_eval_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1F_eval", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_eval_INLRString__LRString__args, // the arguments
  0, //arguments count
  Props_methods_eval_INLRString__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_eval_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_evalShellExecute_INLRString_S_LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_evalShellExecute_INLRString_S_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_evalShellExecute_INLRString_S_LRString__args[] = 
{
  &Props_methods_evalShellExecute_INLRString_S_LRString__arg_str,
  &Props_methods_evalShellExecute_INLRString_S_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_evalShellExecute_INLRString_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_evalShellExecute_INLRString_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evalShellExecute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1J_evalShellExecute", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_evalShellExecute_INLRString_S_LRString__args, // the arguments
  0, //arguments count
  Props_methods_evalShellExecute_INLRString_S_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_evalShellExecute_INLRString_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_execScript_INLRString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_execScript_INLRString_INLRString__V_arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_execScript_INLRString_INLRString__V_args[] = 
{
  &Props_methods_execScript_INLRString_INLRString__V_arg_str,
  &Props_methods_execScript_INLRString_INLRString__V_arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_execScript_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_execScript_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "execScript", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1I_execScript", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_execScript_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_execScript_INLRString_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_execScript_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_execScript_INLRString_INLRString_S_V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_execScript_INLRString_INLRString_S_V_arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_execScript_INLRString_INLRString_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_execScript_INLRString_INLRString_S_V_args[] = 
{
  &Props_methods_execScript_INLRString_INLRString_S_V_arg_str,
  &Props_methods_execScript_INLRString_INLRString_S_V_arg_filename,
  &Props_methods_execScript_INLRString_INLRString_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_execScript_INLRString_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_execScript_INLRString_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "execScript", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1G_execScript", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_execScript_INLRString_INLRString_S_V_args, // the arguments
  0, //arguments count
  Props_methods_execScript_INLRString_INLRString_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_execScript_INLRString_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_execScript_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_execScript_INLRString__V_args[] = 
{
  &Props_methods_execScript_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_execScript_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_execScript_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "execScript", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1H_execScript", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_execScript_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_execScript_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_execScript_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_findOwnerHeap_INLRString__LRHashMap__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_findOwnerHeap_INLRString__LRHashMap__args[] = 
{
  &Props_methods_findOwnerHeap_INLRString__LRHashMap__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_findOwnerHeap_INLRString__LRHashMap__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_findOwnerHeap_INLRString__LRHashMap_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findOwnerHeap", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RHashMap::clazzInfo(), // return type
  "_I_findOwnerHeap", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_findOwnerHeap_INLRString__LRHashMap__args, // the arguments
  0, //arguments count
  Props_methods_findOwnerHeap_INLRString__LRHashMap__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_findOwnerHeap_INLRString__LRHashMap__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_get_INLRString_S_LRDmiObject__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_get_INLRString_S_LRDmiObject__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_get_INLRString_S_LRDmiObject__args[] = 
{
  &Props_methods_get_INLRString_S_LRDmiObject__arg_name,
  &Props_methods_get_INLRString_S_LRDmiObject__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_get_INLRString_S_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_get_INLRString_S_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_x_get", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_get_INLRString_S_LRDmiObject__args, // the arguments
  0, //arguments count
  Props_methods_get_INLRString_S_LRDmiObject__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_get_INLRString_S_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_get_INLRString__LRDmiObject__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_get_INLRString__LRDmiObject__args[] = 
{
  &Props_methods_get_INLRString__LRDmiObject__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_get_INLRString__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_get_INLRString__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_y_get", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_get_INLRString__LRDmiObject__args, // the arguments
  0, //arguments count
  Props_methods_get_INLRString__LRDmiObject__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_get_INLRString__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getAcdkHome_Z_LRString__arg_throwIfNotFound = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "throwIfNotFound", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getAcdkHome_Z_LRString__args[] = 
{
  &Props_methods_getAcdkHome_Z_LRString__arg_throwIfNotFound,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getAcdkHome_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getAcdkHome_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkHome", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1U_getAcdkHome", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getAcdkHome_Z_LRString__args, // the arguments
  0, //arguments count
  Props_methods_getAcdkHome_Z_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getAcdkHome_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getAcdkHome__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getAcdkHome__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getAcdkHome__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkHome", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1V_getAcdkHome", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getAcdkHome__LRString__args, // the arguments
  0, //arguments count
  Props_methods_getAcdkHome__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getAcdkHome__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getAcdkToolsHome_Z_LRString__arg_throwIfNotFound = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "throwIfNotFound", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getAcdkToolsHome_Z_LRString__args[] = 
{
  &Props_methods_getAcdkToolsHome_Z_LRString__arg_throwIfNotFound,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getAcdkToolsHome_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getAcdkToolsHome_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkToolsHome", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1W_getAcdkToolsHome", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getAcdkToolsHome_Z_LRString__args, // the arguments
  0, //arguments count
  Props_methods_getAcdkToolsHome_Z_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getAcdkToolsHome_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getAcdkToolsHome__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getAcdkToolsHome__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getAcdkToolsHome__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getAcdkToolsHome", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1X_getAcdkToolsHome", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getAcdkToolsHome__LRString__args, // the arguments
  0, //arguments count
  Props_methods_getAcdkToolsHome__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getAcdkToolsHome__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getAllStringArrayVal_INLRString_S_LRStringArray__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getAllStringArrayVal_INLRString_S_LRStringArray__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getAllStringArrayVal_INLRString_S_LRStringArray__args[] = 
{
  &Props_methods_getAllStringArrayVal_INLRString_S_LRStringArray__arg_key,
  &Props_methods_getAllStringArrayVal_INLRString_S_LRStringArray__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getAllStringArrayVal_INLRString_S_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getAllStringArrayVal_INLRString_S_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_1g_getAllStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getAllStringArrayVal_INLRString_S_LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_getAllStringArrayVal_INLRString_S_LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getAllStringArrayVal_INLRString_S_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getAllStringArrayVal_INLRString__LRStringArray__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getAllStringArrayVal_INLRString__LRStringArray__args[] = 
{
  &Props_methods_getAllStringArrayVal_INLRString__LRStringArray__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getAllStringArrayVal_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getAllStringArrayVal_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_1h_getAllStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getAllStringArrayVal_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_getAllStringArrayVal_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getAllStringArrayVal_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getAllStringVals_INLRString__LRStringArray__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getAllStringVals_INLRString__LRStringArray__args[] = 
{
  &Props_methods_getAllStringVals_INLRString__LRStringArray__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getAllStringVals_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getAllStringVals_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllStringVals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_1M_getAllStringVals", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getAllStringVals_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_getAllStringVals_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getAllStringVals_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getAllStringVals_INLRString_S_LRStringArray__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getAllStringVals_INLRString_S_LRStringArray__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getAllStringVals_INLRString_S_LRStringArray__args[] = 
{
  &Props_methods_getAllStringVals_INLRString_S_LRStringArray__arg_key,
  &Props_methods_getAllStringVals_INLRString_S_LRStringArray__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getAllStringVals_INLRString_S_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getAllStringVals_INLRString_S_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAllStringVals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_1L_getAllStringVals", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getAllStringVals_INLRString_S_LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_getAllStringVals_INLRString_S_LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getAllStringVals_INLRString_S_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getBoolVal_INLRString_S_Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getBoolVal_INLRString_S_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getBoolVal_INLRString_S_Z_args[] = 
{
  &Props_methods_getBoolVal_INLRString_S_Z_arg_key,
  &Props_methods_getBoolVal_INLRString_S_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getBoolVal_INLRString_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getBoolVal_INLRString_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1m_getBoolVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getBoolVal_INLRString_S_Z_args, // the arguments
  0, //arguments count
  Props_methods_getBoolVal_INLRString_S_Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getBoolVal_INLRString_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getBoolVal_INLRString__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getBoolVal_INLRString__Z_args[] = 
{
  &Props_methods_getBoolVal_INLRString__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getBoolVal_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getBoolVal_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1n_getBoolVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getBoolVal_INLRString__Z_args, // the arguments
  0, //arguments count
  Props_methods_getBoolVal_INLRString__Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getBoolVal_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getCastFlags__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getCastFlags__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getCastFlags__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCastFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_k_getCastFlags", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getCastFlags__S_args, // the arguments
  0, //arguments count
  Props_methods_getCastFlags__S_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getCastFlags__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getDefaultFlags__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getDefaultFlags__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getDefaultFlags__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDefaultFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_i_getDefaultFlags", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getDefaultFlags__S_args, // the arguments
  0, //arguments count
  Props_methods_getDefaultFlags__S_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getDefaultFlags__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getDoubleVal_INLRString_S_D_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getDoubleVal_INLRString_S_D_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getDoubleVal_INLRString_S_D_args[] = 
{
  &Props_methods_getDoubleVal_INLRString_S_D_arg_key,
  &Props_methods_getDoubleVal_INLRString_S_D_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getDoubleVal_INLRString_S_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getDoubleVal_INLRString_S_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDoubleVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_1u_getDoubleVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getDoubleVal_INLRString_S_D_args, // the arguments
  0, //arguments count
  Props_methods_getDoubleVal_INLRString_S_D_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getDoubleVal_INLRString_S_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getDoubleVal_INLRString__D_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getDoubleVal_INLRString__D_args[] = 
{
  &Props_methods_getDoubleVal_INLRString__D_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getDoubleVal_INLRString__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getDoubleVal_INLRString__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getDoubleVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_1v_getDoubleVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getDoubleVal_INLRString__D_args, // the arguments
  0, //arguments count
  Props_methods_getDoubleVal_INLRString__D_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getDoubleVal_INLRString__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getEvaluatedStringVal_INLRString_S_LRString__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getEvaluatedStringVal_INLRString_S_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getEvaluatedStringVal_INLRString_S_LRString__args[] = 
{
  &Props_methods_getEvaluatedStringVal_INLRString_S_LRString__arg_name,
  &Props_methods_getEvaluatedStringVal_INLRString_S_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getEvaluatedStringVal_INLRString_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getEvaluatedStringVal_INLRString_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEvaluatedStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_L_getEvaluatedStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getEvaluatedStringVal_INLRString_S_LRString__args, // the arguments
  0, //arguments count
  Props_methods_getEvaluatedStringVal_INLRString_S_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getEvaluatedStringVal_INLRString_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getEvaluatedStringVal_INLRString__LRString__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getEvaluatedStringVal_INLRString__LRString__args[] = 
{
  &Props_methods_getEvaluatedStringVal_INLRString__LRString__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getEvaluatedStringVal_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getEvaluatedStringVal_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getEvaluatedStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_M_getEvaluatedStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getEvaluatedStringVal_INLRString__LRString__args, // the arguments
  0, //arguments count
  Props_methods_getEvaluatedStringVal_INLRString__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getEvaluatedStringVal_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getIntVal_INLRString_S_I_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getIntVal_INLRString_S_I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getIntVal_INLRString_S_I_args[] = 
{
  &Props_methods_getIntVal_INLRString_S_I_arg_key,
  &Props_methods_getIntVal_INLRString_S_I_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getIntVal_INLRString_S_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getIntVal_INLRString_S_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIntVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1q_getIntVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getIntVal_INLRString_S_I_args, // the arguments
  0, //arguments count
  Props_methods_getIntVal_INLRString_S_I_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getIntVal_INLRString_S_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getIntVal_INLRString__I_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getIntVal_INLRString__I_args[] = 
{
  &Props_methods_getIntVal_INLRString__I_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getIntVal_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getIntVal_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getIntVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1r_getIntVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getIntVal_INLRString__I_args, // the arguments
  0, //arguments count
  Props_methods_getIntVal_INLRString__I_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getIntVal_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getKeys_S_LRStringArray__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getKeys_S_LRStringArray__args[] = 
{
  &Props_methods_getKeys_S_LRStringArray__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getKeys_S_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getKeys_S_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_t_getKeys", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getKeys_S_LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_getKeys_S_LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getKeys_S_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getKeys__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getKeys__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getKeys__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getKeys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_u_getKeys", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getKeys__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_getKeys__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getKeys__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_getName", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Props_methods_getName__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getObjectVal_INLRString_S_LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getObjectVal_INLRString_S_LRObject__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getObjectVal_INLRString_S_LRObject__args[] = 
{
  &Props_methods_getObjectVal_INLRString_S_LRObject__arg_key,
  &Props_methods_getObjectVal_INLRString_S_LRObject__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getObjectVal_INLRString_S_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getObjectVal_INLRString_S_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_10_getObjectVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getObjectVal_INLRString_S_LRObject__args, // the arguments
  0, //arguments count
  Props_methods_getObjectVal_INLRString_S_LRObject__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getObjectVal_INLRString_S_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getObjectVal_INLRString__LRObject__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getObjectVal_INLRString__LRObject__args[] = 
{
  &Props_methods_getObjectVal_INLRString__LRObject__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getObjectVal_INLRString__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getObjectVal_INLRString__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getObjectVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_11_getObjectVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getObjectVal_INLRString__LRObject__args, // the arguments
  0, //arguments count
  Props_methods_getObjectVal_INLRString__LRObject__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getObjectVal_INLRString__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getParentProps__LRProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getParentProps__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getParentProps__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_o_getParentProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getParentProps__LRProps__args, // the arguments
  0, //arguments count
  Props_methods_getParentProps__LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getParentProps__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getParentsProps__LRPropsArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getParentsProps__LRPropsArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getParentsProps__LRPropsArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentsProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPropsArray::clazzInfo(), // return type
  "_p_getParentsProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getParentsProps__LRPropsArray__args, // the arguments
  0, //arguments count
  Props_methods_getParentsProps__LRPropsArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getParentsProps__LRPropsArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getProps_INLRString_S_LRProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getProps_INLRString_S_LRProps__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getProps_INLRString_S_LRProps__args[] = 
{
  &Props_methods_getProps_INLRString_S_LRProps__arg_name,
  &Props_methods_getProps_INLRString_S_LRProps__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getProps_INLRString_S_LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getProps_INLRString_S_LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_1y_getProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getProps_INLRString_S_LRProps__args, // the arguments
  0, //arguments count
  Props_methods_getProps_INLRString_S_LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getProps_INLRString_S_LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getProps_INLRString__LRProps__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getProps_INLRString__LRProps__args[] = 
{
  &Props_methods_getProps_INLRString__LRProps__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getProps_INLRString__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getProps_INLRString__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_1z_getProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getProps_INLRString__LRProps__args, // the arguments
  0, //arguments count
  Props_methods_getProps_INLRString__LRProps__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getProps_INLRString__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getQuotedStringVal_INLRString_S_LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getQuotedStringVal_INLRString_S_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getQuotedStringVal_INLRString_S_LRString__args[] = 
{
  &Props_methods_getQuotedStringVal_INLRString_S_LRString__arg_key,
  &Props_methods_getQuotedStringVal_INLRString_S_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getQuotedStringVal_INLRString_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getQuotedStringVal_INLRString_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getQuotedStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_14_getQuotedStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getQuotedStringVal_INLRString_S_LRString__args, // the arguments
  0, //arguments count
  Props_methods_getQuotedStringVal_INLRString_S_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getQuotedStringVal_INLRString_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getQuotedStringVal_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getQuotedStringVal_INLRString__LRString__args[] = 
{
  &Props_methods_getQuotedStringVal_INLRString__LRString__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getQuotedStringVal_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getQuotedStringVal_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getQuotedStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_15_getQuotedStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getQuotedStringVal_INLRString__LRString__args, // the arguments
  0, //arguments count
  Props_methods_getQuotedStringVal_INLRString__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getQuotedStringVal_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getSingleThreaded__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getSingleThreaded__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getSingleThreaded__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSingleThreaded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_getSingleThreaded", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getSingleThreaded__Z_args, // the arguments
  0, //arguments count
  Props_methods_getSingleThreaded__Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getSingleThreaded__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getStringArrayVal_INLRString_S_LRStringArray__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getStringArrayVal_INLRString_S_LRStringArray__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getStringArrayVal_INLRString_S_LRStringArray__args[] = 
{
  &Props_methods_getStringArrayVal_INLRString_S_LRStringArray__arg_key,
  &Props_methods_getStringArrayVal_INLRString_S_LRStringArray__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getStringArrayVal_INLRString_S_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getStringArrayVal_INLRString_S_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_1e_getStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getStringArrayVal_INLRString_S_LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_getStringArrayVal_INLRString_S_LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getStringArrayVal_INLRString_S_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getStringArrayVal_INLRString__LRStringArray__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getStringArrayVal_INLRString__LRStringArray__args[] = 
{
  &Props_methods_getStringArrayVal_INLRString__LRStringArray__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getStringArrayVal_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getStringArrayVal_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_1f_getStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getStringArrayVal_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_getStringArrayVal_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getStringArrayVal_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getStringVal_INLRString_S_LRString__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getStringVal_INLRString_S_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getStringVal_INLRString_S_LRString__args[] = 
{
  &Props_methods_getStringVal_INLRString_S_LRString__arg_name,
  &Props_methods_getStringVal_INLRString_S_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getStringVal_INLRString_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getStringVal_INLRString_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_J_getStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getStringVal_INLRString_S_LRString__args, // the arguments
  0, //arguments count
  Props_methods_getStringVal_INLRString_S_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getStringVal_INLRString_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getStringVal_INLRString__LRString__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getStringVal_INLRString__LRString__args[] = 
{
  &Props_methods_getStringVal_INLRString__LRString__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getStringVal_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getStringVal_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_K_getStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getStringVal_INLRString__LRString__args, // the arguments
  0, //arguments count
  Props_methods_getStringVal_INLRString__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getStringVal_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getUnquotedStringVal_INLRString_S_LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getUnquotedStringVal_INLRString_S_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getUnquotedStringVal_INLRString_S_LRString__args[] = 
{
  &Props_methods_getUnquotedStringVal_INLRString_S_LRString__arg_key,
  &Props_methods_getUnquotedStringVal_INLRString_S_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getUnquotedStringVal_INLRString_S_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getUnquotedStringVal_INLRString_S_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnquotedStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_16_getUnquotedStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getUnquotedStringVal_INLRString_S_LRString__args, // the arguments
  0, //arguments count
  Props_methods_getUnquotedStringVal_INLRString_S_LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getUnquotedStringVal_INLRString_S_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_getUnquotedStringVal_INLRString__LRString__arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_getUnquotedStringVal_INLRString__LRString__args[] = 
{
  &Props_methods_getUnquotedStringVal_INLRString__LRString__arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_getUnquotedStringVal_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_getUnquotedStringVal_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnquotedStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_17_getUnquotedStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_getUnquotedStringVal_INLRString__LRString__args, // the arguments
  0, //arguments count
  Props_methods_getUnquotedStringVal_INLRString__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_getUnquotedStringVal_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_hasParentProps_INLRProps__Z_arg_nparent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nparent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_hasParentProps_INLRProps__Z_args[] = 
{
  &Props_methods_hasParentProps_INLRProps__Z_arg_nparent,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_hasParentProps_INLRProps__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_hasParentProps_INLRProps__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasParentProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_hasParentProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_hasParentProps_INLRProps__Z_args, // the arguments
  0, //arguments count
  Props_methods_hasParentProps_INLRProps__Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_hasParentProps_INLRProps__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_hasValue_INLRString_S_Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_hasValue_INLRString_S_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_hasValue_INLRString_S_Z_args[] = 
{
  &Props_methods_hasValue_INLRString_S_Z_arg_key,
  &Props_methods_hasValue_INLRString_S_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_hasValue_INLRString_S_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_hasValue_INLRString_S_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hasValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_hasValue", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_hasValue_INLRString_S_Z_args, // the arguments
  0, //arguments count
  Props_methods_hasValue_INLRString_S_Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_hasValue_INLRString_S_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_hasValue_INLRString__Z_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_hasValue_INLRString__Z_args[] = 
{
  &Props_methods_hasValue_INLRString__Z_arg_key,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_hasValue_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_hasValue_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "hasValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_hasValue", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_hasValue_INLRString__Z_args, // the arguments
  0, //arguments count
  Props_methods_hasValue_INLRString__Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_hasValue_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_importNameSpace_INLRString__Z_arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_importNameSpace_INLRString__Z_args[] = 
{
  &Props_methods_importNameSpace_INLRString__Z_arg_prefix,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_importNameSpace_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_importNameSpace_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "importNameSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1K_importNameSpace", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_importNameSpace_INLRString__Z_args, // the arguments
  0, //arguments count
  Props_methods_importNameSpace_INLRString__Z_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_importNameSpace_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_keys__Lacdk_util_RIterator__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_keys__Lacdk_util_RIterator__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_keys__Lacdk_util_RIterator_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "keys", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::util::RIterator::clazzInfo(), // return type
  "_F_keys", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_keys__Lacdk_util_RIterator__args, // the arguments
  0, //arguments count
  Props_methods_keys__Lacdk_util_RIterator__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_keys__Lacdk_util_RIterator__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_lock__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_lock__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_lock__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lock", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_lock", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_lock__V_args, // the arguments
  0, //arguments count
  Props_methods_lock__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_lock__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s4", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s5 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s5", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s6 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s6", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s7 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s7", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s8 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s8", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__args[] = 
{
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s5,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s6,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s7,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s8,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_P_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_Q_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString__LRStringArray__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray_INLRString__LRStringArray__args[] = 
{
  &Props_methods_makeStringArray_INLRString__LRStringArray__arg_s1,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_R_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString__LRStringArray__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString__LRStringArray__arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray_INLRString_INLRString__LRStringArray__args[] = 
{
  &Props_methods_makeStringArray_INLRString_INLRString__LRStringArray__arg_s1,
  &Props_methods_makeStringArray_INLRString_INLRString__LRStringArray__arg_s2,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray_INLRString_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray_INLRString_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_S_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray_INLRString_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray_INLRString_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray_INLRString_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__arg_s3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__args[] = 
{
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__arg_s1,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__arg_s2,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__arg_s3,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray_INLRString_INLRString_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_T_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray_INLRString_INLRString_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s4", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__args[] = 
{
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_U_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s4", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s5 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s5", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__args[] = 
{
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s5,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_V_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s4", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s5 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s5", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s6 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s6", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__args[] = 
{
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s5,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s6,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_W_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s3", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s4", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s5 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s5", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s6 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s6", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s7 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "s7", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__args[] = 
{
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s1,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s2,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s3,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s4,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s5,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s6,
  &Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__arg_s7,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "makeStringArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_X_makeStringArray", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__args, // the arguments
  0, //arguments count
  Props_methods_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_merge_INLRProps_S_V_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_merge_INLRProps_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_merge_INLRProps_S_V_args[] = 
{
  &Props_methods_merge_INLRProps_S_V_arg_other,
  &Props_methods_merge_INLRProps_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_merge_INLRProps_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_merge_INLRProps_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "merge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1C_merge", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_merge_INLRProps_S_V_args, // the arguments
  0, //arguments count
  Props_methods_merge_INLRProps_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_merge_INLRProps_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_merge_INLRProps__V_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_merge_INLRProps__V_args[] = 
{
  &Props_methods_merge_INLRProps__V_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_merge_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_merge_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "merge", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1D_merge", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_merge_INLRProps__V_args, // the arguments
  0, //arguments count
  Props_methods_merge_INLRProps__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_merge_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_removeListener_INLRPropsChangeListener__V_arg_listener = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "listener", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPropsChangeListener::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_removeListener_INLRPropsChangeListener__V_args[] = 
{
  &Props_methods_removeListener_INLRPropsChangeListener__V_arg_listener,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_removeListener_INLRPropsChangeListener__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_removeListener_INLRPropsChangeListener__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeListener", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1Z_removeListener", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_removeListener_INLRPropsChangeListener__V_args, // the arguments
  0, //arguments count
  Props_methods_removeListener_INLRPropsChangeListener__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_removeListener_INLRPropsChangeListener__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_removeParentProps_INLRProps__V_arg_nparent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nparent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_removeParentProps_INLRProps__V_args[] = 
{
  &Props_methods_removeParentProps_INLRProps__V_arg_nparent,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_removeParentProps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_removeParentProps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "removeParentProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_r_removeParentProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_removeParentProps_INLRProps__V_args, // the arguments
  0, //arguments count
  Props_methods_removeParentProps_INLRProps__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_removeParentProps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_reset", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_reset__V_args, // the arguments
  0, //arguments count
  Props_methods_reset__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_set_INLRString_INLRDmiObject_S_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_set_INLRString_INLRDmiObject_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_set_INLRString_INLRDmiObject_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_set_INLRString_INLRDmiObject_S_V_args[] = 
{
  &Props_methods_set_INLRString_INLRDmiObject_S_V_arg_name,
  &Props_methods_set_INLRString_INLRDmiObject_S_V_arg_value,
  &Props_methods_set_INLRString_INLRDmiObject_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_set_INLRString_INLRDmiObject_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_set_INLRString_INLRDmiObject_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_set", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_set_INLRString_INLRDmiObject_S_V_args, // the arguments
  0, //arguments count
  Props_methods_set_INLRString_INLRDmiObject_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_set_INLRString_INLRDmiObject_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_set_INLRString_INLRDmiObject__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_set_INLRString_INLRDmiObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_set_INLRString_INLRDmiObject__V_args[] = 
{
  &Props_methods_set_INLRString_INLRDmiObject__V_arg_name,
  &Props_methods_set_INLRString_INLRDmiObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_set_INLRString_INLRDmiObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_set_INLRString_INLRDmiObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_set", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_set_INLRString_INLRDmiObject__V_args, // the arguments
  0, //arguments count
  Props_methods_set_INLRString_INLRDmiObject__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_set_INLRString_INLRDmiObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setBoolVal_INLRString_ZS_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setBoolVal_INLRString_ZS_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setBoolVal_INLRString_ZS_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setBoolVal_INLRString_ZS_V_args[] = 
{
  &Props_methods_setBoolVal_INLRString_ZS_V_arg_key,
  &Props_methods_setBoolVal_INLRString_ZS_V_arg_val,
  &Props_methods_setBoolVal_INLRString_ZS_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setBoolVal_INLRString_ZS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setBoolVal_INLRString_ZS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBoolVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1o_setBoolVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setBoolVal_INLRString_ZS_V_args, // the arguments
  0, //arguments count
  Props_methods_setBoolVal_INLRString_ZS_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setBoolVal_INLRString_ZS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setBoolVal_INLRString_Z_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setBoolVal_INLRString_Z_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setBoolVal_INLRString_Z_V_args[] = 
{
  &Props_methods_setBoolVal_INLRString_Z_V_arg_key,
  &Props_methods_setBoolVal_INLRString_Z_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setBoolVal_INLRString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setBoolVal_INLRString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setBoolVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1p_setBoolVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setBoolVal_INLRString_Z_V_args, // the arguments
  0, //arguments count
  Props_methods_setBoolVal_INLRString_Z_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setBoolVal_INLRString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setCastFlags_S_V_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setCastFlags_S_V_args[] = 
{
  &Props_methods_setCastFlags_S_V_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setCastFlags_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setCastFlags_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCastFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_setCastFlags", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setCastFlags_S_V_args, // the arguments
  0, //arguments count
  Props_methods_setCastFlags_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setCastFlags_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setDefaultFlags_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setDefaultFlags_S_V_args[] = 
{
  &Props_methods_setDefaultFlags_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setDefaultFlags_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setDefaultFlags_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDefaultFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_setDefaultFlags", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setDefaultFlags_S_V_args, // the arguments
  0, //arguments count
  Props_methods_setDefaultFlags_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setDefaultFlags_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setDoubleVal_INLRString_DS_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setDoubleVal_INLRString_DS_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setDoubleVal_INLRString_DS_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setDoubleVal_INLRString_DS_V_args[] = 
{
  &Props_methods_setDoubleVal_INLRString_DS_V_arg_key,
  &Props_methods_setDoubleVal_INLRString_DS_V_arg_val,
  &Props_methods_setDoubleVal_INLRString_DS_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setDoubleVal_INLRString_DS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setDoubleVal_INLRString_DS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDoubleVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1w_setDoubleVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setDoubleVal_INLRString_DS_V_args, // the arguments
  0, //arguments count
  Props_methods_setDoubleVal_INLRString_DS_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setDoubleVal_INLRString_DS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setDoubleVal_INLRString_D_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setDoubleVal_INLRString_D_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setDoubleVal_INLRString_D_V_args[] = 
{
  &Props_methods_setDoubleVal_INLRString_D_V_arg_key,
  &Props_methods_setDoubleVal_INLRString_D_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setDoubleVal_INLRString_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setDoubleVal_INLRString_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setDoubleVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1x_setDoubleVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setDoubleVal_INLRString_D_V_args, // the arguments
  0, //arguments count
  Props_methods_setDoubleVal_INLRString_D_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setDoubleVal_INLRString_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setIntVal_INLRString_IS_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setIntVal_INLRString_IS_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setIntVal_INLRString_IS_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setIntVal_INLRString_IS_V_args[] = 
{
  &Props_methods_setIntVal_INLRString_IS_V_arg_key,
  &Props_methods_setIntVal_INLRString_IS_V_arg_val,
  &Props_methods_setIntVal_INLRString_IS_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setIntVal_INLRString_IS_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setIntVal_INLRString_IS_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setIntVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1s_setIntVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setIntVal_INLRString_IS_V_args, // the arguments
  0, //arguments count
  Props_methods_setIntVal_INLRString_IS_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setIntVal_INLRString_IS_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setIntVal_INLRString_I_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setIntVal_INLRString_I_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setIntVal_INLRString_I_V_args[] = 
{
  &Props_methods_setIntVal_INLRString_I_V_arg_key,
  &Props_methods_setIntVal_INLRString_I_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setIntVal_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setIntVal_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setIntVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1t_setIntVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setIntVal_INLRString_I_V_args, // the arguments
  0, //arguments count
  Props_methods_setIntVal_INLRString_I_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setIntVal_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setName_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setName_INLRString__V_args[] = 
{
  &Props_methods_setName_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setName_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setName_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_setName", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setName_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_setName_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setName_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setObjectVal_INLRString_INLRObject_S_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setObjectVal_INLRString_INLRObject_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setObjectVal_INLRString_INLRObject_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setObjectVal_INLRString_INLRObject_S_V_args[] = 
{
  &Props_methods_setObjectVal_INLRString_INLRObject_S_V_arg_key,
  &Props_methods_setObjectVal_INLRString_INLRObject_S_V_arg_value,
  &Props_methods_setObjectVal_INLRString_INLRObject_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setObjectVal_INLRString_INLRObject_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setObjectVal_INLRString_INLRObject_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setObjectVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Y_setObjectVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setObjectVal_INLRString_INLRObject_S_V_args, // the arguments
  0, //arguments count
  Props_methods_setObjectVal_INLRString_INLRObject_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setObjectVal_INLRString_INLRObject_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setObjectVal_INLRString_INLRObject__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setObjectVal_INLRString_INLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setObjectVal_INLRString_INLRObject__V_args[] = 
{
  &Props_methods_setObjectVal_INLRString_INLRObject__V_arg_key,
  &Props_methods_setObjectVal_INLRString_INLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setObjectVal_INLRString_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setObjectVal_INLRString_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setObjectVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_Z_setObjectVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setObjectVal_INLRString_INLRObject__V_args, // the arguments
  0, //arguments count
  Props_methods_setObjectVal_INLRString_INLRObject__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setObjectVal_INLRString_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setProps_INLRString_INLRProps_S_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setProps_INLRString_INLRProps_S_V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setProps_INLRString_INLRProps_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setProps_INLRString_INLRProps_S_V_args[] = 
{
  &Props_methods_setProps_INLRString_INLRProps_S_V_arg_name,
  &Props_methods_setProps_INLRString_INLRProps_S_V_arg_props,
  &Props_methods_setProps_INLRString_INLRProps_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setProps_INLRString_INLRProps_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setProps_INLRString_INLRProps_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1A_setProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setProps_INLRString_INLRProps_S_V_args, // the arguments
  0, //arguments count
  Props_methods_setProps_INLRString_INLRProps_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setProps_INLRString_INLRProps_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setProps_INLRString_INLRProps__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setProps_INLRString_INLRProps__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setProps_INLRString_INLRProps__V_args[] = 
{
  &Props_methods_setProps_INLRString_INLRProps__V_arg_name,
  &Props_methods_setProps_INLRString_INLRProps__V_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setProps_INLRString_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setProps_INLRString_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1B_setProps", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setProps_INLRString_INLRProps__V_args, // the arguments
  0, //arguments count
  Props_methods_setProps_INLRString_INLRProps__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setProps_INLRString_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_args[] = 
{
  &Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_arg_key,
  &Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_arg_value,
  &Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setQuotedStringVal_INLRString_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setQuotedStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_12_setQuotedStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_args, // the arguments
  0, //arguments count
  Props_methods_setQuotedStringVal_INLRString_INLRString_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setQuotedStringVal_INLRString_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setQuotedStringVal_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setQuotedStringVal_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setQuotedStringVal_INLRString_INLRString__V_args[] = 
{
  &Props_methods_setQuotedStringVal_INLRString_INLRString__V_arg_key,
  &Props_methods_setQuotedStringVal_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setQuotedStringVal_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setQuotedStringVal_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setQuotedStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_13_setQuotedStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setQuotedStringVal_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_setQuotedStringVal_INLRString_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setQuotedStringVal_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setSingleThreaded_Z_V_arg_singleThreaded = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "singleThreaded", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setSingleThreaded_Z_V_args[] = 
{
  &Props_methods_setSingleThreaded_Z_V_arg_singleThreaded,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setSingleThreaded_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setSingleThreaded_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setSingleThreaded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_setSingleThreaded", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setSingleThreaded_Z_V_args, // the arguments
  0, //arguments count
  Props_methods_setSingleThreaded_Z_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setSingleThreaded_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_args[] = 
{
  &Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_arg_key,
  &Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_arg_value,
  &Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setStringArrayVal_INLRString_INLRStringArray_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1a_setStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_args, // the arguments
  0, //arguments count
  Props_methods_setStringArrayVal_INLRString_INLRStringArray_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setStringArrayVal_INLRString_INLRStringArray_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringArrayVal_INLRString_INLRStringArray__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringArrayVal_INLRString_INLRStringArray__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setStringArrayVal_INLRString_INLRStringArray__V_args[] = 
{
  &Props_methods_setStringArrayVal_INLRString_INLRStringArray__V_arg_key,
  &Props_methods_setStringArrayVal_INLRString_INLRStringArray__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setStringArrayVal_INLRString_INLRStringArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setStringArrayVal_INLRString_INLRStringArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringArrayVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1b_setStringArrayVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setStringArrayVal_INLRString_INLRStringArray__V_args, // the arguments
  0, //arguments count
  Props_methods_setStringArrayVal_INLRString_INLRStringArray__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setStringArrayVal_INLRString_INLRStringArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringVal_INLRString_INLRString_S_V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringVal_INLRString_INLRString_S_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringVal_INLRString_INLRString_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setStringVal_INLRString_INLRString_S_V_args[] = 
{
  &Props_methods_setStringVal_INLRString_INLRString_S_V_arg_key,
  &Props_methods_setStringVal_INLRString_INLRString_S_V_arg_value,
  &Props_methods_setStringVal_INLRString_INLRString_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setStringVal_INLRString_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setStringVal_INLRString_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_N_setStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setStringVal_INLRString_INLRString_S_V_args, // the arguments
  0, //arguments count
  Props_methods_setStringVal_INLRString_INLRString_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setStringVal_INLRString_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringVal_INLRString_INLRString__V_arg_key = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "key", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_setStringVal_INLRString_INLRString__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_setStringVal_INLRString_INLRString__V_args[] = 
{
  &Props_methods_setStringVal_INLRString_INLRString__V_arg_key,
  &Props_methods_setStringVal_INLRString_INLRString__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_setStringVal_INLRString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_setStringVal_INLRString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringVal", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_O_setStringVal", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_setStringVal_INLRString_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_setStringVal_INLRString_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_setStringVal_INLRString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_size_S_I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_size_S_I_args[] = 
{
  &Props_methods_size_S_I_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_size_S_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_size_S_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_size", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_size_S_I_args, // the arguments
  0, //arguments count
  Props_methods_size_S_I_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_size_S_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_n_size", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_size__I_args, // the arguments
  0, //arguments count
  Props_methods_size__I_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_toString", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Props_methods_toString__LRString__exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_unlock__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_unlock__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_unlock__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unlock", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_unlock", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_unlock__V_args, // the arguments
  0, //arguments count
  Props_methods_unlock__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_unlock__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_unset_INLRString_S_V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_unset_INLRString_S_V_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_unset_INLRString_S_V_args[] = 
{
  &Props_methods_unset_INLRString_S_V_arg_name,
  &Props_methods_unset_INLRString_S_V_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_unset_INLRString_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_unset_INLRString_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_unset", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_unset_INLRString_S_V_args, // the arguments
  0, //arguments count
  Props_methods_unset_INLRString_S_V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_unset_INLRString_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Props_methods_unset_INLRString__V_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Props_methods_unset_INLRString__V_args[] = 
{
  &Props_methods_unset_INLRString__V_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Props_methods_unset_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Props_method_unset_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "unset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_unset", // alternative name of method
  -1, // altlabelHashCode
  Props_methods_unset_INLRString__V_args, // the arguments
  0, //arguments count
  Props_methods_unset_INLRString__V_exceptions, // the declared exceptions
  Props_MetainfoWrapper::Props_method_unset_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Props_methods[] = 
{
  &Props_method_GetClass__L_acdk_lang_RClass_,
  &Props_method_Props_INLRString_SINLRProps_Z_LRProps_,
  &Props_method_Props_INLRString__LRProps_,
  &Props_method_Props_INLRString_S_LRProps_,
  &Props_method_Props_INLRString_SINLRProps__LRProps_,
  &Props_method_Props_SINLRProps_Z_LRProps_,
  &Props_method_Props__LRProps_,
  &Props_method_Props_S_LRProps_,
  &Props_method_Props_SINLRProps__LRProps_,
  &Props_method_Props_INLacdk_lang_dmi_RDmiNamedArgArray_S_LRProps_,
  &Props_method_Props_INLacdk_lang_dmi_RDmiNamedArgArray__LRProps_,
  &Props_method__get_INLRString_S_LRDmiObject_,
  &Props_method__getKeys_INLRStringArray__V,
  &Props_method__importNameSpace_INLRString_INLRProps__Z,
  &Props_method__init__V,
  &Props_method__readParent_S_Z,
  &Props_method__set_INLRString_INLRDmiObject_SZ_V,
  &Props_method__set_INLRString_INLRDmiObject_S_V,
  &Props_method__warnRead_S_Z,
  &Props_method__warnWrite_S_Z,
  &Props_method__writeParent_S_Z,
  &Props_method_addListener_INLRPropsChangeListener__V,
  &Props_method_addParentProps_INLRProps__V,
  &Props_method_appendObjectList_INLRString_INLRObject_S_V,
  &Props_method_appendObjectList_INLRString_INLRObject__V,
  &Props_method_appendStringArrayVal_INLRString_INLRString_S_V,
  &Props_method_appendStringArrayVal_INLRString_INLRString__V,
  &Props_method_appendStringVal_INLRString_INLRString_INLRString_S_V,
  &Props_method_appendStringVal_INLRString_INLRString_INLRString__V,
  &Props_method_asCfgScriptLiteral_INLRString_INLRString_S_LRString_,
  &Props_method_asCfgScriptLiteral_INLRString__LRString_,
  &Props_method_asCfgScriptLiteral_INLRString_INLRString__LRString_,
  &Props_method_assign_INLRString_INLRDmiObject_S_V,
  &Props_method_assign_INLRString_INLRDmiObject__V,
  &Props_method_clone__LRObject_,
  &Props_method_containsInStringArrayVal_INLRString_INLRString_S_Z,
  &Props_method_containsInStringArrayVal_INLRString_INLRString__Z,
  &Props_method_create_INLRString_INLRDmiObject__V,
  &Props_method_dump_IL_acdk_util_RTreeSet_INLRString__V,
  &Props_method_dump_IL_acdk_util_RTreeSet__V,
  &Props_method_dump__V,
  &Props_method_dump_I_V,
  &Props_method_eval_INLRString_S_LRString_,
  &Props_method_eval_INLRString__LRString_,
  &Props_method_evalShellExecute_INLRString_S_LRString_,
  &Props_method_execScript_INLRString_INLRString__V,
  &Props_method_execScript_INLRString_INLRString_S_V,
  &Props_method_execScript_INLRString__V,
  &Props_method_findOwnerHeap_INLRString__LRHashMap_,
  &Props_method_get_INLRString_S_LRDmiObject_,
  &Props_method_get_INLRString__LRDmiObject_,
  &Props_method_getAcdkHome_Z_LRString_,
  &Props_method_getAcdkHome__LRString_,
  &Props_method_getAcdkToolsHome_Z_LRString_,
  &Props_method_getAcdkToolsHome__LRString_,
  &Props_method_getAllStringArrayVal_INLRString_S_LRStringArray_,
  &Props_method_getAllStringArrayVal_INLRString__LRStringArray_,
  &Props_method_getAllStringVals_INLRString__LRStringArray_,
  &Props_method_getAllStringVals_INLRString_S_LRStringArray_,
  &Props_method_getBoolVal_INLRString_S_Z,
  &Props_method_getBoolVal_INLRString__Z,
  &Props_method_getCastFlags__S,
  &Props_method_getDefaultFlags__S,
  &Props_method_getDoubleVal_INLRString_S_D,
  &Props_method_getDoubleVal_INLRString__D,
  &Props_method_getEvaluatedStringVal_INLRString_S_LRString_,
  &Props_method_getEvaluatedStringVal_INLRString__LRString_,
  &Props_method_getIntVal_INLRString_S_I,
  &Props_method_getIntVal_INLRString__I,
  &Props_method_getKeys_S_LRStringArray_,
  &Props_method_getKeys__LRStringArray_,
  &Props_method_getName__LRString_,
  &Props_method_getObjectVal_INLRString_S_LRObject_,
  &Props_method_getObjectVal_INLRString__LRObject_,
  &Props_method_getParentProps__LRProps_,
  &Props_method_getParentsProps__LRPropsArray_,
  &Props_method_getProps_INLRString_S_LRProps_,
  &Props_method_getProps_INLRString__LRProps_,
  &Props_method_getQuotedStringVal_INLRString_S_LRString_,
  &Props_method_getQuotedStringVal_INLRString__LRString_,
  &Props_method_getSingleThreaded__Z,
  &Props_method_getStringArrayVal_INLRString_S_LRStringArray_,
  &Props_method_getStringArrayVal_INLRString__LRStringArray_,
  &Props_method_getStringVal_INLRString_S_LRString_,
  &Props_method_getStringVal_INLRString__LRString_,
  &Props_method_getUnquotedStringVal_INLRString_S_LRString_,
  &Props_method_getUnquotedStringVal_INLRString__LRString_,
  &Props_method_hasParentProps_INLRProps__Z,
  &Props_method_hasValue_INLRString_S_Z,
  &Props_method_hasValue_INLRString__Z,
  &Props_method_importNameSpace_INLRString__Z,
  &Props_method_keys__Lacdk_util_RIterator_,
  &Props_method_lock__V,
  &Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray_,
  &Props_method_makeStringArray__LRStringArray_,
  &Props_method_makeStringArray_INLRString__LRStringArray_,
  &Props_method_makeStringArray_INLRString_INLRString__LRStringArray_,
  &Props_method_makeStringArray_INLRString_INLRString_INLRString__LRStringArray_,
  &Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString__LRStringArray_,
  &Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray_,
  &Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray_,
  &Props_method_makeStringArray_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString_INLRString__LRStringArray_,
  &Props_method_merge_INLRProps_S_V,
  &Props_method_merge_INLRProps__V,
  &Props_method_removeListener_INLRPropsChangeListener__V,
  &Props_method_removeParentProps_INLRProps__V,
  &Props_method_reset__V,
  &Props_method_set_INLRString_INLRDmiObject_S_V,
  &Props_method_set_INLRString_INLRDmiObject__V,
  &Props_method_setBoolVal_INLRString_ZS_V,
  &Props_method_setBoolVal_INLRString_Z_V,
  &Props_method_setCastFlags_S_V,
  &Props_method_setDefaultFlags_S_V,
  &Props_method_setDoubleVal_INLRString_DS_V,
  &Props_method_setDoubleVal_INLRString_D_V,
  &Props_method_setIntVal_INLRString_IS_V,
  &Props_method_setIntVal_INLRString_I_V,
  &Props_method_setName_INLRString__V,
  &Props_method_setObjectVal_INLRString_INLRObject_S_V,
  &Props_method_setObjectVal_INLRString_INLRObject__V,
  &Props_method_setProps_INLRString_INLRProps_S_V,
  &Props_method_setProps_INLRString_INLRProps__V,
  &Props_method_setQuotedStringVal_INLRString_INLRString_S_V,
  &Props_method_setQuotedStringVal_INLRString_INLRString__V,
  &Props_method_setSingleThreaded_Z_V,
  &Props_method_setStringArrayVal_INLRString_INLRStringArray_S_V,
  &Props_method_setStringArrayVal_INLRString_INLRStringArray__V,
  &Props_method_setStringVal_INLRString_INLRString_S_V,
  &Props_method_setStringVal_INLRString_INLRString__V,
  &Props_method_size_S_I,
  &Props_method_size__I,
  &Props_method_toString__LRString_,
  &Props_method_unlock__V,
  &Props_method_unset_INLRString_S_V,
  &Props_method_unset_INLRString__V,
  0
};


struct Props_MetaInfoInitializer
{  Props_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Props::clazzInfo();
    ci->fields =  _Props_fields;
    ci->methods =  _Props_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Props_MetaInfoInitializer Props_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


namespace acdk { 
namespace cfgscript { 


//static
::acdk::lang::RObject
Script_create_array(int length)
{
  return new ObjectArrayImpl<RScript>(length);
}

//static
::acdk::lang::RObject
Script_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Script_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_Script_INLRString_INLRScript__LRScript__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Script(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RScript>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_Script_INLRString__LRScript__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new Script(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_assert_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Script::assert(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->assert(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_assertExists_INLRProps_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Script::assertExists(::acdk::lang::dmi::castTo< RProps>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->assertExists(::acdk::lang::dmi::castTo< RProps>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_assertTest_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Script::assertTest(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->assertTest(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_assertTrue_ZINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Script::assertTrue(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->assertTrue(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_breakToDebug__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script::breakToDebug();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_clearStack__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script::clearStack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::createScriptDelegate(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_eval_INLRString_INLRProps_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::eval(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->eval(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_eval_INLRString_INLRProps__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::eval(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    else
      ret = This->eval(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_evalExpr_INLRString_INLRProps_I_LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Script::evalExpr(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        ret = (::acdk::lang::RObject)This->evalExpr(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_evalExpr_INLRString_INLRProps__LRDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Script::evalExpr(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->evalExpr(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_evalTemplate_INLRString_INLRProps_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::evalTemplate(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->evalTemplate(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_evalTemplate_INLRString_INLRProps__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::evalTemplate(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    else
      ret = This->evalTemplate(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::evalTemplate(::acdk::lang::dmi::castTo< acdk::io::RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->evalTemplate(::acdk::lang::dmi::castTo< acdk::io::RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_evalTemplate_INLacdk_io_RFile_INLRProps__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::evalTemplate(::acdk::lang::dmi::castTo< acdk::io::RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    else
      ret = This->evalTemplate(::acdk::lang::dmi::castTo< acdk::io::RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getCastFlags__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::getCastFlags();
    else
      ret = This->getCastFlags();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getCfgScriptCommandLineHelp__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::getCfgScriptCommandLineHelp();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getExecutionStack__LRExecutionStack__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::getExecutionStack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getFileName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Script::getFileName();
    else
        ret = (::acdk::lang::RObject)This->getFileName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getGlobals__LRProps__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Script::getGlobals();
    else
        ret = (::acdk::lang::RObject)This->getGlobals();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getParentScript__LRScript__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Script::getParentScript();
    else
        ret = (::acdk::lang::RObject)This->getParentScript();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getScriptBackTrace_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::getScriptBackTrace(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getScriptBackTrace_ZZ_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::getScriptBackTrace(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getScriptBackTrace__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::getScriptBackTrace();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_getScriptPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Script::getScriptPath();
    else
        ret = (::acdk::lang::RObject)This->getScriptPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_include_INLRString_ZZ_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::include(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    else
      ret = This->include(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_include_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::include(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->include(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_include_INLRString_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::include(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
      ret = This->include(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_initAsEnvProps_INLRProps__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script::initAsEnvProps(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::parseCfgScriptOptions(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc), ::acdk::lang::dmi::castTo< RProps>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_parseCfgScriptOptions_INLRStringArray__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Script::parseCfgScriptOptions(::acdk::lang::dmi::castTo< RStringArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_readEval_INLRProps_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::readEval(::acdk::lang::dmi::castTo< RProps>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->readEval(::acdk::lang::dmi::castTo< RProps>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_readEval_INLRProps__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::readEval(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    else
      ret = This->readEval(::acdk::lang::dmi::castTo< RProps>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_setCastFlags_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Script::setCastFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setCastFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_testAssert_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Script::testAssert(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->testAssert(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_testAssertComment_ZINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Script::testAssertComment(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->testAssertComment(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Script::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_traceOff__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script::traceOff();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_traceOn__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script::traceOn();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_useStrict__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Script::useStrict();
    else
      ret = This->useStrict();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Script_method_useStrict_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Script::useStrict(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->useStrict(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Script_fields__alreadyIncluded_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_alreadyIncluded, flags);
    else
      This->_alreadyIncluded = ::acdk::lang::dmi::castTo< RStringArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Script_fields__castFlags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_castFlags, flags);
    else
      This->_castFlags = ::acdk::lang::dmi::castTo< short>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Script_fields__filename_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filename, flags);
    else
      This->_filename = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Script_fields__parentScript_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parentScript, flags);
    else
      This->_parentScript = ::acdk::lang::dmi::castTo< RScript>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Script_fields__tokenized_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_tokenized, flags);
    else
      This->_tokenized = ::acdk::lang::dmi::castTo< RTokenizedSource>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Script_fields__useStrict_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_useStrict, flags);
    else
      This->_useStrict = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Script_fields_currentProps_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Script* This = dmi_cast<Script>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->currentProps, flags);
    else
      This->currentProps = ::acdk::lang::dmi::castTo< RProps>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Script_fields__alreadyIncluded = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_alreadyIncluded", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(),
  Script_MetainfoWrapper::Script_fields__alreadyIncluded_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Script_fields__castFlags = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_castFlags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(),
  Script_MetainfoWrapper::Script_fields__castFlags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Script_fields__filename = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filename", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Script_MetainfoWrapper::Script_fields__filename_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Script_fields__parentScript = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parentScript", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RScript::clazzInfo(),
  Script_MetainfoWrapper::Script_fields__parentScript_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Script_fields__tokenized = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_tokenized", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RTokenizedSource::clazzInfo(),
  Script_MetainfoWrapper::Script_fields__tokenized_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Script_fields__useStrict = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_useStrict", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  Script_MetainfoWrapper::Script_fields__useStrict_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Script_fields_currentProps = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "currentProps", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(),
  Script_MetainfoWrapper::Script_fields_currentProps_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Script_fields[] = 
{
  &Script_fields__alreadyIncluded,
  &Script_fields__castFlags,
  &Script_fields__filename,
  &Script_fields__parentScript,
  &Script_fields__tokenized,
  &Script_fields__useStrict,
  &Script_fields_currentProps,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_H_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Script_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_Script_INLRString_INLRScript__LRScript__arg_cfgfile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cfgfile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_Script_INLRString_INLRScript__LRScript__arg_parentScript = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "parentScript", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RScript::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_Script_INLRString_INLRScript__LRScript__args[] = 
{
  &Script_methods_Script_INLRString_INLRScript__LRScript__arg_cfgfile,
  &Script_methods_Script_INLRString_INLRScript__LRScript__arg_parentScript,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_Script_INLRString_INLRScript__LRScript__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_Script_INLRString_INLRScript__LRScript_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Script", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Script::clazzInfo(), // return type
  "_0_Script", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_Script_INLRString_INLRScript__LRScript__args, // the arguments
  0, //arguments count
  Script_methods_Script_INLRString_INLRScript__LRScript__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_Script_INLRString_INLRScript__LRScript__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_Script_INLRString__LRScript__arg_cfgfile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cfgfile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_Script_INLRString__LRScript__args[] = 
{
  &Script_methods_Script_INLRString__LRScript__arg_cfgfile,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_Script_INLRString__LRScript__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_Script_INLRString__LRScript_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Script", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Script::clazzInfo(), // return type
  "_1_Script", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_Script_INLRString__LRScript__args, // the arguments
  0, //arguments count
  Script_methods_Script_INLRString__LRScript__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_Script_INLRString__LRScript__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_assert_Z_V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_assert_Z_V_args[] = 
{
  &Script_methods_assert_Z_V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_assert_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_assert_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_assert", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_assert_Z_V_args, // the arguments
  0, //arguments count
  Script_methods_assert_Z_V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_assert_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_assertExists_INLRProps_INLRString__V_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_assertExists_INLRProps_INLRString__V_arg_variable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "variable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_assertExists_INLRProps_INLRString__V_args[] = 
{
  &Script_methods_assertExists_INLRProps_INLRString__V_arg_props,
  &Script_methods_assertExists_INLRProps_INLRString__V_arg_variable,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_assertExists_INLRProps_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_assertExists_INLRProps_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assertExists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_q_assertExists", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_assertExists_INLRProps_INLRString__V_args, // the arguments
  0, //arguments count
  Script_methods_assertExists_INLRProps_INLRString__V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_assertExists_INLRProps_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_assertTest_Z_V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_assertTest_Z_V_args[] = 
{
  &Script_methods_assertTest_Z_V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_assertTest_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_assertTest_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assertTest", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_m_assertTest", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_assertTest_Z_V_args, // the arguments
  0, //arguments count
  Script_methods_assertTest_Z_V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_assertTest_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_assertTrue_ZINLRString__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_assertTrue_ZINLRString__V_arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_assertTrue_ZINLRString__V_args[] = 
{
  &Script_methods_assertTrue_ZINLRString__V_arg_test,
  &Script_methods_assertTrue_ZINLRString__V_arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_assertTrue_ZINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_assertTrue_ZINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "assertTrue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_assertTrue", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_assertTrue_ZINLRString__V_args, // the arguments
  0, //arguments count
  Script_methods_assertTrue_ZINLRString__V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_assertTrue_ZINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_breakToDebug__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_breakToDebug__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_breakToDebug__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "breakToDebug", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_breakToDebug", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_breakToDebug__V_args, // the arguments
  0, //arguments count
  Script_methods_breakToDebug__V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_breakToDebug__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_clearStack__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_clearStack__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_clearStack__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "clearStack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_clearStack", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_clearStack__V_args, // the arguments
  0, //arguments count
  Script_methods_clearStack__V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_clearStack__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate__arg_code = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "code", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate__args[] = 
{
  &Script_methods_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate__arg_code,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createScriptDelegate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiDelegate::clazzInfo(), // return type
  "_G_createScriptDelegate", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate__args, // the arguments
  0, //arguments count
  Script_methods_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_eval_INLRString_INLRProps_I_I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_eval_INLRString_INLRProps_I_I_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_eval_INLRString_INLRProps_I_I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_eval_INLRString_INLRProps_I_I_args[] = 
{
  &Script_methods_eval_INLRString_INLRProps_I_I_arg_text,
  &Script_methods_eval_INLRString_INLRProps_I_I_arg_props,
  &Script_methods_eval_INLRString_INLRProps_I_I_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_eval_INLRString_INLRProps_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_eval_INLRString_INLRProps_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_eval", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_eval_INLRString_INLRProps_I_I_args, // the arguments
  0, //arguments count
  Script_methods_eval_INLRString_INLRProps_I_I_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_eval_INLRString_INLRProps_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_eval_INLRString_INLRProps__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_eval_INLRString_INLRProps__I_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_eval_INLRString_INLRProps__I_args[] = 
{
  &Script_methods_eval_INLRString_INLRProps__I_arg_text,
  &Script_methods_eval_INLRString_INLRProps__I_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_eval_INLRString_INLRProps__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_eval_INLRString_INLRProps__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "eval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_eval", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_eval_INLRString_INLRProps__I_args, // the arguments
  0, //arguments count
  Script_methods_eval_INLRString_INLRProps__I_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_eval_INLRString_INLRProps__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__args[] = 
{
  &Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__arg_text,
  &Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__arg_props,
  &Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_evalExpr_INLRString_INLRProps_I_LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evalExpr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_f_evalExpr", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__args, // the arguments
  0, //arguments count
  Script_methods_evalExpr_INLRString_INLRProps_I_LRDmiObject__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_evalExpr_INLRString_INLRProps_I_LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalExpr_INLRString_INLRProps__LRDmiObject__arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalExpr_INLRString_INLRProps__LRDmiObject__arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_evalExpr_INLRString_INLRProps__LRDmiObject__args[] = 
{
  &Script_methods_evalExpr_INLRString_INLRProps__LRDmiObject__arg_text,
  &Script_methods_evalExpr_INLRString_INLRProps__LRDmiObject__arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_evalExpr_INLRString_INLRProps__LRDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_evalExpr_INLRString_INLRProps__LRDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "evalExpr", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDmiObject::clazzInfo(), // return type
  "_g_evalExpr", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_evalExpr_INLRString_INLRProps__LRDmiObject__args, // the arguments
  0, //arguments count
  Script_methods_evalExpr_INLRString_INLRProps__LRDmiObject__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_evalExpr_INLRString_INLRProps__LRDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLRString_INLRProps_I_I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLRString_INLRProps_I_I_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLRString_INLRProps_I_I_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_evalTemplate_INLRString_INLRProps_I_I_args[] = 
{
  &Script_methods_evalTemplate_INLRString_INLRProps_I_I_arg_text,
  &Script_methods_evalTemplate_INLRString_INLRProps_I_I_arg_props,
  &Script_methods_evalTemplate_INLRString_INLRProps_I_I_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_evalTemplate_INLRString_INLRProps_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_evalTemplate_INLRString_INLRProps_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evalTemplate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_h_evalTemplate", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_evalTemplate_INLRString_INLRProps_I_I_args, // the arguments
  0, //arguments count
  Script_methods_evalTemplate_INLRString_INLRProps_I_I_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_evalTemplate_INLRString_INLRProps_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLRString_INLRProps__I_arg_text = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "text", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLRString_INLRProps__I_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_evalTemplate_INLRString_INLRProps__I_args[] = 
{
  &Script_methods_evalTemplate_INLRString_INLRProps__I_arg_text,
  &Script_methods_evalTemplate_INLRString_INLRProps__I_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_evalTemplate_INLRString_INLRProps__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_evalTemplate_INLRString_INLRProps__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "evalTemplate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_evalTemplate", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_evalTemplate_INLRString_INLRProps__I_args, // the arguments
  0, //arguments count
  Script_methods_evalTemplate_INLRString_INLRProps__I_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_evalTemplate_INLRString_INLRProps__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_arg_sourceFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sourceFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_args[] = 
{
  &Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_arg_sourceFile,
  &Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_arg_props,
  &Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_evalTemplate_INLacdk_io_RFile_INLRProps_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "evalTemplate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_evalTemplate", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_args, // the arguments
  0, //arguments count
  Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_evalTemplate_INLacdk_io_RFile_INLRProps_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps__I_arg_sourceFile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sourceFile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps__I_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps__I_args[] = 
{
  &Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps__I_arg_sourceFile,
  &Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps__I_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_evalTemplate_INLacdk_io_RFile_INLRProps__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "evalTemplate", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_k_evalTemplate", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps__I_args, // the arguments
  0, //arguments count
  Script_methods_evalTemplate_INLacdk_io_RFile_INLRProps__I_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_evalTemplate_INLacdk_io_RFile_INLRProps__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getCastFlags__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getCastFlags__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getCastFlags__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCastFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_9_getCastFlags", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getCastFlags__S_args, // the arguments
  0, //arguments count
  Script_methods_getCastFlags__S_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getCastFlags__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getCfgScriptCommandLineHelp__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getCfgScriptCommandLineHelp__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getCfgScriptCommandLineHelp__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCfgScriptCommandLineHelp", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_D_getCfgScriptCommandLineHelp", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getCfgScriptCommandLineHelp__LRString__args, // the arguments
  0, //arguments count
  Script_methods_getCfgScriptCommandLineHelp__LRString__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getCfgScriptCommandLineHelp__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getExecutionStack__LRExecutionStack__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getExecutionStack__LRExecutionStack__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getExecutionStack__LRExecutionStack_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExecutionStack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RExecutionStack::clazzInfo(), // return type
  "_B_getExecutionStack", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getExecutionStack__LRExecutionStack__args, // the arguments
  0, //arguments count
  Script_methods_getExecutionStack__LRExecutionStack__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getExecutionStack__LRExecutionStack__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getFileName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getFileName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getFileName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getFileName", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getFileName__LRString__args, // the arguments
  0, //arguments count
  Script_methods_getFileName__LRString__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getFileName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getGlobals__LRProps__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getGlobals__LRProps__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getGlobals__LRProps_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getGlobals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo(), // return type
  "_5_getGlobals", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getGlobals__LRProps__args, // the arguments
  0, //arguments count
  Script_methods_getGlobals__LRProps__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getGlobals__LRProps__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getParentScript__LRScript__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getParentScript__LRScript__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getParentScript__LRScript_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentScript", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RScript::clazzInfo(), // return type
  "_6_getParentScript", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getParentScript__LRScript__args, // the arguments
  0, //arguments count
  Script_methods_getParentScript__LRScript__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getParentScript__LRScript__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_getScriptBackTrace_Z_LRString__arg_withSourcePos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withSourcePos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getScriptBackTrace_Z_LRString__args[] = 
{
  &Script_methods_getScriptBackTrace_Z_LRString__arg_withSourcePos,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getScriptBackTrace_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getScriptBackTrace_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getScriptBackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_A_getScriptBackTrace", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getScriptBackTrace_Z_LRString__args, // the arguments
  0, //arguments count
  Script_methods_getScriptBackTrace_Z_LRString__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getScriptBackTrace_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_getScriptBackTrace_ZZ_LRString__arg_withSourcePos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withSourcePos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_getScriptBackTrace_ZZ_LRString__arg_withLocals = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withLocals", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getScriptBackTrace_ZZ_LRString__args[] = 
{
  &Script_methods_getScriptBackTrace_ZZ_LRString__arg_withSourcePos,
  &Script_methods_getScriptBackTrace_ZZ_LRString__arg_withLocals,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getScriptBackTrace_ZZ_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getScriptBackTrace_ZZ_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScriptBackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_y_getScriptBackTrace", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getScriptBackTrace_ZZ_LRString__args, // the arguments
  0, //arguments count
  Script_methods_getScriptBackTrace_ZZ_LRString__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getScriptBackTrace_ZZ_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getScriptBackTrace__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getScriptBackTrace__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getScriptBackTrace__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getScriptBackTrace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_z_getScriptBackTrace", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getScriptBackTrace__LRString__args, // the arguments
  0, //arguments count
  Script_methods_getScriptBackTrace__LRString__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getScriptBackTrace__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_getScriptPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_getScriptPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_getScriptPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getScriptPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getScriptPath", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_getScriptPath__LRString__args, // the arguments
  0, //arguments count
  Script_methods_getScriptPath__LRString__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_getScriptPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_include_INLRString_ZZ_Z_arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_include_INLRString_ZZ_Z_arg_noDuplicates = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "noDuplicates", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_include_INLRString_ZZ_Z_arg_changeDir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "changeDir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_include_INLRString_ZZ_Z_args[] = 
{
  &Script_methods_include_INLRString_ZZ_Z_arg_fname,
  &Script_methods_include_INLRString_ZZ_Z_arg_noDuplicates,
  &Script_methods_include_INLRString_ZZ_Z_arg_changeDir,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_include_INLRString_ZZ_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_include_INLRString_ZZ_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "include", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_include", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_include_INLRString_ZZ_Z_args, // the arguments
  0, //arguments count
  Script_methods_include_INLRString_ZZ_Z_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_include_INLRString_ZZ_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_include_INLRString__Z_arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_include_INLRString__Z_args[] = 
{
  &Script_methods_include_INLRString__Z_arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_include_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_include_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "include", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_include", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_include_INLRString__Z_args, // the arguments
  0, //arguments count
  Script_methods_include_INLRString__Z_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_include_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_include_INLRString_Z_Z_arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_include_INLRString_Z_Z_arg_noDuplicates = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "noDuplicates", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_include_INLRString_Z_Z_args[] = 
{
  &Script_methods_include_INLRString_Z_Z_arg_fname,
  &Script_methods_include_INLRString_Z_Z_arg_noDuplicates,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_include_INLRString_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_include_INLRString_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "include", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_include", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_include_INLRString_Z_Z_args, // the arguments
  0, //arguments count
  Script_methods_include_INLRString_Z_Z_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_include_INLRString_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_initAsEnvProps_INLRProps__V_arg_scriptenv = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "scriptenv", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_initAsEnvProps_INLRProps__V_args[] = 
{
  &Script_methods_initAsEnvProps_INLRProps__V_arg_scriptenv,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_initAsEnvProps_INLRProps__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_initAsEnvProps_INLRProps__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "initAsEnvProps", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_initAsEnvProps", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_initAsEnvProps_INLRProps__V_args, // the arguments
  0, //arguments count
  Script_methods_initAsEnvProps_INLRProps__V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_initAsEnvProps_INLRProps__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__arg_envProps = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "envProps", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__args[] = 
{
  &Script_methods_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__arg_args,
  &Script_methods_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__arg_envProps,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseCfgScriptOptions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_E_parseCfgScriptOptions", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__args, // the arguments
  0, //arguments count
  Script_methods_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_parseCfgScriptOptions_INLRStringArray__LRStringArray__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_parseCfgScriptOptions_INLRStringArray__LRStringArray__args[] = 
{
  &Script_methods_parseCfgScriptOptions_INLRStringArray__LRStringArray__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_parseCfgScriptOptions_INLRStringArray__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_parseCfgScriptOptions_INLRStringArray__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "parseCfgScriptOptions", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_F_parseCfgScriptOptions", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_parseCfgScriptOptions_INLRStringArray__LRStringArray__args, // the arguments
  0, //arguments count
  Script_methods_parseCfgScriptOptions_INLRStringArray__LRStringArray__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_parseCfgScriptOptions_INLRStringArray__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_readEval_INLRProps_I_I_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_readEval_INLRProps_I_I_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_readEval_INLRProps_I_I_args[] = 
{
  &Script_methods_readEval_INLRProps_I_I_arg_props,
  &Script_methods_readEval_INLRProps_I_I_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_readEval_INLRProps_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_readEval_INLRProps_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readEval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_readEval", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_readEval_INLRProps_I_I_args, // the arguments
  0, //arguments count
  Script_methods_readEval_INLRProps_I_I_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_readEval_INLRProps_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_readEval_INLRProps__I_arg_props = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "props", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RProps::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_readEval_INLRProps__I_args[] = 
{
  &Script_methods_readEval_INLRProps__I_arg_props,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_readEval_INLRProps__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_readEval_INLRProps__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "readEval", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_readEval", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_readEval_INLRProps__I_args, // the arguments
  0, //arguments count
  Script_methods_readEval_INLRProps__I_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_readEval_INLRProps__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_setCastFlags_I_V_arg_castFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "castFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_setCastFlags_I_V_args[] = 
{
  &Script_methods_setCastFlags_I_V_arg_castFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_setCastFlags_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_setCastFlags_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCastFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_setCastFlags", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_setCastFlags_I_V_args, // the arguments
  0, //arguments count
  Script_methods_setCastFlags_I_V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_setCastFlags_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_testAssert_Z_V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_testAssert_Z_V_args[] = 
{
  &Script_methods_testAssert_Z_V_arg_test,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_testAssert_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_testAssert_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "testAssert", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_o_testAssert", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_testAssert_Z_V_args, // the arguments
  0, //arguments count
  Script_methods_testAssert_Z_V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_testAssert_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_testAssertComment_ZINLRString__V_arg_test = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "test", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_testAssertComment_ZINLRString__V_arg_msg = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "msg", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_testAssertComment_ZINLRString__V_args[] = 
{
  &Script_methods_testAssertComment_ZINLRString__V_arg_test,
  &Script_methods_testAssertComment_ZINLRString__V_arg_msg,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_testAssertComment_ZINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_testAssertComment_ZINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "testAssertComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_testAssertComment", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_testAssertComment_ZINLRString__V_args, // the arguments
  0, //arguments count
  Script_methods_testAssertComment_ZINLRString__V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_testAssertComment_ZINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_toString", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Script_methods_toString__LRString__exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_traceOff__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_traceOff__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_traceOff__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "traceOff", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_traceOff", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_traceOff__V_args, // the arguments
  0, //arguments count
  Script_methods_traceOff__V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_traceOff__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_traceOn__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_traceOn__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_traceOn__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "traceOn", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_traceOn", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_traceOn__V_args, // the arguments
  0, //arguments count
  Script_methods_traceOn__V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_traceOn__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_useStrict__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_useStrict__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_useStrict__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "useStrict", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_useStrict", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_useStrict__Z_args, // the arguments
  0, //arguments count
  Script_methods_useStrict__Z_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_useStrict__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Script_methods_useStrict_Z_V_arg_use = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "use", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Script_methods_useStrict_Z_V_args[] = 
{
  &Script_methods_useStrict_Z_V_arg_use,
  0
};

::acdk::lang::dmi::ClazzInfo* Script_methods_useStrict_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Script_method_useStrict_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "useStrict", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_useStrict", // alternative name of method
  -1, // altlabelHashCode
  Script_methods_useStrict_Z_V_args, // the arguments
  0, //arguments count
  Script_methods_useStrict_Z_V_exceptions, // the declared exceptions
  Script_MetainfoWrapper::Script_method_useStrict_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Script_methods[] = 
{
  &Script_method_GetClass__L_acdk_lang_RClass_,
  &Script_method_Script_INLRString_INLRScript__LRScript_,
  &Script_method_Script_INLRString__LRScript_,
  &Script_method_assert_Z_V,
  &Script_method_assertExists_INLRProps_INLRString__V,
  &Script_method_assertTest_Z_V,
  &Script_method_assertTrue_ZINLRString__V,
  &Script_method_breakToDebug__V,
  &Script_method_clearStack__V,
  &Script_method_createScriptDelegate_INLRString__Lacdk_lang_dmi_RDmiDelegate_,
  &Script_method_eval_INLRString_INLRProps_I_I,
  &Script_method_eval_INLRString_INLRProps__I,
  &Script_method_evalExpr_INLRString_INLRProps_I_LRDmiObject_,
  &Script_method_evalExpr_INLRString_INLRProps__LRDmiObject_,
  &Script_method_evalTemplate_INLRString_INLRProps_I_I,
  &Script_method_evalTemplate_INLRString_INLRProps__I,
  &Script_method_evalTemplate_INLacdk_io_RFile_INLRProps_I_I,
  &Script_method_evalTemplate_INLacdk_io_RFile_INLRProps__I,
  &Script_method_getCastFlags__S,
  &Script_method_getCfgScriptCommandLineHelp__LRString_,
  &Script_method_getExecutionStack__LRExecutionStack_,
  &Script_method_getFileName__LRString_,
  &Script_method_getGlobals__LRProps_,
  &Script_method_getParentScript__LRScript_,
  &Script_method_getScriptBackTrace_Z_LRString_,
  &Script_method_getScriptBackTrace_ZZ_LRString_,
  &Script_method_getScriptBackTrace__LRString_,
  &Script_method_getScriptPath__LRString_,
  &Script_method_include_INLRString_ZZ_Z,
  &Script_method_include_INLRString__Z,
  &Script_method_include_INLRString_Z_Z,
  &Script_method_initAsEnvProps_INLRProps__V,
  &Script_method_parseCfgScriptOptions_INLRStringArray_INLRProps__LRStringArray_,
  &Script_method_parseCfgScriptOptions_INLRStringArray__LRStringArray_,
  &Script_method_readEval_INLRProps_I_I,
  &Script_method_readEval_INLRProps__I,
  &Script_method_setCastFlags_I_V,
  &Script_method_testAssert_Z_V,
  &Script_method_testAssertComment_ZINLRString__V,
  &Script_method_toString__LRString_,
  &Script_method_traceOff__V,
  &Script_method_traceOn__V,
  &Script_method_useStrict__Z,
  &Script_method_useStrict_Z_V,
  0
};


struct Script_MetaInfoInitializer
{  Script_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Script::clazzInfo();
    ci->fields =  _Script_fields;
    ci->methods =  _Script_methods;
    ci->_scopeParent = acdk_cfgscript_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Script_MetaInfoInitializer Script_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace cfgscript


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) cfgscript_dummyExportFunc() {}
#endif

