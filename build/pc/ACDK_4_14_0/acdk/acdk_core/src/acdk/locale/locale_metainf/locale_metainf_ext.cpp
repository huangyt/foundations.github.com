// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../locale.h"
#include "../AsciiEncoding.h"
#include "../AsciiUtfEncoding.h"
#include "../ByteAsciiEncoding.h"
#include "../CEscapeEncoding.h"
#include "../CharacterCodingException.h"
#include "../CodingErrorAction.h"
#include "../Decoder.h"
#include "../Encoder.h"
#include "../Encoding.h"
#include "../IllegalCharsetNameException.h"
#include "../IsoEncoding.h"
#include "../locale.h"
#include "../UCS2Encoding.h"
#include "../UnicodeTable.h"
#include "../UnmappableCharacterException.h"
#include "../UTF8Encoding.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_locale_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "locale", // name of unit
  -1, // hashCode
  "acdk", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_locale_unitInfo(&acdk_locale_unitInfo);


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
AsciiEncoding_create_array(int length)
{
  return new ObjectArrayImpl<RAsciiEncoding>(length);
}

//static
::acdk::lang::RObject
AsciiEncoding_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AsciiEncoding_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_AsciiEncoding__LRAsciiEncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AsciiEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AsciiEncoding::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_getAsciiEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AsciiEncoding::getAsciiEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_getDecoder__LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AsciiEncoding* This = dmi_cast<AsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AsciiEncoding::getDecoder();
    else
        ret = (::acdk::lang::RObject)This->getDecoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_getDecoder_I_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AsciiEncoding* This = dmi_cast<AsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AsciiEncoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_getDecoder_II_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AsciiEncoding* This = dmi_cast<AsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AsciiEncoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_getEncoder_II_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AsciiEncoding* This = dmi_cast<AsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AsciiEncoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_getEncoder__LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AsciiEncoding* This = dmi_cast<AsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AsciiEncoding::getEncoder();
    else
        ret = (::acdk::lang::RObject)This->getEncoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiEncoding_method_getEncoder_I_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AsciiEncoding* This = dmi_cast<AsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AsciiEncoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _AsciiEncoding_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_AsciiEncoding__LRAsciiEncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_AsciiEncoding__LRAsciiEncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_AsciiEncoding__LRAsciiEncoding_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AsciiEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AsciiEncoding::clazzInfo(), // return type
  "_0_AsciiEncoding", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_AsciiEncoding__LRAsciiEncoding__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_AsciiEncoding__LRAsciiEncoding__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_AsciiEncoding__LRAsciiEncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_getAsciiEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_getAsciiEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_getAsciiEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_1_getAsciiEncoding", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_getAsciiEncoding__LREncoding__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_getAsciiEncoding__LREncoding__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_getAsciiEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_getDecoder__LRDecoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_getDecoder__LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_getDecoder__LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_6_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_getDecoder__LRDecoder__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_getDecoder__LRDecoder__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_getDecoder__LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AsciiEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_getDecoder_I_LRDecoder__args[] = 
{
  &AsciiEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_getDecoder_I_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_getDecoder_I_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_7_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_getDecoder_I_LRDecoder__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_getDecoder_I_LRDecoder__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_getDecoder_I_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_getDecoder_II_LRDecoder__args[] = 
{
  &AsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed,
  &AsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_getDecoder_II_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_getDecoder_II_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_5_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_getDecoder_II_LRDecoder__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_getDecoder_II_LRDecoder__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_getDecoder_II_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AsciiEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AsciiEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_getEncoder_II_LREncoder__args[] = 
{
  &AsciiEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed,
  &AsciiEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_getEncoder_II_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_getEncoder_II_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_2_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_getEncoder_II_LREncoder__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_getEncoder_II_LREncoder__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_getEncoder_II_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_getEncoder__LREncoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_getEncoder__LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_getEncoder__LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_3_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_getEncoder__LREncoder__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_getEncoder__LREncoder__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_getEncoder__LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AsciiEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiEncoding_methods_getEncoder_I_LREncoder__args[] = 
{
  &AsciiEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiEncoding_methods_getEncoder_I_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiEncoding_method_getEncoder_I_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_4_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  AsciiEncoding_methods_getEncoder_I_LREncoder__args, // the arguments
  0, //arguments count
  AsciiEncoding_methods_getEncoder_I_LREncoder__exceptions, // the declared exceptions
  AsciiEncoding_MetainfoWrapper::AsciiEncoding_method_getEncoder_I_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AsciiEncoding_methods[] = 
{
  &AsciiEncoding_method_AsciiEncoding__LRAsciiEncoding_,
  &AsciiEncoding_method_GetClass__L_acdk_lang_RClass_,
  &AsciiEncoding_method_getAsciiEncoding__LREncoding_,
  &AsciiEncoding_method_getDecoder__LRDecoder_,
  &AsciiEncoding_method_getDecoder_I_LRDecoder_,
  &AsciiEncoding_method_getDecoder_II_LRDecoder_,
  &AsciiEncoding_method_getEncoder_II_LREncoder_,
  &AsciiEncoding_method_getEncoder__LREncoder_,
  &AsciiEncoding_method_getEncoder_I_LREncoder_,
  0
};


struct AsciiEncoding_MetaInfoInitializer
{  AsciiEncoding_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AsciiEncoding::clazzInfo();
    ci->fields =  _AsciiEncoding_fields;
    ci->methods =  _AsciiEncoding_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AsciiEncoding_MetaInfoInitializer AsciiEncoding_MetaInfoInitializer_staticinstance__;


struct AsciiEncoding_clazzInfo_ClazzAttributesResInitializer1
{
  AsciiEncoding_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AsciiEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AsciiEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AsciiEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AsciiEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&AsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

AsciiEncoding_clazzInfo_ClazzAttributesResInitializer1 AsciiEncoding_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
AsciiUtfEncoding_create_array(int length)
{
  return new ObjectArrayImpl<RAsciiUtfEncoding>(length);
}

//static
::acdk::lang::RObject
AsciiUtfEncoding_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AsciiUtfEncoding_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiUtfEncoding_method_AsciiUtfEncoding_Z_LRAsciiUtfEncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AsciiUtfEncoding(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiUtfEncoding_method_AsciiUtfEncoding__LRAsciiUtfEncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AsciiUtfEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiUtfEncoding_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AsciiUtfEncoding::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiUtfEncoding_method_getAsciiUtfCEscapeEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AsciiUtfEncoding::getAsciiUtfCEscapeEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AsciiUtfEncoding_method_getAsciiUtfEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AsciiUtfEncoding::getAsciiUtfEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AsciiUtfEncoding_fields__withCEscapes_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AsciiUtfEncoding* This = dmi_cast<AsciiUtfEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_withCEscapes, flags);
    else
      This->_withCEscapes = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AsciiUtfEncoding_fields__withCEscapes = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_withCEscapes", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  AsciiUtfEncoding_MetainfoWrapper::AsciiUtfEncoding_fields__withCEscapes_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AsciiUtfEncoding_fields[] = 
{
  &AsciiUtfEncoding_fields__withCEscapes,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AsciiUtfEncoding_methods_AsciiUtfEncoding_Z_LRAsciiUtfEncoding__arg_withCEscapes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withCEscapes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiUtfEncoding_methods_AsciiUtfEncoding_Z_LRAsciiUtfEncoding__args[] = 
{
  &AsciiUtfEncoding_methods_AsciiUtfEncoding_Z_LRAsciiUtfEncoding__arg_withCEscapes,
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiUtfEncoding_methods_AsciiUtfEncoding_Z_LRAsciiUtfEncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiUtfEncoding_method_AsciiUtfEncoding_Z_LRAsciiUtfEncoding_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AsciiUtfEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AsciiUtfEncoding::clazzInfo(), // return type
  "_0_AsciiUtfEncoding", // alternative name of method
  -1, // altlabelHashCode
  AsciiUtfEncoding_methods_AsciiUtfEncoding_Z_LRAsciiUtfEncoding__args, // the arguments
  0, //arguments count
  AsciiUtfEncoding_methods_AsciiUtfEncoding_Z_LRAsciiUtfEncoding__exceptions, // the declared exceptions
  AsciiUtfEncoding_MetainfoWrapper::AsciiUtfEncoding_method_AsciiUtfEncoding_Z_LRAsciiUtfEncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiUtfEncoding_methods_AsciiUtfEncoding__LRAsciiUtfEncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiUtfEncoding_methods_AsciiUtfEncoding__LRAsciiUtfEncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiUtfEncoding_method_AsciiUtfEncoding__LRAsciiUtfEncoding_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AsciiUtfEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AsciiUtfEncoding::clazzInfo(), // return type
  "_1_AsciiUtfEncoding", // alternative name of method
  -1, // altlabelHashCode
  AsciiUtfEncoding_methods_AsciiUtfEncoding__LRAsciiUtfEncoding__args, // the arguments
  0, //arguments count
  AsciiUtfEncoding_methods_AsciiUtfEncoding__LRAsciiUtfEncoding__exceptions, // the declared exceptions
  AsciiUtfEncoding_MetainfoWrapper::AsciiUtfEncoding_method_AsciiUtfEncoding__LRAsciiUtfEncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiUtfEncoding_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiUtfEncoding_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiUtfEncoding_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AsciiUtfEncoding_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AsciiUtfEncoding_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AsciiUtfEncoding_MetainfoWrapper::AsciiUtfEncoding_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiUtfEncoding_methods_getAsciiUtfCEscapeEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiUtfEncoding_methods_getAsciiUtfCEscapeEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiUtfEncoding_method_getAsciiUtfCEscapeEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiUtfCEscapeEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_3_getAsciiUtfCEscapeEncoding", // alternative name of method
  -1, // altlabelHashCode
  AsciiUtfEncoding_methods_getAsciiUtfCEscapeEncoding__LREncoding__args, // the arguments
  0, //arguments count
  AsciiUtfEncoding_methods_getAsciiUtfCEscapeEncoding__LREncoding__exceptions, // the declared exceptions
  AsciiUtfEncoding_MetainfoWrapper::AsciiUtfEncoding_method_getAsciiUtfCEscapeEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AsciiUtfEncoding_methods_getAsciiUtfEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AsciiUtfEncoding_methods_getAsciiUtfEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AsciiUtfEncoding_method_getAsciiUtfEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiUtfEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_2_getAsciiUtfEncoding", // alternative name of method
  -1, // altlabelHashCode
  AsciiUtfEncoding_methods_getAsciiUtfEncoding__LREncoding__args, // the arguments
  0, //arguments count
  AsciiUtfEncoding_methods_getAsciiUtfEncoding__LREncoding__exceptions, // the declared exceptions
  AsciiUtfEncoding_MetainfoWrapper::AsciiUtfEncoding_method_getAsciiUtfEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AsciiUtfEncoding_methods[] = 
{
  &AsciiUtfEncoding_method_AsciiUtfEncoding_Z_LRAsciiUtfEncoding_,
  &AsciiUtfEncoding_method_AsciiUtfEncoding__LRAsciiUtfEncoding_,
  &AsciiUtfEncoding_method_GetClass__L_acdk_lang_RClass_,
  &AsciiUtfEncoding_method_getAsciiUtfCEscapeEncoding__LREncoding_,
  &AsciiUtfEncoding_method_getAsciiUtfEncoding__LREncoding_,
  0
};


struct AsciiUtfEncoding_MetaInfoInitializer
{  AsciiUtfEncoding_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AsciiUtfEncoding::clazzInfo();
    ci->fields =  _AsciiUtfEncoding_fields;
    ci->methods =  _AsciiUtfEncoding_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AsciiUtfEncoding_MetaInfoInitializer AsciiUtfEncoding_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
ByteAsciiEncoding_create_array(int length)
{
  return new ObjectArrayImpl<RByteAsciiEncoding>(length);
}

//static
::acdk::lang::RObject
ByteAsciiEncoding_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteAsciiEncoding_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_ByteAsciiEncoding__LRByteAsciiEncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteAsciiEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteAsciiEncoding::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_getByteAsciiEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteAsciiEncoding::getByteAsciiEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_getDecoder__LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteAsciiEncoding* This = dmi_cast<ByteAsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteAsciiEncoding::getDecoder();
    else
        ret = (::acdk::lang::RObject)This->getDecoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_getDecoder_I_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteAsciiEncoding* This = dmi_cast<ByteAsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteAsciiEncoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_getDecoder_II_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteAsciiEncoding* This = dmi_cast<ByteAsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteAsciiEncoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_getEncoder_II_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteAsciiEncoding* This = dmi_cast<ByteAsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteAsciiEncoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_getEncoder__LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteAsciiEncoding* This = dmi_cast<ByteAsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteAsciiEncoding::getEncoder();
    else
        ret = (::acdk::lang::RObject)This->getEncoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteAsciiEncoding_method_getEncoder_I_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteAsciiEncoding* This = dmi_cast<ByteAsciiEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteAsciiEncoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteAsciiEncoding_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_ByteAsciiEncoding__LRByteAsciiEncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_ByteAsciiEncoding__LRByteAsciiEncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_ByteAsciiEncoding__LRByteAsciiEncoding_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteAsciiEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteAsciiEncoding::clazzInfo(), // return type
  "_0_ByteAsciiEncoding", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_ByteAsciiEncoding__LRByteAsciiEncoding__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_ByteAsciiEncoding__LRByteAsciiEncoding__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_ByteAsciiEncoding__LRByteAsciiEncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_getByteAsciiEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_getByteAsciiEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_getByteAsciiEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByteAsciiEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_1_getByteAsciiEncoding", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_getByteAsciiEncoding__LREncoding__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_getByteAsciiEncoding__LREncoding__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_getByteAsciiEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_getDecoder__LRDecoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_getDecoder__LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_getDecoder__LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_6_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_getDecoder__LRDecoder__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_getDecoder__LRDecoder__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_getDecoder__LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteAsciiEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_getDecoder_I_LRDecoder__args[] = 
{
  &ByteAsciiEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_getDecoder_I_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_getDecoder_I_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_7_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_getDecoder_I_LRDecoder__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_getDecoder_I_LRDecoder__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_getDecoder_I_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__args[] = 
{
  &ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed,
  &ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_getDecoder_II_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_5_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_getDecoder_II_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteAsciiEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteAsciiEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_getEncoder_II_LREncoder__args[] = 
{
  &ByteAsciiEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed,
  &ByteAsciiEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_getEncoder_II_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_getEncoder_II_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_2_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_getEncoder_II_LREncoder__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_getEncoder_II_LREncoder__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_getEncoder_II_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_getEncoder__LREncoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_getEncoder__LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_getEncoder__LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_3_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_getEncoder__LREncoder__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_getEncoder__LREncoder__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_getEncoder__LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteAsciiEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteAsciiEncoding_methods_getEncoder_I_LREncoder__args[] = 
{
  &ByteAsciiEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteAsciiEncoding_methods_getEncoder_I_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteAsciiEncoding_method_getEncoder_I_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_4_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  ByteAsciiEncoding_methods_getEncoder_I_LREncoder__args, // the arguments
  0, //arguments count
  ByteAsciiEncoding_methods_getEncoder_I_LREncoder__exceptions, // the declared exceptions
  ByteAsciiEncoding_MetainfoWrapper::ByteAsciiEncoding_method_getEncoder_I_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteAsciiEncoding_methods[] = 
{
  &ByteAsciiEncoding_method_ByteAsciiEncoding__LRByteAsciiEncoding_,
  &ByteAsciiEncoding_method_GetClass__L_acdk_lang_RClass_,
  &ByteAsciiEncoding_method_getByteAsciiEncoding__LREncoding_,
  &ByteAsciiEncoding_method_getDecoder__LRDecoder_,
  &ByteAsciiEncoding_method_getDecoder_I_LRDecoder_,
  &ByteAsciiEncoding_method_getDecoder_II_LRDecoder_,
  &ByteAsciiEncoding_method_getEncoder_II_LREncoder_,
  &ByteAsciiEncoding_method_getEncoder__LREncoder_,
  &ByteAsciiEncoding_method_getEncoder_I_LREncoder_,
  0
};


struct ByteAsciiEncoding_MetaInfoInitializer
{  ByteAsciiEncoding_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteAsciiEncoding::clazzInfo();
    ci->fields =  _ByteAsciiEncoding_fields;
    ci->methods =  _ByteAsciiEncoding_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteAsciiEncoding_MetaInfoInitializer ByteAsciiEncoding_MetaInfoInitializer_staticinstance__;


struct ByteAsciiEncoding_clazzInfo_ClazzAttributesResInitializer2
{
  ByteAsciiEncoding_clazzInfo_ClazzAttributesResInitializer2()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ByteAsciiEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ByteAsciiEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ByteAsciiEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ByteAsciiEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ByteAsciiEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

ByteAsciiEncoding_clazzInfo_ClazzAttributesResInitializer2 ByteAsciiEncoding_clazzInfo_ClazzAttributesResInitializer2_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
CharacterCodingException_create_array(int length)
{
  return new ObjectArrayImpl<RCharacterCodingException>(length);
}

//static
::acdk::lang::RObject
CharacterCodingException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CharacterCodingException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterCodingException_method_CharacterCodingException__LRCharacterCodingException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharacterCodingException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterCodingException_method_CharacterCodingException_INLRString__LRCharacterCodingException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharacterCodingException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharacterCodingException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CharacterCodingException::GetClass();
    return methinf;
  }
};


void ThrowException_CharacterCodingException(IN(::acdk::lang::RThrowable) ex)
{
  throw RCharacterCodingException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _CharacterCodingException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterCodingException_methods_CharacterCodingException__LRCharacterCodingException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterCodingException_methods_CharacterCodingException__LRCharacterCodingException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharacterCodingException_method_CharacterCodingException__LRCharacterCodingException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CharacterCodingException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharacterCodingException::clazzInfo(), // return type
  "_0_CharacterCodingException", // alternative name of method
  -1, // altlabelHashCode
  CharacterCodingException_methods_CharacterCodingException__LRCharacterCodingException__args, // the arguments
  0, //arguments count
  CharacterCodingException_methods_CharacterCodingException__LRCharacterCodingException__exceptions, // the declared exceptions
  CharacterCodingException_MetainfoWrapper::CharacterCodingException_method_CharacterCodingException__LRCharacterCodingException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharacterCodingException_methods_CharacterCodingException_INLRString__LRCharacterCodingException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterCodingException_methods_CharacterCodingException_INLRString__LRCharacterCodingException__args[] = 
{
  &CharacterCodingException_methods_CharacterCodingException_INLRString__LRCharacterCodingException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterCodingException_methods_CharacterCodingException_INLRString__LRCharacterCodingException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharacterCodingException_method_CharacterCodingException_INLRString__LRCharacterCodingException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CharacterCodingException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharacterCodingException::clazzInfo(), // return type
  "_1_CharacterCodingException", // alternative name of method
  -1, // altlabelHashCode
  CharacterCodingException_methods_CharacterCodingException_INLRString__LRCharacterCodingException__args, // the arguments
  0, //arguments count
  CharacterCodingException_methods_CharacterCodingException_INLRString__LRCharacterCodingException__exceptions, // the declared exceptions
  CharacterCodingException_MetainfoWrapper::CharacterCodingException_method_CharacterCodingException_INLRString__LRCharacterCodingException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharacterCodingException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharacterCodingException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharacterCodingException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CharacterCodingException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CharacterCodingException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CharacterCodingException_MetainfoWrapper::CharacterCodingException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CharacterCodingException_methods[] = 
{
  &CharacterCodingException_method_CharacterCodingException__LRCharacterCodingException_,
  &CharacterCodingException_method_CharacterCodingException_INLRString__LRCharacterCodingException_,
  &CharacterCodingException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct CharacterCodingException_MetaInfoInitializer
{  CharacterCodingException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CharacterCodingException::clazzInfo();
    ci->fields =  _CharacterCodingException_fields;
    ci->methods =  _CharacterCodingException_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CharacterCodingException_MetaInfoInitializer CharacterCodingException_MetaInfoInitializer_staticinstance__;


struct CharacterCodingException_clazzInfo_ClazzAttributesResInitializer3
{
  CharacterCodingException_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)CharacterCodingException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_CharacterCodingException));
  }
};

CharacterCodingException_clazzInfo_ClazzAttributesResInitializer3 CharacterCodingException_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
Decoder_create_array(int length)
{
  return new ObjectArrayImpl<RDecoder>(length);
}

//static
::acdk::lang::RObject
Decoder_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Decoder_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Decoder::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_bytesReaded__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Decoder::bytesReaded();
    else
      ret = This->bytesReaded();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_decode_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    ret = (::acdk::lang::RObject)This->decode(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_decodeToChar_INLacdk_io_RReader__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
  ret = This->decodeToChar(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_decodeToString_INLacdk_io_RReader_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    ret = (::acdk::lang::RObject)This->decodeToString(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_decodeToString_INLacdk_io_RReader__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    ret = (::acdk::lang::RObject)This->decodeToString(::acdk::lang::dmi::castTo< acdk::io::RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_getDecodingReplacement__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Decoder::getDecodingReplacement();
    else
        ret = (::acdk::lang::RObject)This->getDecodingReplacement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_getEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Decoder::getEncoding();
    else
        ret = (::acdk::lang::RObject)This->getEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_handleUnmappable_Luc2char__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Decoder::handleUnmappable(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->handleUnmappable(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_malformedInputAction__LCodingErrorAction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (CodingErrorAction)This->Decoder::malformedInputAction();
    else
      ret = (CodingErrorAction)This->malformedInputAction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_onMalformedInput_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Decoder::onMalformedInput((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        This->onMalformedInput((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_onUnmappableCharacter_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Decoder::onUnmappableCharacter((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        This->onUnmappableCharacter((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Decoder::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_setDecodingReplacement_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Decoder::setDecodingReplacement(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setDecodingReplacement(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Decoder_method_unmappableCharacterAction__LCodingErrorAction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (CodingErrorAction)This->Decoder::unmappableCharacterAction();
    else
      ret = (CodingErrorAction)This->unmappableCharacterAction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Decoder_fields__bytesReaded_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bytesReaded, flags);
    else
      This->_bytesReaded = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Decoder_fields__decodingReplacement_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_decodingReplacement, flags);
    else
      This->_decodingReplacement = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Decoder_fields__encoding_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_encoding, flags);
    else
      This->_encoding = ::acdk::lang::dmi::castTo< REncoding>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Decoder_fields__onMalformedInput_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_onMalformedInput), flags);
    else
      This->_onMalformedInput = (CodingErrorAction)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Decoder_fields__onUnmappableCharacter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Decoder* This = dmi_cast<Decoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_onUnmappableCharacter), flags);
    else
      This->_onUnmappableCharacter = (CodingErrorAction)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Decoder_fields__bytesReaded = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bytesReaded", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Decoder_MetainfoWrapper::Decoder_fields__bytesReaded_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Decoder_fields__decodingReplacement = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_decodingReplacement", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Decoder_MetainfoWrapper::Decoder_fields__decodingReplacement_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Decoder_fields__encoding = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_encoding", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(),
  Decoder_MetainfoWrapper::Decoder_fields__encoding_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Decoder_fields__onMalformedInput = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_onMalformedInput", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Decoder_MetainfoWrapper::Decoder_fields__onMalformedInput_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Decoder_fields__onUnmappableCharacter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_onUnmappableCharacter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Decoder_MetainfoWrapper::Decoder_fields__onUnmappableCharacter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Decoder_fields[] = 
{
  &Decoder_fields__bytesReaded,
  &Decoder_fields__decodingReplacement,
  &Decoder_fields__encoding,
  &Decoder_fields__onMalformedInput,
  &Decoder_fields__onUnmappableCharacter,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_Decoder_INLREncoding_II_LRDecoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_Decoder_INLREncoding_II_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_Decoder_INLREncoding_II_LRDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_Decoder_INLREncoding_II_LRDecoder__args[] = 
{
  &Decoder_methods_Decoder_INLREncoding_II_LRDecoder__arg_encoding,
  &Decoder_methods_Decoder_INLREncoding_II_LRDecoder__arg_onMalformed,
  &Decoder_methods_Decoder_INLREncoding_II_LRDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_Decoder_INLREncoding_II_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_Decoder_INLREncoding_II_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Decoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Decoder::clazzInfo(), // return type
  "_0_Decoder", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_Decoder_INLREncoding_II_LRDecoder__args, // the arguments
  0, //arguments count
  Decoder_methods_Decoder_INLREncoding_II_LRDecoder__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_Decoder_INLREncoding__LRDecoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_Decoder_INLREncoding__LRDecoder__args[] = 
{
  &Decoder_methods_Decoder_INLREncoding__LRDecoder__arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_Decoder_INLREncoding__LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_Decoder_INLREncoding__LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Decoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Decoder::clazzInfo(), // return type
  "_1_Decoder", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_Decoder_INLREncoding__LRDecoder__args, // the arguments
  0, //arguments count
  Decoder_methods_Decoder_INLREncoding__LRDecoder__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_Decoder_INLREncoding_I_LRDecoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_Decoder_INLREncoding_I_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_Decoder_INLREncoding_I_LRDecoder__args[] = 
{
  &Decoder_methods_Decoder_INLREncoding_I_LRDecoder__arg_encoding,
  &Decoder_methods_Decoder_INLREncoding_I_LRDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_Decoder_INLREncoding_I_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_Decoder_INLREncoding_I_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Decoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Decoder::clazzInfo(), // return type
  "_2_Decoder", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_Decoder_INLREncoding_I_LRDecoder__args, // the arguments
  0, //arguments count
  Decoder_methods_Decoder_INLREncoding_I_LRDecoder__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_h_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Decoder_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_bytesReaded__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_bytesReaded__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_bytesReaded__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bytesReaded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_bytesReaded", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_bytesReaded__I_args, // the arguments
  0, //arguments count
  Decoder_methods_bytesReaded__I_exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_bytesReaded__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_decode_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_decode_INLRString__LRString__args[] = 
{
  &Decoder_methods_decode_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_decode_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_decode_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_decode", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_decode_INLRString__LRString__args, // the arguments
  0, //arguments count
  Decoder_methods_decode_INLRString__LRString__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_decode_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_decodeToChar_INLacdk_io_RReader__I_arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_decodeToChar_INLacdk_io_RReader__I_args[] = 
{
  &Decoder_methods_decodeToChar_INLacdk_io_RReader__I_arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_decodeToChar_INLacdk_io_RReader__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_decodeToChar_INLacdk_io_RReader__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_decodeToChar", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_decodeToChar_INLacdk_io_RReader__I_args, // the arguments
  0, //arguments count
  Decoder_methods_decodeToChar_INLacdk_io_RReader__I_exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_decodeToChar_INLacdk_io_RReader__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__arg_stopOn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "stopOn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__args[] = 
{
  &Decoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__arg_in,
  &Decoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__arg_stopOn,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_decodeToString_INLacdk_io_RReader_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_decodeToString", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__args, // the arguments
  0, //arguments count
  Decoder_methods_decodeToString_INLacdk_io_RReader_I_LRString__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_decodeToString_INLacdk_io_RReader_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_decodeToString_INLacdk_io_RReader__LRString__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_decodeToString_INLacdk_io_RReader__LRString__args[] = 
{
  &Decoder_methods_decodeToString_INLacdk_io_RReader__LRString__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_decodeToString_INLacdk_io_RReader__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_decodeToString_INLacdk_io_RReader__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "decodeToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_decodeToString", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_decodeToString_INLacdk_io_RReader__LRString__args, // the arguments
  0, //arguments count
  Decoder_methods_decodeToString_INLacdk_io_RReader__LRString__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_decodeToString_INLacdk_io_RReader__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_getDecodingReplacement__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_getDecodingReplacement__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_getDecodingReplacement__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecodingReplacement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getDecodingReplacement", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_getDecodingReplacement__LRString__args, // the arguments
  0, //arguments count
  Decoder_methods_getDecodingReplacement__LRString__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_getDecodingReplacement__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_getEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_getEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_getEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_3_getEncoding", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_getEncoding__LREncoding__args, // the arguments
  0, //arguments count
  Decoder_methods_getEncoding__LREncoding__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_getEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_handleUnmappable_Luc2char__LRString__arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_handleUnmappable_Luc2char__LRString__args[] = 
{
  &Decoder_methods_handleUnmappable_Luc2char__LRString__arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_handleUnmappable_Luc2char__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_handleUnmappable_Luc2char__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleUnmappable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_handleUnmappable", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_handleUnmappable_Luc2char__LRString__args, // the arguments
  0, //arguments count
  Decoder_methods_handleUnmappable_Luc2char__LRString__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_handleUnmappable_Luc2char__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_malformedInputAction__LCodingErrorAction__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_malformedInputAction__LCodingErrorAction__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_malformedInputAction__LCodingErrorAction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "malformedInputAction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_malformedInputAction", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_malformedInputAction__LCodingErrorAction__args, // the arguments
  0, //arguments count
  Decoder_methods_malformedInputAction__LCodingErrorAction__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_malformedInputAction__LCodingErrorAction__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_onMalformedInput_I_V_arg_newAction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newAction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_onMalformedInput_I_V_args[] = 
{
  &Decoder_methods_onMalformedInput_I_V_arg_newAction,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_onMalformedInput_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_onMalformedInput_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onMalformedInput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_onMalformedInput", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_onMalformedInput_I_V_args, // the arguments
  0, //arguments count
  Decoder_methods_onMalformedInput_I_V_exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_onMalformedInput_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_onUnmappableCharacter_I_V_arg_newAction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newAction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_onUnmappableCharacter_I_V_args[] = 
{
  &Decoder_methods_onUnmappableCharacter_I_V_arg_newAction,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_onUnmappableCharacter_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_onUnmappableCharacter_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onUnmappableCharacter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_onUnmappableCharacter", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_onUnmappableCharacter_I_V_args, // the arguments
  0, //arguments count
  Decoder_methods_onUnmappableCharacter_I_V_exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_onUnmappableCharacter_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_reset", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_reset__V_args, // the arguments
  0, //arguments count
  Decoder_methods_reset__V_exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Decoder_methods_setDecodingReplacement_INLRString__V_arg_replacement = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "replacement", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_setDecodingReplacement_INLRString__V_args[] = 
{
  &Decoder_methods_setDecodingReplacement_INLRString__V_arg_replacement,
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_setDecodingReplacement_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_setDecodingReplacement_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDecodingReplacement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setDecodingReplacement", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_setDecodingReplacement_INLRString__V_args, // the arguments
  0, //arguments count
  Decoder_methods_setDecodingReplacement_INLRString__V_exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_setDecodingReplacement_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Decoder_methods_unmappableCharacterAction__LCodingErrorAction__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Decoder_methods_unmappableCharacterAction__LCodingErrorAction__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Decoder_method_unmappableCharacterAction__LCodingErrorAction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unmappableCharacterAction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_unmappableCharacterAction", // alternative name of method
  -1, // altlabelHashCode
  Decoder_methods_unmappableCharacterAction__LCodingErrorAction__args, // the arguments
  0, //arguments count
  Decoder_methods_unmappableCharacterAction__LCodingErrorAction__exceptions, // the declared exceptions
  Decoder_MetainfoWrapper::Decoder_method_unmappableCharacterAction__LCodingErrorAction__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Decoder_methods[] = 
{
  &Decoder_method_Decoder_INLREncoding_II_LRDecoder_,
  &Decoder_method_Decoder_INLREncoding__LRDecoder_,
  &Decoder_method_Decoder_INLREncoding_I_LRDecoder_,
  &Decoder_method_GetClass__L_acdk_lang_RClass_,
  &Decoder_method_bytesReaded__I,
  &Decoder_method_decode_INLRString__LRString_,
  &Decoder_method_decodeToChar_INLacdk_io_RReader__I,
  &Decoder_method_decodeToString_INLacdk_io_RReader_I_LRString_,
  &Decoder_method_decodeToString_INLacdk_io_RReader__LRString_,
  &Decoder_method_getDecodingReplacement__LRString_,
  &Decoder_method_getEncoding__LREncoding_,
  &Decoder_method_handleUnmappable_Luc2char__LRString_,
  &Decoder_method_malformedInputAction__LCodingErrorAction_,
  &Decoder_method_onMalformedInput_I_V,
  &Decoder_method_onUnmappableCharacter_I_V,
  &Decoder_method_reset__V,
  &Decoder_method_setDecodingReplacement_INLRString__V,
  &Decoder_method_unmappableCharacterAction__LCodingErrorAction_,
  0
};


struct Decoder_MetaInfoInitializer
{  Decoder_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Decoder::clazzInfo();
    ci->fields =  _Decoder_fields;
    ci->methods =  _Decoder_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Decoder_MetaInfoInitializer Decoder_MetaInfoInitializer_staticinstance__;


struct Decoder_clazzInfo_ClazzAttributesResInitializer4
{
  Decoder_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Decoder_methods_Decoder_INLREncoding_II_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Decoder_methods_Decoder_INLREncoding_I_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Decoder_methods_Decoder_INLREncoding_II_LRDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Decoder_method_malformedInputAction__LCodingErrorAction_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Decoder_method_unmappableCharacterAction__LCodingErrorAction_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Decoder_methods_onUnmappableCharacter_I_V_arg_newAction, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Decoder_methods_onMalformedInput_I_V_arg_newAction, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

Decoder_clazzInfo_ClazzAttributesResInitializer4 Decoder_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
Encoder_create_array(int length)
{
  return new ObjectArrayImpl<REncoder>(length);
}

//static
::acdk::lang::RObject
Encoder_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Encoder_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoder::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_bytesWritten__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Encoder::bytesWritten();
    else
      ret = This->bytesWritten();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_encode_INLacdk_io_RWriter_INLRString_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    This->encode(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_encode_INLacdk_io_RWriter_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    This->encode(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_encode_INLacdk_io_RWriter_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    This->encode(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_encode_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    ret = (::acdk::lang::RObject)This->encode(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_getEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Encoder::getEncoding();
    else
        ret = (::acdk::lang::RObject)This->getEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_getEncodingReplacement__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Encoder::getEncodingReplacement();
    else
        ret = (::acdk::lang::RObject)This->getEncodingReplacement();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Encoder::handleUnmappable(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    else
        This->handleUnmappable(::acdk::lang::dmi::castTo< acdk::io::RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< uc2char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_malformedInputAction__LCodingErrorAction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (CodingErrorAction)This->Encoder::malformedInputAction();
    else
      ret = (CodingErrorAction)This->malformedInputAction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_onMalformedInput_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Encoder::onMalformedInput((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        This->onMalformedInput((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_onUnmappableCharacter_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Encoder::onUnmappableCharacter((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        This->onUnmappableCharacter((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Encoder::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_setEncodingReplacement_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Encoder::setEncodingReplacement(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->setEncodingReplacement(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoder_method_unmappableCharacterAction__LCodingErrorAction__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (CodingErrorAction)This->Encoder::unmappableCharacterAction();
    else
      ret = (CodingErrorAction)This->unmappableCharacterAction();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Encoder_fields__bytesWritten_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bytesWritten, flags);
    else
      This->_bytesWritten = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Encoder_fields__encoding_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_encoding, flags);
    else
      This->_encoding = ::acdk::lang::dmi::castTo< REncoding>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Encoder_fields__encodingReplacement_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_encodingReplacement, flags);
    else
      This->_encodingReplacement = ::acdk::lang::dmi::castTo< RbyteArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Encoder_fields__onMalformedInput_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_onMalformedInput), flags);
    else
      This->_onMalformedInput = (CodingErrorAction)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Encoder_fields__onUnmappableCharacter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Encoder* This = dmi_cast<Encoder>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_onUnmappableCharacter), flags);
    else
      This->_onUnmappableCharacter = (CodingErrorAction)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Encoder_fields__bytesWritten = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bytesWritten", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Encoder_MetainfoWrapper::Encoder_fields__bytesWritten_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Encoder_fields__encoding = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_encoding", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(),
  Encoder_MetainfoWrapper::Encoder_fields__encoding_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Encoder_fields__encodingReplacement = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_encodingReplacement", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  Encoder_MetainfoWrapper::Encoder_fields__encodingReplacement_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Encoder_fields__onMalformedInput = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_onMalformedInput", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Encoder_MetainfoWrapper::Encoder_fields__onMalformedInput_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo Encoder_fields__onUnmappableCharacter = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_onUnmappableCharacter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  Encoder_MetainfoWrapper::Encoder_fields__onUnmappableCharacter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Encoder_fields[] = 
{
  &Encoder_fields__bytesWritten,
  &Encoder_fields__encoding,
  &Encoder_fields__encodingReplacement,
  &Encoder_fields__onMalformedInput,
  &Encoder_fields__onUnmappableCharacter,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_Encoder_INLREncoding_II_LREncoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_Encoder_INLREncoding_II_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_Encoder_INLREncoding_II_LREncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_Encoder_INLREncoding_II_LREncoder__args[] = 
{
  &Encoder_methods_Encoder_INLREncoding_II_LREncoder__arg_encoding,
  &Encoder_methods_Encoder_INLREncoding_II_LREncoder__arg_onMalformed,
  &Encoder_methods_Encoder_INLREncoding_II_LREncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_Encoder_INLREncoding_II_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_Encoder_INLREncoding_II_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Encoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Encoder::clazzInfo(), // return type
  "_0_Encoder", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_Encoder_INLREncoding_II_LREncoder__args, // the arguments
  0, //arguments count
  Encoder_methods_Encoder_INLREncoding_II_LREncoder__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_Encoder_INLREncoding__LREncoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_Encoder_INLREncoding__LREncoder__args[] = 
{
  &Encoder_methods_Encoder_INLREncoding__LREncoder__arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_Encoder_INLREncoding__LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_Encoder_INLREncoding__LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Encoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Encoder::clazzInfo(), // return type
  "_1_Encoder", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_Encoder_INLREncoding__LREncoder__args, // the arguments
  0, //arguments count
  Encoder_methods_Encoder_INLREncoding__LREncoder__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_Encoder_INLREncoding_I_LREncoder__arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_Encoder_INLREncoding_I_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_Encoder_INLREncoding_I_LREncoder__args[] = 
{
  &Encoder_methods_Encoder_INLREncoding_I_LREncoder__arg_encoding,
  &Encoder_methods_Encoder_INLREncoding_I_LREncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_Encoder_INLREncoding_I_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_Encoder_INLREncoding_I_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "Encoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Encoder::clazzInfo(), // return type
  "_2_Encoder", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_Encoder_INLREncoding_I_LREncoder__args, // the arguments
  0, //arguments count
  Encoder_methods_Encoder_INLREncoding_I_LREncoder__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_h_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Encoder_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_bytesWritten__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_bytesWritten__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_bytesWritten__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "bytesWritten", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_bytesWritten", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_bytesWritten__I_args, // the arguments
  0, //arguments count
  Encoder_methods_bytesWritten__I_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_bytesWritten__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_arg_stopOn = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "stopOn", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_args[] = 
{
  &Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_arg_out,
  &Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_arg_str,
  &Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_arg_stopOn,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_encode_INLacdk_io_RWriter_INLRString_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "encode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_encode", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_args, // the arguments
  0, //arguments count
  Encoder_methods_encode_INLacdk_io_RWriter_INLRString_I_V_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_encode_INLacdk_io_RWriter_INLRString_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_encode_INLacdk_io_RWriter_INLRString__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_encode_INLacdk_io_RWriter_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_encode_INLacdk_io_RWriter_INLRString__V_args[] = 
{
  &Encoder_methods_encode_INLacdk_io_RWriter_INLRString__V_arg_out,
  &Encoder_methods_encode_INLacdk_io_RWriter_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_encode_INLacdk_io_RWriter_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_encode_INLacdk_io_RWriter_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "encode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_encode", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_encode_INLacdk_io_RWriter_INLRString__V_args, // the arguments
  0, //arguments count
  Encoder_methods_encode_INLacdk_io_RWriter_INLRString__V_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_encode_INLacdk_io_RWriter_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_encode_INLacdk_io_RWriter_Luc2char__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_encode_INLacdk_io_RWriter_Luc2char__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_encode_INLacdk_io_RWriter_Luc2char__V_args[] = 
{
  &Encoder_methods_encode_INLacdk_io_RWriter_Luc2char__V_arg_out,
  &Encoder_methods_encode_INLacdk_io_RWriter_Luc2char__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_encode_INLacdk_io_RWriter_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_encode_INLacdk_io_RWriter_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "encode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_encode", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_encode_INLacdk_io_RWriter_Luc2char__V_args, // the arguments
  0, //arguments count
  Encoder_methods_encode_INLacdk_io_RWriter_Luc2char__V_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_encode_INLacdk_io_RWriter_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_encode_INLRString__LRString__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_encode_INLRString__LRString__args[] = 
{
  &Encoder_methods_encode_INLRString__LRString__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_encode_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_encode_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "encode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_encode", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_encode_INLRString__LRString__args, // the arguments
  0, //arguments count
  Encoder_methods_encode_INLRString__LRString__exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_encode_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_getEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_getEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_getEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_3_getEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_getEncoding__LREncoding__args, // the arguments
  0, //arguments count
  Encoder_methods_getEncoding__LREncoding__exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_getEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_getEncodingReplacement__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_getEncodingReplacement__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_getEncodingReplacement__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncodingReplacement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_4_getEncodingReplacement", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_getEncodingReplacement__LRbyteArray__args, // the arguments
  0, //arguments count
  Encoder_methods_getEncodingReplacement__LRbyteArray__exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_getEncodingReplacement__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::io::RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_args[] = 
{
  &Encoder_methods_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_arg_out,
  &Encoder_methods_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_handleUnmappable_INLacdk_io_RWriter_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleUnmappable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_handleUnmappable", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_args, // the arguments
  0, //arguments count
  Encoder_methods_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_handleUnmappable_INLacdk_io_RWriter_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_malformedInputAction__LCodingErrorAction__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_malformedInputAction__LCodingErrorAction__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_malformedInputAction__LCodingErrorAction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "malformedInputAction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_malformedInputAction", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_malformedInputAction__LCodingErrorAction__args, // the arguments
  0, //arguments count
  Encoder_methods_malformedInputAction__LCodingErrorAction__exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_malformedInputAction__LCodingErrorAction__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_onMalformedInput_I_V_arg_newAction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newAction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_onMalformedInput_I_V_args[] = 
{
  &Encoder_methods_onMalformedInput_I_V_arg_newAction,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_onMalformedInput_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_onMalformedInput_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onMalformedInput", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_onMalformedInput", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_onMalformedInput_I_V_args, // the arguments
  0, //arguments count
  Encoder_methods_onMalformedInput_I_V_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_onMalformedInput_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_onUnmappableCharacter_I_V_arg_newAction = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newAction", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_onUnmappableCharacter_I_V_args[] = 
{
  &Encoder_methods_onUnmappableCharacter_I_V_arg_newAction,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_onUnmappableCharacter_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_onUnmappableCharacter_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "onUnmappableCharacter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_onUnmappableCharacter", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_onUnmappableCharacter_I_V_args, // the arguments
  0, //arguments count
  Encoder_methods_onUnmappableCharacter_I_V_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_onUnmappableCharacter_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_reset", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_reset__V_args, // the arguments
  0, //arguments count
  Encoder_methods_reset__V_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoder_methods_setEncodingReplacement_INLRbyteArray__V_arg_replacement = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "replacement", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_setEncodingReplacement_INLRbyteArray__V_args[] = 
{
  &Encoder_methods_setEncodingReplacement_INLRbyteArray__V_arg_replacement,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_setEncodingReplacement_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_setEncodingReplacement_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEncodingReplacement", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_setEncodingReplacement", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_setEncodingReplacement_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  Encoder_methods_setEncodingReplacement_INLRbyteArray__V_exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_setEncodingReplacement_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoder_methods_unmappableCharacterAction__LCodingErrorAction__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoder_methods_unmappableCharacterAction__LCodingErrorAction__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoder_method_unmappableCharacterAction__LCodingErrorAction_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unmappableCharacterAction", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_unmappableCharacterAction", // alternative name of method
  -1, // altlabelHashCode
  Encoder_methods_unmappableCharacterAction__LCodingErrorAction__args, // the arguments
  0, //arguments count
  Encoder_methods_unmappableCharacterAction__LCodingErrorAction__exceptions, // the declared exceptions
  Encoder_MetainfoWrapper::Encoder_method_unmappableCharacterAction__LCodingErrorAction__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Encoder_methods[] = 
{
  &Encoder_method_Encoder_INLREncoding_II_LREncoder_,
  &Encoder_method_Encoder_INLREncoding__LREncoder_,
  &Encoder_method_Encoder_INLREncoding_I_LREncoder_,
  &Encoder_method_GetClass__L_acdk_lang_RClass_,
  &Encoder_method_bytesWritten__I,
  &Encoder_method_encode_INLacdk_io_RWriter_INLRString_I_V,
  &Encoder_method_encode_INLacdk_io_RWriter_INLRString__V,
  &Encoder_method_encode_INLacdk_io_RWriter_Luc2char__V,
  &Encoder_method_encode_INLRString__LRString_,
  &Encoder_method_getEncoding__LREncoding_,
  &Encoder_method_getEncodingReplacement__LRbyteArray_,
  &Encoder_method_handleUnmappable_INLacdk_io_RWriter_Luc2char__V,
  &Encoder_method_malformedInputAction__LCodingErrorAction_,
  &Encoder_method_onMalformedInput_I_V,
  &Encoder_method_onUnmappableCharacter_I_V,
  &Encoder_method_reset__V,
  &Encoder_method_setEncodingReplacement_INLRbyteArray__V,
  &Encoder_method_unmappableCharacterAction__LCodingErrorAction_,
  0
};


struct Encoder_MetaInfoInitializer
{  Encoder_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Encoder::clazzInfo();
    ci->fields =  _Encoder_fields;
    ci->methods =  _Encoder_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Encoder_MetaInfoInitializer Encoder_MetaInfoInitializer_staticinstance__;


struct Encoder_clazzInfo_ClazzAttributesResInitializer5
{
  Encoder_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoder_methods_Encoder_INLREncoding_II_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoder_methods_Encoder_INLREncoding_I_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoder_methods_Encoder_INLREncoding_II_LREncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoder_method_malformedInputAction__LCodingErrorAction_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoder_method_unmappableCharacterAction__LCodingErrorAction_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoder_methods_onUnmappableCharacter_I_V_arg_newAction, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoder_methods_onMalformedInput_I_V_arg_newAction, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

Encoder_clazzInfo_ClazzAttributesResInitializer5 Encoder_clazzInfo_ClazzAttributesResInitializer5_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
Encoding_create_array(int length)
{
  return new ObjectArrayImpl<REncoding>(length);
}

//static
::acdk::lang::RObject
Encoding_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Encoding_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_averageBytesPerChar__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
  ret = This->averageBytesPerChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_findEncoding_INLRString__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::findEncoding(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getAsciiEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::getAsciiEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getAvailableEncodings__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::getAvailableEncodings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getCEscapeEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::getCEscapeEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getDecoder__LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
    ret = (::acdk::lang::RObject)This->getDecoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getDecoder_I_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
    ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getDecoder_II_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
    ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getEncoder_II_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
    ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getEncoder__LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
    ret = (::acdk::lang::RObject)This->getEncoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getEncoder_I_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
    ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::getEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getEncoding_INLRString__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::getEncoding(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Encoding::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getUnicodeCEscapeEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::getUnicodeCEscapeEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_getUnicodeEscapeEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Encoding::getUnicodeEscapeEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_maxBytesPerChar__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
  ret = This->maxBytesPerChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Encoding_method_setEncoding_INLREncoding__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Encoding::setEncoding(::acdk::lang::dmi::castTo< REncoding>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  Encoding_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    Encoding* This = dmi_cast<Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo Encoding_fields__name = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  Encoding_MetainfoWrapper::Encoding_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _Encoding_fields[] = 
{
  &Encoding_fields__name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_Encoding_INLRString__LREncoding__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_Encoding_INLRString__LREncoding__args[] = 
{
  &Encoding_methods_Encoding_INLRString__LREncoding__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_Encoding_INLRString__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_Encoding_INLRString__LREncoding_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "Encoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  Encoding::clazzInfo(), // return type
  "_0_Encoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_Encoding_INLRString__LREncoding__args, // the arguments
  0, //arguments count
  Encoding_methods_Encoding_INLRString__LREncoding__exceptions, // the declared exceptions
  0, // this method cannot be invoked because abstract
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_j_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Encoding_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_averageBytesPerChar__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_averageBytesPerChar__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_averageBytesPerChar__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "averageBytesPerChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_h_averageBytesPerChar", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_averageBytesPerChar__F_args, // the arguments
  0, //arguments count
  Encoding_methods_averageBytesPerChar__F_exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_averageBytesPerChar__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_findEncoding_INLRString__LREncoding__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_findEncoding_INLRString__LREncoding__args[] = 
{
  &Encoding_methods_findEncoding_INLRString__LREncoding__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_findEncoding_INLRString__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_findEncoding_INLRString__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_4_findEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_findEncoding_INLRString__LREncoding__args, // the arguments
  0, //arguments count
  Encoding_methods_findEncoding_INLRString__LREncoding__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_findEncoding_INLRString__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getAsciiEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getAsciiEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getAsciiEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAsciiEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_6_getAsciiEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getAsciiEncoding__LREncoding__args, // the arguments
  0, //arguments count
  Encoding_methods_getAsciiEncoding__LREncoding__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getAsciiEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getAvailableEncodings__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getAvailableEncodings__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getAvailableEncodings__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableEncodings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_9_getAvailableEncodings", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getAvailableEncodings__LRStringArray__args, // the arguments
  0, //arguments count
  Encoding_methods_getAvailableEncodings__LRStringArray__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getAvailableEncodings__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getCEscapeEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getCEscapeEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getCEscapeEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCEscapeEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_5_getCEscapeEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getCEscapeEncoding__LREncoding__args, // the arguments
  0, //arguments count
  Encoding_methods_getCEscapeEncoding__LREncoding__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getCEscapeEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getDecoder__LRDecoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getDecoder__LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getDecoder__LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_e_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getDecoder__LRDecoder__args, // the arguments
  0, //arguments count
  Encoding_methods_getDecoder__LRDecoder__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getDecoder__LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getDecoder_I_LRDecoder__args[] = 
{
  &Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getDecoder_I_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getDecoder_I_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_f_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getDecoder_I_LRDecoder__args, // the arguments
  0, //arguments count
  Encoding_methods_getDecoder_I_LRDecoder__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getDecoder_I_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getDecoder_II_LRDecoder__args[] = 
{
  &Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed,
  &Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getDecoder_II_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getDecoder_II_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_d_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getDecoder_II_LRDecoder__args, // the arguments
  0, //arguments count
  Encoding_methods_getDecoder_II_LRDecoder__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getDecoder_II_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getEncoder_II_LREncoder__args[] = 
{
  &Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed,
  &Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getEncoder_II_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getEncoder_II_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_a_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getEncoder_II_LREncoder__args, // the arguments
  0, //arguments count
  Encoding_methods_getEncoder_II_LREncoder__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getEncoder_II_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getEncoder__LREncoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getEncoder__LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getEncoder__LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_b_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getEncoder__LREncoder__args, // the arguments
  0, //arguments count
  Encoding_methods_getEncoder__LREncoder__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getEncoder__LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getEncoder_I_LREncoder__args[] = 
{
  &Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getEncoder_I_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getEncoder_I_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_c_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getEncoder_I_LREncoder__args, // the arguments
  0, //arguments count
  Encoding_methods_getEncoder_I_LREncoder__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getEncoder_I_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getEncoding__LREncoding__exceptions[] =
{
  RIllegalCharsetNameException::clazzInfo(), 
  0
};

void Encoding_getEncoding__LREncoding__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IllegalCharsetNameException) == true)
    THROW_INSTANCE( RIllegalCharsetNameException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_1_getEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getEncoding__LREncoding__args, // the arguments
  0, //arguments count
  Encoding_methods_getEncoding__LREncoding__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getEncoding__LREncoding__dispatch, // invoke this method
  Encoding_getEncoding__LREncoding__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_getEncoding_INLRString__LREncoding__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getEncoding_INLRString__LREncoding__args[] = 
{
  &Encoding_methods_getEncoding_INLRString__LREncoding__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getEncoding_INLRString__LREncoding__exceptions[] =
{
  RIllegalCharsetNameException::clazzInfo(), 
  0
};

void Encoding_getEncoding_INLRString__LREncoding__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, IllegalCharsetNameException) == true)
    THROW_INSTANCE( RIllegalCharsetNameException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getEncoding_INLRString__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_3_getEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getEncoding_INLRString__LREncoding__args, // the arguments
  0, //arguments count
  Encoding_methods_getEncoding_INLRString__LREncoding__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getEncoding_INLRString__LREncoding__dispatch, // invoke this method
  Encoding_getEncoding_INLRString__LREncoding__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_getName", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Encoding_methods_getName__LRString__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getUnicodeCEscapeEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getUnicodeCEscapeEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getUnicodeCEscapeEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnicodeCEscapeEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_8_getUnicodeCEscapeEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getUnicodeCEscapeEncoding__LREncoding__args, // the arguments
  0, //arguments count
  Encoding_methods_getUnicodeCEscapeEncoding__LREncoding__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getUnicodeCEscapeEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_getUnicodeEscapeEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_getUnicodeEscapeEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_getUnicodeEscapeEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnicodeEscapeEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_7_getUnicodeEscapeEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_getUnicodeEscapeEncoding__LREncoding__args, // the arguments
  0, //arguments count
  Encoding_methods_getUnicodeEscapeEncoding__LREncoding__exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_getUnicodeEscapeEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_maxBytesPerChar__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_maxBytesPerChar__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_maxBytesPerChar__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "maxBytesPerChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_i_maxBytesPerChar", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_maxBytesPerChar__F_args, // the arguments
  0, //arguments count
  Encoding_methods_maxBytesPerChar__F_exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_maxBytesPerChar__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Encoding_methods_setEncoding_INLREncoding__V_arg_encoding = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoding", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Encoding_methods_setEncoding_INLREncoding__V_args[] = 
{
  &Encoding_methods_setEncoding_INLREncoding__V_arg_encoding,
  0
};

::acdk::lang::dmi::ClazzInfo* Encoding_methods_setEncoding_INLREncoding__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Encoding_method_setEncoding_INLREncoding__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setEncoding", // alternative name of method
  -1, // altlabelHashCode
  Encoding_methods_setEncoding_INLREncoding__V_args, // the arguments
  0, //arguments count
  Encoding_methods_setEncoding_INLREncoding__V_exceptions, // the declared exceptions
  Encoding_MetainfoWrapper::Encoding_method_setEncoding_INLREncoding__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Encoding_methods[] = 
{
  &Encoding_method_Encoding_INLRString__LREncoding_,
  &Encoding_method_GetClass__L_acdk_lang_RClass_,
  &Encoding_method_averageBytesPerChar__F,
  &Encoding_method_findEncoding_INLRString__LREncoding_,
  &Encoding_method_getAsciiEncoding__LREncoding_,
  &Encoding_method_getAvailableEncodings__LRStringArray_,
  &Encoding_method_getCEscapeEncoding__LREncoding_,
  &Encoding_method_getDecoder__LRDecoder_,
  &Encoding_method_getDecoder_I_LRDecoder_,
  &Encoding_method_getDecoder_II_LRDecoder_,
  &Encoding_method_getEncoder_II_LREncoder_,
  &Encoding_method_getEncoder__LREncoder_,
  &Encoding_method_getEncoder_I_LREncoder_,
  &Encoding_method_getEncoding__LREncoding_,
  &Encoding_method_getEncoding_INLRString__LREncoding_,
  &Encoding_method_getName__LRString_,
  &Encoding_method_getUnicodeCEscapeEncoding__LREncoding_,
  &Encoding_method_getUnicodeEscapeEncoding__LREncoding_,
  &Encoding_method_maxBytesPerChar__F,
  &Encoding_method_setEncoding_INLREncoding__V,
  0
};


struct Encoding_MetaInfoInitializer
{  Encoding_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Encoding::clazzInfo();
    ci->fields =  _Encoding_fields;
    ci->methods =  _Encoding_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Encoding_MetaInfoInitializer Encoding_MetaInfoInitializer_staticinstance__;


struct Encoding_clazzInfo_ClazzAttributesResInitializer6
{
  Encoding_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

Encoding_clazzInfo_ClazzAttributesResInitializer6 Encoding_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
IllegalCharsetNameException_create_array(int length)
{
  return new ObjectArrayImpl<RIllegalCharsetNameException>(length);
}

//static
::acdk::lang::RObject
IllegalCharsetNameException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IllegalCharsetNameException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalCharsetNameException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IllegalCharsetNameException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalCharsetNameException_method_IllegalCharsetNameException__LRIllegalCharsetNameException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalCharsetNameException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IllegalCharsetNameException_method_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IllegalCharsetNameException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_IllegalCharsetNameException(IN(::acdk::lang::RThrowable) ex)
{
  throw RIllegalCharsetNameException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _IllegalCharsetNameException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalCharsetNameException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalCharsetNameException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalCharsetNameException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IllegalCharsetNameException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IllegalCharsetNameException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IllegalCharsetNameException_MetainfoWrapper::IllegalCharsetNameException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalCharsetNameException_methods_IllegalCharsetNameException__LRIllegalCharsetNameException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalCharsetNameException_methods_IllegalCharsetNameException__LRIllegalCharsetNameException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalCharsetNameException_method_IllegalCharsetNameException__LRIllegalCharsetNameException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalCharsetNameException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalCharsetNameException::clazzInfo(), // return type
  "_0_IllegalCharsetNameException", // alternative name of method
  -1, // altlabelHashCode
  IllegalCharsetNameException_methods_IllegalCharsetNameException__LRIllegalCharsetNameException__args, // the arguments
  0, //arguments count
  IllegalCharsetNameException_methods_IllegalCharsetNameException__LRIllegalCharsetNameException__exceptions, // the declared exceptions
  IllegalCharsetNameException_MetainfoWrapper::IllegalCharsetNameException_method_IllegalCharsetNameException__LRIllegalCharsetNameException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IllegalCharsetNameException_methods_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IllegalCharsetNameException_methods_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException__args[] = 
{
  &IllegalCharsetNameException_methods_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* IllegalCharsetNameException_methods_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IllegalCharsetNameException_method_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IllegalCharsetNameException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IllegalCharsetNameException::clazzInfo(), // return type
  "_1_IllegalCharsetNameException", // alternative name of method
  -1, // altlabelHashCode
  IllegalCharsetNameException_methods_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException__args, // the arguments
  0, //arguments count
  IllegalCharsetNameException_methods_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException__exceptions, // the declared exceptions
  IllegalCharsetNameException_MetainfoWrapper::IllegalCharsetNameException_method_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IllegalCharsetNameException_methods[] = 
{
  &IllegalCharsetNameException_method_GetClass__L_acdk_lang_RClass_,
  &IllegalCharsetNameException_method_IllegalCharsetNameException__LRIllegalCharsetNameException_,
  &IllegalCharsetNameException_method_IllegalCharsetNameException_INLRString__LRIllegalCharsetNameException_,
  0
};


struct IllegalCharsetNameException_MetaInfoInitializer
{  IllegalCharsetNameException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IllegalCharsetNameException::clazzInfo();
    ci->fields =  _IllegalCharsetNameException_fields;
    ci->methods =  _IllegalCharsetNameException_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IllegalCharsetNameException_MetaInfoInitializer IllegalCharsetNameException_MetaInfoInitializer_staticinstance__;


struct IllegalCharsetNameException_clazzInfo_ClazzAttributesResInitializer7
{
  IllegalCharsetNameException_clazzInfo_ClazzAttributesResInitializer7()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)IllegalCharsetNameException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_IllegalCharsetNameException));
  }
};

IllegalCharsetNameException_clazzInfo_ClazzAttributesResInitializer7 IllegalCharsetNameException_clazzInfo_ClazzAttributesResInitializer7_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
IsoEncoding_create_array(int length)
{
  return new ObjectArrayImpl<RIsoEncoding>(length);
}

//static
::acdk::lang::RObject
IsoEncoding_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class IsoEncoding_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IsoEncoding::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_IsoEncoding_INLRString__LRIsoEncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new IsoEncoding(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_getAvailableEncodings__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IsoEncoding::getAvailableEncodings();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_getDecoder_II_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IsoEncoding* This = dmi_cast<IsoEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IsoEncoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_getDecoder__LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IsoEncoding* This = dmi_cast<IsoEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IsoEncoding::getDecoder();
    else
        ret = (::acdk::lang::RObject)This->getDecoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_getDecoder_I_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IsoEncoding* This = dmi_cast<IsoEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IsoEncoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_getEncoder_II_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IsoEncoding* This = dmi_cast<IsoEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IsoEncoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_getEncoder__LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IsoEncoding* This = dmi_cast<IsoEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IsoEncoding::getEncoder();
    else
        ret = (::acdk::lang::RObject)This->getEncoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_getEncoder_I_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    IsoEncoding* This = dmi_cast<IsoEncoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->IsoEncoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  IsoEncoding_method_getIsoEncoding_INLRString__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)IsoEncoding::getIsoEncoding(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _IsoEncoding_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IsoEncoding_methods_IsoEncoding_INLRString__LRIsoEncoding__arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_IsoEncoding_INLRString__LRIsoEncoding__args[] = 
{
  &IsoEncoding_methods_IsoEncoding_INLRString__LRIsoEncoding__arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_IsoEncoding_INLRString__LRIsoEncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_IsoEncoding_INLRString__LRIsoEncoding_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "IsoEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  IsoEncoding::clazzInfo(), // return type
  "_0_IsoEncoding", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_IsoEncoding_INLRString__LRIsoEncoding__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_IsoEncoding_INLRString__LRIsoEncoding__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_IsoEncoding_INLRString__LRIsoEncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_getAvailableEncodings__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_getAvailableEncodings__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_getAvailableEncodings__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAvailableEncodings", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_2_getAvailableEncodings", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_getAvailableEncodings__LRStringArray__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_getAvailableEncodings__LRStringArray__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_getAvailableEncodings__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IsoEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IsoEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_getDecoder_II_LRDecoder__args[] = 
{
  &IsoEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed,
  &IsoEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_getDecoder_II_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_getDecoder_II_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_6_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_getDecoder_II_LRDecoder__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_getDecoder_II_LRDecoder__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_getDecoder_II_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_getDecoder__LRDecoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_getDecoder__LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_getDecoder__LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_7_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_getDecoder__LRDecoder__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_getDecoder__LRDecoder__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_getDecoder__LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IsoEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_getDecoder_I_LRDecoder__args[] = 
{
  &IsoEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_getDecoder_I_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_getDecoder_I_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_8_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_getDecoder_I_LRDecoder__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_getDecoder_I_LRDecoder__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_getDecoder_I_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IsoEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo IsoEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_getEncoder_II_LREncoder__args[] = 
{
  &IsoEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed,
  &IsoEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_getEncoder_II_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_getEncoder_II_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_3_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_getEncoder_II_LREncoder__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_getEncoder_II_LREncoder__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_getEncoder_II_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_getEncoder__LREncoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_getEncoder__LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_getEncoder__LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_4_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_getEncoder__LREncoder__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_getEncoder__LREncoder__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_getEncoder__LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IsoEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_getEncoder_I_LREncoder__args[] = 
{
  &IsoEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_getEncoder_I_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_getEncoder_I_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_5_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_getEncoder_I_LREncoder__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_getEncoder_I_LREncoder__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_getEncoder_I_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo IsoEncoding_methods_getIsoEncoding_INLRString__LREncoding__arg_enc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* IsoEncoding_methods_getIsoEncoding_INLRString__LREncoding__args[] = 
{
  &IsoEncoding_methods_getIsoEncoding_INLRString__LREncoding__arg_enc,
  0
};

::acdk::lang::dmi::ClazzInfo* IsoEncoding_methods_getIsoEncoding_INLRString__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo IsoEncoding_method_getIsoEncoding_INLRString__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getIsoEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_1_getIsoEncoding", // alternative name of method
  -1, // altlabelHashCode
  IsoEncoding_methods_getIsoEncoding_INLRString__LREncoding__args, // the arguments
  0, //arguments count
  IsoEncoding_methods_getIsoEncoding_INLRString__LREncoding__exceptions, // the declared exceptions
  IsoEncoding_MetainfoWrapper::IsoEncoding_method_getIsoEncoding_INLRString__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _IsoEncoding_methods[] = 
{
  &IsoEncoding_method_GetClass__L_acdk_lang_RClass_,
  &IsoEncoding_method_IsoEncoding_INLRString__LRIsoEncoding_,
  &IsoEncoding_method_getAvailableEncodings__LRStringArray_,
  &IsoEncoding_method_getDecoder_II_LRDecoder_,
  &IsoEncoding_method_getDecoder__LRDecoder_,
  &IsoEncoding_method_getDecoder_I_LRDecoder_,
  &IsoEncoding_method_getEncoder_II_LREncoder_,
  &IsoEncoding_method_getEncoder__LREncoder_,
  &IsoEncoding_method_getEncoder_I_LREncoder_,
  &IsoEncoding_method_getIsoEncoding_INLRString__LREncoding_,
  0
};


struct IsoEncoding_MetaInfoInitializer
{  IsoEncoding_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = IsoEncoding::clazzInfo();
    ci->fields =  _IsoEncoding_fields;
    ci->methods =  _IsoEncoding_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
IsoEncoding_MetaInfoInitializer IsoEncoding_MetaInfoInitializer_staticinstance__;


struct IsoEncoding_clazzInfo_ClazzAttributesResInitializer8
{
  IsoEncoding_clazzInfo_ClazzAttributesResInitializer8()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IsoEncoding_methods_getEncoder_II_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IsoEncoding_methods_getEncoder_I_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IsoEncoding_methods_getEncoder_II_LREncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IsoEncoding_methods_getDecoder_II_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IsoEncoding_methods_getDecoder_I_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&IsoEncoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

IsoEncoding_clazzInfo_ClazzAttributesResInitializer8 IsoEncoding_clazzInfo_ClazzAttributesResInitializer8_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
UCS2Encoding_create_array(int length)
{
  return new ObjectArrayImpl<RUCS2Encoding>(length);
}

//static
::acdk::lang::RObject
UCS2Encoding_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class UCS2Encoding_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UCS2Encoding::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_UCS2Encoding_INLRString_I_LRUCS2Encoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UCS2Encoding(::acdk::lang::dmi::castTo< RString>(args[0], dc), (UCSEndianess)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getDecoder_I_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UCS2Encoding* This = dmi_cast<UCS2Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UCS2Encoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getDecoder_II_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UCS2Encoding* This = dmi_cast<UCS2Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UCS2Encoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getDecoder__LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UCS2Encoding* This = dmi_cast<UCS2Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UCS2Encoding::getDecoder();
    else
        ret = (::acdk::lang::RObject)This->getDecoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getEncoder__LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UCS2Encoding* This = dmi_cast<UCS2Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UCS2Encoding::getEncoder();
    else
        ret = (::acdk::lang::RObject)This->getEncoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getEncoder_I_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UCS2Encoding* This = dmi_cast<UCS2Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UCS2Encoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getEncoder_II_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UCS2Encoding* This = dmi_cast<UCS2Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UCS2Encoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getUCS2BeEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UCS2Encoding::getUCS2BeEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getUCS2Encoding_INLRString__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UCS2Encoding::getUCS2Encoding(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getUCS2LeEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UCS2Encoding::getUCS2LeEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UCS2Encoding_method_getUCS2NativeEncoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UCS2Encoding::getUCS2NativeEncoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  UCS2Encoding_fields__endian_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    UCS2Encoding* This = dmi_cast<UCS2Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_endian), flags);
    else
      This->_endian = (UCSEndianess)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo UCS2Encoding_fields__endian = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endian", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_fields__endian_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _UCS2Encoding_fields[] = 
{
  &UCS2Encoding_fields__endian,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__arg_endian = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "endian", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__args[] = 
{
  &UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__arg_name,
  &UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__arg_endian,
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_UCS2Encoding_INLRString_I_LRUCS2Encoding_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UCS2Encoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UCS2Encoding::clazzInfo(), // return type
  "_0_UCS2Encoding", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_UCS2Encoding_INLRString_I_LRUCS2Encoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getDecoder_I_LRDecoder__args[] = 
{
  &UCS2Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getDecoder_I_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getDecoder_I_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_a_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getDecoder_I_LRDecoder__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getDecoder_I_LRDecoder__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getDecoder_I_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getDecoder_II_LRDecoder__args[] = 
{
  &UCS2Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed,
  &UCS2Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getDecoder_II_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getDecoder_II_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_8_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getDecoder_II_LRDecoder__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getDecoder_II_LRDecoder__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getDecoder_II_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getDecoder__LRDecoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getDecoder__LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getDecoder__LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_9_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getDecoder__LRDecoder__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getDecoder__LRDecoder__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getDecoder__LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getEncoder__LREncoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getEncoder__LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getEncoder__LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_6_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getEncoder__LREncoder__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getEncoder__LREncoder__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getEncoder__LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getEncoder_I_LREncoder__args[] = 
{
  &UCS2Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getEncoder_I_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getEncoder_I_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_7_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getEncoder_I_LREncoder__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getEncoder_I_LREncoder__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getEncoder_I_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getEncoder_II_LREncoder__args[] = 
{
  &UCS2Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed,
  &UCS2Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getEncoder_II_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getEncoder_II_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_5_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getEncoder_II_LREncoder__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getEncoder_II_LREncoder__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getEncoder_II_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getUCS2BeEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getUCS2BeEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getUCS2BeEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUCS2BeEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_3_getUCS2BeEncoding", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getUCS2BeEncoding__LREncoding__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getUCS2BeEncoding__LREncoding__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getUCS2BeEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UCS2Encoding_methods_getUCS2Encoding_INLRString__LREncoding__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getUCS2Encoding_INLRString__LREncoding__args[] = 
{
  &UCS2Encoding_methods_getUCS2Encoding_INLRString__LREncoding__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getUCS2Encoding_INLRString__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getUCS2Encoding_INLRString__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUCS2Encoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_4_getUCS2Encoding", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getUCS2Encoding_INLRString__LREncoding__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getUCS2Encoding_INLRString__LREncoding__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getUCS2Encoding_INLRString__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getUCS2LeEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getUCS2LeEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getUCS2LeEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUCS2LeEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_2_getUCS2LeEncoding", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getUCS2LeEncoding__LREncoding__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getUCS2LeEncoding__LREncoding__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getUCS2LeEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UCS2Encoding_methods_getUCS2NativeEncoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UCS2Encoding_methods_getUCS2NativeEncoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UCS2Encoding_method_getUCS2NativeEncoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUCS2NativeEncoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_1_getUCS2NativeEncoding", // alternative name of method
  -1, // altlabelHashCode
  UCS2Encoding_methods_getUCS2NativeEncoding__LREncoding__args, // the arguments
  0, //arguments count
  UCS2Encoding_methods_getUCS2NativeEncoding__LREncoding__exceptions, // the declared exceptions
  UCS2Encoding_MetainfoWrapper::UCS2Encoding_method_getUCS2NativeEncoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _UCS2Encoding_methods[] = 
{
  &UCS2Encoding_method_GetClass__L_acdk_lang_RClass_,
  &UCS2Encoding_method_UCS2Encoding_INLRString_I_LRUCS2Encoding_,
  &UCS2Encoding_method_getDecoder_I_LRDecoder_,
  &UCS2Encoding_method_getDecoder_II_LRDecoder_,
  &UCS2Encoding_method_getDecoder__LRDecoder_,
  &UCS2Encoding_method_getEncoder__LREncoder_,
  &UCS2Encoding_method_getEncoder_I_LREncoder_,
  &UCS2Encoding_method_getEncoder_II_LREncoder_,
  &UCS2Encoding_method_getUCS2BeEncoding__LREncoding_,
  &UCS2Encoding_method_getUCS2Encoding_INLRString__LREncoding_,
  &UCS2Encoding_method_getUCS2LeEncoding__LREncoding_,
  &UCS2Encoding_method_getUCS2NativeEncoding__LREncoding_,
  0
};


struct UCS2Encoding_MetaInfoInitializer
{  UCS2Encoding_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = UCS2Encoding::clazzInfo();
    ci->fields =  _UCS2Encoding_fields;
    ci->methods =  _UCS2Encoding_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
UCS2Encoding_MetaInfoInitializer UCS2Encoding_MetaInfoInitializer_staticinstance__;


struct UCS2Encoding_clazzInfo_ClazzAttributesResInitializer9
{
  UCS2Encoding_clazzInfo_ClazzAttributesResInitializer9()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UCS2Encoding_methods_UCS2Encoding_INLRString_I_LRUCS2Encoding__arg_endian, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)UCSEndianessMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UCS2Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UCS2Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UCS2Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UCS2Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UCS2Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UCS2Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

UCS2Encoding_clazzInfo_ClazzAttributesResInitializer9 UCS2Encoding_clazzInfo_ClazzAttributesResInitializer9_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
UnmappableCharacterException_create_array(int length)
{
  return new ObjectArrayImpl<RUnmappableCharacterException>(length);
}

//static
::acdk::lang::RObject
UnmappableCharacterException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class UnmappableCharacterException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnmappableCharacterException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UnmappableCharacterException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnmappableCharacterException_method_UnmappableCharacterException__LRUnmappableCharacterException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UnmappableCharacterException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UnmappableCharacterException_method_UnmappableCharacterException_INLRString__LRUnmappableCharacterException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UnmappableCharacterException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_UnmappableCharacterException(IN(::acdk::lang::RThrowable) ex)
{
  throw RUnmappableCharacterException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _UnmappableCharacterException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnmappableCharacterException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnmappableCharacterException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnmappableCharacterException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  UnmappableCharacterException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  UnmappableCharacterException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  UnmappableCharacterException_MetainfoWrapper::UnmappableCharacterException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnmappableCharacterException_methods_UnmappableCharacterException__LRUnmappableCharacterException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UnmappableCharacterException_methods_UnmappableCharacterException__LRUnmappableCharacterException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnmappableCharacterException_method_UnmappableCharacterException__LRUnmappableCharacterException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UnmappableCharacterException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UnmappableCharacterException::clazzInfo(), // return type
  "_0_UnmappableCharacterException", // alternative name of method
  -1, // altlabelHashCode
  UnmappableCharacterException_methods_UnmappableCharacterException__LRUnmappableCharacterException__args, // the arguments
  0, //arguments count
  UnmappableCharacterException_methods_UnmappableCharacterException__LRUnmappableCharacterException__exceptions, // the declared exceptions
  UnmappableCharacterException_MetainfoWrapper::UnmappableCharacterException_method_UnmappableCharacterException__LRUnmappableCharacterException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UnmappableCharacterException_methods_UnmappableCharacterException_INLRString__LRUnmappableCharacterException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UnmappableCharacterException_methods_UnmappableCharacterException_INLRString__LRUnmappableCharacterException__args[] = 
{
  &UnmappableCharacterException_methods_UnmappableCharacterException_INLRString__LRUnmappableCharacterException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* UnmappableCharacterException_methods_UnmappableCharacterException_INLRString__LRUnmappableCharacterException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UnmappableCharacterException_method_UnmappableCharacterException_INLRString__LRUnmappableCharacterException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UnmappableCharacterException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UnmappableCharacterException::clazzInfo(), // return type
  "_1_UnmappableCharacterException", // alternative name of method
  -1, // altlabelHashCode
  UnmappableCharacterException_methods_UnmappableCharacterException_INLRString__LRUnmappableCharacterException__args, // the arguments
  0, //arguments count
  UnmappableCharacterException_methods_UnmappableCharacterException_INLRString__LRUnmappableCharacterException__exceptions, // the declared exceptions
  UnmappableCharacterException_MetainfoWrapper::UnmappableCharacterException_method_UnmappableCharacterException_INLRString__LRUnmappableCharacterException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _UnmappableCharacterException_methods[] = 
{
  &UnmappableCharacterException_method_GetClass__L_acdk_lang_RClass_,
  &UnmappableCharacterException_method_UnmappableCharacterException__LRUnmappableCharacterException_,
  &UnmappableCharacterException_method_UnmappableCharacterException_INLRString__LRUnmappableCharacterException_,
  0
};


struct UnmappableCharacterException_MetaInfoInitializer
{  UnmappableCharacterException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = UnmappableCharacterException::clazzInfo();
    ci->fields =  _UnmappableCharacterException_fields;
    ci->methods =  _UnmappableCharacterException_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
UnmappableCharacterException_MetaInfoInitializer UnmappableCharacterException_MetaInfoInitializer_staticinstance__;


struct UnmappableCharacterException_clazzInfo_ClazzAttributesResInitializer10
{
  UnmappableCharacterException_clazzInfo_ClazzAttributesResInitializer10()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)UnmappableCharacterException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_UnmappableCharacterException));
  }
};

UnmappableCharacterException_clazzInfo_ClazzAttributesResInitializer10 UnmappableCharacterException_clazzInfo_ClazzAttributesResInitializer10_instance;



} // namespace acdk
} // namespace locale


namespace acdk { 
namespace locale { 


//static
::acdk::lang::RObject
UTF8Encoding_create_array(int length)
{
  return new ObjectArrayImpl<RUTF8Encoding>(length);
}

//static
::acdk::lang::RObject
UTF8Encoding_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class UTF8Encoding_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UTF8Encoding::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_UTF8Encoding__LRUTF8Encoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new UTF8Encoding();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_getDecoder__LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UTF8Encoding* This = dmi_cast<UTF8Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UTF8Encoding::getDecoder();
    else
        ret = (::acdk::lang::RObject)This->getDecoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_getDecoder_I_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UTF8Encoding* This = dmi_cast<UTF8Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UTF8Encoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_getDecoder_II_LRDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UTF8Encoding* This = dmi_cast<UTF8Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UTF8Encoding::getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getDecoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_getEncoder_II_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UTF8Encoding* This = dmi_cast<UTF8Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UTF8Encoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc), (CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_getEncoder__LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UTF8Encoding* This = dmi_cast<UTF8Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UTF8Encoding::getEncoder();
    else
        ret = (::acdk::lang::RObject)This->getEncoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_getEncoder_I_LREncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    UTF8Encoding* This = dmi_cast<UTF8Encoding>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->UTF8Encoding::getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getEncoder((CodingErrorAction)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  UTF8Encoding_method_getUTF8Encoding__LREncoding__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)UTF8Encoding::getUTF8Encoding();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _UTF8Encoding_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_UTF8Encoding__LRUTF8Encoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_UTF8Encoding__LRUTF8Encoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_UTF8Encoding__LRUTF8Encoding_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "UTF8Encoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  UTF8Encoding::clazzInfo(), // return type
  "_0_UTF8Encoding", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_UTF8Encoding__LRUTF8Encoding__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_UTF8Encoding__LRUTF8Encoding__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_UTF8Encoding__LRUTF8Encoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_getDecoder__LRDecoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_getDecoder__LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_getDecoder__LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_6_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_getDecoder__LRDecoder__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_getDecoder__LRDecoder__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_getDecoder__LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UTF8Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_getDecoder_I_LRDecoder__args[] = 
{
  &UTF8Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_getDecoder_I_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_getDecoder_I_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_7_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_getDecoder_I_LRDecoder__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_getDecoder_I_LRDecoder__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_getDecoder_I_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UTF8Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UTF8Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_getDecoder_II_LRDecoder__args[] = 
{
  &UTF8Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed,
  &UTF8Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_getDecoder_II_LRDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_getDecoder_II_LRDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDecoder::clazzInfo(), // return type
  "_5_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_getDecoder_II_LRDecoder__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_getDecoder_II_LRDecoder__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_getDecoder_II_LRDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UTF8Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo UTF8Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onUnmappable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_getEncoder_II_LREncoder__args[] = 
{
  &UTF8Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed,
  &UTF8Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable,
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_getEncoder_II_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_getEncoder_II_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_2_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_getEncoder_II_LREncoder__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_getEncoder_II_LREncoder__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_getEncoder_II_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_getEncoder__LREncoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_getEncoder__LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_getEncoder__LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_3_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_getEncoder__LREncoder__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_getEncoder__LREncoder__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_getEncoder__LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo UTF8Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "onMalformed", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_getEncoder_I_LREncoder__args[] = 
{
  &UTF8Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed,
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_getEncoder_I_LREncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_getEncoder_I_LREncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoder::clazzInfo(), // return type
  "_4_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_getEncoder_I_LREncoder__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_getEncoder_I_LREncoder__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_getEncoder_I_LREncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* UTF8Encoding_methods_getUTF8Encoding__LREncoding__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* UTF8Encoding_methods_getUTF8Encoding__LREncoding__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo UTF8Encoding_method_getUTF8Encoding__LREncoding_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUTF8Encoding", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REncoding::clazzInfo(), // return type
  "_1_getUTF8Encoding", // alternative name of method
  -1, // altlabelHashCode
  UTF8Encoding_methods_getUTF8Encoding__LREncoding__args, // the arguments
  0, //arguments count
  UTF8Encoding_methods_getUTF8Encoding__LREncoding__exceptions, // the declared exceptions
  UTF8Encoding_MetainfoWrapper::UTF8Encoding_method_getUTF8Encoding__LREncoding__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _UTF8Encoding_methods[] = 
{
  &UTF8Encoding_method_GetClass__L_acdk_lang_RClass_,
  &UTF8Encoding_method_UTF8Encoding__LRUTF8Encoding_,
  &UTF8Encoding_method_getDecoder__LRDecoder_,
  &UTF8Encoding_method_getDecoder_I_LRDecoder_,
  &UTF8Encoding_method_getDecoder_II_LRDecoder_,
  &UTF8Encoding_method_getEncoder_II_LREncoder_,
  &UTF8Encoding_method_getEncoder__LREncoder_,
  &UTF8Encoding_method_getEncoder_I_LREncoder_,
  &UTF8Encoding_method_getUTF8Encoding__LREncoding_,
  0
};


struct UTF8Encoding_MetaInfoInitializer
{  UTF8Encoding_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = UTF8Encoding::clazzInfo();
    ci->fields =  _UTF8Encoding_fields;
    ci->methods =  _UTF8Encoding_methods;
    ci->_scopeParent = acdk_locale_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
UTF8Encoding_MetaInfoInitializer UTF8Encoding_MetaInfoInitializer_staticinstance__;


struct UTF8Encoding_clazzInfo_ClazzAttributesResInitializer11
{
  UTF8Encoding_clazzInfo_ClazzAttributesResInitializer11()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UTF8Encoding_methods_getEncoder_II_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UTF8Encoding_methods_getEncoder_I_LREncoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UTF8Encoding_methods_getEncoder_II_LREncoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UTF8Encoding_methods_getDecoder_II_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UTF8Encoding_methods_getDecoder_I_LRDecoder__arg_onMalformed, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&UTF8Encoding_methods_getDecoder_II_LRDecoder__arg_onUnmappable, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)CodingErrorActionMetaInf::GetEnumInfo()));
  }
};

UTF8Encoding_clazzInfo_ClazzAttributesResInitializer11 UTF8Encoding_clazzInfo_ClazzAttributesResInitializer11_instance;



} // namespace acdk
} // namespace locale


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) locale_dummyExportFunc() {}
#endif

