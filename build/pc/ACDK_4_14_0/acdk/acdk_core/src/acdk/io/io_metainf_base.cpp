// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "AbstractCharFilterReader.h"
#include "AbstractCharFilterWriter.h"
#include "AbstractCharReader.h"
#include "AbstractCharWriter.h"
#include "AbstractFilterReader.h"
#include "AbstractFilterWriter.h"
#include "AbstractObjectReader.h"
#include "AbstractObjectWriter.h"
#include "AbstractReader.h"
#include "AbstractStorageReader.h"
#include "AbstractStorageWriter.h"
#include "AbstractWriter.h"
#include "ASCIIDataReader.h"
#include "ASCIIDataWriter.h"
#include "BinaryDataReader.h"
#include "BinaryDataWriter.h"
#include "BinaryObjectReader.h"
#include "BinaryObjectWriter.h"
#include "BufferedReader.h"
#include "BufferedWriter.h"
#include "ByteBufferReader.h"
#include "ByteBufferWriter.h"
#include "BytePtrReader.h"
#include "ByteToCharReader.h"
#include "ByteToCharWriter.h"
#include "CharArrayReader.h"
#include "CharArrayWriter.h"
#include "CharReader.h"
#include "CharToByteReader.h"
#include "CharToByteWriter.h"
#include "CharWriter.h"
#include "ConsoleCharReader.h"
#include "ConsoleCharWriter.h"
#include "ConsoleReader.h"
#include "ConsoleWriter.h"
#include "DataReader.h"
#include "DataWriter.h"
#include "EOFException.h"
#include "File.h"
#include "FileAbstractImpl.h"
#include "FileDescriptor.h"
#include "FileFilter.h"
#include "FileImpl.h"
#include "FileInfo.h"
#include "FilenameFilter.h"
#include "FileNotFoundException.h"
#include "FileReader.h"
#include "FileReaderWriterImpl.h"
#include "FileStandardImpl.h"
#include "FileStatus.h"
#include "FileSystem.h"
#include "FileSystemFactory.h"
#include "FileWriter.h"
#include "FilterReader.h"
#include "FilterWriter.h"
#include "GlobFilenameFilter.h"
#include "InputReader.h"
#include "io.h"
#include "IOException.h"
#include "io_all.h"
#include "JoinedReader.h"
#include "LineNumberCharReader.h"
#include "LineNumberReader.h"
#include "MemoryMappedFile.h"
#include "MemReader.h"
#include "MemWriter.h"
#include "NullWriter.h"
#include "ObjectReader.h"
#include "ObjectStreamException.h"
#include "ObjectWriter.h"
#include "OutputDebugStringWriter.h"
#include "PipedReader.h"
#include "PipedWriter.h"
#include "PrintWriter.h"
#include "PushbackCharReader.h"
#include "PushbackReader.h"
#include "RandomAccessFile.h"
#include "Reader.h"
#include "RessourceFileImpl.h"
#include "RessourceFileSystem.h"
#include "Serializable.h"
#include "SerializedObjectDescriptor.h"
#include "StandardFileSystem.h"
#include "Storage.h"
#include "StreamTokenizer.h"
#include "StringReader.h"
#include "StringWriter.h"
#include "SubReader.h"
#include "TeeCharWriter.h"
#include "TeeReader.h"
#include "TeeWriter.h"
#include "Writer.h"

namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractCharFilterReader_super_AbstractCharReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractCharFilterReader_interfaces[] =
{
  &_AbstractCharFilterReader_super_AbstractCharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCharFilterReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractCharFilterReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractCharFilterReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractCharFilterReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractCharFilterReader(AbstractCharFilterReader::clazzInfo());

::acdk::lang::RClass
AbstractCharFilterReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractCharFilterReader::getCollectableFields(FieldReferences& fields)
{
  AbstractCharReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RCharReader _in 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractCharFilterWriter_super_AbstractCharWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractCharFilterWriter_interfaces[] =
{
  &_AbstractCharFilterWriter_super_AbstractCharWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCharFilterWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractCharFilterWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractCharFilterWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractCharFilterWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractCharFilterWriter(AbstractCharFilterWriter::clazzInfo());

::acdk::lang::RClass
AbstractCharFilterWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractCharFilterWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractCharWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // RCharWriter _out 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractCharReader_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractCharReader_super_CharReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  CharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractCharReader_interfaces[] =
{
  &_AbstractCharReader_super_acdk__lang__Object,
  &_AbstractCharReader_super_CharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCharReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractCharReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractCharReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractCharReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractCharReader(AbstractCharReader::clazzInfo());

::acdk::lang::RClass
AbstractCharReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractCharReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_iolock._ref_this()); // RObject _iolock 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractCharWriter_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractCharWriter_super_acdk__io__CharWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::CharWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractCharWriter_interfaces[] =
{
  &_AbstractCharWriter_super_acdk__lang__Object,
  &_AbstractCharWriter_super_acdk__io__CharWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractCharWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractCharWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractCharWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractCharWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractCharWriter(AbstractCharWriter::clazzInfo());

::acdk::lang::RClass
AbstractCharWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractCharWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_iolock._ref_this()); // RObject _iolock 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractFilterReader_super_AbstractReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractFilterReader_super_FilterReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractFilterReader_interfaces[] =
{
  &_AbstractFilterReader_super_AbstractReader,
  &_AbstractFilterReader_super_FilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFilterReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractFilterReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractFilterReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractFilterReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractFilterReader(AbstractFilterReader::clazzInfo());

::acdk::lang::RClass
AbstractFilterReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractFilterReader::getCollectableFields(FieldReferences& fields)
{
  AbstractReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RReader _in 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractFilterWriter_super_AbstractWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractFilterWriter_super_FilterWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractFilterWriter_interfaces[] =
{
  &_AbstractFilterWriter_super_AbstractWriter,
  &_AbstractFilterWriter_super_FilterWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFilterWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractFilterWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractFilterWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractFilterWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractFilterWriter(AbstractFilterWriter::clazzInfo());

::acdk::lang::RClass
AbstractFilterWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractFilterWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // RWriter _out 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractObjectReader_super___acdk__io__AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractObjectReader_super___acdk__io__ObjectReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::ObjectReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractObjectReader_interfaces[] =
{
  &_AbstractObjectReader_super___acdk__io__AbstractFilterReader,
  &_AbstractObjectReader_super___acdk__io__ObjectReader,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractObjectReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractObjectReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractObjectReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractObjectReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractObjectReader(AbstractObjectReader::clazzInfo());

::acdk::lang::RClass
AbstractObjectReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractObjectReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, AbstractFilterReader)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_lref._ref_this()); // ::acdk::util::RTreeMap _lref 
  fields.push_back((::acdk::lang::RObject*)this->_lrefs._ref_this()); // RObjectArray _lrefs 
  fields.push_back((::acdk::lang::RObject*)this->_stringCache._ref_this()); // RStringArray _stringCache 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeNamed = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeNamed", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeNamed, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeTagged = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeTagged", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeTagged, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeLabeled = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeLabeled", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeLabeled, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeReduced = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeReduced", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeReduced, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeJoinedStrings = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeJoinedStrings", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeJoinedStrings, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeOnlySerializable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeOnlySerializable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeOnlySerializable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeAll = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeAll", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeAll, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeIgnoreNotSerializable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeIgnoreNotSerializable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeIgnoreNotSerializable, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeCheckCompatVersion = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeCheckCompatVersion", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeCheckCompatVersion, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeUseSerializedObjectDescriptor = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeUseSerializedObjectDescriptor", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeUseSerializedObjectDescriptor, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SerializeFlags_SerializeDefaultFlags = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SerializeDefaultFlags", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SerializeDefaultFlags, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SerializeFlags_enumValues[] = {
  &SerializeFlags_SerializeNamed,
  &SerializeFlags_SerializeTagged,
  &SerializeFlags_SerializeLabeled,
  &SerializeFlags_SerializeReduced,
  &SerializeFlags_SerializeJoinedStrings,
  &SerializeFlags_SerializeOnlySerializable,
  &SerializeFlags_SerializeAll,
  &SerializeFlags_SerializeIgnoreNotSerializable,
  &SerializeFlags_SerializeCheckCompatVersion,
  &SerializeFlags_SerializeUseSerializedObjectDescriptor,
  &SerializeFlags_SerializeDefaultFlags,
0
};

::acdk::lang::dmi::ClazzEnumInfo* SerializeFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo SerializeFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SerializeFlags", // name
  -1, // hashCode
  "acdk/io", // ns
  0, // _scopeParent
  0, // _nextSibling
  SerializeFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_SerializeFlags(&SerializeFlags_enumInfo);

  return &SerializeFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_SerializeFlagsEnumInfo(SerializeFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractObjectWriter_super___acdk__io__AbstractFilterWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::AbstractFilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractObjectWriter_super___acdk__io__ObjectWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::ObjectWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractObjectWriter_interfaces[] =
{
  &_AbstractObjectWriter_super___acdk__io__AbstractFilterWriter,
  &_AbstractObjectWriter_super___acdk__io__ObjectWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractObjectWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractObjectWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractObjectWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractObjectWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractObjectWriter(AbstractObjectWriter::clazzInfo());

::acdk::lang::RClass
AbstractObjectWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractObjectWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, AbstractFilterWriter)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_stringCache._ref_this()); // ::acdk::util::RTreeMap _stringCache 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractReader_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractReader_super_Reader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Reader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractReader_interfaces[] =
{
  &_AbstractReader_super_acdk__lang__Object,
  &_AbstractReader_super_Reader,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractReader(AbstractReader::clazzInfo());

::acdk::lang::RClass
AbstractReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->iolock._ref_this()); // RObject iolock 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractStorageReader_super_AbstractReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractStorageReader_super_Storage =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Storage::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractStorageReader_interfaces[] =
{
  &_AbstractStorageReader_super_AbstractReader,
  &_AbstractStorageReader_super_Storage,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractStorageReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractStorageReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractStorageReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractStorageReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractStorageReader(AbstractStorageReader::clazzInfo());

::acdk::lang::RClass
AbstractStorageReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractStorageReader::getCollectableFields(FieldReferences& fields)
{
  AbstractReader::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractStorageWriter_super_AbstractWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractStorageWriter_super_Storage =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Storage::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractStorageWriter_interfaces[] =
{
  &_AbstractStorageWriter_super_AbstractWriter,
  &_AbstractStorageWriter_super_Storage,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractStorageWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractStorageWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractStorageWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractStorageWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractStorageWriter(AbstractStorageWriter::clazzInfo());

::acdk::lang::RClass
AbstractStorageWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractStorageWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractWriter::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _AbstractWriter_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractWriter_super_Writer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Writer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractWriter_interfaces[] =
{
  &_AbstractWriter_super_acdk__lang__Object,
  &_AbstractWriter_super_Writer,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "AbstractWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractWriter(AbstractWriter::clazzInfo());

::acdk::lang::RClass
AbstractWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->iolock._ref_this()); // acdk::lang::RObject iolock 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ASCIIDataReader_super_AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ASCIIDataReader_super_DataReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DataReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ASCIIDataReader_interfaces[] =
{
  &_ASCIIDataReader_super_AbstractFilterReader,
  &_ASCIIDataReader_super_DataReader,
  0
};

::acdk::lang::dmi::ClazzInfo* ASCIIDataReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ASCIIDataReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ASCIIDataReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ASCIIDataReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ASCIIDataReader(ASCIIDataReader::clazzInfo());

::acdk::lang::RClass
ASCIIDataReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ASCIIDataReader::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterReader::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ASCIIDataWriter_super_AbstractFilterWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ASCIIDataWriter_super_DataWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DataWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ASCIIDataWriter_interfaces[] =
{
  &_ASCIIDataWriter_super_AbstractFilterWriter,
  &_ASCIIDataWriter_super_DataWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ASCIIDataWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ASCIIDataWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ASCIIDataWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ASCIIDataWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ASCIIDataWriter(ASCIIDataWriter::clazzInfo());

::acdk::lang::RClass
ASCIIDataWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ASCIIDataWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterWriter::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _BinaryDataReader_super_AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _BinaryDataReader_super_DataReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DataReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BinaryDataReader_interfaces[] =
{
  &_BinaryDataReader_super_AbstractFilterReader,
  &_BinaryDataReader_super_DataReader,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BinaryDataReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BinaryDataReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BinaryDataReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BinaryDataReader(BinaryDataReader::clazzInfo());

::acdk::lang::RClass
BinaryDataReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BinaryDataReader::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterReader::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _BinaryDataWriter_super_AbstractFilterWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _BinaryDataWriter_super_DataWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DataWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BinaryDataWriter_interfaces[] =
{
  &_BinaryDataWriter_super_AbstractFilterWriter,
  &_BinaryDataWriter_super_DataWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BinaryDataWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BinaryDataWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BinaryDataWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BinaryDataWriter(BinaryDataWriter::clazzInfo());

::acdk::lang::RClass
BinaryDataWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BinaryDataWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterWriter::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _BufferedReader_super_AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BufferedReader_interfaces[] =
{
  &_BufferedReader_super_AbstractFilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BufferedReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BufferedReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BufferedReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BufferedReader(BufferedReader::clazzInfo());

::acdk::lang::RClass
BufferedReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BufferedReader::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RbyteArray _buffer 
  fields.push_back((::acdk::lang::RObject*)this->_markbuf._ref_this()); // RbyteArray _markbuf 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _BufferedWriter_super_AbstractFilterWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BufferedWriter_interfaces[] =
{
  &_BufferedWriter_super_AbstractFilterWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BufferedWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BufferedWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BufferedWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BufferedWriter(BufferedWriter::clazzInfo());

::acdk::lang::RClass
BufferedWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BufferedWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RbyteArray _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ByteBufferStorage_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ByteBufferStorage_super_Storage =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Storage::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ByteBufferStorage_interfaces[] =
{
  &_ByteBufferStorage_super_acdk__lang__Object,
  &_ByteBufferStorage_super_Storage,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferStorage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "ByteBufferStorage", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ByteBufferStorage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ByteBufferStorage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ByteBufferStorage(ByteBufferStorage::clazzInfo());

::acdk::lang::RClass
ByteBufferStorage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ByteBufferStorage::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ByteBufferReader_super_acdk__io__AbstractReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::AbstractReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ByteBufferReader_interfaces[] =
{
  &_ByteBufferReader_super_acdk__io__AbstractReader,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ByteBufferReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ByteBufferReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ByteBufferReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ByteBufferReader(ByteBufferReader::clazzInfo());

::acdk::lang::RClass
ByteBufferReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ByteBufferReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, AbstractReader)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RReadByteBuffer _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ByteBufferPtrReader_super_acdk__io__BytePtrReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::BytePtrReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ByteBufferPtrReader_interfaces[] =
{
  &_ByteBufferPtrReader_super_acdk__io__BytePtrReader,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferPtrReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ByteBufferPtrReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ByteBufferPtrReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ByteBufferPtrReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ByteBufferPtrReader(ByteBufferPtrReader::clazzInfo());

::acdk::lang::RClass
ByteBufferPtrReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ByteBufferPtrReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, BytePtrReader)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // acdk::lang::RReadByteBuffer _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _BytePtrWriter_super_acdk__io__AbstractWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::AbstractWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BytePtrWriter_interfaces[] =
{
  &_BytePtrWriter_super_acdk__io__AbstractWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "BytePtrWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BytePtrWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BytePtrWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BytePtrWriter(BytePtrWriter::clazzInfo());

::acdk::lang::RClass
BytePtrWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BytePtrWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, AbstractWriter)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_obj._ref_this()); // RObject _obj 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ByteBufferWriter_super_acdk__io__AbstractWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::AbstractWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ByteBufferWriter_interfaces[] =
{
  &_ByteBufferWriter_super_acdk__io__AbstractWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ByteBufferWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ByteBufferWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ByteBufferWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ByteBufferWriter(ByteBufferWriter::clazzInfo());

::acdk::lang::RClass
ByteBufferWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ByteBufferWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, AbstractWriter)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RWriteByteBuffer _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ByteBufferAppendWriter_super_acdk__io__AbstractWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::AbstractWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ByteBufferAppendWriter_interfaces[] =
{
  &_ByteBufferAppendWriter_super_acdk__io__AbstractWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ByteBufferAppendWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ByteBufferAppendWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ByteBufferAppendWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ByteBufferAppendWriter(ByteBufferAppendWriter::clazzInfo());

::acdk::lang::RClass
ByteBufferAppendWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ByteBufferAppendWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, AbstractWriter)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RFlexByteBuffer _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _BytePtrReader_super_acdk__io__AbstractReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::AbstractReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _BytePtrReader_interfaces[] =
{
  &_BytePtrReader_super_acdk__io__AbstractReader,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "BytePtrReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _BytePtrReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    BytePtrReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_BytePtrReader(BytePtrReader::clazzInfo());

::acdk::lang::RClass
BytePtrReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
BytePtrReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, AbstractReader)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ByteToCharReader_super_AbstractCharReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ByteToCharReader_interfaces[] =
{
  &_ByteToCharReader_super_AbstractCharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ByteToCharReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ByteToCharReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ByteToCharReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ByteToCharReader(ByteToCharReader::clazzInfo());

::acdk::lang::RClass
ByteToCharReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ByteToCharReader::getCollectableFields(FieldReferences& fields)
{
  AbstractCharReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_decoder._ref_this()); // acdk::locale::RDecoder _decoder 
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RReader _in 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ByteToCharWriter_super_AbstractWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ByteToCharWriter_interfaces[] =
{
  &_ByteToCharWriter_super_AbstractWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ByteToCharWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ByteToCharWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ByteToCharWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ByteToCharWriter(ByteToCharWriter::clazzInfo());

::acdk::lang::RClass
ByteToCharWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ByteToCharWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cout._ref_this()); // RCharWriter _cout 
  fields.push_back((::acdk::lang::RObject*)this->_decoder._ref_this()); // acdk::locale::RDecoder _decoder 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _CharArrayReader_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _CharArrayReader_super_CharReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  CharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CharArrayReader_interfaces[] =
{
  &_CharArrayReader_super_acdk__lang__Object,
  &_CharArrayReader_super_CharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CharArrayReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CharArrayReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CharArrayReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CharArrayReader(CharArrayReader::clazzInfo());

::acdk::lang::RClass
CharArrayReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CharArrayReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RuccharArray _buffer 
  fields.push_back((::acdk::lang::RObject*)this->_decoder._ref_this()); // acdk::locale::RDecoder _decoder 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _CharArrayWriter_super_AbstractCharWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CharArrayWriter_interfaces[] =
{
  &_CharArrayWriter_super_AbstractCharWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CharArrayWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CharArrayWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CharArrayWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CharArrayWriter(CharArrayWriter::clazzInfo());

::acdk::lang::RClass
CharArrayWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CharArrayWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractCharWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_sb._ref_this()); // RuccharArray _sb 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _CharReader_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "CharReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CharReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CharReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CharReader(CharReader::clazzInfo());

::acdk::lang::RClass
CharReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CharReader::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _CharToByteReader_super_AbstractReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CharToByteReader_interfaces[] =
{
  &_CharToByteReader_super_AbstractReader,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CharToByteReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CharToByteReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CharToByteReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CharToByteReader(CharToByteReader::clazzInfo());

::acdk::lang::RClass
CharToByteReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CharToByteReader::getCollectableFields(FieldReferences& fields)
{
  AbstractReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cin._ref_this()); // RCharReader _cin 
  fields.push_back((::acdk::lang::RObject*)this->_encoder._ref_this()); // acdk::locale::REncoder _encoder 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _CharToByteWriter_super_AbstractCharWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _CharToByteWriter_interfaces[] =
{
  &_CharToByteWriter_super_AbstractCharWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "CharToByteWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CharToByteWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CharToByteWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CharToByteWriter(CharToByteWriter::clazzInfo());

::acdk::lang::RClass
CharToByteWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CharToByteWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractCharWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_encoder._ref_this()); // acdk::locale::REncoder _encoder 
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // RWriter _out 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo* _CharWriter_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "CharWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _CharWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    CharWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_CharWriter(CharWriter::clazzInfo());

::acdk::lang::RClass
CharWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
CharWriter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ConsoleCharReader_super_AbstractCharReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConsoleCharReader_interfaces[] =
{
  &_ConsoleCharReader_super_AbstractCharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ConsoleCharReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ConsoleCharReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ConsoleCharReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ConsoleCharReader(ConsoleCharReader::clazzInfo());

::acdk::lang::RClass
ConsoleCharReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ConsoleCharReader::getCollectableFields(FieldReferences& fields)
{
  AbstractCharReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_decoder._ref_this()); // acdk::locale::RDecoder _decoder 
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RCharReader _in 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ConsoleCharWriter_super_AbstractCharWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConsoleCharWriter_interfaces[] =
{
  &_ConsoleCharWriter_super_AbstractCharWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ConsoleCharWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ConsoleCharWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ConsoleCharWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ConsoleCharWriter(ConsoleCharWriter::clazzInfo());

::acdk::lang::RClass
ConsoleCharWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ConsoleCharWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractCharWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_encoder._ref_this()); // acdk::locale::REncoder _encoder 
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // RCharWriter _out 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo InChannel_InvalidInChannel = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "InvalidInChannel", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::InvalidInChannel, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo InChannel_CinInChannel = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CinInChannel", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::CinInChannel, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* InChannel_enumValues[] = {
  &InChannel_InvalidInChannel,
  &InChannel_CinInChannel,
0
};

::acdk::lang::dmi::ClazzEnumInfo* InChannelMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo InChannel_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "InChannel", // name
  -1, // hashCode
  "acdk/io", // ns
  0, // _scopeParent
  0, // _nextSibling
  InChannel_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_InChannel(&InChannel_enumInfo);

  return &InChannel_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_InChannelEnumInfo(InChannelMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ConsoleReader_super_AbstractStorageReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConsoleReader_interfaces[] =
{
  &_ConsoleReader_super_AbstractStorageReader,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ConsoleReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ConsoleReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ConsoleReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ConsoleReader(ConsoleReader::clazzInfo());

::acdk::lang::RClass
ConsoleReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ConsoleReader::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fd._ref_this()); // RFileDescriptor _fd 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo ConsoleOutChannel_InvalidConsoleOutChannel = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "InvalidConsoleOutChannel", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::InvalidConsoleOutChannel, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ConsoleOutChannel_CoutOutChannel = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CoutOutChannel", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::CoutOutChannel, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo ConsoleOutChannel_CerrOutChannel = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "CerrOutChannel", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::CerrOutChannel, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* ConsoleOutChannel_enumValues[] = {
  &ConsoleOutChannel_InvalidConsoleOutChannel,
  &ConsoleOutChannel_CoutOutChannel,
  &ConsoleOutChannel_CerrOutChannel,
0
};

::acdk::lang::dmi::ClazzEnumInfo* ConsoleOutChannelMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo ConsoleOutChannel_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "ConsoleOutChannel", // name
  -1, // hashCode
  "acdk/io", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleOutChannel_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_ConsoleOutChannel(&ConsoleOutChannel_enumInfo);

  return &ConsoleOutChannel_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_ConsoleOutChannelEnumInfo(ConsoleOutChannelMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ConsoleWriter_super_AbstractStorageWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConsoleWriter_interfaces[] =
{
  &_ConsoleWriter_super_AbstractStorageWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ConsoleWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ConsoleWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ConsoleWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ConsoleWriter(ConsoleWriter::clazzInfo());

::acdk::lang::RClass
ConsoleWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ConsoleWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageWriter::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _DataReader_super_FilterReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DataReader_interfaces[] =
{
  &_DataReader_super_FilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DataReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DataReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DataReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DataReader(DataReader::clazzInfo());

::acdk::lang::RClass
DataReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DataReader::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _DataWriter_super___acdk__io__FilterWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::FilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _DataWriter_interfaces[] =
{
  &_DataWriter_super___acdk__io__FilterWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "DataWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _DataWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    DataWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_DataWriter(DataWriter::clazzInfo());

::acdk::lang::RClass
DataWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
DataWriter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _EOFException_super_IOException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IOException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _EOFException_interfaces[] =
{
  &_EOFException_super_IOException,
  0
};

::acdk::lang::dmi::ClazzInfo* EOFException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "EOFException", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _EOFException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    EOFException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_EOFException(EOFException::clazzInfo());

::acdk::lang::RClass
EOFException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
EOFException::getCollectableFields(FieldReferences& fields)
{
  IOException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _File_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _File_super_Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _File_super_acdk__lang__Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _File_interfaces[] =
{
  &_File_super_acdk__lang__Object,
  &_File_super_Serializable,
  &_File_super_acdk__lang__Comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* File::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "File", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _File_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &File::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    File::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_File(File::clazzInfo());

::acdk::lang::RClass
File::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
File::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fileImpl._ref_this()); // RFileImpl _fileImpl 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _FileDescriptor_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileDescriptor_interfaces[] =
{
  &_FileDescriptor_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileDescriptor", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileDescriptor_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileDescriptor::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileDescriptor(FileDescriptor::clazzInfo());

::acdk::lang::RClass
FileDescriptor::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileDescriptor::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _FileFilter_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileFilter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FileFilter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileFilter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileFilter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileFilter(FileFilter::clazzInfo());

::acdk::lang::RClass
FileFilter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileFilter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo* _FileImpl_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FileImpl", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileImpl(FileImpl::clazzInfo());

::acdk::lang::RClass
FileImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileImpl::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _AbstractFileImpl_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _AbstractFileImpl_super_FileImpl =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FileImpl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _AbstractFileImpl_interfaces[] =
{
  &_AbstractFileImpl_super_acdk__lang__Object,
  &_AbstractFileImpl_super_FileImpl,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "AbstractFileImpl", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _AbstractFileImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    AbstractFileImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_AbstractFileImpl(AbstractFileImpl::clazzInfo());

::acdk::lang::RClass
AbstractFileImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
AbstractFileImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_dir._ref_this()); // RString _dir 
  fields.push_back((::acdk::lang::RObject*)this->_filePath._ref_this()); // RString _filePath 
  fields.push_back((::acdk::lang::RObject*)this->_fsys._ref_this()); // RFileSystem _fsys 
  fields.push_back((::acdk::lang::RObject*)this->_name._ref_this()); // RString _name 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoExists = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoExists", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoExists, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoIsFile = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoIsFile", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoIsFile, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoIsDir = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoIsDir", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoIsDir, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoCanRead = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoCanRead", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoCanRead, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoCanWrite = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoCanWrite", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoCanWrite, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoCanExec = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoCanExec", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoCanExec, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoIsHidden = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoIsHidden", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoIsHidden, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoHasABit = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoHasABit", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoHasABit, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileInfoFlags_FileInfoChecked = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileInfoChecked", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileInfoChecked, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* FileInfoFlags_enumValues[] = {
  &FileInfoFlags_FileInfoExists,
  &FileInfoFlags_FileInfoIsFile,
  &FileInfoFlags_FileInfoIsDir,
  &FileInfoFlags_FileInfoCanRead,
  &FileInfoFlags_FileInfoCanWrite,
  &FileInfoFlags_FileInfoCanExec,
  &FileInfoFlags_FileInfoIsHidden,
  &FileInfoFlags_FileInfoHasABit,
  &FileInfoFlags_FileInfoChecked,
0
};

::acdk::lang::dmi::ClazzEnumInfo* FileInfoFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo FileInfoFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "FileInfoFlags", // name
  -1, // hashCode
  "acdk/io", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfoFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_FileInfoFlags(&FileInfoFlags_enumInfo);

  return &FileInfoFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_FileInfoFlagsEnumInfo(FileInfoFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _FileInfo_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _FileInfo_super_Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _FileInfo_super___acdk__lang__Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::lang::Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileInfo_interfaces[] =
{
  &_FileInfo_super___acdk__lang__Object,
  &_FileInfo_super_Serializable,
  &_FileInfo_super___acdk__lang__Comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "FileInfo", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileInfo_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileInfo::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileInfo(FileInfo::clazzInfo());

::acdk::lang::RClass
FileInfo::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileInfo::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->dir._ref_this()); // RString dir 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _FilenameFilter_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* FilenameFilter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FilenameFilter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FilenameFilter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FilenameFilter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FilenameFilter(FilenameFilter::clazzInfo());

::acdk::lang::RClass
FilenameFilter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FilenameFilter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _FileNotFoundException_super_IOException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  IOException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileNotFoundException_interfaces[] =
{
  &_FileNotFoundException_super_IOException,
  0
};

::acdk::lang::dmi::ClazzInfo* FileNotFoundException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileNotFoundException", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileNotFoundException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileNotFoundException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileNotFoundException(FileNotFoundException::clazzInfo());

::acdk::lang::RClass
FileNotFoundException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileNotFoundException::getCollectableFields(FieldReferences& fields)
{
  IOException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _FileReader_super_AbstractStorageReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileReader_interfaces[] =
{
  &_FileReader_super_AbstractStorageReader,
  0
};

::acdk::lang::dmi::ClazzInfo* FileReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileReader(FileReader::clazzInfo());

::acdk::lang::RClass
FileReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileReader::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fname._ref_this()); // RString _fname 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


::acdk::lang::dmi::ClazzEnumValueInfo FileListFlags_FileListFiles = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileListFiles", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileListFiles, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileListFlags_FileListDirectories = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileListDirectories", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileListDirectories, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileListFlags_FileListBoth = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileListBoth", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileListBoth, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileListFlags_FileListRecursive = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileListRecursive", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileListRecursive, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo FileListFlags_FileListAllReadable = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "FileListAllReadable", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::FileListAllReadable, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* FileListFlags_enumValues[] = {
  &FileListFlags_FileListFiles,
  &FileListFlags_FileListDirectories,
  &FileListFlags_FileListBoth,
  &FileListFlags_FileListRecursive,
  &FileListFlags_FileListAllReadable,
0
};

::acdk::lang::dmi::ClazzEnumInfo* FileListFlagsMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo FileListFlags_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "FileListFlags", // name
  -1, // hashCode
  "acdk/io", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileListFlags_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_FileListFlags(&FileListFlags_enumInfo);

  return &FileListFlags_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_FileListFlagsEnumInfo(FileListFlagsMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo* _FileSystem_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileSystem::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FileSystem", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileSystem_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileSystem::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileSystem(FileSystem::clazzInfo());

::acdk::lang::RClass
FileSystem::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileSystem::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo* _FileSystemFactory_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileSystemFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FileSystemFactory", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileSystemFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileSystemFactory::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileSystemFactory(FileSystemFactory::clazzInfo());

::acdk::lang::RClass
FileSystemFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileSystemFactory::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ConfigFileSystemFactory_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _ConfigFileSystemFactory_super_FileSystemFactory =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FileSystemFactory::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ConfigFileSystemFactory_interfaces[] =
{
  &_ConfigFileSystemFactory_super_acdk__lang__Object,
  &_ConfigFileSystemFactory_super_FileSystemFactory,
  0
};

::acdk::lang::dmi::ClazzInfo* ConfigFileSystemFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiNoDmiProxy, // clazz-flags
  0, //AttributesRes
  "ConfigFileSystemFactory", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ConfigFileSystemFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ConfigFileSystemFactory::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ConfigFileSystemFactory(ConfigFileSystemFactory::clazzInfo());

::acdk::lang::RClass
ConfigFileSystemFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ConfigFileSystemFactory::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_detector._ref_this()); // RString _detector 
  fields.push_back((::acdk::lang::RObject*)this->_factoryClassName._ref_this()); // RString _factoryClassName 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _FileWriter_super_AbstractStorageWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FileWriter_interfaces[] =
{
  &_FileWriter_super_AbstractStorageWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* FileWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "FileWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FileWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FileWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FileWriter(FileWriter::clazzInfo());

::acdk::lang::RClass
FileWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FileWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fname._ref_this()); // RString _fname 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _FilterReader_super_Reader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Reader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FilterReader_interfaces[] =
{
  &_FilterReader_super_Reader,
  0
};

::acdk::lang::dmi::ClazzInfo* FilterReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FilterReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FilterReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FilterReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FilterReader(FilterReader::clazzInfo());

::acdk::lang::RClass
FilterReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FilterReader::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _FilterWriter_super_Writer =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Writer::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _FilterWriter_interfaces[] =
{
  &_FilterWriter_super_Writer,
  0
};

::acdk::lang::dmi::ClazzInfo* FilterWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "FilterWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _FilterWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    FilterWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_FilterWriter(FilterWriter::clazzInfo());

::acdk::lang::RClass
FilterWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
FilterWriter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _GlobFilenameFilter_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _GlobFilenameFilter_super_FilenameFilter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FilenameFilter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _GlobFilenameFilter_super_FileFilter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FileFilter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _GlobFilenameFilter_interfaces[] =
{
  &_GlobFilenameFilter_super_acdk__lang__Object,
  &_GlobFilenameFilter_super_FilenameFilter,
  &_GlobFilenameFilter_super_FileFilter,
  0
};

::acdk::lang::dmi::ClazzInfo* GlobFilenameFilter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "GlobFilenameFilter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _GlobFilenameFilter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    GlobFilenameFilter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_GlobFilenameFilter(GlobFilenameFilter::clazzInfo());

::acdk::lang::RClass
GlobFilenameFilter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
GlobFilenameFilter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_pattern._ref_this()); // RString _pattern 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _InputReader_super_AbstractCharFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InputReader_interfaces[] =
{
  &_InputReader_super_AbstractCharFilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* InputReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InputReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InputReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &InputReader::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InputReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InputReader(InputReader::clazzInfo());

::acdk::lang::RClass
InputReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InputReader::getCollectableFields(FieldReferences& fields)
{
  AbstractCharFilterReader::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _IOException_super_acdk__lang__Exception =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Exception::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _IOException_interfaces[] =
{
  &_IOException_super_acdk__lang__Exception,
  0
};

::acdk::lang::dmi::ClazzInfo* IOException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "IOException", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _IOException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    IOException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_IOException(IOException::clazzInfo());

::acdk::lang::RClass
IOException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
IOException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Exception)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _JoinedReader_super_AbstractReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _JoinedReader_super_FilterReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _JoinedReader_interfaces[] =
{
  &_JoinedReader_super_AbstractReader,
  &_JoinedReader_super_FilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* JoinedReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "JoinedReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _JoinedReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    JoinedReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_JoinedReader(JoinedReader::clazzInfo());

::acdk::lang::RClass
JoinedReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
JoinedReader::getCollectableFields(FieldReferences& fields)
{
  AbstractReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_ins._ref_this()); // RReaderArray _ins 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _LineNumberCharReader_super_CharReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  CharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LineNumberCharReader_interfaces[] =
{
  &_LineNumberCharReader_super_CharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* LineNumberCharReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "LineNumberCharReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LineNumberCharReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LineNumberCharReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LineNumberCharReader(LineNumberCharReader::clazzInfo());

::acdk::lang::RClass
LineNumberCharReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LineNumberCharReader::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _LineNumberCharReaderImpl_super_AbstractCharFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _LineNumberCharReaderImpl_super_LineNumberCharReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  LineNumberCharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LineNumberCharReaderImpl_interfaces[] =
{
  &_LineNumberCharReaderImpl_super_AbstractCharFilterReader,
  &_LineNumberCharReaderImpl_super_LineNumberCharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* LineNumberCharReaderImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LineNumberCharReaderImpl", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LineNumberCharReaderImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LineNumberCharReaderImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LineNumberCharReaderImpl(LineNumberCharReaderImpl::clazzInfo());

::acdk::lang::RClass
LineNumberCharReaderImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LineNumberCharReaderImpl::getCollectableFields(FieldReferences& fields)
{
  AbstractCharFilterReader::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _LineNumberReader_super_AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _LineNumberReader_interfaces[] =
{
  &_LineNumberReader_super_AbstractFilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* LineNumberReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "LineNumberReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _LineNumberReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    LineNumberReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_LineNumberReader(LineNumberReader::clazzInfo());

::acdk::lang::RClass
LineNumberReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
LineNumberReader::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterReader::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _MemReader_super_AbstractStorageReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MemReader_interfaces[] =
{
  &_MemReader_super_AbstractStorageReader,
  0
};

::acdk::lang::dmi::ClazzInfo* MemReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MemReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MemReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MemReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MemReader(MemReader::clazzInfo());

::acdk::lang::RClass
MemReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MemReader::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RbyteArray _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _MemWriter_super_AbstractStorageWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _MemWriter_interfaces[] =
{
  &_MemWriter_super_AbstractStorageWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* MemWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "MemWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _MemWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    MemWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_MemWriter(MemWriter::clazzInfo());

::acdk::lang::RClass
MemWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
MemWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RbyteArray _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _NullWriter_super_AbstractStorageWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NullWriter_interfaces[] =
{
  &_NullWriter_super_AbstractStorageWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* NullWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NullWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NullWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NullWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NullWriter(NullWriter::clazzInfo());

::acdk::lang::RClass
NullWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NullWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageWriter::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ObjectReader_super_DataReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DataReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ObjectReader_interfaces[] =
{
  &_ObjectReader_super_DataReader,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ObjectReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ObjectReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ObjectReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ObjectReader(ObjectReader::clazzInfo());

::acdk::lang::RClass
ObjectReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ObjectReader::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _ObjectStreamException_super_acdk__io__IOException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::io::IOException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ObjectStreamException_interfaces[] =
{
  &_ObjectStreamException_super_acdk__io__IOException,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectStreamException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "ObjectStreamException", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ObjectStreamException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ObjectStreamException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ObjectStreamException(ObjectStreamException::clazzInfo());

::acdk::lang::RClass
ObjectStreamException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ObjectStreamException::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::io::, IOException)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _InvalidClassException_super_ObjectStreamException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ObjectStreamException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _InvalidClassException_interfaces[] =
{
  &_InvalidClassException_super_ObjectStreamException,
  0
};

::acdk::lang::dmi::ClazzInfo* InvalidClassException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "InvalidClassException", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _InvalidClassException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    InvalidClassException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_InvalidClassException(InvalidClassException::clazzInfo());

::acdk::lang::RClass
InvalidClassException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
InvalidClassException::getCollectableFields(FieldReferences& fields)
{
  ObjectStreamException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _NotSerializableException_super_ObjectStreamException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ObjectStreamException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _NotSerializableException_interfaces[] =
{
  &_NotSerializableException_super_ObjectStreamException,
  0
};

::acdk::lang::dmi::ClazzInfo* NotSerializableException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "NotSerializableException", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _NotSerializableException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    NotSerializableException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_NotSerializableException(NotSerializableException::clazzInfo());

::acdk::lang::RClass
NotSerializableException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
NotSerializableException::getCollectableFields(FieldReferences& fields)
{
  ObjectStreamException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _StreamCorruptedException_super_ObjectStreamException =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ObjectStreamException::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StreamCorruptedException_interfaces[] =
{
  &_StreamCorruptedException_super_ObjectStreamException,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamCorruptedException::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StreamCorruptedException", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StreamCorruptedException_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StreamCorruptedException::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StreamCorruptedException(StreamCorruptedException::clazzInfo());

::acdk::lang::RClass
StreamCorruptedException::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StreamCorruptedException::getCollectableFields(FieldReferences& fields)
{
  ObjectStreamException::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _ObjectWriter_super___acdk__io__DataWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  ::acdk::io::DataWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _ObjectWriter_interfaces[] =
{
  &_ObjectWriter_super___acdk__io__DataWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ObjectWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "ObjectWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _ObjectWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    ObjectWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_ObjectWriter(ObjectWriter::clazzInfo());

::acdk::lang::RClass
ObjectWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
ObjectWriter::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _PipedReader_super_AbstractStorageReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PipedReader_interfaces[] =
{
  &_PipedReader_super_AbstractStorageReader,
  0
};

::acdk::lang::dmi::ClazzInfo* PipedReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PipedReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PipedReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PipedReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PipedReader(PipedReader::clazzInfo());

::acdk::lang::RClass
PipedReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PipedReader::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RbyteArray _buffer 
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RPipedWriter _in 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _PipedWriter_super_AbstractStorageWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractStorageWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PipedWriter_interfaces[] =
{
  &_PipedWriter_super_AbstractStorageWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* PipedWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PipedWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PipedWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PipedWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PipedWriter(PipedWriter::clazzInfo());

::acdk::lang::RClass
PipedWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PipedWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractStorageWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // RPipedReader _out 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _PrintWriter_super_AbstractCharFilterWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharFilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PrintWriter_interfaces[] =
{
  &_PrintWriter_super_AbstractCharFilterWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* PrintWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PrintWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PrintWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  &PrintWriter::create_instance, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PrintWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PrintWriter(PrintWriter::clazzInfo());

::acdk::lang::RClass
PrintWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PrintWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractCharFilterWriter::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _PushbackCharReader_super_CharReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  CharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PushbackCharReader_interfaces[] =
{
  &_PushbackCharReader_super_CharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "PushbackCharReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PushbackCharReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PushbackCharReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PushbackCharReader(PushbackCharReader::clazzInfo());

::acdk::lang::RClass
PushbackCharReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PushbackCharReader::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _PushbackCharReaderImpl_super_AbstractCharFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _PushbackCharReaderImpl_super_PushbackCharReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  PushbackCharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PushbackCharReaderImpl_interfaces[] =
{
  &_PushbackCharReaderImpl_super_AbstractCharFilterReader,
  &_PushbackCharReaderImpl_super_PushbackCharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReaderImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PushbackCharReaderImpl", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PushbackCharReaderImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PushbackCharReaderImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PushbackCharReaderImpl(PushbackCharReaderImpl::clazzInfo());

::acdk::lang::RClass
PushbackCharReaderImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PushbackCharReaderImpl::getCollectableFields(FieldReferences& fields)
{
  AbstractCharFilterReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RuccharArray _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _PushbackReader_super_AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _PushbackReader_interfaces[] =
{
  &_PushbackReader_super_AbstractFilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "PushbackReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _PushbackReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    PushbackReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_PushbackReader(PushbackReader::clazzInfo());

::acdk::lang::RClass
PushbackReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
PushbackReader::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_buffer._ref_this()); // RbyteArray _buffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _RandomAccessFile_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _RandomAccessFile_super_DataReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DataReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _RandomAccessFile_super_DataWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  DataWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _RandomAccessFile_super_Storage =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Storage::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RandomAccessFile_interfaces[] =
{
  &_RandomAccessFile_super_acdk__lang__Object,
  &_RandomAccessFile_super_DataReader,
  &_RandomAccessFile_super_DataWriter,
  &_RandomAccessFile_super_Storage,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RandomAccessFile", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RandomAccessFile_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RandomAccessFile::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RandomAccessFile(RandomAccessFile::clazzInfo());

::acdk::lang::RClass
RandomAccessFile::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RandomAccessFile::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_dataReader._ref_this()); // RDataReader _dataReader 
  fields.push_back((::acdk::lang::RObject*)this->_dataWriter._ref_this()); // RDataWriter _dataWriter 
  fields.push_back((::acdk::lang::RObject*)this->_file._ref_this()); // RFile _file 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

::acdk::lang::dmi::ClazzEnumValueInfo SeekPos_SeekCur = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SeekCur", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SeekCur, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SeekPos_SeekEnd = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SeekEnd", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SeekEnd, // value

};


::acdk::lang::dmi::ClazzEnumValueInfo SeekPos_SeekSet = 
{
  ::acdk::lang::dmi::MiEnumValInfo, // flags
  0, // attributeRes
  "SeekSet", // name
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  0,  // ClazzEnum definition
  acdk::io::SeekSet, // value

};

::acdk::lang::dmi::ClazzEnumValueInfo* SeekPos_enumValues[] = {
  &SeekPos_SeekCur,
  &SeekPos_SeekEnd,
  &SeekPos_SeekSet,
0
};

::acdk::lang::dmi::ClazzEnumInfo* SeekPosMetaInf::GetEnumInfo()
{
static ::acdk::lang::dmi::ClazzEnumInfo SeekPos_enumInfo = {
  ::acdk::lang::dmi::MiEnumInfo, // flags
  0, // attribute rest
  "SeekPos", // name
  -1, // hashCode
  "acdk/io", // ns
  0, // _scopeParent
  0, // _nextSibling
  SeekPos_enumValues, // values
  0, // internal next link
};

  static ::acdk::lang::dmi::RegisterEnumInfo _register_SeekPos(&SeekPos_enumInfo);

  return &SeekPos_enumInfo;
}
static ::acdk::lang::dmi::RegisterEnumInfo _register_SeekPosEnumInfo(SeekPosMetaInf::GetEnumInfo());


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Reader_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Reader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Reader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Reader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Reader(Reader::clazzInfo());

::acdk::lang::RClass
Reader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Reader::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _RessourceFileImpl_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _RessourceFileImpl_super_FileImpl =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FileImpl::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RessourceFileImpl_interfaces[] =
{
  &_RessourceFileImpl_super___acdk__lang__Object,
  &_RessourceFileImpl_super_FileImpl,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileImpl::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RessourceFileImpl", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RessourceFileImpl_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RessourceFileImpl::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RessourceFileImpl(RessourceFileImpl::clazzInfo());

::acdk::lang::RClass
RessourceFileImpl::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RessourceFileImpl::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_fh._ref_this()); // RRessourceFile _fh 
  fields.push_back((::acdk::lang::RObject*)this->_fs._ref_this()); // RRessourceFileSystem _fs 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _RessourceFile_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RessourceFile_interfaces[] =
{
  &_RessourceFile_super___acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RessourceFile", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RessourceFile_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RessourceFile::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RessourceFile(RessourceFile::clazzInfo());

::acdk::lang::RClass
RessourceFile::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RessourceFile::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_cont._ref_this()); // RbyteArray _cont 
  fields.push_back((::acdk::lang::RObject*)this->_fname._ref_this()); // RString _fname 
  fields.push_back((::acdk::lang::RObject*)this->_pdir._ref_this()); // RRessourceDir _pdir 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _RessourceDir_super_RessourceFile =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  RessourceFile::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RessourceDir_interfaces[] =
{
  &_RessourceDir_super_RessourceFile,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceDir::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RessourceDir", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RessourceDir_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RessourceDir::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RessourceDir(RessourceDir::clazzInfo());

::acdk::lang::RClass
RessourceDir::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RessourceDir::getCollectableFields(FieldReferences& fields)
{
  RessourceFile::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _RessourceFileSystem_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _RessourceFileSystem_super_FileSystem =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FileSystem::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RessourceFileSystem_interfaces[] =
{
  &_RessourceFileSystem_super___acdk__lang__Object,
  &_RessourceFileSystem_super_FileSystem,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystem::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RessourceFileSystem", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RessourceFileSystem_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RessourceFileSystem::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RessourceFileSystem(RessourceFileSystem::clazzInfo());

::acdk::lang::RClass
RessourceFileSystem::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RessourceFileSystem::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _RessourceFileSystemFactory_super___acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _RessourceFileSystemFactory_super_FileSystemFactory =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FileSystemFactory::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _RessourceFileSystemFactory_interfaces[] =
{
  &_RessourceFileSystemFactory_super___acdk__lang__Object,
  &_RessourceFileSystemFactory_super_FileSystemFactory,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystemFactory::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "RessourceFileSystemFactory", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _RessourceFileSystemFactory_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    RessourceFileSystemFactory::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_RessourceFileSystemFactory(RessourceFileSystemFactory::clazzInfo());

::acdk::lang::RClass
RessourceFileSystemFactory::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
RessourceFileSystemFactory::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::lang::, Object)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo* _Serializable_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Serializable::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface, // clazz-flags
  0, //AttributesRes
  "Serializable", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Serializable_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Serializable::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Serializable(Serializable::clazzInfo());

::acdk::lang::RClass
Serializable::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Serializable::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _SerializedFieldDescriptor_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SerializedFieldDescriptor_super_acdk__io__Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::io::Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SerializedFieldDescriptor_super_acdk__lang__Comparable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  acdk::lang::Comparable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SerializedFieldDescriptor_interfaces[] =
{
  &_SerializedFieldDescriptor_super_acdk__lang__Object,
  &_SerializedFieldDescriptor_super_acdk__io__Serializable,
  &_SerializedFieldDescriptor_super_acdk__lang__Comparable,
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SerializedFieldDescriptor", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SerializedFieldDescriptor_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SerializedFieldDescriptor::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SerializedFieldDescriptor(SerializedFieldDescriptor::clazzInfo());

::acdk::lang::RClass
SerializedFieldDescriptor::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SerializedFieldDescriptor::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
  fields.push_back((::acdk::lang::RObject*)this->type._ref_this()); // RString type 
  fields.push_back((::acdk::lang::RObject*)this->typeClass._ref_this()); // RClass typeClass 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _SerializedObjectDescriptor_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _SerializedObjectDescriptor_super_Serializable =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  Serializable::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SerializedObjectDescriptor_interfaces[] =
{
  &_SerializedObjectDescriptor_super_acdk__lang__Object,
  &_SerializedObjectDescriptor_super_Serializable,
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiSerializable, // clazz-flags
  0, //AttributesRes
  "SerializedObjectDescriptor", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SerializedObjectDescriptor_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 3, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SerializedObjectDescriptor::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SerializedObjectDescriptor(SerializedObjectDescriptor::clazzInfo());

::acdk::lang::RClass
SerializedObjectDescriptor::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SerializedObjectDescriptor::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_class._ref_this()); // RClass _class 
  fields.push_back((::acdk::lang::RObject*)this->fields._ref_this()); // RSerializedFieldDescriptorArray fields 
  fields.push_back((::acdk::lang::RObject*)this->name._ref_this()); // RString name 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo* _Storage_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Storage::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Storage", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Storage_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Storage::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Storage(Storage::clazzInfo());

::acdk::lang::RClass
Storage::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Storage::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _StreamTokenizer_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StreamTokenizer_interfaces[] =
{
  &_StreamTokenizer_super_acdk__lang__Object,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StreamTokenizer", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StreamTokenizer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 4, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StreamTokenizer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StreamTokenizer(StreamTokenizer::clazzInfo());

::acdk::lang::RClass
StreamTokenizer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StreamTokenizer::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_in._ref_this()); // RPushbackCharReader _in 
  fields.push_back((::acdk::lang::RObject*)this->_lineReader._ref_this()); // RLineNumberCharReader _lineReader 
  fields.push_back((::acdk::lang::RObject*)this->nval._ref_this()); // RNumber nval 
  fields.push_back((::acdk::lang::RObject*)this->sval._ref_this()); // RString sval 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _StringReader_super_AbstractCharReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringReader_interfaces[] =
{
  &_StringReader_super_AbstractCharReader,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StringReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StringReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StringReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StringReader(StringReader::clazzInfo());

::acdk::lang::RClass
StringReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StringReader::getCollectableFields(FieldReferences& fields)
{
  AbstractCharReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_string._ref_this()); // RString _string 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _StringWriter_super_acdk__lang__Object =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  acdk::lang::Object::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _StringWriter_super_CharWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  CharWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _StringWriter_interfaces[] =
{
  &_StringWriter_super_acdk__lang__Object,
  &_StringWriter_super_CharWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* StringWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "StringWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _StringWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    StringWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_StringWriter(StringWriter::clazzInfo());

::acdk::lang::RClass
StringWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
StringWriter::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(acdk::lang::, Object)::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_stringBuffer._ref_this()); // RStringBuffer _stringBuffer 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _SubReader_super___acdk__io__AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  ::acdk::io::AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _SubReader_interfaces[] =
{
  &_SubReader_super___acdk__io__AbstractFilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* SubReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "SubReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _SubReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    SubReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_SubReader(SubReader::clazzInfo());

::acdk::lang::RClass
SubReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
SubReader::getCollectableFields(FieldReferences& fields)
{
  ACDK_FQ_SUPER_QUALIFIER(::acdk::io::, AbstractFilterReader)::getCollectableFields(fields);
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo _TeeCharWriter_super_AbstractCharWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractCharWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TeeCharWriter_interfaces[] =
{
  &_TeeCharWriter_super_AbstractCharWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TeeCharWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TeeCharWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TeeCharWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TeeCharWriter(TeeCharWriter::clazzInfo());

::acdk::lang::RClass
TeeCharWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TeeCharWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractCharWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_first._ref_this()); // RCharWriter _first 
  fields.push_back((::acdk::lang::RObject*)this->_second._ref_this()); // RCharWriter _second 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TeeReader_super_AbstractFilterReader =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractFilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TeeReader_super_FilterReader =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FilterReader::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TeeReader_interfaces[] =
{
  &_TeeReader_super_AbstractFilterReader,
  &_TeeReader_super_FilterReader,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeReader::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TeeReader", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TeeReader_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 1, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TeeReader::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TeeReader(TeeReader::clazzInfo());

::acdk::lang::RClass
TeeReader::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TeeReader::getCollectableFields(FieldReferences& fields)
{
  AbstractFilterReader::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out._ref_this()); // RWriter _out 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;
::acdk::lang::dmi::ClazzSuperInfo _TeeWriter_super_AbstractWriter =
{
  ::acdk::lang::dmi::MiPublic,
  0, //AttributesRes
  AbstractWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo _TeeWriter_super_FilterWriter =
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiThrowable,
  0, //AttributesRes
  FilterWriter::clazzInfo()
};

::acdk::lang::dmi::ClazzSuperInfo* _TeeWriter_interfaces[] =
{
  &_TeeWriter_super_AbstractWriter,
  &_TeeWriter_super_FilterWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeWriter::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo, // clazz-flags
  0, //AttributesRes
  "TeeWriter", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _TeeWriter_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 2, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    TeeWriter::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_TeeWriter(TeeWriter::clazzInfo());

::acdk::lang::RClass
TeeWriter::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
TeeWriter::getCollectableFields(FieldReferences& fields)
{
  AbstractWriter::getCollectableFields(fields);
  fields.push_back((::acdk::lang::RObject*)this->_out1._ref_this()); // RWriter _out1 
  fields.push_back((::acdk::lang::RObject*)this->_out2._ref_this()); // RWriter _out2 
}


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

::acdk::lang::dmi::ClazzSuperInfo* _Writer_interfaces[] =
{
  0
};

::acdk::lang::dmi::ClazzInfo* Writer::clazzInfo()
{
  static ::acdk::lang::dmi::ClazzInfo _clazzInfo =
{
  ::acdk::lang::dmi::MiClazzInfo | ::acdk::lang::dmi::MiCiInterface | ::acdk::lang::dmi::MiCiAbstract, // clazz-flags
  0, //AttributesRes
  "Writer", // name of class
  -1, // hashCode
  "acdk/io", // the namespace
  0, // _scopeParent
  0, // _nextSibling
  0, // type
  0, // _firstChild
  _Writer_interfaces, // pointer to Array of ClazzInfo references
  0, // count of Super / Interfaces
  0, // pointer to Array of fields
  0, // count of Fields
  0, // pointer to Array of Methods
  0, // count of Methods
  0, // create-function for cloning/serializing
  0, // create-function for cloning/serializing arrays
  0, // create-function for cloning/serializing arrays
  0, // Class* thisClass; chaching instance
  0, // jlong serialVersionUID; for serialization
  ::acdk::lang::dmi::StdDispatch::_invoke_dynamic, // dynamic_dispatch
  ::acdk::lang::dmi::StdDispatch::_invoke_static, // static_dispatch
 0, // count off all collectable members in this class
  0, // member type info for arrays or typed container
    Writer::_castToInterfacePtr, // cast object to interface pointer
0 // next ClazzInfo in chain
};
  static ::acdk::lang::dmi::RegisterClazzInfo _register_clazzInfo(&_clazzInfo);
  return &_clazzInfo;
};

static ::acdk::lang::dmi::RegisterClazzInfo _register_Writer(Writer::clazzInfo());

::acdk::lang::RClass
Writer::GetClass()
{
  return ::acdk::lang::Class::getSingeltonClass(clazzInfo());
}

//virtual
void
Writer::getCollectableFields(FieldReferences& fields)
{
}


} // namespace acdk
} // namespace io

