// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../io.h"
#include "../AbstractCharFilterReader.h"
#include "../AbstractCharFilterWriter.h"
#include "../AbstractCharReader.h"
#include "../AbstractCharWriter.h"
#include "../AbstractFilterReader.h"
#include "../AbstractFilterWriter.h"
#include "../AbstractObjectReader.h"
#include "../AbstractObjectWriter.h"
#include "../AbstractReader.h"
#include "../AbstractStorageReader.h"
#include "../AbstractStorageWriter.h"
#include "../AbstractWriter.h"
#include "../ASCIIDataReader.h"
#include "../ASCIIDataWriter.h"
#include "../BinaryDataReader.h"
#include "../BinaryDataWriter.h"
#include "../BinaryObjectReader.h"
#include "../BinaryObjectWriter.h"
#include "../BufferedReader.h"
#include "../BufferedWriter.h"
#include "../ByteBufferReader.h"
#include "../ByteBufferWriter.h"
#include "../BytePtrReader.h"
#include "../ByteToCharReader.h"
#include "../ByteToCharWriter.h"
#include "../CharArrayReader.h"
#include "../CharArrayWriter.h"
#include "../CharReader.h"
#include "../CharToByteReader.h"
#include "../CharToByteWriter.h"
#include "../CharWriter.h"
#include "../ConsoleCharReader.h"
#include "../ConsoleCharWriter.h"
#include "../ConsoleReader.h"
#include "../ConsoleWriter.h"
#include "../DataReader.h"
#include "../DataWriter.h"
#include "../EOFException.h"
#include "../File.h"
#include "../FileAbstractImpl.h"
#include "../FileDescriptor.h"
#include "../FileFilter.h"
#include "../FileImpl.h"
#include "../FileInfo.h"
#include "../FilenameFilter.h"
#include "../FileNotFoundException.h"
#include "../FileReader.h"
#include "../FileReaderWriterImpl.h"
#include "../FileStandardImpl.h"
#include "../FileStatus.h"
#include "../FileSystem.h"
#include "../FileSystemFactory.h"
#include "../FileWriter.h"
#include "../FilterReader.h"
#include "../FilterWriter.h"
#include "../GlobFilenameFilter.h"
#include "../InputReader.h"
#include "../io.h"
#include "../IOException.h"
#include "../io_all.h"
#include "../JoinedReader.h"
#include "../LineNumberCharReader.h"
#include "../LineNumberReader.h"
#include "../MemoryMappedFile.h"
#include "../MemReader.h"
#include "../MemWriter.h"
#include "../NullWriter.h"
#include "../ObjectReader.h"
#include "../ObjectStreamException.h"
#include "../ObjectWriter.h"
#include "../OutputDebugStringWriter.h"
#include "../PipedReader.h"
#include "../PipedWriter.h"
#include "../PrintWriter.h"
#include "../PushbackCharReader.h"
#include "../PushbackReader.h"
#include "../RandomAccessFile.h"
#include "../Reader.h"
#include "../RessourceFileImpl.h"
#include "../RessourceFileSystem.h"
#include "../Serializable.h"
#include "../SerializedObjectDescriptor.h"
#include "../StandardFileSystem.h"
#include "../Storage.h"
#include "../StreamTokenizer.h"
#include "../StringReader.h"
#include "../StringWriter.h"
#include "../SubReader.h"
#include "../TeeCharWriter.h"
#include "../TeeReader.h"
#include "../TeeWriter.h"
#include "../Writer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
ConsoleCharWriter_create_array(int length)
{
  return new ObjectArrayImpl<RConsoleCharWriter>(length);
}

//static
::acdk::lang::RObject
ConsoleCharWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ConsoleCharWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleCharWriter_method_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleCharWriter((ConsoleOutChannel)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleCharWriter_method_ConsoleCharWriter_I_LRConsoleCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleCharWriter((ConsoleOutChannel)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleCharWriter_method_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleCharWriter((ConsoleOutChannel)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleCharWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ConsoleCharWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleCharWriter_fields__channel_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleCharWriter* This = dmi_cast<ConsoleCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_channel), flags);
    else
      This->_channel = (ConsoleOutChannel)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleCharWriter_fields__encoder_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleCharWriter* This = dmi_cast<ConsoleCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_encoder, flags);
    else
      This->_encoder = ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleCharWriter_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleCharWriter* This = dmi_cast<ConsoleCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< RCharWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleCharWriter_fields__channel = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_channel", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ConsoleCharWriter_MetainfoWrapper::ConsoleCharWriter_fields__channel_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleCharWriter_fields__encoder = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_encoder", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo(),
  ConsoleCharWriter_MetainfoWrapper::ConsoleCharWriter_fields__encoder_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleCharWriter_fields__out = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo(),
  ConsoleCharWriter_MetainfoWrapper::ConsoleCharWriter_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ConsoleCharWriter_fields[] = 
{
  &ConsoleCharWriter_fields__channel,
  &ConsoleCharWriter_fields__encoder,
  &ConsoleCharWriter_fields__out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__args[] = 
{
  &ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__arg_fd,
  &ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__arg_iolock,
  &ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__arg_encoder,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleCharWriter_method_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleCharWriter::clazzInfo(), // return type
  "_0_ConsoleCharWriter", // alternative name of method
  -1, // altlabelHashCode
  ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__args, // the arguments
  0, //arguments count
  ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__exceptions, // the declared exceptions
  ConsoleCharWriter_MetainfoWrapper::ConsoleCharWriter_method_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharWriter_methods_ConsoleCharWriter_I_LRConsoleCharWriter__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleCharWriter_methods_ConsoleCharWriter_I_LRConsoleCharWriter__args[] = 
{
  &ConsoleCharWriter_methods_ConsoleCharWriter_I_LRConsoleCharWriter__arg_fd,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharWriter_methods_ConsoleCharWriter_I_LRConsoleCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleCharWriter_method_ConsoleCharWriter_I_LRConsoleCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleCharWriter::clazzInfo(), // return type
  "_1_ConsoleCharWriter", // alternative name of method
  -1, // altlabelHashCode
  ConsoleCharWriter_methods_ConsoleCharWriter_I_LRConsoleCharWriter__args, // the arguments
  0, //arguments count
  ConsoleCharWriter_methods_ConsoleCharWriter_I_LRConsoleCharWriter__exceptions, // the declared exceptions
  ConsoleCharWriter_MetainfoWrapper::ConsoleCharWriter_method_ConsoleCharWriter_I_LRConsoleCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__args[] = 
{
  &ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__arg_fd,
  &ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleCharWriter_method_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleCharWriter::clazzInfo(), // return type
  "_2_ConsoleCharWriter", // alternative name of method
  -1, // altlabelHashCode
  ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__args, // the arguments
  0, //arguments count
  ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__exceptions, // the declared exceptions
  ConsoleCharWriter_MetainfoWrapper::ConsoleCharWriter_method_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleCharWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleCharWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ConsoleCharWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ConsoleCharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ConsoleCharWriter_MetainfoWrapper::ConsoleCharWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ConsoleCharWriter_methods[] = 
{
  &ConsoleCharWriter_method_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter_,
  &ConsoleCharWriter_method_ConsoleCharWriter_I_LRConsoleCharWriter_,
  &ConsoleCharWriter_method_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter_,
  &ConsoleCharWriter_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ConsoleCharWriter_MetaInfoInitializer
{  ConsoleCharWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ConsoleCharWriter::clazzInfo();
    ci->fields =  _ConsoleCharWriter_fields;
    ci->methods =  _ConsoleCharWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ConsoleCharWriter_MetaInfoInitializer ConsoleCharWriter_MetaInfoInitializer_staticinstance__;


struct ConsoleCharWriter_clazzInfo_ClazzAttributesResInitializer6
{
  ConsoleCharWriter_clazzInfo_ClazzAttributesResInitializer6()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject_INLacdk_locale_REncoder__LRConsoleCharWriter__arg_fd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ConsoleOutChannelMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ConsoleCharWriter_methods_ConsoleCharWriter_I_LRConsoleCharWriter__arg_fd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ConsoleOutChannelMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ConsoleCharWriter_methods_ConsoleCharWriter_IINLRObject__LRConsoleCharWriter__arg_fd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ConsoleOutChannelMetaInf::GetEnumInfo()));
  }
};

ConsoleCharWriter_clazzInfo_ClazzAttributesResInitializer6 ConsoleCharWriter_clazzInfo_ClazzAttributesResInitializer6_instance;



} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ConsoleReader_create_array(int length)
{
  return new ObjectArrayImpl<RConsoleReader>(length);
}

//static
::acdk::lang::RObject
ConsoleReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ConsoleReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleReader_method_ConsoleReader_I_LRConsoleReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleReader((InChannel)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleReader_method_ConsoleReader__LRConsoleReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ConsoleReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleReader_method_unread_B_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ConsoleReader* This = dmi_cast<ConsoleReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ConsoleReader::unread(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
      ret = This->unread(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleReader_fields__eof_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleReader* This = dmi_cast<ConsoleReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_eof, flags);
    else
      This->_eof = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleReader_fields__fd_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleReader* This = dmi_cast<ConsoleReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fd, flags);
    else
      This->_fd = ::acdk::lang::dmi::castTo< RFileDescriptor>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleReader_fields__last_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleReader* This = dmi_cast<ConsoleReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_last, flags);
    else
      This->_last = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleReader_fields__eof = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_eof", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ConsoleReader_MetainfoWrapper::ConsoleReader_fields__eof_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleReader_fields__fd = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fd", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileDescriptor::clazzInfo(),
  ConsoleReader_MetainfoWrapper::ConsoleReader_fields__fd_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleReader_fields__last = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_last", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ConsoleReader_MetainfoWrapper::ConsoleReader_fields__last_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ConsoleReader_fields[] = 
{
  &ConsoleReader_fields__eof,
  &ConsoleReader_fields__fd,
  &ConsoleReader_fields__last,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleReader_methods_ConsoleReader_I_LRConsoleReader__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleReader_methods_ConsoleReader_I_LRConsoleReader__args[] = 
{
  &ConsoleReader_methods_ConsoleReader_I_LRConsoleReader__arg_fd,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleReader_methods_ConsoleReader_I_LRConsoleReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleReader_method_ConsoleReader_I_LRConsoleReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleReader::clazzInfo(), // return type
  "_0_ConsoleReader", // alternative name of method
  -1, // altlabelHashCode
  ConsoleReader_methods_ConsoleReader_I_LRConsoleReader__args, // the arguments
  0, //arguments count
  ConsoleReader_methods_ConsoleReader_I_LRConsoleReader__exceptions, // the declared exceptions
  ConsoleReader_MetainfoWrapper::ConsoleReader_method_ConsoleReader_I_LRConsoleReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleReader_methods_ConsoleReader__LRConsoleReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleReader_methods_ConsoleReader__LRConsoleReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleReader_method_ConsoleReader__LRConsoleReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleReader::clazzInfo(), // return type
  "_1_ConsoleReader", // alternative name of method
  -1, // altlabelHashCode
  ConsoleReader_methods_ConsoleReader__LRConsoleReader__args, // the arguments
  0, //arguments count
  ConsoleReader_methods_ConsoleReader__LRConsoleReader__exceptions, // the declared exceptions
  ConsoleReader_MetainfoWrapper::ConsoleReader_method_ConsoleReader__LRConsoleReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ConsoleReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ConsoleReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ConsoleReader_MetainfoWrapper::ConsoleReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleReader_methods_unread_B_I_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleReader_methods_unread_B_I_args[] = 
{
  &ConsoleReader_methods_unread_B_I_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleReader_methods_unread_B_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleReader_method_unread_B_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_unread", // alternative name of method
  -1, // altlabelHashCode
  ConsoleReader_methods_unread_B_I_args, // the arguments
  0, //arguments count
  ConsoleReader_methods_unread_B_I_exceptions, // the declared exceptions
  ConsoleReader_MetainfoWrapper::ConsoleReader_method_unread_B_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ConsoleReader_methods[] = 
{
  &ConsoleReader_method_ConsoleReader_I_LRConsoleReader_,
  &ConsoleReader_method_ConsoleReader__LRConsoleReader_,
  &ConsoleReader_method_GetClass__L_acdk_lang_RClass_,
  &ConsoleReader_method_unread_B_I,
  0
};


struct ConsoleReader_MetaInfoInitializer
{  ConsoleReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ConsoleReader::clazzInfo();
    ci->fields =  _ConsoleReader_fields;
    ci->methods =  _ConsoleReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ConsoleReader_MetaInfoInitializer ConsoleReader_MetaInfoInitializer_staticinstance__;


struct ConsoleReader_clazzInfo_ClazzAttributesResInitializer7
{
  ConsoleReader_clazzInfo_ClazzAttributesResInitializer7()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ConsoleReader_methods_ConsoleReader_I_LRConsoleReader__arg_fd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)InChannelMetaInf::GetEnumInfo()));
  }
};

ConsoleReader_clazzInfo_ClazzAttributesResInitializer7 ConsoleReader_clazzInfo_ClazzAttributesResInitializer7_instance;



} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ConsoleWriter_create_array(int length)
{
  return new ObjectArrayImpl<RConsoleWriter>(length);
}

//static
::acdk::lang::RObject
ConsoleWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ConsoleWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleWriter_method_ConsoleWriter_IINLRObject__LRConsoleWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleWriter((ConsoleOutChannel)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleWriter_method_ConsoleWriter__LRConsoleWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleWriter_method_ConsoleWriter_I_LRConsoleWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleWriter((ConsoleOutChannel)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ConsoleWriter::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _ConsoleWriter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__args[] = 
{
  &ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__arg_fd,
  &ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleWriter_method_ConsoleWriter_IINLRObject__LRConsoleWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleWriter::clazzInfo(), // return type
  "_0_ConsoleWriter", // alternative name of method
  -1, // altlabelHashCode
  ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__args, // the arguments
  0, //arguments count
  ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__exceptions, // the declared exceptions
  ConsoleWriter_MetainfoWrapper::ConsoleWriter_method_ConsoleWriter_IINLRObject__LRConsoleWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleWriter_methods_ConsoleWriter__LRConsoleWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleWriter_methods_ConsoleWriter__LRConsoleWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleWriter_method_ConsoleWriter__LRConsoleWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleWriter::clazzInfo(), // return type
  "_1_ConsoleWriter", // alternative name of method
  -1, // altlabelHashCode
  ConsoleWriter_methods_ConsoleWriter__LRConsoleWriter__args, // the arguments
  0, //arguments count
  ConsoleWriter_methods_ConsoleWriter__LRConsoleWriter__exceptions, // the declared exceptions
  ConsoleWriter_MetainfoWrapper::ConsoleWriter_method_ConsoleWriter__LRConsoleWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleWriter_methods_ConsoleWriter_I_LRConsoleWriter__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleWriter_methods_ConsoleWriter_I_LRConsoleWriter__args[] = 
{
  &ConsoleWriter_methods_ConsoleWriter_I_LRConsoleWriter__arg_fd,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleWriter_methods_ConsoleWriter_I_LRConsoleWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleWriter_method_ConsoleWriter_I_LRConsoleWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleWriter::clazzInfo(), // return type
  "_2_ConsoleWriter", // alternative name of method
  -1, // altlabelHashCode
  ConsoleWriter_methods_ConsoleWriter_I_LRConsoleWriter__args, // the arguments
  0, //arguments count
  ConsoleWriter_methods_ConsoleWriter_I_LRConsoleWriter__exceptions, // the declared exceptions
  ConsoleWriter_MetainfoWrapper::ConsoleWriter_method_ConsoleWriter_I_LRConsoleWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ConsoleWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ConsoleWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ConsoleWriter_MetainfoWrapper::ConsoleWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ConsoleWriter_methods[] = 
{
  &ConsoleWriter_method_ConsoleWriter_IINLRObject__LRConsoleWriter_,
  &ConsoleWriter_method_ConsoleWriter__LRConsoleWriter_,
  &ConsoleWriter_method_ConsoleWriter_I_LRConsoleWriter_,
  &ConsoleWriter_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ConsoleWriter_MetaInfoInitializer
{  ConsoleWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ConsoleWriter::clazzInfo();
    ci->fields =  _ConsoleWriter_fields;
    ci->methods =  _ConsoleWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ConsoleWriter_MetaInfoInitializer ConsoleWriter_MetaInfoInitializer_staticinstance__;


struct ConsoleWriter_clazzInfo_ClazzAttributesResInitializer8
{
  ConsoleWriter_clazzInfo_ClazzAttributesResInitializer8()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ConsoleWriter_methods_ConsoleWriter_IINLRObject__LRConsoleWriter__arg_fd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ConsoleOutChannelMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&ConsoleWriter_methods_ConsoleWriter_I_LRConsoleWriter__arg_fd, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)ConsoleOutChannelMetaInf::GetEnumInfo()));
  }
};

ConsoleWriter_clazzInfo_ClazzAttributesResInitializer8 ConsoleWriter_clazzInfo_ClazzAttributesResInitializer8_instance;



} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
DataReader_create_array(int length)
{
  return new ObjectArrayImpl<RDataReader>(length);
}

//static
::acdk::lang::RObject
DataReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DataReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DataReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readBoolean__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
  ret = This->readBoolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readChar__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
  ret = This->readChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readDouble__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
  ret = This->readDouble();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readFloat__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
  ret = This->readFloat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readInt__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
  ret = This->readInt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readLong__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
  ret = This->readLong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readOpaque__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->DataReader::readOpaque();
    else
        ret = (::acdk::lang::RObject)This->readOpaque();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readShort__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
  ret = This->readShort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
    ret = (::acdk::lang::RObject)This->readString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataReader_method_readUcChar__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataReader* This = dmi_cast<DataReader>(This_);
  ret = This->readUcChar();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DataReader_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DataReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readBoolean__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readBoolean__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readBoolean__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_readBoolean", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readBoolean__Z_args, // the arguments
  0, //arguments count
  DataReader_methods_readBoolean__Z_exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readBoolean__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readChar__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readChar__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readChar__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_7_readChar", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readChar__C_args, // the arguments
  0, //arguments count
  DataReader_methods_readChar__C_exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readChar__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readDouble__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readDouble__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readDouble__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_9_readDouble", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readDouble__D_args, // the arguments
  0, //arguments count
  DataReader_methods_readDouble__D_exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readDouble__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readFloat__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readFloat__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readFloat__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_a_readFloat", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readFloat__F_args, // the arguments
  0, //arguments count
  DataReader_methods_readFloat__F_exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readFloat__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readInt__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readInt__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readInt__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_readInt", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readInt__I_args, // the arguments
  0, //arguments count
  DataReader_methods_readInt__I_exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readInt__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readLong__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readLong__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readLong__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_c_readLong", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readLong__J_args, // the arguments
  0, //arguments count
  DataReader_methods_readLong__J_exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readLong__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readOpaque__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readOpaque__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readOpaque__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readOpaque", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_f_readOpaque", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readOpaque__LRbyteArray__args, // the arguments
  0, //arguments count
  DataReader_methods_readOpaque__LRbyteArray__exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readOpaque__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readShort__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readShort__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readShort__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_d_readShort", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readShort__S_args, // the arguments
  0, //arguments count
  DataReader_methods_readShort__S_exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readShort__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_readString", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readString__LRString__args, // the arguments
  0, //arguments count
  DataReader_methods_readString__LRString__exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataReader_methods_readUcChar__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataReader_methods_readUcChar__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataReader_method_readUcChar__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readUcChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_8_readUcChar", // alternative name of method
  -1, // altlabelHashCode
  DataReader_methods_readUcChar__Luc2char__args, // the arguments
  0, //arguments count
  DataReader_methods_readUcChar__Luc2char__exceptions, // the declared exceptions
  DataReader_MetainfoWrapper::DataReader_method_readUcChar__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DataReader_methods[] = 
{
  &DataReader_method_GetClass__L_acdk_lang_RClass_,
  &DataReader_method_readBoolean__Z,
  &DataReader_method_readChar__C,
  &DataReader_method_readDouble__D,
  &DataReader_method_readFloat__F,
  &DataReader_method_readInt__I,
  &DataReader_method_readLong__J,
  &DataReader_method_readOpaque__LRbyteArray_,
  &DataReader_method_readShort__S,
  &DataReader_method_readString__LRString_,
  &DataReader_method_readUcChar__Luc2char_,
  0
};


struct DataReader_MetaInfoInitializer
{  DataReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DataReader::clazzInfo();
    ci->fields =  _DataReader_fields;
    ci->methods =  _DataReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DataReader_MetaInfoInitializer DataReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
DataWriter_create_array(int length)
{
  return new ObjectArrayImpl<RDataWriter>(length);
}

//static
::acdk::lang::RObject
DataWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class DataWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)DataWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_write_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_write_INLRbyteArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_write_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeBoolean_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeBoolean(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeChar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeDouble_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeDouble(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeFloat_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeFloat(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeInt_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeInt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeLong_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeLong(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeOpaque_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->DataWriter::writeOpaque(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->writeOpaque(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeShort_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeShort(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  DataWriter_method_writeUcChar_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    DataWriter* This = dmi_cast<DataWriter>(This_);
    This->writeUcChar(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _DataWriter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_i_GetClass", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  DataWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_write_INLRbyteArray__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_write_INLRbyteArray__V_args[] = 
{
  &DataWriter_methods_write_INLRbyteArray__V_arg_array,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_write_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_write_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_write", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_write_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  DataWriter_methods_write_INLRbyteArray__V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_write_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_write_INLRbyteArray_I_V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_write_INLRbyteArray_I_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_write_INLRbyteArray_I_V_args[] = 
{
  &DataWriter_methods_write_INLRbyteArray_I_V_arg_array,
  &DataWriter_methods_write_INLRbyteArray_I_V_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_write_INLRbyteArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_write_INLRbyteArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_write", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_write_INLRbyteArray_I_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_write_INLRbyteArray_I_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_write_INLRbyteArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_write_INLRbyteArray_II_V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_write_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_write_INLRbyteArray_II_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_write_INLRbyteArray_II_V_args[] = 
{
  &DataWriter_methods_write_INLRbyteArray_II_V_arg_array,
  &DataWriter_methods_write_INLRbyteArray_II_V_arg_offset,
  &DataWriter_methods_write_INLRbyteArray_II_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_write_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_write_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_write", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_write_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_write_INLRbyteArray_II_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_write_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeBoolean_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeBoolean_Z_V_args[] = 
{
  &DataWriter_methods_writeBoolean_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeBoolean_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeBoolean_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_writeBoolean", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeBoolean_Z_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeBoolean_Z_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeBoolean_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeChar_C_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeChar_C_V_args[] = 
{
  &DataWriter_methods_writeChar_C_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeChar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeChar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_writeChar", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeChar_C_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeChar_C_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeChar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeDouble_D_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeDouble_D_V_args[] = 
{
  &DataWriter_methods_writeDouble_D_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeDouble_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeDouble_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_writeDouble", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeDouble_D_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeDouble_D_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeDouble_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeFloat_F_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeFloat_F_V_args[] = 
{
  &DataWriter_methods_writeFloat_F_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeFloat_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeFloat_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_writeFloat", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeFloat_F_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeFloat_F_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeFloat_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeInt_I_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeInt_I_V_args[] = 
{
  &DataWriter_methods_writeInt_I_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeInt_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeInt_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_writeInt", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeInt_I_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeInt_I_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeInt_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeLong_J_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeLong_J_V_args[] = 
{
  &DataWriter_methods_writeLong_J_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeLong_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeLong_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_writeLong", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeLong_J_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeLong_J_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeLong_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeOpaque_INLRbyteArray__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeOpaque_INLRbyteArray__V_args[] = 
{
  &DataWriter_methods_writeOpaque_INLRbyteArray__V_arg_array,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeOpaque_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeOpaque_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeOpaque", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_writeOpaque", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeOpaque_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeOpaque_INLRbyteArray__V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeOpaque_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeShort_S_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeShort_S_V_args[] = 
{
  &DataWriter_methods_writeShort_S_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeShort_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeShort_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_writeShort", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeShort_S_V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeShort_S_V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeShort_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeString_INLRString__V_args[] = 
{
  &DataWriter_methods_writeString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_g_writeString", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeString_INLRString__V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeString_INLRString__V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo DataWriter_methods_writeUcChar_Luc2char__V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* DataWriter_methods_writeUcChar_Luc2char__V_args[] = 
{
  &DataWriter_methods_writeUcChar_Luc2char__V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* DataWriter_methods_writeUcChar_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo DataWriter_method_writeUcChar_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeUcChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_writeUcChar", // alternative name of method
  -1, // altlabelHashCode
  DataWriter_methods_writeUcChar_Luc2char__V_args, // the arguments
  0, //arguments count
  DataWriter_methods_writeUcChar_Luc2char__V_exceptions, // the declared exceptions
  DataWriter_MetainfoWrapper::DataWriter_method_writeUcChar_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _DataWriter_methods[] = 
{
  &DataWriter_method_GetClass__L_acdk_lang_RClass_,
  &DataWriter_method_write_INLRbyteArray__V,
  &DataWriter_method_write_INLRbyteArray_I_V,
  &DataWriter_method_write_INLRbyteArray_II_V,
  &DataWriter_method_writeBoolean_Z_V,
  &DataWriter_method_writeChar_C_V,
  &DataWriter_method_writeDouble_D_V,
  &DataWriter_method_writeFloat_F_V,
  &DataWriter_method_writeInt_I_V,
  &DataWriter_method_writeLong_J_V,
  &DataWriter_method_writeOpaque_INLRbyteArray__V,
  &DataWriter_method_writeShort_S_V,
  &DataWriter_method_writeString_INLRString__V,
  &DataWriter_method_writeUcChar_Luc2char__V,
  0
};


struct DataWriter_MetaInfoInitializer
{  DataWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = DataWriter::clazzInfo();
    ci->fields =  _DataWriter_fields;
    ci->methods =  _DataWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
DataWriter_MetaInfoInitializer DataWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
EOFException_create_array(int length)
{
  return new ObjectArrayImpl<REOFException>(length);
}

//static
::acdk::lang::RObject
EOFException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EOFException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EOFException_method_EOFException__LREOFException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EOFException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EOFException_method_EOFException_INLRString__LREOFException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new EOFException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EOFException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EOFException::GetClass();
    return methinf;
  }
};


void ThrowException_EOFException(IN(::acdk::lang::RThrowable) ex)
{
  throw REOFException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _EOFException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* EOFException_methods_EOFException__LREOFException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EOFException_methods_EOFException__LREOFException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EOFException_method_EOFException__LREOFException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "EOFException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EOFException::clazzInfo(), // return type
  "_0_EOFException", // alternative name of method
  -1, // altlabelHashCode
  EOFException_methods_EOFException__LREOFException__args, // the arguments
  0, //arguments count
  EOFException_methods_EOFException__LREOFException__exceptions, // the declared exceptions
  EOFException_MetainfoWrapper::EOFException_method_EOFException__LREOFException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EOFException_methods_EOFException_INLRString__LREOFException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EOFException_methods_EOFException_INLRString__LREOFException__args[] = 
{
  &EOFException_methods_EOFException_INLRString__LREOFException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* EOFException_methods_EOFException_INLRString__LREOFException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EOFException_method_EOFException_INLRString__LREOFException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "EOFException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  EOFException::clazzInfo(), // return type
  "_1_EOFException", // alternative name of method
  -1, // altlabelHashCode
  EOFException_methods_EOFException_INLRString__LREOFException__args, // the arguments
  0, //arguments count
  EOFException_methods_EOFException_INLRString__LREOFException__exceptions, // the declared exceptions
  EOFException_MetainfoWrapper::EOFException_method_EOFException_INLRString__LREOFException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EOFException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EOFException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EOFException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EOFException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EOFException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EOFException_MetainfoWrapper::EOFException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EOFException_methods[] = 
{
  &EOFException_method_EOFException__LREOFException_,
  &EOFException_method_EOFException_INLRString__LREOFException_,
  &EOFException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct EOFException_MetaInfoInitializer
{  EOFException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EOFException::clazzInfo();
    ci->fields =  _EOFException_fields;
    ci->methods =  _EOFException_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EOFException_MetaInfoInitializer EOFException_MetaInfoInitializer_staticinstance__;


struct EOFException_clazzInfo_ClazzAttributesResInitializer9
{
  EOFException_clazzInfo_ClazzAttributesResInitializer9()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)EOFException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_EOFException));
  }
};

EOFException_clazzInfo_ClazzAttributesResInitializer9 EOFException_clazzInfo_ClazzAttributesResInitializer9_instance;



} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
File_create_array(int length)
{
  return new ObjectArrayImpl<RFile>(length);
}

//static
::acdk::lang::RObject
File_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class File_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_File_INLRFileImpl__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new File(::acdk::lang::dmi::castTo< RFileImpl>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_File_INLRString__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new File(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_File_INLRFile_INLRString__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new File(::acdk::lang::dmi::castTo< RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_File_INLRString_INLRString__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new File(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_canRead__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::canRead();
    else
      ret = This->canRead();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_canWrite__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::canWrite();
    else
      ret = This->canWrite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_compareTo_INLRFile__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::compareTo(::acdk::lang::dmi::castTo< RFile>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RFile>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_concat_INLRString_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::concat(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_createNewFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::createNewFile();
    else
      ret = This->createNewFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_createTempFile_INLRString_INLRString__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::createTempFile(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_createTempFile_INLRString_INLRString_INLRFile__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::createTempFile(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RFile>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_create_instance__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::create_instance();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_deleteFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::deleteFile();
    else
      ret = This->deleteFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_deleteOnExit__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->File::deleteOnExit();
    else
        This->deleteOnExit();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_endOfLine__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::endOfLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_exists__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::exists();
    else
      ret = This->exists();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_fileCreated__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::fileCreated();
    else
      ret = This->fileCreated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getAbsolutePath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getAbsolutePath();
    else
        ret = (::acdk::lang::RObject)This->getAbsolutePath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getCWD__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::getCWD();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getCWDFile__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::getCWDFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getCanonicalPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getCanonicalPath();
    else
        ret = (::acdk::lang::RObject)This->getCanonicalPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getFileImpl_INLRString__LRFileImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::getFileImpl(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getFileImpl__LRFileImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getFileImpl();
    else
        ret = (::acdk::lang::RObject)This->getFileImpl();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getFileInfo__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getFileInfo();
    else
        ret = (::acdk::lang::RObject)This->getFileInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getParent__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getParentFile__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getParentFile();
    else
        ret = (::acdk::lang::RObject)This->getParentFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getPath();
    else
        ret = (::acdk::lang::RObject)This->getPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getReader__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getReader();
    else
        ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_getWriter__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::getWriter();
    else
        ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_isAbsolute__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::isAbsolute();
    else
      ret = This->isAbsolute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_isDirectory__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::isDirectory();
    else
      ret = This->isDirectory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_isFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::isFile();
    else
      ret = This->isFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_isHidden__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::isHidden();
    else
      ret = This->isHidden();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_lastModified__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::lastModified();
    else
      ret = This->lastModified();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_length__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_list_INLRFilenameFilter_I_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_list__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::list();
    else
        ret = (::acdk::lang::RObject)This->list();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_list_INLRFilenameFilter__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_listFiles_INLRFileFilter_I_LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_listFiles__LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::listFiles();
    else
        ret = (::acdk::lang::RObject)This->listFiles();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_listFiles_INLRFileFilter__LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_listRoots__LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::listRoots();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_loadAscii__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::loadAscii();
    else
        ret = (::acdk::lang::RObject)This->loadAscii();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_loadBinary__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::loadBinary();
    else
        ret = (::acdk::lang::RObject)This->loadBinary();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_makeChild_LRString__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->File::makeChild(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->makeChild(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_mkdir_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::mkdir(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->mkdir(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_mkdir__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::mkdir();
    else
      ret = This->mkdir();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_mkdirs_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::mkdirs(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->mkdirs(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_mkdirs__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::mkdirs();
    else
      ret = This->mkdirs();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_pathSeparator__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::pathSeparator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_pathSeparatorChar__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = File::pathSeparatorChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_renameTo_INLRFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::renameTo(::acdk::lang::dmi::castTo< RFile>(args[0], dc));
    else
      ret = This->renameTo(::acdk::lang::dmi::castTo< RFile>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_separator__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)File::separator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_separatorChar__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = File::separatorChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_setCWD_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = File::setCWD(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_setFileAttributes_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::setFileAttributes(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->setFileAttributes(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_setFileCreated_J_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::setFileCreated(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->setFileCreated(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_setLastModified_J_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::setLastModified(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->setLastModified(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  File_method_setReadOnly_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->File::setReadOnly(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
      ret = This->setReadOnly(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  File_fields__fileImpl_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    File* This = dmi_cast<File>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fileImpl, flags);
    else
      This->_fileImpl = ::acdk::lang::dmi::castTo< RFileImpl>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo File_fields__fileImpl = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fileImpl", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileImpl::clazzInfo(),
  File_MetainfoWrapper::File_fields__fileImpl_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _File_fields[] = 
{
  &File_fields__fileImpl,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_File_INLRFileImpl__LRFile__arg_fileimpl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fileimpl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileImpl::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_File_INLRFileImpl__LRFile__args[] = 
{
  &File_methods_File_INLRFileImpl__LRFile__arg_fileimpl,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_File_INLRFileImpl__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_File_INLRFileImpl__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "File", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  File::clazzInfo(), // return type
  "_2_File", // alternative name of method
  -1, // altlabelHashCode
  File_methods_File_INLRFileImpl__LRFile__args, // the arguments
  0, //arguments count
  File_methods_File_INLRFileImpl__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_File_INLRFileImpl__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_File_INLRString__LRFile__arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_File_INLRString__LRFile__args[] = 
{
  &File_methods_File_INLRString__LRFile__arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_File_INLRString__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_File_INLRString__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "File", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  File::clazzInfo(), // return type
  "_3_File", // alternative name of method
  -1, // altlabelHashCode
  File_methods_File_INLRString__LRFile__args, // the arguments
  0, //arguments count
  File_methods_File_INLRString__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_File_INLRString__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_File_INLRFile_INLRString__LRFile__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_File_INLRFile_INLRString__LRFile__arg_child = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "child", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_File_INLRFile_INLRString__LRFile__args[] = 
{
  &File_methods_File_INLRFile_INLRString__LRFile__arg_parent,
  &File_methods_File_INLRFile_INLRString__LRFile__arg_child,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_File_INLRFile_INLRString__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_File_INLRFile_INLRString__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "File", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  File::clazzInfo(), // return type
  "_4_File", // alternative name of method
  -1, // altlabelHashCode
  File_methods_File_INLRFile_INLRString__LRFile__args, // the arguments
  0, //arguments count
  File_methods_File_INLRFile_INLRString__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_File_INLRFile_INLRString__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_File_INLRString_INLRString__LRFile__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_File_INLRString_INLRString__LRFile__arg_child = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "child", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_File_INLRString_INLRString__LRFile__args[] = 
{
  &File_methods_File_INLRString_INLRString__LRFile__arg_parent,
  &File_methods_File_INLRString_INLRString__LRFile__arg_child,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_File_INLRString_INLRString__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_File_INLRString_INLRString__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "File", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  File::clazzInfo(), // return type
  "_5_File", // alternative name of method
  -1, // altlabelHashCode
  File_methods_File_INLRString_INLRString__LRFile__args, // the arguments
  0, //arguments count
  File_methods_File_INLRString_INLRString__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_File_INLRString_INLRString__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_Y_GetClass", // alternative name of method
  -1, // altlabelHashCode
  File_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  File_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_canRead__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_canRead__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_canRead__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRead", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_canRead", // alternative name of method
  -1, // altlabelHashCode
  File_methods_canRead__Z_args, // the arguments
  0, //arguments count
  File_methods_canRead__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_canRead__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_canWrite__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_canWrite__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_canWrite__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_n_canWrite", // alternative name of method
  -1, // altlabelHashCode
  File_methods_canWrite__Z_args, // the arguments
  0, //arguments count
  File_methods_canWrite__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_canWrite__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_compareTo_INLRFile__I_arg_o = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "o", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_compareTo_INLRFile__I_args[] = 
{
  &File_methods_compareTo_INLRFile__I_arg_o,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_compareTo_INLRFile__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_compareTo_INLRFile__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_compareTo", // alternative name of method
  -1, // altlabelHashCode
  File_methods_compareTo_INLRFile__I_args, // the arguments
  0, //arguments count
  File_methods_compareTo_INLRFile__I_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_compareTo_INLRFile__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_concat_INLRString_INLRString__LRString__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_concat_INLRString_INLRString__LRString__arg_child = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "child", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_concat_INLRString_INLRString__LRString__args[] = 
{
  &File_methods_concat_INLRString_INLRString__LRString__arg_parent,
  &File_methods_concat_INLRString_INLRString__LRString__arg_child,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_concat_INLRString_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_concat_INLRString_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "concat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_T_concat", // alternative name of method
  -1, // altlabelHashCode
  File_methods_concat_INLRString_INLRString__LRString__args, // the arguments
  0, //arguments count
  File_methods_concat_INLRString_INLRString__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_concat_INLRString_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_createNewFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_createNewFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_createNewFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createNewFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_createNewFile", // alternative name of method
  -1, // altlabelHashCode
  File_methods_createNewFile__Z_args, // the arguments
  0, //arguments count
  File_methods_createNewFile__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_createNewFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_createTempFile_INLRString_INLRString__LRFile__arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_createTempFile_INLRString_INLRString__LRFile__arg_suffix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "suffix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_createTempFile_INLRString_INLRString__LRFile__args[] = 
{
  &File_methods_createTempFile_INLRString_INLRString__LRFile__arg_prefix,
  &File_methods_createTempFile_INLRString_INLRString__LRFile__arg_suffix,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_createTempFile_INLRString_INLRString__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_createTempFile_INLRString_INLRString__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTempFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_O_createTempFile", // alternative name of method
  -1, // altlabelHashCode
  File_methods_createTempFile_INLRString_INLRString__LRFile__args, // the arguments
  0, //arguments count
  File_methods_createTempFile_INLRString_INLRString__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_createTempFile_INLRString_INLRString__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__arg_prefix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "prefix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__arg_suffix = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "suffix", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__arg_directory = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "directory", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__args[] = 
{
  &File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__arg_prefix,
  &File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__arg_suffix,
  &File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__arg_directory,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_createTempFile_INLRString_INLRString_INLRFile__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createTempFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_P_createTempFile", // alternative name of method
  -1, // altlabelHashCode
  File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__args, // the arguments
  0, //arguments count
  File_methods_createTempFile_INLRString_INLRString_INLRFile__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_createTempFile_INLRString_INLRString_INLRFile__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_create_instance__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_create_instance__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_create_instance__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create_instance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_0_create_instance", // alternative name of method
  -1, // altlabelHashCode
  File_methods_create_instance__LRObject__args, // the arguments
  0, //arguments count
  File_methods_create_instance__LRObject__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_create_instance__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_deleteFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_deleteFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_deleteFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_deleteFile", // alternative name of method
  -1, // altlabelHashCode
  File_methods_deleteFile__Z_args, // the arguments
  0, //arguments count
  File_methods_deleteFile__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_deleteFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_deleteOnExit__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_deleteOnExit__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_deleteOnExit__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteOnExit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_deleteOnExit", // alternative name of method
  -1, // altlabelHashCode
  File_methods_deleteOnExit__V_args, // the arguments
  0, //arguments count
  File_methods_deleteOnExit__V_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_deleteOnExit__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_endOfLine__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_endOfLine__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_endOfLine__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endOfLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_endOfLine", // alternative name of method
  -1, // altlabelHashCode
  File_methods_endOfLine__LRString__args, // the arguments
  0, //arguments count
  File_methods_endOfLine__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_endOfLine__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_exists__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_exists__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_exists__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_l_exists", // alternative name of method
  -1, // altlabelHashCode
  File_methods_exists__Z_args, // the arguments
  0, //arguments count
  File_methods_exists__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_exists__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_fileCreated__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_fileCreated__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_fileCreated__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fileCreated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_D_fileCreated", // alternative name of method
  -1, // altlabelHashCode
  File_methods_fileCreated__J_args, // the arguments
  0, //arguments count
  File_methods_fileCreated__J_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_fileCreated__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getAbsolutePath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getAbsolutePath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getAbsolutePath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAbsolutePath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_getAbsolutePath", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getAbsolutePath__LRString__args, // the arguments
  0, //arguments count
  File_methods_getAbsolutePath__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getAbsolutePath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getCWD__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getCWD__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getCWD__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCWD", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_Q_getCWD", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getCWD__LRString__args, // the arguments
  0, //arguments count
  File_methods_getCWD__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getCWD__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getCWDFile__LRFile__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getCWDFile__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getCWDFile__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCWDFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_R_getCWDFile", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getCWDFile__LRFile__args, // the arguments
  0, //arguments count
  File_methods_getCWDFile__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getCWDFile__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getCanonicalPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getCanonicalPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getCanonicalPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCanonicalPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_e_getCanonicalPath", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getCanonicalPath__LRString__args, // the arguments
  0, //arguments count
  File_methods_getCanonicalPath__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getCanonicalPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_getFileImpl_INLRString__LRFileImpl__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getFileImpl_INLRString__LRFileImpl__args[] = 
{
  &File_methods_getFileImpl_INLRString__LRFileImpl__arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getFileImpl_INLRString__LRFileImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getFileImpl_INLRString__LRFileImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileImpl::clazzInfo(), // return type
  "_1_getFileImpl", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getFileImpl_INLRString__LRFileImpl__args, // the arguments
  0, //arguments count
  File_methods_getFileImpl_INLRString__LRFileImpl__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getFileImpl_INLRString__LRFileImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getFileImpl__LRFileImpl__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getFileImpl__LRFileImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getFileImpl__LRFileImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileImpl::clazzInfo(), // return type
  "_6_getFileImpl", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getFileImpl__LRFileImpl__args, // the arguments
  0, //arguments count
  File_methods_getFileImpl__LRFileImpl__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getFileImpl__LRFileImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getFileInfo__LRFileInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getFileInfo__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getFileInfo__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo(), // return type
  "_N_getFileInfo", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getFileInfo__LRFileInfo__args, // the arguments
  0, //arguments count
  File_methods_getFileInfo__LRFileInfo__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getFileInfo__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_getName", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getName__LRString__args, // the arguments
  0, //arguments count
  File_methods_getName__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getParent__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getParent__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getParent__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_getParent", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getParent__LRString__args, // the arguments
  0, //arguments count
  File_methods_getParent__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getParent__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getParentFile__LRFile__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getParentFile__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getParentFile__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_i_getParentFile", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getParentFile__LRFile__args, // the arguments
  0, //arguments count
  File_methods_getParentFile__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getParentFile__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_j_getPath", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getPath__LRString__args, // the arguments
  0, //arguments count
  File_methods_getPath__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getReader__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getReader__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getReader__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_U_getReader", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getReader__LRReader__args, // the arguments
  0, //arguments count
  File_methods_getReader__LRReader__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getReader__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_getWriter__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_getWriter__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_getWriter__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_V_getWriter", // alternative name of method
  -1, // altlabelHashCode
  File_methods_getWriter__LRWriter__args, // the arguments
  0, //arguments count
  File_methods_getWriter__LRWriter__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_getWriter__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_isAbsolute__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_isAbsolute__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_isAbsolute__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAbsolute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_isAbsolute", // alternative name of method
  -1, // altlabelHashCode
  File_methods_isAbsolute__Z_args, // the arguments
  0, //arguments count
  File_methods_isAbsolute__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_isAbsolute__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_isDirectory__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_isDirectory__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_isDirectory__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_isDirectory", // alternative name of method
  -1, // altlabelHashCode
  File_methods_isDirectory__Z_args, // the arguments
  0, //arguments count
  File_methods_isDirectory__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_isDirectory__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_isFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_isFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_isFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_isFile", // alternative name of method
  -1, // altlabelHashCode
  File_methods_isFile__Z_args, // the arguments
  0, //arguments count
  File_methods_isFile__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_isFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_isHidden__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_isHidden__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_isHidden__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHidden", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_isHidden", // alternative name of method
  -1, // altlabelHashCode
  File_methods_isHidden__Z_args, // the arguments
  0, //arguments count
  File_methods_isHidden__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_isHidden__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_lastModified__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_lastModified__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_lastModified__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastModified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_C_lastModified", // alternative name of method
  -1, // altlabelHashCode
  File_methods_lastModified__J_args, // the arguments
  0, //arguments count
  File_methods_lastModified__J_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_lastModified__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_length__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_length__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_length__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_r_length", // alternative name of method
  -1, // altlabelHashCode
  File_methods_length__J_args, // the arguments
  0, //arguments count
  File_methods_length__J_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_length__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_list_INLRFilenameFilter_I_LRStringArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFilenameFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_list_INLRFilenameFilter_I_LRStringArray__arg_listFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "listFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_list_INLRFilenameFilter_I_LRStringArray__args[] = 
{
  &File_methods_list_INLRFilenameFilter_I_LRStringArray__arg_filter,
  &File_methods_list_INLRFilenameFilter_I_LRStringArray__arg_listFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_list_INLRFilenameFilter_I_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_list_INLRFilenameFilter_I_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_v_list", // alternative name of method
  -1, // altlabelHashCode
  File_methods_list_INLRFilenameFilter_I_LRStringArray__args, // the arguments
  0, //arguments count
  File_methods_list_INLRFilenameFilter_I_LRStringArray__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_list_INLRFilenameFilter_I_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_list__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_list__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_list__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_w_list", // alternative name of method
  -1, // altlabelHashCode
  File_methods_list__LRStringArray__args, // the arguments
  0, //arguments count
  File_methods_list__LRStringArray__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_list__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_list_INLRFilenameFilter__LRStringArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFilenameFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_list_INLRFilenameFilter__LRStringArray__args[] = 
{
  &File_methods_list_INLRFilenameFilter__LRStringArray__arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_list_INLRFilenameFilter__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_list_INLRFilenameFilter__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_x_list", // alternative name of method
  -1, // altlabelHashCode
  File_methods_list_INLRFilenameFilter__LRStringArray__args, // the arguments
  0, //arguments count
  File_methods_list_INLRFilenameFilter__LRStringArray__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_list_INLRFilenameFilter__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_listFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "listFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_listFiles_INLRFileFilter_I_LRFileArray__args[] = 
{
  &File_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_filter,
  &File_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_listFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_listFiles_INLRFileFilter_I_LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_listFiles_INLRFileFilter_I_LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_y_listFiles", // alternative name of method
  -1, // altlabelHashCode
  File_methods_listFiles_INLRFileFilter_I_LRFileArray__args, // the arguments
  0, //arguments count
  File_methods_listFiles_INLRFileFilter_I_LRFileArray__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_listFiles_INLRFileFilter_I_LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_listFiles__LRFileArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_listFiles__LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_listFiles__LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_z_listFiles", // alternative name of method
  -1, // altlabelHashCode
  File_methods_listFiles__LRFileArray__args, // the arguments
  0, //arguments count
  File_methods_listFiles__LRFileArray__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_listFiles__LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_listFiles_INLRFileFilter__LRFileArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_listFiles_INLRFileFilter__LRFileArray__args[] = 
{
  &File_methods_listFiles_INLRFileFilter__LRFileArray__arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_listFiles_INLRFileFilter__LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_listFiles_INLRFileFilter__LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_A_listFiles", // alternative name of method
  -1, // altlabelHashCode
  File_methods_listFiles_INLRFileFilter__LRFileArray__args, // the arguments
  0, //arguments count
  File_methods_listFiles_INLRFileFilter__LRFileArray__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_listFiles_INLRFileFilter__LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_listRoots__LRFileArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_listRoots__LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_listRoots__LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listRoots", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_B_listRoots", // alternative name of method
  -1, // altlabelHashCode
  File_methods_listRoots__LRFileArray__args, // the arguments
  0, //arguments count
  File_methods_listRoots__LRFileArray__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_listRoots__LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_loadAscii__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_loadAscii__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_loadAscii__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadAscii", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_W_loadAscii", // alternative name of method
  -1, // altlabelHashCode
  File_methods_loadAscii__LRString__args, // the arguments
  0, //arguments count
  File_methods_loadAscii__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_loadAscii__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_loadBinary__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_loadBinary__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_loadBinary__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "loadBinary", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_X_loadBinary", // alternative name of method
  -1, // altlabelHashCode
  File_methods_loadBinary__LRbyteArray__args, // the arguments
  0, //arguments count
  File_methods_loadBinary__LRbyteArray__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_loadBinary__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_makeChild_LRString__LRFile__arg_subfile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "subfile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_makeChild_LRString__LRFile__args[] = 
{
  &File_methods_makeChild_LRString__LRFile__arg_subfile,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_makeChild_LRString__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_makeChild_LRString__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_7_makeChild", // alternative name of method
  -1, // altlabelHashCode
  File_methods_makeChild_LRString__LRFile__args, // the arguments
  0, //arguments count
  File_methods_makeChild_LRString__LRFile__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_makeChild_LRString__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_mkdir_I_Z_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_mkdir_I_Z_args[] = 
{
  &File_methods_mkdir_I_Z_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_mkdir_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_mkdir_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mkdir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_E_mkdir", // alternative name of method
  -1, // altlabelHashCode
  File_methods_mkdir_I_Z_args, // the arguments
  0, //arguments count
  File_methods_mkdir_I_Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_mkdir_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_mkdir__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_mkdir__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_mkdir__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "mkdir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_F_mkdir", // alternative name of method
  -1, // altlabelHashCode
  File_methods_mkdir__Z_args, // the arguments
  0, //arguments count
  File_methods_mkdir__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_mkdir__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_mkdirs_I_Z_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_mkdirs_I_Z_args[] = 
{
  &File_methods_mkdirs_I_Z_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_mkdirs_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_mkdirs_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mkdirs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_G_mkdirs", // alternative name of method
  -1, // altlabelHashCode
  File_methods_mkdirs_I_Z_args, // the arguments
  0, //arguments count
  File_methods_mkdirs_I_Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_mkdirs_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_mkdirs__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_mkdirs__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_mkdirs__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "mkdirs", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H_mkdirs", // alternative name of method
  -1, // altlabelHashCode
  File_methods_mkdirs__Z_args, // the arguments
  0, //arguments count
  File_methods_mkdirs__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_mkdirs__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_pathSeparator__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_pathSeparator__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_pathSeparator__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pathSeparator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_pathSeparator", // alternative name of method
  -1, // altlabelHashCode
  File_methods_pathSeparator__LRString__args, // the arguments
  0, //arguments count
  File_methods_pathSeparator__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_pathSeparator__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_pathSeparatorChar__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_pathSeparatorChar__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_pathSeparatorChar__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pathSeparatorChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_8_pathSeparatorChar", // alternative name of method
  -1, // altlabelHashCode
  File_methods_pathSeparatorChar__C_args, // the arguments
  0, //arguments count
  File_methods_pathSeparatorChar__C_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_pathSeparatorChar__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_renameTo_INLRFile__Z_arg_dest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_renameTo_INLRFile__Z_args[] = 
{
  &File_methods_renameTo_INLRFile__Z_arg_dest,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_renameTo_INLRFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_renameTo_INLRFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "renameTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_I_renameTo", // alternative name of method
  -1, // altlabelHashCode
  File_methods_renameTo_INLRFile__Z_args, // the arguments
  0, //arguments count
  File_methods_renameTo_INLRFile__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_renameTo_INLRFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_separator__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_separator__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_separator__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "separator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_separator", // alternative name of method
  -1, // altlabelHashCode
  File_methods_separator__LRString__args, // the arguments
  0, //arguments count
  File_methods_separator__LRString__exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_separator__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_separatorChar__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_separatorChar__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_separatorChar__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "separatorChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_a_separatorChar", // alternative name of method
  -1, // altlabelHashCode
  File_methods_separatorChar__C_args, // the arguments
  0, //arguments count
  File_methods_separatorChar__C_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_separatorChar__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_setCWD_INLRString__Z_arg_newpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "newpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_setCWD_INLRString__Z_args[] = 
{
  &File_methods_setCWD_INLRString__Z_arg_newpath,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_setCWD_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_setCWD_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCWD", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_S_setCWD", // alternative name of method
  -1, // altlabelHashCode
  File_methods_setCWD_INLRString__Z_args, // the arguments
  0, //arguments count
  File_methods_setCWD_INLRString__Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_setCWD_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_setFileAttributes_II_Z_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_setFileAttributes_II_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_setFileAttributes_II_Z_args[] = 
{
  &File_methods_setFileAttributes_II_Z_arg_mask,
  &File_methods_setFileAttributes_II_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_setFileAttributes_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_setFileAttributes_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileAttributes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_M_setFileAttributes", // alternative name of method
  -1, // altlabelHashCode
  File_methods_setFileAttributes_II_Z_args, // the arguments
  0, //arguments count
  File_methods_setFileAttributes_II_Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_setFileAttributes_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_setFileCreated_J_Z_arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_setFileCreated_J_Z_args[] = 
{
  &File_methods_setFileCreated_J_Z_arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_setFileCreated_J_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_setFileCreated_J_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileCreated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K_setFileCreated", // alternative name of method
  -1, // altlabelHashCode
  File_methods_setFileCreated_J_Z_args, // the arguments
  0, //arguments count
  File_methods_setFileCreated_J_Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_setFileCreated_J_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_setLastModified_J_Z_arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_setLastModified_J_Z_args[] = 
{
  &File_methods_setLastModified_J_Z_arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_setLastModified_J_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_setLastModified_J_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLastModified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_J_setLastModified", // alternative name of method
  -1, // altlabelHashCode
  File_methods_setLastModified_J_Z_args, // the arguments
  0, //arguments count
  File_methods_setLastModified_J_Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_setLastModified_J_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo File_methods_setReadOnly_Z_Z_arg_doReadOnly = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "doReadOnly", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* File_methods_setReadOnly_Z_Z_args[] = 
{
  &File_methods_setReadOnly_Z_Z_arg_doReadOnly,
  0
};

::acdk::lang::dmi::ClazzInfo* File_methods_setReadOnly_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo File_method_setReadOnly_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setReadOnly", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L_setReadOnly", // alternative name of method
  -1, // altlabelHashCode
  File_methods_setReadOnly_Z_Z_args, // the arguments
  0, //arguments count
  File_methods_setReadOnly_Z_Z_exceptions, // the declared exceptions
  File_MetainfoWrapper::File_method_setReadOnly_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _File_methods[] = 
{
  &File_method_File_INLRFileImpl__LRFile_,
  &File_method_File_INLRString__LRFile_,
  &File_method_File_INLRFile_INLRString__LRFile_,
  &File_method_File_INLRString_INLRString__LRFile_,
  &File_method_GetClass__L_acdk_lang_RClass_,
  &File_method_canRead__Z,
  &File_method_canWrite__Z,
  &File_method_compareTo_INLRFile__I,
  &File_method_concat_INLRString_INLRString__LRString_,
  &File_method_createNewFile__Z,
  &File_method_createTempFile_INLRString_INLRString__LRFile_,
  &File_method_createTempFile_INLRString_INLRString_INLRFile__LRFile_,
  &File_method_create_instance__LRObject_,
  &File_method_deleteFile__Z,
  &File_method_deleteOnExit__V,
  &File_method_endOfLine__LRString_,
  &File_method_exists__Z,
  &File_method_fileCreated__J,
  &File_method_getAbsolutePath__LRString_,
  &File_method_getCWD__LRString_,
  &File_method_getCWDFile__LRFile_,
  &File_method_getCanonicalPath__LRString_,
  &File_method_getFileImpl_INLRString__LRFileImpl_,
  &File_method_getFileImpl__LRFileImpl_,
  &File_method_getFileInfo__LRFileInfo_,
  &File_method_getName__LRString_,
  &File_method_getParent__LRString_,
  &File_method_getParentFile__LRFile_,
  &File_method_getPath__LRString_,
  &File_method_getReader__LRReader_,
  &File_method_getWriter__LRWriter_,
  &File_method_isAbsolute__Z,
  &File_method_isDirectory__Z,
  &File_method_isFile__Z,
  &File_method_isHidden__Z,
  &File_method_lastModified__J,
  &File_method_length__J,
  &File_method_list_INLRFilenameFilter_I_LRStringArray_,
  &File_method_list__LRStringArray_,
  &File_method_list_INLRFilenameFilter__LRStringArray_,
  &File_method_listFiles_INLRFileFilter_I_LRFileArray_,
  &File_method_listFiles__LRFileArray_,
  &File_method_listFiles_INLRFileFilter__LRFileArray_,
  &File_method_listRoots__LRFileArray_,
  &File_method_loadAscii__LRString_,
  &File_method_loadBinary__LRbyteArray_,
  &File_method_makeChild_LRString__LRFile_,
  &File_method_mkdir_I_Z,
  &File_method_mkdir__Z,
  &File_method_mkdirs_I_Z,
  &File_method_mkdirs__Z,
  &File_method_pathSeparator__LRString_,
  &File_method_pathSeparatorChar__C,
  &File_method_renameTo_INLRFile__Z,
  &File_method_separator__LRString_,
  &File_method_separatorChar__C,
  &File_method_setCWD_INLRString__Z,
  &File_method_setFileAttributes_II_Z,
  &File_method_setFileCreated_J_Z,
  &File_method_setLastModified_J_Z,
  &File_method_setReadOnly_Z_Z,
  0
};


struct File_MetaInfoInitializer
{  File_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = File::clazzInfo();
    ci->fields =  _File_fields;
    ci->methods =  _File_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
File_MetaInfoInitializer File_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
FileDescriptor_create_array(int length)
{
  return new ObjectArrayImpl<RFileDescriptor>(length);
}

//static
::acdk::lang::RObject
FileDescriptor_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileDescriptor_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_FileDescriptor_IIZ_LRFileDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDescriptor(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_FileDescriptor_II_LRFileDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDescriptor(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDescriptor(::acdk::lang::dmi::castTo< RFileDescriptor>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_FileDescriptor_INLRFileDescriptor__LRFileDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDescriptor(::acdk::lang::dmi::castTo< RFileDescriptor>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_FileDescriptor__LRFileDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileDescriptor();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileDescriptor::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_c_fd__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDescriptor* This = dmi_cast<FileDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDescriptor::c_fd();
    else
      ret = This->c_fd();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_getCloseOnExec__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDescriptor* This = dmi_cast<FileDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDescriptor::getCloseOnExec();
    else
      ret = This->getCloseOnExec();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_omode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDescriptor* This = dmi_cast<FileDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDescriptor::omode();
    else
      ret = This->omode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_setCloseOnExec_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDescriptor* This = dmi_cast<FileDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDescriptor::setCloseOnExec(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setCloseOnExec(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_sync__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDescriptor* This = dmi_cast<FileDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileDescriptor::sync();
    else
        This->sync();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileDescriptor_method_valid__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileDescriptor* This = dmi_cast<FileDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileDescriptor::valid();
    else
      ret = This->valid();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileDescriptor_fields_err_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(FileDescriptor::err, flags);
    else
      FileDescriptor::err = ::acdk::lang::dmi::castTo< RFileDescriptor>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileDescriptor_fields_in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(FileDescriptor::in, flags);
    else
      FileDescriptor::in = ::acdk::lang::dmi::castTo< RFileDescriptor>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileDescriptor_fields_out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(FileDescriptor::out, flags);
    else
      FileDescriptor::out = ::acdk::lang::dmi::castTo< RFileDescriptor>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileDescriptor_fields_err = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "err", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileDescriptor::clazzInfo(),
  FileDescriptor_MetainfoWrapper::FileDescriptor_fields_err_accessor, // read/write access to this fields
  (void*)FileDescriptor::err._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileDescriptor_fields_in = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileDescriptor::clazzInfo(),
  FileDescriptor_MetainfoWrapper::FileDescriptor_fields_in_accessor, // read/write access to this fields
  (void*)FileDescriptor::in._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileDescriptor_fields_out = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileDescriptor::clazzInfo(),
  FileDescriptor_MetainfoWrapper::FileDescriptor_fields_out_accessor, // read/write access to this fields
  (void*)FileDescriptor::out._ref_this() // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileDescriptor_fields[] = 
{
  &FileDescriptor_fields_err,
  &FileDescriptor_fields_in,
  &FileDescriptor_fields_out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__arg_omode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "omode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__arg_dupl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dupl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__args[] = 
{
  &FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__arg_fd,
  &FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__arg_omode,
  &FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__arg_dupl,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_FileDescriptor_IIZ_LRFileDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDescriptor::clazzInfo(), // return type
  "_0_FileDescriptor", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__args, // the arguments
  0, //arguments count
  FileDescriptor_methods_FileDescriptor_IIZ_LRFileDescriptor__exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_FileDescriptor_IIZ_LRFileDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_FileDescriptor_II_LRFileDescriptor__arg_fd = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fd", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_FileDescriptor_II_LRFileDescriptor__arg_omode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "omode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_FileDescriptor_II_LRFileDescriptor__args[] = 
{
  &FileDescriptor_methods_FileDescriptor_II_LRFileDescriptor__arg_fd,
  &FileDescriptor_methods_FileDescriptor_II_LRFileDescriptor__arg_omode,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_FileDescriptor_II_LRFileDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_FileDescriptor_II_LRFileDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDescriptor::clazzInfo(), // return type
  "_1_FileDescriptor", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_FileDescriptor_II_LRFileDescriptor__args, // the arguments
  0, //arguments count
  FileDescriptor_methods_FileDescriptor_II_LRFileDescriptor__exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_FileDescriptor_II_LRFileDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__arg_f = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "f", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileDescriptor::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__arg_dupl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dupl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__args[] = 
{
  &FileDescriptor_methods_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__arg_f,
  &FileDescriptor_methods_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__arg_dupl,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDescriptor::clazzInfo(), // return type
  "_2_FileDescriptor", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__args, // the arguments
  0, //arguments count
  FileDescriptor_methods_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_FileDescriptor_INLRFileDescriptor__LRFileDescriptor__arg_f = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "f", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileDescriptor::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_FileDescriptor_INLRFileDescriptor__LRFileDescriptor__args[] = 
{
  &FileDescriptor_methods_FileDescriptor_INLRFileDescriptor__LRFileDescriptor__arg_f,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_FileDescriptor_INLRFileDescriptor__LRFileDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_FileDescriptor_INLRFileDescriptor__LRFileDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDescriptor::clazzInfo(), // return type
  "_3_FileDescriptor", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_FileDescriptor_INLRFileDescriptor__LRFileDescriptor__args, // the arguments
  0, //arguments count
  FileDescriptor_methods_FileDescriptor_INLRFileDescriptor__LRFileDescriptor__exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_FileDescriptor_INLRFileDescriptor__LRFileDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_FileDescriptor__LRFileDescriptor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_FileDescriptor__LRFileDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_FileDescriptor__LRFileDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileDescriptor::clazzInfo(), // return type
  "_4_FileDescriptor", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_FileDescriptor__LRFileDescriptor__args, // the arguments
  0, //arguments count
  FileDescriptor_methods_FileDescriptor__LRFileDescriptor__exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_FileDescriptor__LRFileDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileDescriptor_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_c_fd__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_c_fd__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_c_fd__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "c_fd", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_c_fd", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_c_fd__I_args, // the arguments
  0, //arguments count
  FileDescriptor_methods_c_fd__I_exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_c_fd__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_getCloseOnExec__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_getCloseOnExec__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_getCloseOnExec__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCloseOnExec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_getCloseOnExec", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_getCloseOnExec__Z_args, // the arguments
  0, //arguments count
  FileDescriptor_methods_getCloseOnExec__Z_exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_getCloseOnExec__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_omode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_omode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_omode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "omode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_omode", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_omode__I_args, // the arguments
  0, //arguments count
  FileDescriptor_methods_omode__I_exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_omode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileDescriptor_methods_setCloseOnExec_Z_V_arg_val = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "val", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_setCloseOnExec_Z_V_args[] = 
{
  &FileDescriptor_methods_setCloseOnExec_Z_V_arg_val,
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_setCloseOnExec_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_setCloseOnExec_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setCloseOnExec", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setCloseOnExec", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_setCloseOnExec_Z_V_args, // the arguments
  0, //arguments count
  FileDescriptor_methods_setCloseOnExec_Z_V_exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_setCloseOnExec_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_sync__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_sync__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_sync__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "sync", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_sync", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_sync__V_args, // the arguments
  0, //arguments count
  FileDescriptor_methods_sync__V_exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_sync__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileDescriptor_methods_valid__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileDescriptor_methods_valid__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileDescriptor_method_valid__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "valid", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_valid", // alternative name of method
  -1, // altlabelHashCode
  FileDescriptor_methods_valid__Z_args, // the arguments
  0, //arguments count
  FileDescriptor_methods_valid__Z_exceptions, // the declared exceptions
  FileDescriptor_MetainfoWrapper::FileDescriptor_method_valid__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileDescriptor_methods[] = 
{
  &FileDescriptor_method_FileDescriptor_IIZ_LRFileDescriptor_,
  &FileDescriptor_method_FileDescriptor_II_LRFileDescriptor_,
  &FileDescriptor_method_FileDescriptor_INLRFileDescriptor_Z_LRFileDescriptor_,
  &FileDescriptor_method_FileDescriptor_INLRFileDescriptor__LRFileDescriptor_,
  &FileDescriptor_method_FileDescriptor__LRFileDescriptor_,
  &FileDescriptor_method_GetClass__L_acdk_lang_RClass_,
  &FileDescriptor_method_c_fd__I,
  &FileDescriptor_method_getCloseOnExec__Z,
  &FileDescriptor_method_omode__I,
  &FileDescriptor_method_setCloseOnExec_Z_V,
  &FileDescriptor_method_sync__V,
  &FileDescriptor_method_valid__Z,
  0
};


struct FileDescriptor_MetaInfoInitializer
{  FileDescriptor_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileDescriptor::clazzInfo();
    ci->fields =  _FileDescriptor_fields;
    ci->methods =  _FileDescriptor_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileDescriptor_MetaInfoInitializer FileDescriptor_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
FileFilter_create_array(int length)
{
  return new ObjectArrayImpl<RFileFilter>(length);
}

//static
::acdk::lang::RObject
FileFilter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileFilter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileFilter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileFilter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileFilter_method_accept_INLRFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileFilter* This = dmi_cast<FileFilter>(This_);
  ret = This->accept(::acdk::lang::dmi::castTo< RFile>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FileFilter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileFilter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileFilter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileFilter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileFilter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileFilter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileFilter_MetainfoWrapper::FileFilter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileFilter_methods_accept_INLRFile__Z_arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileFilter_methods_accept_INLRFile__Z_args[] = 
{
  &FileFilter_methods_accept_INLRFile__Z_arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* FileFilter_methods_accept_INLRFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileFilter_method_accept_INLRFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_accept", // alternative name of method
  -1, // altlabelHashCode
  FileFilter_methods_accept_INLRFile__Z_args, // the arguments
  0, //arguments count
  FileFilter_methods_accept_INLRFile__Z_exceptions, // the declared exceptions
  FileFilter_MetainfoWrapper::FileFilter_method_accept_INLRFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileFilter_methods[] = 
{
  &FileFilter_method_GetClass__L_acdk_lang_RClass_,
  &FileFilter_method_accept_INLRFile__Z,
  0
};


struct FileFilter_MetaInfoInitializer
{  FileFilter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileFilter::clazzInfo();
    ci->fields =  _FileFilter_fields;
    ci->methods =  _FileFilter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileFilter_MetaInfoInitializer FileFilter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
FileImpl_create_array(int length)
{
  return new ObjectArrayImpl<RFileImpl>(length);
}

//static
::acdk::lang::RObject
FileImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_canRead__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->canRead();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_canWrite__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->canWrite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_createNewFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->createNewFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_deleteFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->deleteFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_exists__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->exists();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_fileCreated__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->fileCreated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getAbsolutePath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->getAbsolutePath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getCanonicalPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->getCanonicalPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getFileInfo__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileImpl::getFileInfo();
    else
        ret = (::acdk::lang::RObject)This->getFileInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getFileSystem__LRFileSystem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->getFileSystem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getParentFile__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->getParentFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->getPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getReader__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_getWriter__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_isAbsolute__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->isAbsolute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_isDirectory__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->isDirectory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_isFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->isFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_isHidden__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->isHidden();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_lastModified__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->lastModified();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_length__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_list_INLRFilenameFilter_I_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileImpl::list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_list__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileImpl::list();
    else
        ret = (::acdk::lang::RObject)This->list();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_list_INLRFilenameFilter__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileImpl::list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_listFiles_INLRFileFilter_I_LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileImpl::listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_listFiles__LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileImpl::listFiles();
    else
        ret = (::acdk::lang::RObject)This->listFiles();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_listFiles_INLRFileFilter__LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileImpl::listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_makeChild_INLRString__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    ret = (::acdk::lang::RObject)This->makeChild(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_mkdir_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->mkdir(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_mkdir__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->mkdir();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_renameTo_INLRFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->renameTo(::acdk::lang::dmi::castTo< RFile>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_setFileAttributes_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileImpl::setFileAttributes(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->setFileAttributes(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_setFileCreated_J_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileImpl::setFileCreated(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->setFileCreated(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_setFileFlags_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileImpl::setFileFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->setFileFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileImpl_method_setLastModified_J_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileImpl* This = dmi_cast<FileImpl>(This_);
  ret = This->setLastModified(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FileImpl_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_z_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_canRead__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_canRead__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_canRead__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRead", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_canRead", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_canRead__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_canRead__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_canRead__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_canWrite__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_canWrite__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_canWrite__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_canWrite", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_canWrite__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_canWrite__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_canWrite__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_createNewFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_createNewFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_createNewFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createNewFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_createNewFile", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_createNewFile__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_createNewFile__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_createNewFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_deleteFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_deleteFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_deleteFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_f_deleteFile", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_deleteFile__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_deleteFile__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_deleteFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_exists__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_exists__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_exists__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_exists", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_exists__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_exists__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_exists__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_fileCreated__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_fileCreated__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_fileCreated__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fileCreated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_n_fileCreated", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_fileCreated__J_args, // the arguments
  0, //arguments count
  FileImpl_methods_fileCreated__J_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_fileCreated__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getAbsolutePath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getAbsolutePath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getAbsolutePath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAbsolutePath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getAbsolutePath", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getAbsolutePath__LRString__args, // the arguments
  0, //arguments count
  FileImpl_methods_getAbsolutePath__LRString__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getAbsolutePath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getCanonicalPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getCanonicalPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getCanonicalPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCanonicalPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getCanonicalPath", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getCanonicalPath__LRString__args, // the arguments
  0, //arguments count
  FileImpl_methods_getCanonicalPath__LRString__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getCanonicalPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getFileInfo__LRFileInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getFileInfo__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getFileInfo__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo(), // return type
  "_t_getFileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getFileInfo__LRFileInfo__args, // the arguments
  0, //arguments count
  FileImpl_methods_getFileInfo__LRFileInfo__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getFileInfo__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getFileSystem__LRFileSystem__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getFileSystem__LRFileSystem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getFileSystem__LRFileSystem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileSystem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSystem::clazzInfo(), // return type
  "_y_getFileSystem", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getFileSystem__LRFileSystem__args, // the arguments
  0, //arguments count
  FileImpl_methods_getFileSystem__LRFileSystem__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getFileSystem__LRFileSystem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getName", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getName__LRString__args, // the arguments
  0, //arguments count
  FileImpl_methods_getName__LRString__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getParentFile__LRFile__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getParentFile__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getParentFile__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_4_getParentFile", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getParentFile__LRFile__args, // the arguments
  0, //arguments count
  FileImpl_methods_getParentFile__LRFile__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getParentFile__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getPath", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getPath__LRString__args, // the arguments
  0, //arguments count
  FileImpl_methods_getPath__LRString__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getReader__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getReader__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getReader__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_w_getReader", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getReader__LRReader__args, // the arguments
  0, //arguments count
  FileImpl_methods_getReader__LRReader__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getReader__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_getWriter__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_getWriter__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_getWriter__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_x_getWriter", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_getWriter__LRWriter__args, // the arguments
  0, //arguments count
  FileImpl_methods_getWriter__LRWriter__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_getWriter__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_isAbsolute__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_isAbsolute__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_isAbsolute__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAbsolute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_isAbsolute", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_isAbsolute__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_isAbsolute__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_isAbsolute__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_isDirectory__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_isDirectory__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_isDirectory__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_isDirectory", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_isDirectory__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_isDirectory__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_isDirectory__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_isFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_isFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_isFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_isFile", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_isFile__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_isFile__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_isFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_isHidden__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_isHidden__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_isHidden__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHidden", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isHidden", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_isHidden__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_isHidden__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_isHidden__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_lastModified__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_lastModified__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_lastModified__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastModified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_m_lastModified", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_lastModified__J_args, // the arguments
  0, //arguments count
  FileImpl_methods_lastModified__J_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_lastModified__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_length__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_length__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_length__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_d_length", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_length__J_args, // the arguments
  0, //arguments count
  FileImpl_methods_length__J_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_length__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFilenameFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__arg_listFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "listFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__args[] = 
{
  &FileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__arg_filter,
  &FileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__arg_listFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_list_INLRFilenameFilter_I_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_g_list", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__args, // the arguments
  0, //arguments count
  FileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_list_INLRFilenameFilter_I_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_list__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_list__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_list__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_h_list", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_list__LRStringArray__args, // the arguments
  0, //arguments count
  FileImpl_methods_list__LRStringArray__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_list__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_list_INLRFilenameFilter__LRStringArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFilenameFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_list_INLRFilenameFilter__LRStringArray__args[] = 
{
  &FileImpl_methods_list_INLRFilenameFilter__LRStringArray__arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_list_INLRFilenameFilter__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_list_INLRFilenameFilter__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_i_list", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_list_INLRFilenameFilter__LRStringArray__args, // the arguments
  0, //arguments count
  FileImpl_methods_list_INLRFilenameFilter__LRStringArray__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_list_INLRFilenameFilter__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_listFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "listFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__args[] = 
{
  &FileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_filter,
  &FileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_listFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_listFiles_INLRFileFilter_I_LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_j_listFiles", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__args, // the arguments
  0, //arguments count
  FileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_listFiles_INLRFileFilter_I_LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_listFiles__LRFileArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_listFiles__LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_listFiles__LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_k_listFiles", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_listFiles__LRFileArray__args, // the arguments
  0, //arguments count
  FileImpl_methods_listFiles__LRFileArray__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_listFiles__LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_listFiles_INLRFileFilter__LRFileArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_listFiles_INLRFileFilter__LRFileArray__args[] = 
{
  &FileImpl_methods_listFiles_INLRFileFilter__LRFileArray__arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_listFiles_INLRFileFilter__LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_listFiles_INLRFileFilter__LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_l_listFiles", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_listFiles_INLRFileFilter__LRFileArray__args, // the arguments
  0, //arguments count
  FileImpl_methods_listFiles_INLRFileFilter__LRFileArray__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_listFiles_INLRFileFilter__LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_makeChild_INLRString__LRFile__arg_subfile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "subfile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_makeChild_INLRString__LRFile__args[] = 
{
  &FileImpl_methods_makeChild_INLRString__LRFile__arg_subfile,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_makeChild_INLRString__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_makeChild_INLRString__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_5_makeChild", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_makeChild_INLRString__LRFile__args, // the arguments
  0, //arguments count
  FileImpl_methods_makeChild_INLRString__LRFile__exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_makeChild_INLRString__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_mkdir_I_Z_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_mkdir_I_Z_args[] = 
{
  &FileImpl_methods_mkdir_I_Z_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_mkdir_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_mkdir_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mkdir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_mkdir", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_mkdir_I_Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_mkdir_I_Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_mkdir_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_mkdir__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_mkdir__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_mkdir__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract,// class flags, like static, Constructor
  0, //AttributesRes
  "mkdir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_p_mkdir", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_mkdir__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_mkdir__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_mkdir__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_renameTo_INLRFile__Z_arg_dest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_renameTo_INLRFile__Z_args[] = 
{
  &FileImpl_methods_renameTo_INLRFile__Z_arg_dest,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_renameTo_INLRFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_renameTo_INLRFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "renameTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_renameTo", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_renameTo_INLRFile__Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_renameTo_INLRFile__Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_renameTo_INLRFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_setFileAttributes_II_Z_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_setFileAttributes_II_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_setFileAttributes_II_Z_args[] = 
{
  &FileImpl_methods_setFileAttributes_II_Z_arg_mask,
  &FileImpl_methods_setFileAttributes_II_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_setFileAttributes_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_setFileAttributes_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileAttributes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_setFileAttributes", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_setFileAttributes_II_Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_setFileAttributes_II_Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_setFileAttributes_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_setFileCreated_J_Z_arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_setFileCreated_J_Z_args[] = 
{
  &FileImpl_methods_setFileCreated_J_Z_arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_setFileCreated_J_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_setFileCreated_J_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileCreated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_setFileCreated", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_setFileCreated_J_Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_setFileCreated_J_Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_setFileCreated_J_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_setFileFlags_I_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_setFileFlags_I_Z_args[] = 
{
  &FileImpl_methods_setFileFlags_I_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_setFileFlags_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_setFileFlags_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_v_setFileFlags", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_setFileFlags_I_Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_setFileFlags_I_Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_setFileFlags_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileImpl_methods_setLastModified_J_Z_arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileImpl_methods_setLastModified_J_Z_args[] = 
{
  &FileImpl_methods_setLastModified_J_Z_arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* FileImpl_methods_setLastModified_J_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileImpl_method_setLastModified_J_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLastModified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_setLastModified", // alternative name of method
  -1, // altlabelHashCode
  FileImpl_methods_setLastModified_J_Z_args, // the arguments
  0, //arguments count
  FileImpl_methods_setLastModified_J_Z_exceptions, // the declared exceptions
  FileImpl_MetainfoWrapper::FileImpl_method_setLastModified_J_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileImpl_methods[] = 
{
  &FileImpl_method_GetClass__L_acdk_lang_RClass_,
  &FileImpl_method_canRead__Z,
  &FileImpl_method_canWrite__Z,
  &FileImpl_method_createNewFile__Z,
  &FileImpl_method_deleteFile__Z,
  &FileImpl_method_exists__Z,
  &FileImpl_method_fileCreated__J,
  &FileImpl_method_getAbsolutePath__LRString_,
  &FileImpl_method_getCanonicalPath__LRString_,
  &FileImpl_method_getFileInfo__LRFileInfo_,
  &FileImpl_method_getFileSystem__LRFileSystem_,
  &FileImpl_method_getName__LRString_,
  &FileImpl_method_getParentFile__LRFile_,
  &FileImpl_method_getPath__LRString_,
  &FileImpl_method_getReader__LRReader_,
  &FileImpl_method_getWriter__LRWriter_,
  &FileImpl_method_isAbsolute__Z,
  &FileImpl_method_isDirectory__Z,
  &FileImpl_method_isFile__Z,
  &FileImpl_method_isHidden__Z,
  &FileImpl_method_lastModified__J,
  &FileImpl_method_length__J,
  &FileImpl_method_list_INLRFilenameFilter_I_LRStringArray_,
  &FileImpl_method_list__LRStringArray_,
  &FileImpl_method_list_INLRFilenameFilter__LRStringArray_,
  &FileImpl_method_listFiles_INLRFileFilter_I_LRFileArray_,
  &FileImpl_method_listFiles__LRFileArray_,
  &FileImpl_method_listFiles_INLRFileFilter__LRFileArray_,
  &FileImpl_method_makeChild_INLRString__LRFile_,
  &FileImpl_method_mkdir_I_Z,
  &FileImpl_method_mkdir__Z,
  &FileImpl_method_renameTo_INLRFile__Z,
  &FileImpl_method_setFileAttributes_II_Z,
  &FileImpl_method_setFileCreated_J_Z,
  &FileImpl_method_setFileFlags_I_Z,
  &FileImpl_method_setLastModified_J_Z,
  0
};


struct FileImpl_MetaInfoInitializer
{  FileImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileImpl::clazzInfo();
    ci->fields =  _FileImpl_fields;
    ci->methods =  _FileImpl_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileImpl_MetaInfoInitializer FileImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
AbstractFileImpl_create_array(int length)
{
  return new ObjectArrayImpl<RAbstractFileImpl>(length);
}

//static
::acdk::lang::RObject
AbstractFileImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AbstractFileImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractFileImpl(::acdk::lang::dmi::castTo< RFileSystem>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AbstractFileImpl(::acdk::lang::dmi::castTo< RFileSystem>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< RString>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AbstractFileImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method__throwFileNotExits_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AbstractFileImpl::_throwFileNotExits(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->_throwFileNotExits(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_canRead__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::canRead();
    else
      ret = This->canRead();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_canWrite__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::canWrite();
    else
      ret = This->canWrite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_createNewFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::createNewFile();
    else
      ret = This->createNewFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_deleteFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::deleteFile();
    else
      ret = This->deleteFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_exists__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::exists();
    else
      ret = This->exists();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_fileCreated__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::fileCreated();
    else
      ret = This->fileCreated();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getAbsolutePath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getAbsolutePath();
    else
        ret = (::acdk::lang::RObject)This->getAbsolutePath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getCanonicalPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getCanonicalPath();
    else
        ret = (::acdk::lang::RObject)This->getCanonicalPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getFileInfo__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getFileInfo();
    else
        ret = (::acdk::lang::RObject)This->getFileInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getFileSystem__LRFileSystem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getFileSystem();
    else
        ret = (::acdk::lang::RObject)This->getFileSystem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getParentFile__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getParentFile();
    else
        ret = (::acdk::lang::RObject)This->getParentFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getPath();
    else
        ret = (::acdk::lang::RObject)This->getPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getReader__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getReader();
    else
        ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_getWriter__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::getWriter();
    else
        ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_isAbsolute__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::isAbsolute();
    else
      ret = This->isAbsolute();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_isDirectory__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::isDirectory();
    else
      ret = This->isDirectory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_isFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::isFile();
    else
      ret = This->isFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_isHidden__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::isHidden();
    else
      ret = This->isHidden();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_lastModified__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::lastModified();
    else
      ret = This->lastModified();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_length__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_list_INLRFilenameFilter_I_LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_list__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::list();
    else
        ret = (::acdk::lang::RObject)This->list();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_list_INLRFilenameFilter__LRStringArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->list(::acdk::lang::dmi::castTo< RFilenameFilter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_listFiles_INLRFileFilter_I_LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_listFiles__LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::listFiles();
    else
        ret = (::acdk::lang::RObject)This->listFiles();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_listFiles_INLRFileFilter__LRFileArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->listFiles(::acdk::lang::dmi::castTo< RFileFilter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_makeChild_INLRString__LRFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->AbstractFileImpl::makeChild(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->makeChild(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_mkdir_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::mkdir(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->mkdir(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_mkdir__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::mkdir();
    else
      ret = This->mkdir();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_renameTo_INLRFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::renameTo(::acdk::lang::dmi::castTo< RFile>(args[0], dc));
    else
      ret = This->renameTo(::acdk::lang::dmi::castTo< RFile>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_setFileAttributes_II_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::setFileAttributes(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->setFileAttributes(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_setFileCreated_J_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::setFileCreated(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->setFileCreated(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_setFileFlags_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::setFileFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->setFileFlags(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AbstractFileImpl_method_setLastModified_J_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AbstractFileImpl::setLastModified(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->setLastModified(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractFileImpl_fields__dir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dir, flags);
    else
      This->_dir = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractFileImpl_fields__filePath_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_filePath, flags);
    else
      This->_filePath = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractFileImpl_fields__fsys_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fsys, flags);
    else
      This->_fsys = ::acdk::lang::dmi::castTo< RFileSystem>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AbstractFileImpl_fields__name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AbstractFileImpl* This = dmi_cast<AbstractFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_name, flags);
    else
      This->_name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AbstractFileImpl_fields__dir = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_fields__dir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractFileImpl_fields__filePath = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_filePath", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_fields__filePath_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractFileImpl_fields__fsys = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fsys", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSystem::clazzInfo(),
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_fields__fsys_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo AbstractFileImpl_fields__name = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_fields__name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AbstractFileImpl_fields[] = 
{
  &AbstractFileImpl_fields__dir,
  &AbstractFileImpl_fields__filePath,
  &AbstractFileImpl_fields__fsys,
  &AbstractFileImpl_fields__name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__arg_fsys = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fsys", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSystem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__arg_fpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__args[] = 
{
  &AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__arg_fsys,
  &AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__arg_fpath,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractFileImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractFileImpl::clazzInfo(), // return type
  "_0_AbstractFileImpl", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__arg_fsys = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fsys", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSystem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__args[] = 
{
  &AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__arg_fsys,
  &AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__arg_path,
  &AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__arg_dir,
  &AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AbstractFileImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AbstractFileImpl::clazzInfo(), // return type
  "_1_AbstractFileImpl", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_C_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods__throwFileNotExits_INLRString__V_arg_method = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "method", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods__throwFileNotExits_INLRString__V_args[] = 
{
  &AbstractFileImpl_methods__throwFileNotExits_INLRString__V_arg_method,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods__throwFileNotExits_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method__throwFileNotExits_INLRString__V = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_throwFileNotExits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B__throwFileNotExits", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods__throwFileNotExits_INLRString__V_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods__throwFileNotExits_INLRString__V_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method__throwFileNotExits_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_canRead__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_canRead__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_canRead__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRead", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_canRead", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_canRead__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_canRead__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_canRead__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_canWrite__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_canWrite__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_canWrite__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_canWrite", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_canWrite__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_canWrite__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_canWrite__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_createNewFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_createNewFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_createNewFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createNewFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_createNewFile", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_createNewFile__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_createNewFile__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_createNewFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_deleteFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_deleteFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_deleteFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "deleteFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_h_deleteFile", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_deleteFile__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_deleteFile__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_deleteFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_exists__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_exists__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_exists__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_exists", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_exists__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_exists__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_exists__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_fileCreated__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_fileCreated__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_fileCreated__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "fileCreated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_p_fileCreated", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_fileCreated__J_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_fileCreated__J_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_fileCreated__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getAbsolutePath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getAbsolutePath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getAbsolutePath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAbsolutePath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getAbsolutePath", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getAbsolutePath__LRString__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getAbsolutePath__LRString__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getAbsolutePath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getCanonicalPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getCanonicalPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getCanonicalPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCanonicalPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getCanonicalPath", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getCanonicalPath__LRString__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getCanonicalPath__LRString__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getCanonicalPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getFileInfo__LRFileInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getFileInfo__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getFileInfo__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo(), // return type
  "_v_getFileInfo", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getFileInfo__LRFileInfo__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getFileInfo__LRFileInfo__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getFileInfo__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getFileSystem__LRFileSystem__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getFileSystem__LRFileSystem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getFileSystem__LRFileSystem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileSystem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSystem::clazzInfo(), // return type
  "_A_getFileSystem", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getFileSystem__LRFileSystem__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getFileSystem__LRFileSystem__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getFileSystem__LRFileSystem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getName", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getName__LRString__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getName__LRString__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getParentFile__LRFile__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getParentFile__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getParentFile__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParentFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_6_getParentFile", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getParentFile__LRFile__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getParentFile__LRFile__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getParentFile__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_getPath", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getPath__LRString__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getPath__LRString__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getReader__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getReader__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getReader__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_y_getReader", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getReader__LRReader__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getReader__LRReader__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getReader__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_getWriter__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_getWriter__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_getWriter__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_z_getWriter", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_getWriter__LRWriter__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_getWriter__LRWriter__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_getWriter__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_isAbsolute__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_isAbsolute__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_isAbsolute__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAbsolute", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_isAbsolute", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_isAbsolute__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_isAbsolute__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_isAbsolute__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_isDirectory__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_isDirectory__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_isDirectory__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_isDirectory", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_isDirectory__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_isDirectory__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_isDirectory__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_isFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_isFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_isFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_d_isFile", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_isFile__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_isFile__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_isFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_isHidden__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_isHidden__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_isHidden__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHidden", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isHidden", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_isHidden__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_isHidden__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_isHidden__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_lastModified__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_lastModified__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_lastModified__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastModified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_o_lastModified", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_lastModified__J_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_lastModified__J_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_lastModified__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_length__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_length__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_length__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_f_length", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_length__J_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_length__J_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_length__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFilenameFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__arg_listFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "listFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__args[] = 
{
  &AbstractFileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__arg_filter,
  &AbstractFileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__arg_listFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_list_INLRFilenameFilter_I_LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_i_list", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_list_INLRFilenameFilter_I_LRStringArray__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_list_INLRFilenameFilter_I_LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_list__LRStringArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_list__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_list__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_j_list", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_list__LRStringArray__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_list__LRStringArray__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_list__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_list_INLRFilenameFilter__LRStringArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFilenameFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_list_INLRFilenameFilter__LRStringArray__args[] = 
{
  &AbstractFileImpl_methods_list_INLRFilenameFilter__LRStringArray__arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_list_INLRFilenameFilter__LRStringArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_list_INLRFilenameFilter__LRStringArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "list", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringArray::clazzInfo(), // return type
  "_k_list", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_list_INLRFilenameFilter__LRStringArray__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_list_INLRFilenameFilter__LRStringArray__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_list_INLRFilenameFilter__LRStringArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_listFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "listFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__args[] = 
{
  &AbstractFileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_filter,
  &AbstractFileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__arg_listFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_listFiles_INLRFileFilter_I_LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_l_listFiles", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_listFiles_INLRFileFilter_I_LRFileArray__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_listFiles_INLRFileFilter_I_LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_listFiles__LRFileArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_listFiles__LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_listFiles__LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_m_listFiles", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_listFiles__LRFileArray__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_listFiles__LRFileArray__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_listFiles__LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_listFiles_INLRFileFilter__LRFileArray__arg_filter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileFilter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_listFiles_INLRFileFilter__LRFileArray__args[] = 
{
  &AbstractFileImpl_methods_listFiles_INLRFileFilter__LRFileArray__arg_filter,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_listFiles_INLRFileFilter__LRFileArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_listFiles_INLRFileFilter__LRFileArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "listFiles", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileArray::clazzInfo(), // return type
  "_n_listFiles", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_listFiles_INLRFileFilter__LRFileArray__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_listFiles_INLRFileFilter__LRFileArray__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_listFiles_INLRFileFilter__LRFileArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_makeChild_INLRString__LRFile__arg_subfile = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "subfile", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_makeChild_INLRString__LRFile__args[] = 
{
  &AbstractFileImpl_methods_makeChild_INLRString__LRFile__arg_subfile,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_makeChild_INLRString__LRFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_makeChild_INLRString__LRFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "makeChild", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(), // return type
  "_7_makeChild", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_makeChild_INLRString__LRFile__args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_makeChild_INLRString__LRFile__exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_makeChild_INLRString__LRFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_mkdir_I_Z_arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_mkdir_I_Z_args[] = 
{
  &AbstractFileImpl_methods_mkdir_I_Z_arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_mkdir_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_mkdir_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mkdir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_mkdir", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_mkdir_I_Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_mkdir_I_Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_mkdir_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_mkdir__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_mkdir__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_mkdir__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "mkdir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_mkdir", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_mkdir__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_mkdir__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_mkdir__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_renameTo_INLRFile__Z_arg_dest = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dest", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_renameTo_INLRFile__Z_args[] = 
{
  &AbstractFileImpl_methods_renameTo_INLRFile__Z_arg_dest,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_renameTo_INLRFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_renameTo_INLRFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "renameTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_s_renameTo", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_renameTo_INLRFile__Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_renameTo_INLRFile__Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_renameTo_INLRFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_setFileAttributes_II_Z_arg_mask = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "mask", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_setFileAttributes_II_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_setFileAttributes_II_Z_args[] = 
{
  &AbstractFileImpl_methods_setFileAttributes_II_Z_arg_mask,
  &AbstractFileImpl_methods_setFileAttributes_II_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_setFileAttributes_II_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_setFileAttributes_II_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileAttributes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_w_setFileAttributes", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_setFileAttributes_II_Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_setFileAttributes_II_Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_setFileAttributes_II_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_setFileCreated_J_Z_arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_setFileCreated_J_Z_args[] = 
{
  &AbstractFileImpl_methods_setFileCreated_J_Z_arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_setFileCreated_J_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_setFileCreated_J_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileCreated", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_u_setFileCreated", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_setFileCreated_J_Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_setFileCreated_J_Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_setFileCreated_J_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_setFileFlags_I_Z_arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_setFileFlags_I_Z_args[] = 
{
  &AbstractFileImpl_methods_setFileFlags_I_Z_arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_setFileFlags_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_setFileFlags_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFileFlags", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_setFileFlags", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_setFileFlags_I_Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_setFileFlags_I_Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_setFileFlags_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AbstractFileImpl_methods_setLastModified_J_Z_arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AbstractFileImpl_methods_setLastModified_J_Z_args[] = 
{
  &AbstractFileImpl_methods_setLastModified_J_Z_arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* AbstractFileImpl_methods_setLastModified_J_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AbstractFileImpl_method_setLastModified_J_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLastModified", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_t_setLastModified", // alternative name of method
  -1, // altlabelHashCode
  AbstractFileImpl_methods_setLastModified_J_Z_args, // the arguments
  0, //arguments count
  AbstractFileImpl_methods_setLastModified_J_Z_exceptions, // the declared exceptions
  AbstractFileImpl_MetainfoWrapper::AbstractFileImpl_method_setLastModified_J_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AbstractFileImpl_methods[] = 
{
  &AbstractFileImpl_method_AbstractFileImpl_INLRFileSystem_INLRString__LRAbstractFileImpl_,
  &AbstractFileImpl_method_AbstractFileImpl_INLRFileSystem_INLRString_INLRString_INLRString__LRAbstractFileImpl_,
  &AbstractFileImpl_method_GetClass__L_acdk_lang_RClass_,
  &AbstractFileImpl_method__throwFileNotExits_INLRString__V,
  &AbstractFileImpl_method_canRead__Z,
  &AbstractFileImpl_method_canWrite__Z,
  &AbstractFileImpl_method_createNewFile__Z,
  &AbstractFileImpl_method_deleteFile__Z,
  &AbstractFileImpl_method_exists__Z,
  &AbstractFileImpl_method_fileCreated__J,
  &AbstractFileImpl_method_getAbsolutePath__LRString_,
  &AbstractFileImpl_method_getCanonicalPath__LRString_,
  &AbstractFileImpl_method_getFileInfo__LRFileInfo_,
  &AbstractFileImpl_method_getFileSystem__LRFileSystem_,
  &AbstractFileImpl_method_getName__LRString_,
  &AbstractFileImpl_method_getParentFile__LRFile_,
  &AbstractFileImpl_method_getPath__LRString_,
  &AbstractFileImpl_method_getReader__LRReader_,
  &AbstractFileImpl_method_getWriter__LRWriter_,
  &AbstractFileImpl_method_isAbsolute__Z,
  &AbstractFileImpl_method_isDirectory__Z,
  &AbstractFileImpl_method_isFile__Z,
  &AbstractFileImpl_method_isHidden__Z,
  &AbstractFileImpl_method_lastModified__J,
  &AbstractFileImpl_method_length__J,
  &AbstractFileImpl_method_list_INLRFilenameFilter_I_LRStringArray_,
  &AbstractFileImpl_method_list__LRStringArray_,
  &AbstractFileImpl_method_list_INLRFilenameFilter__LRStringArray_,
  &AbstractFileImpl_method_listFiles_INLRFileFilter_I_LRFileArray_,
  &AbstractFileImpl_method_listFiles__LRFileArray_,
  &AbstractFileImpl_method_listFiles_INLRFileFilter__LRFileArray_,
  &AbstractFileImpl_method_makeChild_INLRString__LRFile_,
  &AbstractFileImpl_method_mkdir_I_Z,
  &AbstractFileImpl_method_mkdir__Z,
  &AbstractFileImpl_method_renameTo_INLRFile__Z,
  &AbstractFileImpl_method_setFileAttributes_II_Z,
  &AbstractFileImpl_method_setFileCreated_J_Z,
  &AbstractFileImpl_method_setFileFlags_I_Z,
  &AbstractFileImpl_method_setLastModified_J_Z,
  0
};


struct AbstractFileImpl_MetaInfoInitializer
{  AbstractFileImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AbstractFileImpl::clazzInfo();
    ci->fields =  _AbstractFileImpl_fields;
    ci->methods =  _AbstractFileImpl_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AbstractFileImpl_MetaInfoInitializer AbstractFileImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
FileInfo_create_array(int length)
{
  return new ObjectArrayImpl<RFileInfo>(length);
}

//static
::acdk::lang::RObject
FileInfo_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileInfo_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo_INLRFileInfo__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo(::acdk::lang::dmi::castTo< RFileInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo_INLRString__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< jlong>(args[3], dc), ::acdk::lang::dmi::castTo< jlong>(args[4], dc), ::acdk::lang::dmi::castTo< jlong>(args[5], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo_IINLRString_INLRString__LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo_IINLRString_INLRString_J_LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< jlong>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileInfo(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RString>(args[2], dc), ::acdk::lang::dmi::castTo< jlong>(args[3], dc), ::acdk::lang::dmi::castTo< jlong>(args[4], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileInfo::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_canRead__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::canRead();
    else
      ret = This->canRead();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_canRead_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::canRead(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->canRead(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_canWrite__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::canWrite();
    else
      ret = This->canWrite();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_canWrite_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::canWrite(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->canWrite(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_compareTo_INLRFileInfo__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::compareTo(::acdk::lang::dmi::castTo< RFileInfo>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RFileInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_dump_INL_acdk_io_RPrintWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::dump(::acdk::lang::dmi::castTo< ::acdk::io::RPrintWriter>(args[0], dc));
    else
        This->dump(::acdk::lang::dmi::castTo< ::acdk::io::RPrintWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_equals_INLRFileInfo__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::equals(::acdk::lang::dmi::castTo< RFileInfo>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RFileInfo>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_exists__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::exists();
    else
      ret = This->exists();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_exists_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::exists(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->exists(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_flagString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileInfo::flagString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_getPath__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileInfo::getPath();
    else
        ret = (::acdk::lang::RObject)This->getPath();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isChecked__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::isChecked();
    else
      ret = This->isChecked();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isChecked_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::isChecked(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->isChecked(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isDirectory__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::isDirectory();
    else
      ret = This->isDirectory();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isDirectory_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::isDirectory(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->isDirectory(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isFile__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::isFile();
    else
      ret = This->isFile();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isFile_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::isFile(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->isFile(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isHidden__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->FileInfo::isHidden();
    else
      ret = This->isHidden();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_isHidden_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->FileInfo::isHidden(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->isHidden(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_timeToString_J_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileInfo::timeToString(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileInfo_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->FileInfo::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_created_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->created, flags);
    else
      This->created = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_digest_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->digest, flags);
    else
      This->digest = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_dir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->dir, flags);
    else
      This->dir = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_flags_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->flags, flags);
    else
      This->flags = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_modified_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->modified, flags);
    else
      This->modified = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  FileInfo_fields_size_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    FileInfo* This = dmi_cast<FileInfo>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->size, flags);
    else
      This->size = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_created = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "created", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_created_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_digest = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "digest", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_digest_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_dir = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "dir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileInfo_MetainfoWrapper::FileInfo_fields_dir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_flags = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "flags", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_flags_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_modified = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "modified", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_modified_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_name = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  FileInfo_MetainfoWrapper::FileInfo_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo FileInfo_fields_size = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "size", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  FileInfo_MetainfoWrapper::FileInfo_fields_size_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _FileInfo_fields[] = 
{
  &FileInfo_fields_created,
  &FileInfo_fields_digest,
  &FileInfo_fields_dir,
  &FileInfo_fields_flags,
  &FileInfo_fields_modified,
  &FileInfo_fields_name,
  &FileInfo_fields_size,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo__LRFileInfo__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_0_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo__LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo__LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__args[] = 
{
  &FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo_INLRFileInfo__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_1_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo_INLRFileInfo__LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo_INLRFileInfo__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_INLRString__LRFileInfo__arg_path = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "path", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo_INLRString__LRFileInfo__args[] = 
{
  &FileInfo_methods_FileInfo_INLRString__LRFileInfo__arg_path,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo_INLRString__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo_INLRString__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_2_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo_INLRString__LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo_INLRString__LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo_INLRString__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_fiflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fiflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_filesize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filesize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_creat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "creat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_modif = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "modif", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__args[] = 
{
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_fiflags,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_parent,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_filename,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_filesize,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_creat,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__arg_modif,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_3_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__arg_fiflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fiflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__args[] = 
{
  &FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__arg_fiflags,
  &FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__arg_parent,
  &FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__arg_filename,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo_IINLRString_INLRString__LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_4_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo_IINLRString_INLRString__LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo_IINLRString_INLRString__LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__arg_fiflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fiflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__arg_filesize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filesize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__args[] = 
{
  &FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__arg_fiflags,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__arg_parent,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__arg_filename,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__arg_filesize,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo_IINLRString_INLRString_J_LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_5_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo_IINLRString_INLRString_J_LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo_IINLRString_INLRString_J_LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_fiflags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fiflags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_parent = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "parent", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_filename = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "filename", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_filesize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "filesize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_creat = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "creat", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__args[] = 
{
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_fiflags,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_parent,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_filename,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_filesize,
  &FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__arg_creat,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_FileInfo_IINLRString_INLRString_JJ_LRFileInfo_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "FileInfo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileInfo::clazzInfo(), // return type
  "_6_FileInfo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__args, // the arguments
  0, //arguments count
  FileInfo_methods_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_FileInfo_IINLRString_INLRString_JJ_LRFileInfo__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_u_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileInfo_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_canRead__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_canRead__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_canRead__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRead", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_a_canRead", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_canRead__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_canRead__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_canRead__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_canRead_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_canRead_Z_V_args[] = 
{
  &FileInfo_methods_canRead_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_canRead_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_canRead_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canRead", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_canRead", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_canRead_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_canRead_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_canRead_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_canWrite__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_canWrite__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_canWrite__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_c_canWrite", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_canWrite__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_canWrite__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_canWrite__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_canWrite_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_canWrite_Z_V_args[] = 
{
  &FileInfo_methods_canWrite_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_canWrite_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_canWrite_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "canWrite", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_canWrite", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_canWrite_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_canWrite_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_canWrite_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_compareTo_INLRFileInfo__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_compareTo_INLRFileInfo__I_args[] = 
{
  &FileInfo_methods_compareTo_INLRFileInfo__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_compareTo_INLRFileInfo__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_compareTo_INLRFileInfo__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_s_compareTo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_compareTo_INLRFileInfo__I_args, // the arguments
  0, //arguments count
  FileInfo_methods_compareTo_INLRFileInfo__I_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_compareTo_INLRFileInfo__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_compareTo_INLRObject__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_compareTo_INLRObject__I_args[] = 
{
  &FileInfo_methods_compareTo_INLRObject__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_t_compareTo", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  FileInfo_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::io::RPrintWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_args[] = 
{
  &FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_dump_INL_acdk_io_RPrintWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "dump", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_dump", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_args, // the arguments
  0, //arguments count
  FileInfo_methods_dump_INL_acdk_io_RPrintWriter__V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_dump_INL_acdk_io_RPrintWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_equals_INLRFileInfo__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileInfo::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_equals_INLRFileInfo__Z_args[] = 
{
  &FileInfo_methods_equals_INLRFileInfo__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_equals_INLRFileInfo__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_equals_INLRFileInfo__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_equals", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_equals_INLRFileInfo__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_equals_INLRFileInfo__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_equals_INLRFileInfo__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_equals_INLRObject__Z_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_equals_INLRObject__Z_args[] = 
{
  &FileInfo_methods_equals_INLRObject__Z_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_equals", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_exists__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_exists__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_exists__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_exists", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_exists__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_exists__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_exists__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_exists_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_exists_Z_V_args[] = 
{
  &FileInfo_methods_exists_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_exists_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_exists_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "exists", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_exists", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_exists_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_exists_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_exists_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_flagString_I_LRString__arg_flags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_flagString_I_LRString__args[] = 
{
  &FileInfo_methods_flagString_I_LRString__arg_flags,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_flagString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_flagString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flagString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_m_flagString", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_flagString_I_LRString__args, // the arguments
  0, //arguments count
  FileInfo_methods_flagString_I_LRString__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_flagString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_getPath__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_getPath__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_getPath__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getPath", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getPath", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_getPath__LRString__args, // the arguments
  0, //arguments count
  FileInfo_methods_getPath__LRString__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_getPath__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isChecked__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isChecked__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isChecked__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_isChecked", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isChecked__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_isChecked__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isChecked__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_isChecked_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isChecked_Z_V_args[] = 
{
  &FileInfo_methods_isChecked_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isChecked_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isChecked_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isChecked", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_isChecked", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isChecked_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_isChecked_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isChecked_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isDirectory__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isDirectory__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isDirectory__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_e_isDirectory", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isDirectory__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_isDirectory__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isDirectory__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_isDirectory_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isDirectory_Z_V_args[] = 
{
  &FileInfo_methods_isDirectory_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isDirectory_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isDirectory_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isDirectory", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_isDirectory", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isDirectory_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_isDirectory_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isDirectory_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isFile__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isFile__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isFile__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_g_isFile", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isFile__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_isFile__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isFile__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_isFile_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isFile_Z_V_args[] = 
{
  &FileInfo_methods_isFile_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isFile_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isFile_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_isFile", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isFile_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_isFile_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isFile_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isHidden__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isHidden__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isHidden__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHidden", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_isHidden", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isHidden__Z_args, // the arguments
  0, //arguments count
  FileInfo_methods_isHidden__Z_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isHidden__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_isHidden_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_isHidden_Z_V_args[] = 
{
  &FileInfo_methods_isHidden_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_isHidden_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_isHidden_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isHidden", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_j_isHidden", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_isHidden_Z_V_args, // the arguments
  0, //arguments count
  FileInfo_methods_isHidden_Z_V_exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_isHidden_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileInfo_methods_timeToString_J_LRString__arg_time = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "time", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_timeToString_J_LRString__args[] = 
{
  &FileInfo_methods_timeToString_J_LRString__arg_time,
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_timeToString_J_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_timeToString_J_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "timeToString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_n_timeToString", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_timeToString_J_LRString__args, // the arguments
  0, //arguments count
  FileInfo_methods_timeToString_J_LRString__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_timeToString_J_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileInfo_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileInfo_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileInfo_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_o_toString", // alternative name of method
  -1, // altlabelHashCode
  FileInfo_methods_toString__LRString__args, // the arguments
  0, //arguments count
  FileInfo_methods_toString__LRString__exceptions, // the declared exceptions
  FileInfo_MetainfoWrapper::FileInfo_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileInfo_methods[] = 
{
  &FileInfo_method_FileInfo__LRFileInfo_,
  &FileInfo_method_FileInfo_INLRFileInfo__LRFileInfo_,
  &FileInfo_method_FileInfo_INLRString__LRFileInfo_,
  &FileInfo_method_FileInfo_IINLRString_INLRString_JJJ_LRFileInfo_,
  &FileInfo_method_FileInfo_IINLRString_INLRString__LRFileInfo_,
  &FileInfo_method_FileInfo_IINLRString_INLRString_J_LRFileInfo_,
  &FileInfo_method_FileInfo_IINLRString_INLRString_JJ_LRFileInfo_,
  &FileInfo_method_GetClass__L_acdk_lang_RClass_,
  &FileInfo_method_canRead__Z,
  &FileInfo_method_canRead_Z_V,
  &FileInfo_method_canWrite__Z,
  &FileInfo_method_canWrite_Z_V,
  &FileInfo_method_compareTo_INLRFileInfo__I,
  &FileInfo_method_compareTo_INLRObject__I,
  &FileInfo_method_dump_INL_acdk_io_RPrintWriter__V,
  &FileInfo_method_equals_INLRFileInfo__Z,
  &FileInfo_method_equals_INLRObject__Z,
  &FileInfo_method_exists__Z,
  &FileInfo_method_exists_Z_V,
  &FileInfo_method_flagString_I_LRString_,
  &FileInfo_method_getPath__LRString_,
  &FileInfo_method_isChecked__Z,
  &FileInfo_method_isChecked_Z_V,
  &FileInfo_method_isDirectory__Z,
  &FileInfo_method_isDirectory_Z_V,
  &FileInfo_method_isFile__Z,
  &FileInfo_method_isFile_Z_V,
  &FileInfo_method_isHidden__Z,
  &FileInfo_method_isHidden_Z_V,
  &FileInfo_method_timeToString_J_LRString_,
  &FileInfo_method_toString__LRString_,
  0
};


struct FileInfo_MetaInfoInitializer
{  FileInfo_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileInfo::clazzInfo();
    ci->fields =  _FileInfo_fields;
    ci->methods =  _FileInfo_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileInfo_MetaInfoInitializer FileInfo_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
FilenameFilter_create_array(int length)
{
  return new ObjectArrayImpl<RFilenameFilter>(length);
}

//static
::acdk::lang::RObject
FilenameFilter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FilenameFilter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FilenameFilter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FilenameFilter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FilenameFilter_method_accept_INLRFile_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    FilenameFilter* This = dmi_cast<FilenameFilter>(This_);
  ret = This->accept(::acdk::lang::dmi::castTo< RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _FilenameFilter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FilenameFilter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FilenameFilter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FilenameFilter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FilenameFilter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FilenameFilter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FilenameFilter_MetainfoWrapper::FilenameFilter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FilenameFilter_methods_accept_INLRFile_INLRString__Z_arg_dir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "dir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo FilenameFilter_methods_accept_INLRFile_INLRString__Z_arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FilenameFilter_methods_accept_INLRFile_INLRString__Z_args[] = 
{
  &FilenameFilter_methods_accept_INLRFile_INLRString__Z_arg_dir,
  &FilenameFilter_methods_accept_INLRFile_INLRString__Z_arg_name,
  0
};

::acdk::lang::dmi::ClazzInfo* FilenameFilter_methods_accept_INLRFile_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FilenameFilter_method_accept_INLRFile_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "accept", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_accept", // alternative name of method
  -1, // altlabelHashCode
  FilenameFilter_methods_accept_INLRFile_INLRString__Z_args, // the arguments
  0, //arguments count
  FilenameFilter_methods_accept_INLRFile_INLRString__Z_exceptions, // the declared exceptions
  FilenameFilter_MetainfoWrapper::FilenameFilter_method_accept_INLRFile_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FilenameFilter_methods[] = 
{
  &FilenameFilter_method_GetClass__L_acdk_lang_RClass_,
  &FilenameFilter_method_accept_INLRFile_INLRString__Z,
  0
};


struct FilenameFilter_MetaInfoInitializer
{  FilenameFilter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FilenameFilter::clazzInfo();
    ci->fields =  _FilenameFilter_fields;
    ci->methods =  _FilenameFilter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FilenameFilter_MetaInfoInitializer FilenameFilter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
FileNotFoundException_create_array(int length)
{
  return new ObjectArrayImpl<RFileNotFoundException>(length);
}

//static
::acdk::lang::RObject
FileNotFoundException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class FileNotFoundException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileNotFoundException_method_FileNotFoundException__LRFileNotFoundException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileNotFoundException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileNotFoundException_method_FileNotFoundException_INLRString__LRFileNotFoundException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new FileNotFoundException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  FileNotFoundException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)FileNotFoundException::GetClass();
    return methinf;
  }
};


void ThrowException_FileNotFoundException(IN(::acdk::lang::RThrowable) ex)
{
  throw RFileNotFoundException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _FileNotFoundException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileNotFoundException_methods_FileNotFoundException__LRFileNotFoundException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileNotFoundException_methods_FileNotFoundException__LRFileNotFoundException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileNotFoundException_method_FileNotFoundException__LRFileNotFoundException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileNotFoundException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileNotFoundException::clazzInfo(), // return type
  "_0_FileNotFoundException", // alternative name of method
  -1, // altlabelHashCode
  FileNotFoundException_methods_FileNotFoundException__LRFileNotFoundException__args, // the arguments
  0, //arguments count
  FileNotFoundException_methods_FileNotFoundException__LRFileNotFoundException__exceptions, // the declared exceptions
  FileNotFoundException_MetainfoWrapper::FileNotFoundException_method_FileNotFoundException__LRFileNotFoundException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo FileNotFoundException_methods_FileNotFoundException_INLRString__LRFileNotFoundException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileNotFoundException_methods_FileNotFoundException_INLRString__LRFileNotFoundException__args[] = 
{
  &FileNotFoundException_methods_FileNotFoundException_INLRString__LRFileNotFoundException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* FileNotFoundException_methods_FileNotFoundException_INLRString__LRFileNotFoundException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileNotFoundException_method_FileNotFoundException_INLRString__LRFileNotFoundException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "FileNotFoundException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  FileNotFoundException::clazzInfo(), // return type
  "_1_FileNotFoundException", // alternative name of method
  -1, // altlabelHashCode
  FileNotFoundException_methods_FileNotFoundException_INLRString__LRFileNotFoundException__args, // the arguments
  0, //arguments count
  FileNotFoundException_methods_FileNotFoundException_INLRString__LRFileNotFoundException__exceptions, // the declared exceptions
  FileNotFoundException_MetainfoWrapper::FileNotFoundException_method_FileNotFoundException_INLRString__LRFileNotFoundException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* FileNotFoundException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* FileNotFoundException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo FileNotFoundException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  FileNotFoundException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  FileNotFoundException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  FileNotFoundException_MetainfoWrapper::FileNotFoundException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _FileNotFoundException_methods[] = 
{
  &FileNotFoundException_method_FileNotFoundException__LRFileNotFoundException_,
  &FileNotFoundException_method_FileNotFoundException_INLRString__LRFileNotFoundException_,
  &FileNotFoundException_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct FileNotFoundException_MetaInfoInitializer
{  FileNotFoundException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = FileNotFoundException::clazzInfo();
    ci->fields =  _FileNotFoundException_fields;
    ci->methods =  _FileNotFoundException_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
FileNotFoundException_MetaInfoInitializer FileNotFoundException_MetaInfoInitializer_staticinstance__;


struct FileNotFoundException_clazzInfo_ClazzAttributesResInitializer10
{
  FileNotFoundException_clazzInfo_ClazzAttributesResInitializer10()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)FileNotFoundException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_FileNotFoundException));
  }
};

FileNotFoundException_clazzInfo_ClazzAttributesResInitializer10 FileNotFoundException_clazzInfo_ClazzAttributesResInitializer10_instance;



} // namespace acdk
} // namespace io

