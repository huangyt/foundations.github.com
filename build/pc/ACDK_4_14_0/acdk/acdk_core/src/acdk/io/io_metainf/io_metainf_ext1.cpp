// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../io.h"
#include "../AbstractCharFilterReader.h"
#include "../AbstractCharFilterWriter.h"
#include "../AbstractCharReader.h"
#include "../AbstractCharWriter.h"
#include "../AbstractFilterReader.h"
#include "../AbstractFilterWriter.h"
#include "../AbstractObjectReader.h"
#include "../AbstractObjectWriter.h"
#include "../AbstractReader.h"
#include "../AbstractStorageReader.h"
#include "../AbstractStorageWriter.h"
#include "../AbstractWriter.h"
#include "../ASCIIDataReader.h"
#include "../ASCIIDataWriter.h"
#include "../BinaryDataReader.h"
#include "../BinaryDataWriter.h"
#include "../BinaryObjectReader.h"
#include "../BinaryObjectWriter.h"
#include "../BufferedReader.h"
#include "../BufferedWriter.h"
#include "../ByteBufferReader.h"
#include "../ByteBufferWriter.h"
#include "../BytePtrReader.h"
#include "../ByteToCharReader.h"
#include "../ByteToCharWriter.h"
#include "../CharArrayReader.h"
#include "../CharArrayWriter.h"
#include "../CharReader.h"
#include "../CharToByteReader.h"
#include "../CharToByteWriter.h"
#include "../CharWriter.h"
#include "../ConsoleCharReader.h"
#include "../ConsoleCharWriter.h"
#include "../ConsoleReader.h"
#include "../ConsoleWriter.h"
#include "../DataReader.h"
#include "../DataWriter.h"
#include "../EOFException.h"
#include "../File.h"
#include "../FileAbstractImpl.h"
#include "../FileDescriptor.h"
#include "../FileFilter.h"
#include "../FileImpl.h"
#include "../FileInfo.h"
#include "../FilenameFilter.h"
#include "../FileNotFoundException.h"
#include "../FileReader.h"
#include "../FileReaderWriterImpl.h"
#include "../FileStandardImpl.h"
#include "../FileStatus.h"
#include "../FileSystem.h"
#include "../FileSystemFactory.h"
#include "../FileWriter.h"
#include "../FilterReader.h"
#include "../FilterWriter.h"
#include "../GlobFilenameFilter.h"
#include "../InputReader.h"
#include "../io.h"
#include "../IOException.h"
#include "../io_all.h"
#include "../JoinedReader.h"
#include "../LineNumberCharReader.h"
#include "../LineNumberReader.h"
#include "../MemoryMappedFile.h"
#include "../MemReader.h"
#include "../MemWriter.h"
#include "../NullWriter.h"
#include "../ObjectReader.h"
#include "../ObjectStreamException.h"
#include "../ObjectWriter.h"
#include "../OutputDebugStringWriter.h"
#include "../PipedReader.h"
#include "../PipedWriter.h"
#include "../PrintWriter.h"
#include "../PushbackCharReader.h"
#include "../PushbackReader.h"
#include "../RandomAccessFile.h"
#include "../Reader.h"
#include "../RessourceFileImpl.h"
#include "../RessourceFileSystem.h"
#include "../Serializable.h"
#include "../SerializedObjectDescriptor.h"
#include "../StandardFileSystem.h"
#include "../Storage.h"
#include "../StreamTokenizer.h"
#include "../StringReader.h"
#include "../StringWriter.h"
#include "../SubReader.h"
#include "../TeeCharWriter.h"
#include "../TeeReader.h"
#include "../TeeWriter.h"
#include "../Writer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
BinaryDataReader_create_array(int length)
{
  return new ObjectArrayImpl<RBinaryDataReader>(length);
}

//static
::acdk::lang::RObject
BinaryDataReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BinaryDataReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_BinaryDataReader_INLRReader_I_LRBinaryDataReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BinaryDataReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc), (acdk::lang::Endian)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_BinaryDataReader_INLRReader__LRBinaryDataReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BinaryDataReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BinaryDataReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_endian__Lacdk_lang_Endian__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (acdk::lang::Endian)This->BinaryDataReader::endian();
    else
      ret = (acdk::lang::Endian)This->endian();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_endian_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataReader::endian((acdk::lang::Endian)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        This->endian((acdk::lang::Endian)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readBoolean__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BinaryDataReader::readBoolean();
    else
      ret = This->readBoolean();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readChar__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BinaryDataReader::readChar();
    else
      ret = This->readChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readDouble__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BinaryDataReader::readDouble();
    else
      ret = This->readDouble();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readFloat__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BinaryDataReader::readFloat();
    else
      ret = This->readFloat();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readInt__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BinaryDataReader::readInt();
    else
      ret = This->readInt();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readLong__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BinaryDataReader::readLong();
    else
      ret = This->readLong();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readOpaque__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BinaryDataReader::readOpaque();
    else
        ret = (::acdk::lang::RObject)This->readOpaque();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readShort__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BinaryDataReader::readShort();
    else
      ret = This->readShort();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->BinaryDataReader::readString();
    else
        ret = (::acdk::lang::RObject)This->readString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataReader_method_readUcChar__Luc2char__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BinaryDataReader::readUcChar();
    else
      ret = This->readUcChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BinaryDataReader_fields__endian_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BinaryDataReader* This = dmi_cast<BinaryDataReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_endian), flags);
    else
      This->_endian = (acdk::lang::Endian)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BinaryDataReader_fields__endian = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endian", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_fields__endian_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BinaryDataReader_fields[] = 
{
  &BinaryDataReader_fields__endian,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__args[] = 
{
  &BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__arg_in,
  &BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_BinaryDataReader_INLRReader_I_LRBinaryDataReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BinaryDataReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BinaryDataReader::clazzInfo(), // return type
  "_0_BinaryDataReader", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_BinaryDataReader_INLRReader_I_LRBinaryDataReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataReader_methods_BinaryDataReader_INLRReader__LRBinaryDataReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_BinaryDataReader_INLRReader__LRBinaryDataReader__args[] = 
{
  &BinaryDataReader_methods_BinaryDataReader_INLRReader__LRBinaryDataReader__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_BinaryDataReader_INLRReader__LRBinaryDataReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_BinaryDataReader_INLRReader__LRBinaryDataReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BinaryDataReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BinaryDataReader::clazzInfo(), // return type
  "_1_BinaryDataReader", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_BinaryDataReader_INLRReader__LRBinaryDataReader__args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_BinaryDataReader_INLRReader__LRBinaryDataReader__exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_BinaryDataReader_INLRReader__LRBinaryDataReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_endian__Lacdk_lang_Endian__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_endian__Lacdk_lang_Endian__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_endian__Lacdk_lang_Endian_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endian", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_endian", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_endian__Lacdk_lang_Endian__args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_endian__Lacdk_lang_Endian__exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_endian__Lacdk_lang_Endian__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataReader_methods_endian_I_V_arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_endian_I_V_args[] = 
{
  &BinaryDataReader_methods_endian_I_V_arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_endian_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_endian_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endian", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_endian", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_endian_I_V_args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_endian_I_V_exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_endian_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readBoolean__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readBoolean__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readBoolean__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_readBoolean", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readBoolean__Z_args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readBoolean__Z_exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readBoolean__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readChar__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readChar__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readChar__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_3_readChar", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readChar__C_args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readChar__C_exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readChar__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readDouble__D_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readDouble__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readDouble__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_5_readDouble", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readDouble__D_args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readDouble__D_exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readDouble__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readFloat__F_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readFloat__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readFloat__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_6_readFloat", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readFloat__F_args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readFloat__F_exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readFloat__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readInt__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readInt__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readInt__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_readInt", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readInt__I_args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readInt__I_exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readInt__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readLong__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readLong__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readLong__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_8_readLong", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readLong__J_args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readLong__J_exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readLong__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readOpaque__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readOpaque__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readOpaque__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readOpaque", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_b_readOpaque", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readOpaque__LRbyteArray__args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readOpaque__LRbyteArray__exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readOpaque__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readShort__S_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readShort__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readShort__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_9_readShort", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readShort__S_args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readShort__S_exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readShort__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_readString", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readString__LRString__args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readString__LRString__exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataReader_methods_readUcChar__Luc2char__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataReader_methods_readUcChar__Luc2char__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataReader_method_readUcChar__Luc2char_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readUcChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_4_readUcChar", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataReader_methods_readUcChar__Luc2char__args, // the arguments
  0, //arguments count
  BinaryDataReader_methods_readUcChar__Luc2char__exceptions, // the declared exceptions
  BinaryDataReader_MetainfoWrapper::BinaryDataReader_method_readUcChar__Luc2char__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BinaryDataReader_methods[] = 
{
  &BinaryDataReader_method_BinaryDataReader_INLRReader_I_LRBinaryDataReader_,
  &BinaryDataReader_method_BinaryDataReader_INLRReader__LRBinaryDataReader_,
  &BinaryDataReader_method_GetClass__L_acdk_lang_RClass_,
  &BinaryDataReader_method_endian__Lacdk_lang_Endian_,
  &BinaryDataReader_method_endian_I_V,
  &BinaryDataReader_method_readBoolean__Z,
  &BinaryDataReader_method_readChar__C,
  &BinaryDataReader_method_readDouble__D,
  &BinaryDataReader_method_readFloat__F,
  &BinaryDataReader_method_readInt__I,
  &BinaryDataReader_method_readLong__J,
  &BinaryDataReader_method_readOpaque__LRbyteArray_,
  &BinaryDataReader_method_readShort__S,
  &BinaryDataReader_method_readString__LRString_,
  &BinaryDataReader_method_readUcChar__Luc2char_,
  0
};


struct BinaryDataReader_MetaInfoInitializer
{  BinaryDataReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BinaryDataReader::clazzInfo();
    ci->fields =  _BinaryDataReader_fields;
    ci->methods =  _BinaryDataReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BinaryDataReader_MetaInfoInitializer BinaryDataReader_MetaInfoInitializer_staticinstance__;


struct BinaryDataReader_clazzInfo_ClazzAttributesResInitializer3
{
  BinaryDataReader_clazzInfo_ClazzAttributesResInitializer3()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BinaryDataReader_methods_BinaryDataReader_INLRReader_I_LRBinaryDataReader__arg_end, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::lang::EndianMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BinaryDataReader_method_endian__Lacdk_lang_Endian_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::lang::EndianMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BinaryDataReader_methods_endian_I_V_arg_end, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::lang::EndianMetaInf::GetEnumInfo()));
  }
};

BinaryDataReader_clazzInfo_ClazzAttributesResInitializer3 BinaryDataReader_clazzInfo_ClazzAttributesResInitializer3_instance;



} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
BinaryDataWriter_create_array(int length)
{
  return new ObjectArrayImpl<RBinaryDataWriter>(length);
}

//static
::acdk::lang::RObject
BinaryDataWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BinaryDataWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BinaryDataWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc), (acdk::lang::Endian)::acdk::lang::dmi::castTo<int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_BinaryDataWriter_INLRWriter__LRBinaryDataWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BinaryDataWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BinaryDataWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_endian__Lacdk_lang_Endian__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = (acdk::lang::Endian)This->BinaryDataWriter::endian();
    else
      ret = (acdk::lang::Endian)This->endian();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_endian_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::endian((acdk::lang::Endian)::acdk::lang::dmi::castTo<int>(args[0], dc));
    else
        This->endian((acdk::lang::Endian)::acdk::lang::dmi::castTo<int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeBoolean_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeBoolean(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->writeBoolean(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeChar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeDouble_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeDouble(::acdk::lang::dmi::castTo< double>(args[0], dc));
    else
        This->writeDouble(::acdk::lang::dmi::castTo< double>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeFloat_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeFloat(::acdk::lang::dmi::castTo< float>(args[0], dc));
    else
        This->writeFloat(::acdk::lang::dmi::castTo< float>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeInt_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeInt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->writeInt(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeLong_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeLong(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        This->writeLong(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeOpaque_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeOpaque(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->writeOpaque(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeShort_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeShort(::acdk::lang::dmi::castTo< short>(args[0], dc));
    else
        This->writeShort(::acdk::lang::dmi::castTo< short>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BinaryDataWriter_method_writeUcChar_Luc2char__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BinaryDataWriter::writeUcChar(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    else
        This->writeUcChar(::acdk::lang::dmi::castTo< uc2char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BinaryDataWriter_fields__endian_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BinaryDataWriter* This = dmi_cast<BinaryDataWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(*((int*)&This->_endian), flags);
    else
      This->_endian = (acdk::lang::Endian)::acdk::lang::dmi::castTo<int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BinaryDataWriter_fields__endian = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_endian", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_fields__endian_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BinaryDataWriter_fields[] = 
{
  &BinaryDataWriter_fields__endian,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__arg_en = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "en", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__args[] = 
{
  &BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__arg_out,
  &BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__arg_en,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BinaryDataWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BinaryDataWriter::clazzInfo(), // return type
  "_0_BinaryDataWriter", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_BinaryDataWriter_INLRWriter__LRBinaryDataWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_BinaryDataWriter_INLRWriter__LRBinaryDataWriter__args[] = 
{
  &BinaryDataWriter_methods_BinaryDataWriter_INLRWriter__LRBinaryDataWriter__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_BinaryDataWriter_INLRWriter__LRBinaryDataWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_BinaryDataWriter_INLRWriter__LRBinaryDataWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BinaryDataWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BinaryDataWriter::clazzInfo(), // return type
  "_1_BinaryDataWriter", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_BinaryDataWriter_INLRWriter__LRBinaryDataWriter__args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_BinaryDataWriter_INLRWriter__LRBinaryDataWriter__exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_BinaryDataWriter_INLRWriter__LRBinaryDataWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_endian__Lacdk_lang_Endian__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_endian__Lacdk_lang_Endian__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_endian__Lacdk_lang_Endian_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endian", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_e_endian", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_endian__Lacdk_lang_Endian__args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_endian__Lacdk_lang_Endian__exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_endian__Lacdk_lang_Endian__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_endian_I_V_arg_end = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "end", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_endian_I_V_args[] = 
{
  &BinaryDataWriter_methods_endian_I_V_arg_end,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_endian_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_endian_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "endian", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_endian", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_endian_I_V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_endian_I_V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_endian_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeBoolean_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeBoolean_Z_V_args[] = 
{
  &BinaryDataWriter_methods_writeBoolean_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeBoolean_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeBoolean_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_writeBoolean", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeBoolean_Z_V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeBoolean_Z_V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeBoolean_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeChar_C_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeChar_C_V_args[] = 
{
  &BinaryDataWriter_methods_writeChar_C_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeChar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeChar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_writeChar", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeChar_C_V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeChar_C_V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeChar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeDouble_D_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeDouble_D_V_args[] = 
{
  &BinaryDataWriter_methods_writeDouble_D_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeDouble_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeDouble_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_writeDouble", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeDouble_D_V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeDouble_D_V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeDouble_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeFloat_F_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeFloat_F_V_args[] = 
{
  &BinaryDataWriter_methods_writeFloat_F_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeFloat_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeFloat_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_writeFloat", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeFloat_F_V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeFloat_F_V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeFloat_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeInt_I_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeInt_I_V_args[] = 
{
  &BinaryDataWriter_methods_writeInt_I_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeInt_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeInt_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_writeInt", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeInt_I_V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeInt_I_V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeInt_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeLong_J_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeLong_J_V_args[] = 
{
  &BinaryDataWriter_methods_writeLong_J_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeLong_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeLong_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_writeLong", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeLong_J_V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeLong_J_V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeLong_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeOpaque_INLRbyteArray__V_arg_array = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "array", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeOpaque_INLRbyteArray__V_args[] = 
{
  &BinaryDataWriter_methods_writeOpaque_INLRbyteArray__V_arg_array,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeOpaque_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeOpaque_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeOpaque", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_writeOpaque", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeOpaque_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeOpaque_INLRbyteArray__V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeOpaque_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeShort_S_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeShort_S_V_args[] = 
{
  &BinaryDataWriter_methods_writeShort_S_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeShort_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeShort_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_writeShort", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeShort_S_V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeShort_S_V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeShort_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeString_INLRString__V_args[] = 
{
  &BinaryDataWriter_methods_writeString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_writeString", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeString_INLRString__V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeString_INLRString__V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BinaryDataWriter_methods_writeUcChar_Luc2char__V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BinaryDataWriter_methods_writeUcChar_Luc2char__V_args[] = 
{
  &BinaryDataWriter_methods_writeUcChar_Luc2char__V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BinaryDataWriter_methods_writeUcChar_Luc2char__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BinaryDataWriter_method_writeUcChar_Luc2char__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeUcChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_writeUcChar", // alternative name of method
  -1, // altlabelHashCode
  BinaryDataWriter_methods_writeUcChar_Luc2char__V_args, // the arguments
  0, //arguments count
  BinaryDataWriter_methods_writeUcChar_Luc2char__V_exceptions, // the declared exceptions
  BinaryDataWriter_MetainfoWrapper::BinaryDataWriter_method_writeUcChar_Luc2char__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BinaryDataWriter_methods[] = 
{
  &BinaryDataWriter_method_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter_,
  &BinaryDataWriter_method_BinaryDataWriter_INLRWriter__LRBinaryDataWriter_,
  &BinaryDataWriter_method_GetClass__L_acdk_lang_RClass_,
  &BinaryDataWriter_method_endian__Lacdk_lang_Endian_,
  &BinaryDataWriter_method_endian_I_V,
  &BinaryDataWriter_method_writeBoolean_Z_V,
  &BinaryDataWriter_method_writeChar_C_V,
  &BinaryDataWriter_method_writeDouble_D_V,
  &BinaryDataWriter_method_writeFloat_F_V,
  &BinaryDataWriter_method_writeInt_I_V,
  &BinaryDataWriter_method_writeLong_J_V,
  &BinaryDataWriter_method_writeOpaque_INLRbyteArray__V,
  &BinaryDataWriter_method_writeShort_S_V,
  &BinaryDataWriter_method_writeString_INLRString__V,
  &BinaryDataWriter_method_writeUcChar_Luc2char__V,
  0
};


struct BinaryDataWriter_MetaInfoInitializer
{  BinaryDataWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BinaryDataWriter::clazzInfo();
    ci->fields =  _BinaryDataWriter_fields;
    ci->methods =  _BinaryDataWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BinaryDataWriter_MetaInfoInitializer BinaryDataWriter_MetaInfoInitializer_staticinstance__;


struct BinaryDataWriter_clazzInfo_ClazzAttributesResInitializer4
{
  BinaryDataWriter_clazzInfo_ClazzAttributesResInitializer4()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BinaryDataWriter_methods_BinaryDataWriter_INLRWriter_I_LRBinaryDataWriter__arg_en, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::lang::EndianMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BinaryDataWriter_method_endian__Lacdk_lang_Endian_, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::lang::EndianMetaInf::GetEnumInfo()));
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BinaryDataWriter_methods_endian_I_V_arg_end, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)acdk::lang::EndianMetaInf::GetEnumInfo()));
  }
};

BinaryDataWriter_clazzInfo_ClazzAttributesResInitializer4 BinaryDataWriter_clazzInfo_ClazzAttributesResInitializer4_instance;



} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
BufferedReader_create_array(int length)
{
  return new ObjectArrayImpl<RBufferedReader>(length);
}

//static
::acdk::lang::RObject
BufferedReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BufferedReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_BufferedReader_INLRReader_I_LRBufferedReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BufferedReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_BufferedReader_INLRReader__LRBufferedReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BufferedReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BufferedReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method__fillBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedReader::_fillBuffer();
    else
        This->_fillBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_available__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::available();
    else
      ret = This->available();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedReader::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_mark_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedReader::mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_markSupported__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::markSupported();
    else
      ret = This->markSupported();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_read_INLRbyteArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_read_INLRbyteArray_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::read();
    else
      ret = This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_read_INLRbyteArray_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_ready__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::ready();
    else
      ret = This->ready();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedReader::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_seek_IJ_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::seek((SeekPos)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    else
      ret = This->seek((SeekPos)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedReader_method_skip_J_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedReader::skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields_DEFAULT_BUFFER_SIZE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(BufferedReader::DEFAULT_BUFFER_SIZE, flags);
    else
      BufferedReader::DEFAULT_BUFFER_SIZE = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RbyteArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__count_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_count, flags);
    else
      This->_count = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__doing_reset_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_doing_reset, flags);
    else
      This->_doing_reset = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__eof_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_eof, flags);
    else
      This->_eof = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__markbuf_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_markbuf, flags);
    else
      This->_markbuf = ::acdk::lang::dmi::castTo< RbyteArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__markbufcount_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_markbufcount, flags);
    else
      This->_markbufcount = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__markbufpos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_markbufpos, flags);
    else
      This->_markbufpos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__marklimit_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_marklimit, flags);
    else
      This->_marklimit = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__markpos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_markpos, flags);
    else
      This->_markpos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__pos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pos, flags);
    else
      This->_pos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedReader_fields__primed_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedReader* This = dmi_cast<BufferedReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_primed, flags);
    else
      This->_primed = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields_DEFAULT_BUFFER_SIZE = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DEFAULT_BUFFER_SIZE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields_DEFAULT_BUFFER_SIZE_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__count = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_count", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__count_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__doing_reset = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_doing_reset", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__doing_reset_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__eof = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_eof", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__eof_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__markbuf = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_markbuf", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__markbuf_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__markbufcount = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_markbufcount", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__markbufcount_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__markbufpos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_markbufpos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__markbufpos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__marklimit = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_marklimit", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__marklimit_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__markpos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_markpos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__markpos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__pos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__pos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedReader_fields__primed = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_primed", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  BufferedReader_MetainfoWrapper::BufferedReader_fields__primed_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BufferedReader_fields[] = 
{
  &BufferedReader_fields_DEFAULT_BUFFER_SIZE,
  &BufferedReader_fields__buffer,
  &BufferedReader_fields__count,
  &BufferedReader_fields__doing_reset,
  &BufferedReader_fields__eof,
  &BufferedReader_fields__markbuf,
  &BufferedReader_fields__markbufcount,
  &BufferedReader_fields__markbufpos,
  &BufferedReader_fields__marklimit,
  &BufferedReader_fields__markpos,
  &BufferedReader_fields__pos,
  &BufferedReader_fields__primed,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_BufferedReader_INLRReader_I_LRBufferedReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_BufferedReader_INLRReader_I_LRBufferedReader__arg_buffsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_BufferedReader_INLRReader_I_LRBufferedReader__args[] = 
{
  &BufferedReader_methods_BufferedReader_INLRReader_I_LRBufferedReader__arg_in,
  &BufferedReader_methods_BufferedReader_INLRReader_I_LRBufferedReader__arg_buffsize,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_BufferedReader_INLRReader_I_LRBufferedReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_BufferedReader_INLRReader_I_LRBufferedReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BufferedReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BufferedReader::clazzInfo(), // return type
  "_0_BufferedReader", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_BufferedReader_INLRReader_I_LRBufferedReader__args, // the arguments
  0, //arguments count
  BufferedReader_methods_BufferedReader_INLRReader_I_LRBufferedReader__exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_BufferedReader_INLRReader_I_LRBufferedReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_BufferedReader_INLRReader__LRBufferedReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_BufferedReader_INLRReader__LRBufferedReader__args[] = 
{
  &BufferedReader_methods_BufferedReader_INLRReader__LRBufferedReader__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_BufferedReader_INLRReader__LRBufferedReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_BufferedReader_INLRReader__LRBufferedReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BufferedReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BufferedReader::clazzInfo(), // return type
  "_1_BufferedReader", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_BufferedReader_INLRReader__LRBufferedReader__args, // the arguments
  0, //arguments count
  BufferedReader_methods_BufferedReader_INLRReader__LRBufferedReader__exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_BufferedReader_INLRReader__LRBufferedReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_f_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BufferedReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods__fillBuffer__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods__fillBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method__fillBuffer__V = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_fillBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e__fillBuffer", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods__fillBuffer__V_args, // the arguments
  0, //arguments count
  BufferedReader_methods__fillBuffer__V_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method__fillBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_available__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_available__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_available__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "available", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_available", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_available__I_args, // the arguments
  0, //arguments count
  BufferedReader_methods_available__I_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_available__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_close", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_close__V_args, // the arguments
  0, //arguments count
  BufferedReader_methods_close__V_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_mark_I_V_arg_readlimit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readlimit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_mark_I_V_args[] = 
{
  &BufferedReader_methods_mark_I_V_arg_readlimit,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_mark_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_mark_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mark", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_mark", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_mark_I_V_args, // the arguments
  0, //arguments count
  BufferedReader_methods_mark_I_V_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_mark_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_markSupported__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_markSupported__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_markSupported__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markSupported", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_markSupported", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_markSupported__Z_args, // the arguments
  0, //arguments count
  BufferedReader_methods_markSupported__Z_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_markSupported__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_read_INLRbyteArray__I_arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_read_INLRbyteArray__I_args[] = 
{
  &BufferedReader_methods_read_INLRbyteArray__I_arg_buf,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_read_INLRbyteArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_read_INLRbyteArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_c_read", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_read_INLRbyteArray__I_args, // the arguments
  0, //arguments count
  BufferedReader_methods_read_INLRbyteArray__I_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_read_INLRbyteArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_read_INLRbyteArray_I_I_arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_read_INLRbyteArray_I_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_read_INLRbyteArray_I_I_args[] = 
{
  &BufferedReader_methods_read_INLRbyteArray_I_I_arg_buf,
  &BufferedReader_methods_read_INLRbyteArray_I_I_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_read_INLRbyteArray_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_read_INLRbyteArray_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_d_read", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_read_INLRbyteArray_I_I_args, // the arguments
  0, //arguments count
  BufferedReader_methods_read_INLRbyteArray_I_I_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_read_INLRbyteArray_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_read__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_read", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_read__I_args, // the arguments
  0, //arguments count
  BufferedReader_methods_read__I_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_read_INLRbyteArray_II_I_arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_read_INLRbyteArray_II_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_read_INLRbyteArray_II_I_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_read_INLRbyteArray_II_I_args[] = 
{
  &BufferedReader_methods_read_INLRbyteArray_II_I_arg_buf,
  &BufferedReader_methods_read_INLRbyteArray_II_I_arg_offset,
  &BufferedReader_methods_read_INLRbyteArray_II_I_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_read_INLRbyteArray_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_read_INLRbyteArray_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_b_read", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_read_INLRbyteArray_II_I_args, // the arguments
  0, //arguments count
  BufferedReader_methods_read_INLRbyteArray_II_I_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_read_INLRbyteArray_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_ready__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_ready__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_ready__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ready", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_ready", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_ready__Z_args, // the arguments
  0, //arguments count
  BufferedReader_methods_ready__Z_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_ready__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_reset", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_reset__V_args, // the arguments
  0, //arguments count
  BufferedReader_methods_reset__V_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_seek_IJ_J_arg_seekrel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seekrel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_seek_IJ_J_arg_seekpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seekpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_seek_IJ_J_args[] = 
{
  &BufferedReader_methods_seek_IJ_J_arg_seekrel,
  &BufferedReader_methods_seek_IJ_J_arg_seekpos,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_seek_IJ_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_seek_IJ_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "seek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_4_seek", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_seek_IJ_J_args, // the arguments
  0, //arguments count
  BufferedReader_methods_seek_IJ_J_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_seek_IJ_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedReader_methods_skip_J_J_arg_num_bytes = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "num_bytes", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedReader_methods_skip_J_J_args[] = 
{
  &BufferedReader_methods_skip_J_J_arg_num_bytes,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedReader_methods_skip_J_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedReader_method_skip_J_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_9_skip", // alternative name of method
  -1, // altlabelHashCode
  BufferedReader_methods_skip_J_J_args, // the arguments
  0, //arguments count
  BufferedReader_methods_skip_J_J_exceptions, // the declared exceptions
  BufferedReader_MetainfoWrapper::BufferedReader_method_skip_J_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BufferedReader_methods[] = 
{
  &BufferedReader_method_BufferedReader_INLRReader_I_LRBufferedReader_,
  &BufferedReader_method_BufferedReader_INLRReader__LRBufferedReader_,
  &BufferedReader_method_GetClass__L_acdk_lang_RClass_,
  &BufferedReader_method__fillBuffer__V,
  &BufferedReader_method_available__I,
  &BufferedReader_method_close__V,
  &BufferedReader_method_mark_I_V,
  &BufferedReader_method_markSupported__Z,
  &BufferedReader_method_read_INLRbyteArray__I,
  &BufferedReader_method_read_INLRbyteArray_I_I,
  &BufferedReader_method_read__I,
  &BufferedReader_method_read_INLRbyteArray_II_I,
  &BufferedReader_method_ready__Z,
  &BufferedReader_method_reset__V,
  &BufferedReader_method_seek_IJ_J,
  &BufferedReader_method_skip_J_J,
  0
};


struct BufferedReader_MetaInfoInitializer
{  BufferedReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BufferedReader::clazzInfo();
    ci->fields =  _BufferedReader_fields;
    ci->methods =  _BufferedReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BufferedReader_MetaInfoInitializer BufferedReader_MetaInfoInitializer_staticinstance__;


struct BufferedReader_clazzInfo_ClazzAttributesResInitializer5
{
  BufferedReader_clazzInfo_ClazzAttributesResInitializer5()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&BufferedReader_methods_seek_IJ_J_arg_seekrel, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SeekPosMetaInf::GetEnumInfo()));
  }
};

BufferedReader_clazzInfo_ClazzAttributesResInitializer5 BufferedReader_clazzInfo_ClazzAttributesResInitializer5_instance;



} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
BufferedWriter_create_array(int length)
{
  return new ObjectArrayImpl<RBufferedWriter>(length);
}

//static
::acdk::lang::RObject
BufferedWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BufferedWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_BufferedWriter_INLRWriter_I_LRBufferedWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BufferedWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_BufferedWriter_INLRWriter__LRBufferedWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new BufferedWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BufferedWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedWriter::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedWriter::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_getBufferSize__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedWriter::getBufferSize();
    else
      ret = This->getBufferSize();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_isOverflowed__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BufferedWriter::isOverflowed();
    else
      ret = This->isOverflowed();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_overflow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedWriter::overflow();
    else
        This->overflow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_setBufferSize_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedWriter::setBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->setBufferSize(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_write_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedWriter::write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BufferedWriter_method_write_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BufferedWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedWriter_fields_DEFAULT_BUFFER_SIZE_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(BufferedWriter::DEFAULT_BUFFER_SIZE, flags);
    else
      BufferedWriter::DEFAULT_BUFFER_SIZE = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedWriter_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RbyteArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedWriter_fields__bufferLength_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_bufferLength, flags);
    else
      This->_bufferLength = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BufferedWriter_fields__overflowed_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BufferedWriter* This = dmi_cast<BufferedWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_overflowed, flags);
    else
      This->_overflowed = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BufferedWriter_fields_DEFAULT_BUFFER_SIZE = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "DEFAULT_BUFFER_SIZE", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedWriter_MetainfoWrapper::BufferedWriter_fields_DEFAULT_BUFFER_SIZE_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedWriter_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  BufferedWriter_MetainfoWrapper::BufferedWriter_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedWriter_fields__bufferLength = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_bufferLength", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  BufferedWriter_MetainfoWrapper::BufferedWriter_fields__bufferLength_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo BufferedWriter_fields__overflowed = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_overflowed", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  BufferedWriter_MetainfoWrapper::BufferedWriter_fields__overflowed_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BufferedWriter_fields[] = 
{
  &BufferedWriter_fields_DEFAULT_BUFFER_SIZE,
  &BufferedWriter_fields__buffer,
  &BufferedWriter_fields__bufferLength,
  &BufferedWriter_fields__overflowed,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedWriter_methods_BufferedWriter_INLRWriter_I_LRBufferedWriter__arg_writer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "writer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedWriter_methods_BufferedWriter_INLRWriter_I_LRBufferedWriter__arg_buffsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_BufferedWriter_INLRWriter_I_LRBufferedWriter__args[] = 
{
  &BufferedWriter_methods_BufferedWriter_INLRWriter_I_LRBufferedWriter__arg_writer,
  &BufferedWriter_methods_BufferedWriter_INLRWriter_I_LRBufferedWriter__arg_buffsize,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_BufferedWriter_INLRWriter_I_LRBufferedWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_BufferedWriter_INLRWriter_I_LRBufferedWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "BufferedWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BufferedWriter::clazzInfo(), // return type
  "_0_BufferedWriter", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_BufferedWriter_INLRWriter_I_LRBufferedWriter__args, // the arguments
  0, //arguments count
  BufferedWriter_methods_BufferedWriter_INLRWriter_I_LRBufferedWriter__exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_BufferedWriter_INLRWriter_I_LRBufferedWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedWriter_methods_BufferedWriter_INLRWriter__LRBufferedWriter__arg_writer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "writer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_BufferedWriter_INLRWriter__LRBufferedWriter__args[] = 
{
  &BufferedWriter_methods_BufferedWriter_INLRWriter__LRBufferedWriter__arg_writer,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_BufferedWriter_INLRWriter__LRBufferedWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_BufferedWriter_INLRWriter__LRBufferedWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "BufferedWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  BufferedWriter::clazzInfo(), // return type
  "_1_BufferedWriter", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_BufferedWriter_INLRWriter__LRBufferedWriter__args, // the arguments
  0, //arguments count
  BufferedWriter_methods_BufferedWriter_INLRWriter__LRBufferedWriter__exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_BufferedWriter_INLRWriter__LRBufferedWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_a_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BufferedWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_close", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_close__V_args, // the arguments
  0, //arguments count
  BufferedWriter_methods_close__V_exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_flush", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  BufferedWriter_methods_flush__V_exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_getBufferSize__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_getBufferSize__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_getBufferSize__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_getBufferSize", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_getBufferSize__I_args, // the arguments
  0, //arguments count
  BufferedWriter_methods_getBufferSize__I_exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_getBufferSize__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_isOverflowed__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_isOverflowed__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_isOverflowed__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isOverflowed", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isOverflowed", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_isOverflowed__Z_args, // the arguments
  0, //arguments count
  BufferedWriter_methods_isOverflowed__Z_exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_isOverflowed__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_overflow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_overflow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_overflow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "overflow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_overflow", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_overflow__V_args, // the arguments
  0, //arguments count
  BufferedWriter_methods_overflow__V_exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_overflow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedWriter_methods_setBufferSize_I_V_arg_newSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_setBufferSize_I_V_args[] = 
{
  &BufferedWriter_methods_setBufferSize_I_V_arg_newSize,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_setBufferSize_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_setBufferSize_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBufferSize", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_setBufferSize", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_setBufferSize_I_V_args, // the arguments
  0, //arguments count
  BufferedWriter_methods_setBufferSize_I_V_exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_setBufferSize_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedWriter_methods_write_B_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_write_B_V_args[] = 
{
  &BufferedWriter_methods_write_B_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_write_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_write_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_write", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_write_B_V_args, // the arguments
  0, //arguments count
  BufferedWriter_methods_write_B_V_exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_write_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedWriter_methods_write_INLRbyteArray_II_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedWriter_methods_write_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BufferedWriter_methods_write_INLRbyteArray_II_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BufferedWriter_methods_write_INLRbyteArray_II_V_args[] = 
{
  &BufferedWriter_methods_write_INLRbyteArray_II_V_arg_ch,
  &BufferedWriter_methods_write_INLRbyteArray_II_V_arg_offset,
  &BufferedWriter_methods_write_INLRbyteArray_II_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* BufferedWriter_methods_write_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BufferedWriter_method_write_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_write", // alternative name of method
  -1, // altlabelHashCode
  BufferedWriter_methods_write_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  BufferedWriter_methods_write_INLRbyteArray_II_V_exceptions, // the declared exceptions
  BufferedWriter_MetainfoWrapper::BufferedWriter_method_write_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BufferedWriter_methods[] = 
{
  &BufferedWriter_method_BufferedWriter_INLRWriter_I_LRBufferedWriter_,
  &BufferedWriter_method_BufferedWriter_INLRWriter__LRBufferedWriter_,
  &BufferedWriter_method_GetClass__L_acdk_lang_RClass_,
  &BufferedWriter_method_close__V,
  &BufferedWriter_method_flush__V,
  &BufferedWriter_method_getBufferSize__I,
  &BufferedWriter_method_isOverflowed__Z,
  &BufferedWriter_method_overflow__V,
  &BufferedWriter_method_setBufferSize_I_V,
  &BufferedWriter_method_write_B_V,
  &BufferedWriter_method_write_INLRbyteArray_II_V,
  0
};


struct BufferedWriter_MetaInfoInitializer
{  BufferedWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BufferedWriter::clazzInfo();
    ci->fields =  _BufferedWriter_fields;
    ci->methods =  _BufferedWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BufferedWriter_MetaInfoInitializer BufferedWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
ByteBufferStorage_create_array(int length)
{
  return new ObjectArrayImpl<RByteBufferStorage>(length);
}

//static
::acdk::lang::RObject
ByteBufferStorage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteBufferStorage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferStorage_method_ByteBufferStorage_ZZ_LRByteBufferStorage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteBufferStorage(::acdk::lang::dmi::castTo< bool>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferStorage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteBufferStorage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferStorage_method_getDeviceName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferStorage* This = dmi_cast<ByteBufferStorage>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteBufferStorage::getDeviceName();
    else
        ret = (::acdk::lang::RObject)This->getDeviceName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferStorage_method_isReadable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferStorage* This = dmi_cast<ByteBufferStorage>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferStorage::isReadable();
    else
      ret = This->isReadable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferStorage_method_isWriteable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferStorage* This = dmi_cast<ByteBufferStorage>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferStorage::isWriteable();
    else
      ret = This->isWriteable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferStorage_fields__readable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferStorage* This = dmi_cast<ByteBufferStorage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_readable, flags);
    else
      This->_readable = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferStorage_fields__writeable_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferStorage* This = dmi_cast<ByteBufferStorage>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_writeable, flags);
    else
      This->_writeable = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferStorage_fields__readable = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_readable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ByteBufferStorage_MetainfoWrapper::ByteBufferStorage_fields__readable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferStorage_fields__writeable = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_writeable", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  ByteBufferStorage_MetainfoWrapper::ByteBufferStorage_fields__writeable_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteBufferStorage_fields[] = 
{
  &ByteBufferStorage_fields__readable,
  &ByteBufferStorage_fields__writeable,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferStorage_methods_ByteBufferStorage_ZZ_LRByteBufferStorage__arg_readable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferStorage_methods_ByteBufferStorage_ZZ_LRByteBufferStorage__arg_writeable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "writeable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferStorage_methods_ByteBufferStorage_ZZ_LRByteBufferStorage__args[] = 
{
  &ByteBufferStorage_methods_ByteBufferStorage_ZZ_LRByteBufferStorage__arg_readable,
  &ByteBufferStorage_methods_ByteBufferStorage_ZZ_LRByteBufferStorage__arg_writeable,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferStorage_methods_ByteBufferStorage_ZZ_LRByteBufferStorage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferStorage_method_ByteBufferStorage_ZZ_LRByteBufferStorage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteBufferStorage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteBufferStorage::clazzInfo(), // return type
  "_0_ByteBufferStorage", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferStorage_methods_ByteBufferStorage_ZZ_LRByteBufferStorage__args, // the arguments
  0, //arguments count
  ByteBufferStorage_methods_ByteBufferStorage_ZZ_LRByteBufferStorage__exceptions, // the declared exceptions
  ByteBufferStorage_MetainfoWrapper::ByteBufferStorage_method_ByteBufferStorage_ZZ_LRByteBufferStorage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferStorage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferStorage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferStorage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferStorage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteBufferStorage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteBufferStorage_MetainfoWrapper::ByteBufferStorage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferStorage_methods_getDeviceName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferStorage_methods_getDeviceName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferStorage_method_getDeviceName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeviceName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_getDeviceName", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferStorage_methods_getDeviceName__LRString__args, // the arguments
  0, //arguments count
  ByteBufferStorage_methods_getDeviceName__LRString__exceptions, // the declared exceptions
  ByteBufferStorage_MetainfoWrapper::ByteBufferStorage_method_getDeviceName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferStorage_methods_isReadable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferStorage_methods_isReadable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferStorage_method_isReadable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_3_isReadable", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferStorage_methods_isReadable__Z_args, // the arguments
  0, //arguments count
  ByteBufferStorage_methods_isReadable__Z_exceptions, // the declared exceptions
  ByteBufferStorage_MetainfoWrapper::ByteBufferStorage_method_isReadable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferStorage_methods_isWriteable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferStorage_methods_isWriteable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferStorage_method_isWriteable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWriteable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isWriteable", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferStorage_methods_isWriteable__Z_args, // the arguments
  0, //arguments count
  ByteBufferStorage_methods_isWriteable__Z_exceptions, // the declared exceptions
  ByteBufferStorage_MetainfoWrapper::ByteBufferStorage_method_isWriteable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteBufferStorage_methods[] = 
{
  &ByteBufferStorage_method_ByteBufferStorage_ZZ_LRByteBufferStorage_,
  &ByteBufferStorage_method_GetClass__L_acdk_lang_RClass_,
  &ByteBufferStorage_method_getDeviceName__LRString_,
  &ByteBufferStorage_method_isReadable__Z,
  &ByteBufferStorage_method_isWriteable__Z,
  0
};


struct ByteBufferStorage_MetaInfoInitializer
{  ByteBufferStorage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteBufferStorage::clazzInfo();
    ci->fields =  _ByteBufferStorage_fields;
    ci->methods =  _ByteBufferStorage_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteBufferStorage_MetaInfoInitializer ByteBufferStorage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
ByteBufferReader_create_array(int length)
{
  return new ObjectArrayImpl<RByteBufferReader>(length);
}

//static
::acdk::lang::RObject
ByteBufferReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteBufferReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteBufferReader(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteBufferReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_available__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferReader::available();
    else
      ret = This->available();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferReader::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_getReaderStorage__LRStorage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteBufferReader::getReaderStorage();
    else
        ret = (::acdk::lang::RObject)This->getReaderStorage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_mark_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferReader::mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_markSupported__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferReader::markSupported();
    else
      ret = This->markSupported();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferReader::read();
    else
      ret = This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_read_INLRbyteArray_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_read_INLRbyteArray_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_read_INLRbyteArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferReader::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferReader_method_skip_J_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteBufferReader::skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferReader_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RReadByteBuffer>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferReader_fields__curPos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curPos, flags);
    else
      This->_curPos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferReader_fields__mark_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferReader* This = dmi_cast<ByteBufferReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_mark, flags);
    else
      This->_mark = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferReader_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo(),
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferReader_fields__curPos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curPos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_fields__curPos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferReader_fields__mark = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_mark", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_fields__mark_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteBufferReader_fields[] = 
{
  &ByteBufferReader_fields__buffer,
  &ByteBufferReader_fields__curPos,
  &ByteBufferReader_fields__mark,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader__args[] = 
{
  &ByteBufferReader_methods_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteBufferReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteBufferReader::clazzInfo(), // return type
  "_0_ByteBufferReader", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader__args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader__exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_available__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_available__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_available__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "available", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_available", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_available__I_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_available__I_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_available__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_c_close", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_close__V_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_close__V_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_getReaderStorage__LRStorage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_getReaderStorage__LRStorage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_getReaderStorage__LRStorage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReaderStorage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStorage::clazzInfo(), // return type
  "_b_getReaderStorage", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_getReaderStorage__LRStorage__args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_getReaderStorage__LRStorage__exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_getReaderStorage__LRStorage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_mark_I_V_arg_readAheadLimit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readAheadLimit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_mark_I_V_args[] = 
{
  &ByteBufferReader_methods_mark_I_V_arg_readAheadLimit,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_mark_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_mark_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mark", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_mark", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_mark_I_V_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_mark_I_V_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_mark_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_markSupported__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_markSupported__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_markSupported__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markSupported", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_markSupported", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_markSupported__Z_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_markSupported__Z_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_markSupported__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_read__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_read", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_read__I_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_read__I_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_read_INLRbyteArray_I_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_read_INLRbyteArray_I_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_read_INLRbyteArray_I_I_args[] = 
{
  &ByteBufferReader_methods_read_INLRbyteArray_I_I_arg_buffer,
  &ByteBufferReader_methods_read_INLRbyteArray_I_I_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_read_INLRbyteArray_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_read_INLRbyteArray_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_read", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_read_INLRbyteArray_I_I_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_read_INLRbyteArray_I_I_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_read_INLRbyteArray_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_read_INLRbyteArray_II_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_read_INLRbyteArray_II_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_read_INLRbyteArray_II_I_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_read_INLRbyteArray_II_I_args[] = 
{
  &ByteBufferReader_methods_read_INLRbyteArray_II_I_arg_buffer,
  &ByteBufferReader_methods_read_INLRbyteArray_II_I_arg_offset,
  &ByteBufferReader_methods_read_INLRbyteArray_II_I_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_read_INLRbyteArray_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_read_INLRbyteArray_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_read", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_read_INLRbyteArray_II_I_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_read_INLRbyteArray_II_I_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_read_INLRbyteArray_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_read_INLRbyteArray__I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_read_INLRbyteArray__I_args[] = 
{
  &ByteBufferReader_methods_read_INLRbyteArray__I_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_read_INLRbyteArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_read_INLRbyteArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_read", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_read_INLRbyteArray__I_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_read_INLRbyteArray__I_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_read_INLRbyteArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_reset", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_reset__V_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_reset__V_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferReader_methods_skip_J_J_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferReader_methods_skip_J_J_args[] = 
{
  &ByteBufferReader_methods_skip_J_J_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferReader_methods_skip_J_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferReader_method_skip_J_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_3_skip", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferReader_methods_skip_J_J_args, // the arguments
  0, //arguments count
  ByteBufferReader_methods_skip_J_J_exceptions, // the declared exceptions
  ByteBufferReader_MetainfoWrapper::ByteBufferReader_method_skip_J_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteBufferReader_methods[] = 
{
  &ByteBufferReader_method_ByteBufferReader_INLRReadByteBuffer__LRByteBufferReader_,
  &ByteBufferReader_method_GetClass__L_acdk_lang_RClass_,
  &ByteBufferReader_method_available__I,
  &ByteBufferReader_method_close__V,
  &ByteBufferReader_method_getReaderStorage__LRStorage_,
  &ByteBufferReader_method_mark_I_V,
  &ByteBufferReader_method_markSupported__Z,
  &ByteBufferReader_method_read__I,
  &ByteBufferReader_method_read_INLRbyteArray_I_I,
  &ByteBufferReader_method_read_INLRbyteArray_II_I,
  &ByteBufferReader_method_read_INLRbyteArray__I,
  &ByteBufferReader_method_reset__V,
  &ByteBufferReader_method_skip_J_J,
  0
};


struct ByteBufferReader_MetaInfoInitializer
{  ByteBufferReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteBufferReader::clazzInfo();
    ci->fields =  _ByteBufferReader_fields;
    ci->methods =  _ByteBufferReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteBufferReader_MetaInfoInitializer ByteBufferReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
ByteBufferPtrReader_create_array(int length)
{
  return new ObjectArrayImpl<RByteBufferPtrReader>(length);
}

//static
::acdk::lang::RObject
ByteBufferPtrReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteBufferPtrReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferPtrReader_method_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteBufferPtrReader(::acdk::lang::dmi::castTo< RReadByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferPtrReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteBufferPtrReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferPtrReader_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferPtrReader* This = dmi_cast<ByteBufferPtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< acdk::lang::RReadByteBuffer>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferPtrReader_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::RReadByteBuffer::clazzInfo(),
  ByteBufferPtrReader_MetainfoWrapper::ByteBufferPtrReader_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteBufferPtrReader_fields[] = 
{
  &ByteBufferPtrReader_fields__buffer,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferPtrReader_methods_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReadByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferPtrReader_methods_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader__args[] = 
{
  &ByteBufferPtrReader_methods_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferPtrReader_methods_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferPtrReader_method_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteBufferPtrReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteBufferPtrReader::clazzInfo(), // return type
  "_0_ByteBufferPtrReader", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferPtrReader_methods_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader__args, // the arguments
  0, //arguments count
  ByteBufferPtrReader_methods_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader__exceptions, // the declared exceptions
  ByteBufferPtrReader_MetainfoWrapper::ByteBufferPtrReader_method_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferPtrReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferPtrReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferPtrReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferPtrReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteBufferPtrReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteBufferPtrReader_MetainfoWrapper::ByteBufferPtrReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteBufferPtrReader_methods[] = 
{
  &ByteBufferPtrReader_method_ByteBufferPtrReader_INLRReadByteBuffer__LRByteBufferPtrReader_,
  &ByteBufferPtrReader_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ByteBufferPtrReader_MetaInfoInitializer
{  ByteBufferPtrReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteBufferPtrReader::clazzInfo();
    ci->fields =  _ByteBufferPtrReader_fields;
    ci->methods =  _ByteBufferPtrReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteBufferPtrReader_MetaInfoInitializer ByteBufferPtrReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
BytePtrWriter_create_array(int length)
{
  return new ObjectArrayImpl<RBytePtrWriter>(length);
}

//static
::acdk::lang::RObject
BytePtrWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BytePtrWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BytePtrWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrWriter* This = dmi_cast<BytePtrWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrWriter::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrWriter* This = dmi_cast<BytePtrWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrWriter::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrWriter_method_write_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrWriter* This = dmi_cast<BytePtrWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrWriter::write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrWriter_method_write_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrWriter* This = dmi_cast<BytePtrWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrWriter_method_write_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrWriter* This = dmi_cast<BytePtrWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrWriter_method_write_INLRbyteArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrWriter* This = dmi_cast<BytePtrWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  BytePtrWriter_fields__obj_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    BytePtrWriter* This = dmi_cast<BytePtrWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_obj, flags);
    else
      This->_obj = ::acdk::lang::dmi::castTo< RObject>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo BytePtrWriter_fields__obj = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_obj", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(),
  BytePtrWriter_MetainfoWrapper::BytePtrWriter_fields__obj_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _BytePtrWriter_fields[] = 
{
  &BytePtrWriter_fields__obj,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BytePtrWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BytePtrWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BytePtrWriter_MetainfoWrapper::BytePtrWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_close", // alternative name of method
  -1, // altlabelHashCode
  BytePtrWriter_methods_close__V_args, // the arguments
  0, //arguments count
  BytePtrWriter_methods_close__V_exceptions, // the declared exceptions
  BytePtrWriter_MetainfoWrapper::BytePtrWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_flush", // alternative name of method
  -1, // altlabelHashCode
  BytePtrWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  BytePtrWriter_methods_flush__V_exceptions, // the declared exceptions
  BytePtrWriter_MetainfoWrapper::BytePtrWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrWriter_methods_write_B_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrWriter_methods_write_B_V_args[] = 
{
  &BytePtrWriter_methods_write_B_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrWriter_methods_write_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrWriter_method_write_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_write", // alternative name of method
  -1, // altlabelHashCode
  BytePtrWriter_methods_write_B_V_args, // the arguments
  0, //arguments count
  BytePtrWriter_methods_write_B_V_exceptions, // the declared exceptions
  BytePtrWriter_MetainfoWrapper::BytePtrWriter_method_write_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrWriter_methods_write_INLRbyteArray_II_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrWriter_methods_write_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrWriter_methods_write_INLRbyteArray_II_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrWriter_methods_write_INLRbyteArray_II_V_args[] = 
{
  &BytePtrWriter_methods_write_INLRbyteArray_II_V_arg_ch,
  &BytePtrWriter_methods_write_INLRbyteArray_II_V_arg_offset,
  &BytePtrWriter_methods_write_INLRbyteArray_II_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrWriter_methods_write_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrWriter_method_write_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_write", // alternative name of method
  -1, // altlabelHashCode
  BytePtrWriter_methods_write_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  BytePtrWriter_methods_write_INLRbyteArray_II_V_exceptions, // the declared exceptions
  BytePtrWriter_MetainfoWrapper::BytePtrWriter_method_write_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrWriter_methods_write_INLRbyteArray__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrWriter_methods_write_INLRbyteArray__V_args[] = 
{
  &BytePtrWriter_methods_write_INLRbyteArray__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrWriter_methods_write_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrWriter_method_write_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_write", // alternative name of method
  -1, // altlabelHashCode
  BytePtrWriter_methods_write_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  BytePtrWriter_methods_write_INLRbyteArray__V_exceptions, // the declared exceptions
  BytePtrWriter_MetainfoWrapper::BytePtrWriter_method_write_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrWriter_methods_write_INLRbyteArray_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrWriter_methods_write_INLRbyteArray_I_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrWriter_methods_write_INLRbyteArray_I_V_args[] = 
{
  &BytePtrWriter_methods_write_INLRbyteArray_I_V_arg_ch,
  &BytePtrWriter_methods_write_INLRbyteArray_I_V_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrWriter_methods_write_INLRbyteArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrWriter_method_write_INLRbyteArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_write", // alternative name of method
  -1, // altlabelHashCode
  BytePtrWriter_methods_write_INLRbyteArray_I_V_args, // the arguments
  0, //arguments count
  BytePtrWriter_methods_write_INLRbyteArray_I_V_exceptions, // the declared exceptions
  BytePtrWriter_MetainfoWrapper::BytePtrWriter_method_write_INLRbyteArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BytePtrWriter_methods[] = 
{
  &BytePtrWriter_method_GetClass__L_acdk_lang_RClass_,
  &BytePtrWriter_method_close__V,
  &BytePtrWriter_method_flush__V,
  &BytePtrWriter_method_write_B_V,
  &BytePtrWriter_method_write_INLRbyteArray_II_V,
  &BytePtrWriter_method_write_INLRbyteArray__V,
  &BytePtrWriter_method_write_INLRbyteArray_I_V,
  0
};


struct BytePtrWriter_MetaInfoInitializer
{  BytePtrWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BytePtrWriter::clazzInfo();
    ci->fields =  _BytePtrWriter_fields;
    ci->methods =  _BytePtrWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BytePtrWriter_MetaInfoInitializer BytePtrWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
ByteBufferWriter_create_array(int length)
{
  return new ObjectArrayImpl<RByteBufferWriter>(length);
}

//static
::acdk::lang::RObject
ByteBufferWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteBufferWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteBufferWriter(::acdk::lang::dmi::castTo< RWriteByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteBufferWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferWriter::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferWriter::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_getBuffer__LRWriteByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteBufferWriter::getBuffer();
    else
        ret = (::acdk::lang::RObject)This->getBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_getWriterStorage__LRStorage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteBufferWriter::getWriterStorage();
    else
        ret = (::acdk::lang::RObject)This->getWriterStorage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_write_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferWriter::write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_write_INLRbyteArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_write_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferWriter_method_write_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferWriter_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RWriteByteBuffer>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferWriter_fields__curPos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferWriter* This = dmi_cast<ByteBufferWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curPos, flags);
    else
      This->_curPos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferWriter_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(),
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferWriter_fields__curPos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curPos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_fields__curPos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteBufferWriter_fields[] = 
{
  &ByteBufferWriter_fields__buffer,
  &ByteBufferWriter_fields__curPos,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferWriter_methods_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter__args[] = 
{
  &ByteBufferWriter_methods_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteBufferWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteBufferWriter::clazzInfo(), // return type
  "_0_ByteBufferWriter", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter__args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter__exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_close", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_close__V_args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_close__V_exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_flush", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_flush__V_exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_getBuffer__LRWriteByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_getBuffer__LRWriteByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_getBuffer__LRWriteByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriteByteBuffer::clazzInfo(), // return type
  "_8_getBuffer", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_getBuffer__LRWriteByteBuffer__args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_getBuffer__LRWriteByteBuffer__exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_getBuffer__LRWriteByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_getWriterStorage__LRStorage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_getWriterStorage__LRStorage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_getWriterStorage__LRStorage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriterStorage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStorage::clazzInfo(), // return type
  "_7_getWriterStorage", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_getWriterStorage__LRStorage__args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_getWriterStorage__LRStorage__exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_getWriterStorage__LRStorage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferWriter_methods_write_B_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_write_B_V_args[] = 
{
  &ByteBufferWriter_methods_write_B_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_write_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_write_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_write", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_write_B_V_args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_write_B_V_exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_write_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferWriter_methods_write_INLRbyteArray_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferWriter_methods_write_INLRbyteArray_I_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_write_INLRbyteArray_I_V_args[] = 
{
  &ByteBufferWriter_methods_write_INLRbyteArray_I_V_arg_ch,
  &ByteBufferWriter_methods_write_INLRbyteArray_I_V_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_write_INLRbyteArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_write_INLRbyteArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_write", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_write_INLRbyteArray_I_V_args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_write_INLRbyteArray_I_V_exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_write_INLRbyteArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferWriter_methods_write_INLRbyteArray_II_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferWriter_methods_write_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferWriter_methods_write_INLRbyteArray_II_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_write_INLRbyteArray_II_V_args[] = 
{
  &ByteBufferWriter_methods_write_INLRbyteArray_II_V_arg_ch,
  &ByteBufferWriter_methods_write_INLRbyteArray_II_V_arg_offset,
  &ByteBufferWriter_methods_write_INLRbyteArray_II_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_write_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_write_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_write", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_write_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_write_INLRbyteArray_II_V_exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_write_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferWriter_methods_write_INLRbyteArray__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferWriter_methods_write_INLRbyteArray__V_args[] = 
{
  &ByteBufferWriter_methods_write_INLRbyteArray__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferWriter_methods_write_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferWriter_method_write_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_write", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferWriter_methods_write_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  ByteBufferWriter_methods_write_INLRbyteArray__V_exceptions, // the declared exceptions
  ByteBufferWriter_MetainfoWrapper::ByteBufferWriter_method_write_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteBufferWriter_methods[] = 
{
  &ByteBufferWriter_method_ByteBufferWriter_INLRWriteByteBuffer__LRByteBufferWriter_,
  &ByteBufferWriter_method_GetClass__L_acdk_lang_RClass_,
  &ByteBufferWriter_method_close__V,
  &ByteBufferWriter_method_flush__V,
  &ByteBufferWriter_method_getBuffer__LRWriteByteBuffer_,
  &ByteBufferWriter_method_getWriterStorage__LRStorage_,
  &ByteBufferWriter_method_write_B_V,
  &ByteBufferWriter_method_write_INLRbyteArray_I_V,
  &ByteBufferWriter_method_write_INLRbyteArray_II_V,
  &ByteBufferWriter_method_write_INLRbyteArray__V,
  0
};


struct ByteBufferWriter_MetaInfoInitializer
{  ByteBufferWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteBufferWriter::clazzInfo();
    ci->fields =  _ByteBufferWriter_fields;
    ci->methods =  _ByteBufferWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteBufferWriter_MetaInfoInitializer ByteBufferWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
ByteBufferAppendWriter_create_array(int length)
{
  return new ObjectArrayImpl<RByteBufferAppendWriter>(length);
}

//static
::acdk::lang::RObject
ByteBufferAppendWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteBufferAppendWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteBufferAppendWriter(::acdk::lang::dmi::castTo< RFlexByteBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteBufferAppendWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferAppendWriter::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferAppendWriter::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_getBuffer__LRFlexByteBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteBufferAppendWriter::getBuffer();
    else
        ret = (::acdk::lang::RObject)This->getBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_getWriterStorage__LRStorage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteBufferAppendWriter::getWriterStorage();
    else
        ret = (::acdk::lang::RObject)This->getWriterStorage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_write_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferAppendWriter::write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_write_INLRbyteArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferAppendWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_write_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferAppendWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteBufferAppendWriter_method_write_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteBufferAppendWriter::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteBufferAppendWriter_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteBufferAppendWriter* This = dmi_cast<ByteBufferAppendWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RFlexByteBuffer>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ByteBufferAppendWriter_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFlexByteBuffer::clazzInfo(),
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteBufferAppendWriter_fields[] = 
{
  &ByteBufferAppendWriter_fields__buffer,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferAppendWriter_methods_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter__arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFlexByteBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter__args[] = 
{
  &ByteBufferAppendWriter_methods_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter__arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteBufferAppendWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteBufferAppendWriter::clazzInfo(), // return type
  "_0_ByteBufferAppendWriter", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter__args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter__exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_close", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_close__V_args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_close__V_exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_flush", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_flush__V_exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_getBuffer__LRFlexByteBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_getBuffer__LRFlexByteBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_getBuffer__LRFlexByteBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFlexByteBuffer::clazzInfo(), // return type
  "_8_getBuffer", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_getBuffer__LRFlexByteBuffer__args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_getBuffer__LRFlexByteBuffer__exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_getBuffer__LRFlexByteBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_getWriterStorage__LRStorage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_getWriterStorage__LRStorage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_getWriterStorage__LRStorage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriterStorage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStorage::clazzInfo(), // return type
  "_7_getWriterStorage", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_getWriterStorage__LRStorage__args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_getWriterStorage__LRStorage__exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_getWriterStorage__LRStorage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferAppendWriter_methods_write_B_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_write_B_V_args[] = 
{
  &ByteBufferAppendWriter_methods_write_B_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_write_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_write_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_write", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_write_B_V_args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_write_B_V_exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_write_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferAppendWriter_methods_write_INLRbyteArray_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferAppendWriter_methods_write_INLRbyteArray_I_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_write_INLRbyteArray_I_V_args[] = 
{
  &ByteBufferAppendWriter_methods_write_INLRbyteArray_I_V_arg_ch,
  &ByteBufferAppendWriter_methods_write_INLRbyteArray_I_V_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_write_INLRbyteArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_write_INLRbyteArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_write", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_write_INLRbyteArray_I_V_args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_write_INLRbyteArray_I_V_exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_write_INLRbyteArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_args[] = 
{
  &ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_arg_ch,
  &ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_arg_offset,
  &ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_write_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_write", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_write_INLRbyteArray_II_V_exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_write_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteBufferAppendWriter_methods_write_INLRbyteArray__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteBufferAppendWriter_methods_write_INLRbyteArray__V_args[] = 
{
  &ByteBufferAppendWriter_methods_write_INLRbyteArray__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteBufferAppendWriter_methods_write_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteBufferAppendWriter_method_write_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_write", // alternative name of method
  -1, // altlabelHashCode
  ByteBufferAppendWriter_methods_write_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  ByteBufferAppendWriter_methods_write_INLRbyteArray__V_exceptions, // the declared exceptions
  ByteBufferAppendWriter_MetainfoWrapper::ByteBufferAppendWriter_method_write_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteBufferAppendWriter_methods[] = 
{
  &ByteBufferAppendWriter_method_ByteBufferAppendWriter_INLRFlexByteBuffer__LRByteBufferAppendWriter_,
  &ByteBufferAppendWriter_method_GetClass__L_acdk_lang_RClass_,
  &ByteBufferAppendWriter_method_close__V,
  &ByteBufferAppendWriter_method_flush__V,
  &ByteBufferAppendWriter_method_getBuffer__LRFlexByteBuffer_,
  &ByteBufferAppendWriter_method_getWriterStorage__LRStorage_,
  &ByteBufferAppendWriter_method_write_B_V,
  &ByteBufferAppendWriter_method_write_INLRbyteArray_I_V,
  &ByteBufferAppendWriter_method_write_INLRbyteArray_II_V,
  &ByteBufferAppendWriter_method_write_INLRbyteArray__V,
  0
};


struct ByteBufferAppendWriter_MetaInfoInitializer
{  ByteBufferAppendWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteBufferAppendWriter::clazzInfo();
    ci->fields =  _ByteBufferAppendWriter_fields;
    ci->methods =  _ByteBufferAppendWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteBufferAppendWriter_MetaInfoInitializer ByteBufferAppendWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
BytePtrReader_create_array(int length)
{
  return new ObjectArrayImpl<RBytePtrReader>(length);
}

//static
::acdk::lang::RObject
BytePtrReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class BytePtrReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)BytePtrReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_available__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BytePtrReader::available();
    else
      ret = This->available();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrReader::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_mark_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrReader::mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_markSupported__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BytePtrReader::markSupported();
    else
      ret = This->markSupported();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BytePtrReader::read();
    else
      ret = This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_read_INLRbyteArray_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BytePtrReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_read_INLRbyteArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BytePtrReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_read_INLRbyteArray_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BytePtrReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->BytePtrReader::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  BytePtrReader_method_skip_J_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    BytePtrReader* This = dmi_cast<BytePtrReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->BytePtrReader::skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _BytePtrReader_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  BytePtrReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_available__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_available__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_available__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "available", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_available", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_available__I_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_available__I_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_available__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_close", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_close__V_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_close__V_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrReader_methods_mark_I_V_arg_readAheadLimit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readAheadLimit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_mark_I_V_args[] = 
{
  &BytePtrReader_methods_mark_I_V_arg_readAheadLimit,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_mark_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_mark_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mark", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_mark", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_mark_I_V_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_mark_I_V_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_mark_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_markSupported__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_markSupported__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_markSupported__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markSupported", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_markSupported", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_markSupported__Z_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_markSupported__Z_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_markSupported__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_read__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_read", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_read__I_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_read__I_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrReader_methods_read_INLRbyteArray_II_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrReader_methods_read_INLRbyteArray_II_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrReader_methods_read_INLRbyteArray_II_I_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_read_INLRbyteArray_II_I_args[] = 
{
  &BytePtrReader_methods_read_INLRbyteArray_II_I_arg_buffer,
  &BytePtrReader_methods_read_INLRbyteArray_II_I_arg_offset,
  &BytePtrReader_methods_read_INLRbyteArray_II_I_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_read_INLRbyteArray_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_read_INLRbyteArray_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_read", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_read_INLRbyteArray_II_I_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_read_INLRbyteArray_II_I_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_read_INLRbyteArray_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrReader_methods_read_INLRbyteArray__I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_read_INLRbyteArray__I_args[] = 
{
  &BytePtrReader_methods_read_INLRbyteArray__I_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_read_INLRbyteArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_read_INLRbyteArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_read", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_read_INLRbyteArray__I_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_read_INLRbyteArray__I_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_read_INLRbyteArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrReader_methods_read_INLRbyteArray_I_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrReader_methods_read_INLRbyteArray_I_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_read_INLRbyteArray_I_I_args[] = 
{
  &BytePtrReader_methods_read_INLRbyteArray_I_I_arg_buffer,
  &BytePtrReader_methods_read_INLRbyteArray_I_I_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_read_INLRbyteArray_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_read_INLRbyteArray_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_read", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_read_INLRbyteArray_I_I_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_read_INLRbyteArray_I_I_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_read_INLRbyteArray_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_reset", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_reset__V_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_reset__V_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo BytePtrReader_methods_skip_J_J_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* BytePtrReader_methods_skip_J_J_args[] = 
{
  &BytePtrReader_methods_skip_J_J_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* BytePtrReader_methods_skip_J_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo BytePtrReader_method_skip_J_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_5_skip", // alternative name of method
  -1, // altlabelHashCode
  BytePtrReader_methods_skip_J_J_args, // the arguments
  0, //arguments count
  BytePtrReader_methods_skip_J_J_exceptions, // the declared exceptions
  BytePtrReader_MetainfoWrapper::BytePtrReader_method_skip_J_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _BytePtrReader_methods[] = 
{
  &BytePtrReader_method_GetClass__L_acdk_lang_RClass_,
  &BytePtrReader_method_available__I,
  &BytePtrReader_method_close__V,
  &BytePtrReader_method_mark_I_V,
  &BytePtrReader_method_markSupported__Z,
  &BytePtrReader_method_read__I,
  &BytePtrReader_method_read_INLRbyteArray_II_I,
  &BytePtrReader_method_read_INLRbyteArray__I,
  &BytePtrReader_method_read_INLRbyteArray_I_I,
  &BytePtrReader_method_reset__V,
  &BytePtrReader_method_skip_J_J,
  0
};


struct BytePtrReader_MetaInfoInitializer
{  BytePtrReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = BytePtrReader::clazzInfo();
    ci->fields =  _BytePtrReader_fields;
    ci->methods =  _BytePtrReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
BytePtrReader_MetaInfoInitializer BytePtrReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
ByteToCharReader_create_array(int length)
{
  return new ObjectArrayImpl<RByteToCharReader>(length);
}

//static
::acdk::lang::RObject
ByteToCharReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteToCharReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteToCharReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_ByteToCharReader_INLRReader__LRByteToCharReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteToCharReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteToCharReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteToCharReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharReader* This = dmi_cast<ByteToCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteToCharReader::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_getReader_INLacdk_locale_REncoder__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharReader* This = dmi_cast<ByteToCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteToCharReader::getReader(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getReader(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_getReader__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharReader* This = dmi_cast<ByteToCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteToCharReader::getReader();
    else
        ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_readChar__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharReader* This = dmi_cast<ByteToCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->ByteToCharReader::readChar();
    else
      ret = This->readChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharReader_method_readString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharReader* This = dmi_cast<ByteToCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->ByteToCharReader::readString();
    else
        ret = (::acdk::lang::RObject)This->readString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteToCharReader_fields__decoder_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteToCharReader* This = dmi_cast<ByteToCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_decoder, flags);
    else
      This->_decoder = ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteToCharReader_fields__in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteToCharReader* This = dmi_cast<ByteToCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in, flags);
    else
      This->_in = ::acdk::lang::dmi::castTo< RReader>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ByteToCharReader_fields__decoder = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_decoder", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo(),
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_fields__decoder_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ByteToCharReader_fields__in = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(),
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_fields__in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteToCharReader_fields[] = 
{
  &ByteToCharReader_fields__decoder,
  &ByteToCharReader_fields__in,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__args[] = 
{
  &ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__arg_in,
  &ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__arg_decoder,
  &ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteToCharReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteToCharReader::clazzInfo(), // return type
  "_0_ByteToCharReader", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharReader_methods_ByteToCharReader_INLRReader__LRByteToCharReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_ByteToCharReader_INLRReader__LRByteToCharReader__args[] = 
{
  &ByteToCharReader_methods_ByteToCharReader_INLRReader__LRByteToCharReader__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_ByteToCharReader_INLRReader__LRByteToCharReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_ByteToCharReader_INLRReader__LRByteToCharReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteToCharReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteToCharReader::clazzInfo(), // return type
  "_1_ByteToCharReader", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_ByteToCharReader_INLRReader__LRByteToCharReader__args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_ByteToCharReader_INLRReader__LRByteToCharReader__exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_ByteToCharReader_INLRReader__LRByteToCharReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__args[] = 
{
  &ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__arg_in,
  &ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__arg_decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteToCharReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteToCharReader::clazzInfo(), // return type
  "_2_ByteToCharReader", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_close__V_args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_close__V_exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__args[] = 
{
  &ByteToCharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__arg_encoder,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_getReader_INLacdk_locale_REncoder__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_6_getReader", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_getReader_INLacdk_locale_REncoder__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_getReader__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_getReader__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_getReader__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_7_getReader", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_getReader__LRReader__args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_getReader__LRReader__exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_getReader__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_readChar__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_readChar__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_readChar__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_readChar", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_readChar__I_args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_readChar__I_exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_readChar__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharReader_methods_readString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharReader_methods_readString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharReader_method_readString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_readString", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharReader_methods_readString__LRString__args, // the arguments
  0, //arguments count
  ByteToCharReader_methods_readString__LRString__exceptions, // the declared exceptions
  ByteToCharReader_MetainfoWrapper::ByteToCharReader_method_readString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteToCharReader_methods[] = 
{
  &ByteToCharReader_method_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder_INLRObject__LRByteToCharReader_,
  &ByteToCharReader_method_ByteToCharReader_INLRReader__LRByteToCharReader_,
  &ByteToCharReader_method_ByteToCharReader_INLRReader_INLacdk_locale_RDecoder__LRByteToCharReader_,
  &ByteToCharReader_method_GetClass__L_acdk_lang_RClass_,
  &ByteToCharReader_method_close__V,
  &ByteToCharReader_method_getReader_INLacdk_locale_REncoder__LRReader_,
  &ByteToCharReader_method_getReader__LRReader_,
  &ByteToCharReader_method_readChar__I,
  &ByteToCharReader_method_readString__LRString_,
  0
};


struct ByteToCharReader_MetaInfoInitializer
{  ByteToCharReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteToCharReader::clazzInfo();
    ci->fields =  _ByteToCharReader_fields;
    ci->methods =  _ByteToCharReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteToCharReader_MetaInfoInitializer ByteToCharReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
ByteToCharWriter_create_array(int length)
{
  return new ObjectArrayImpl<RByteToCharWriter>(length);
}

//static
::acdk::lang::RObject
ByteToCharWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ByteToCharWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteToCharWriter(::acdk::lang::dmi::castTo< RCharWriter>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteToCharWriter(::acdk::lang::dmi::castTo< RCharWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ByteToCharWriter(::acdk::lang::dmi::castTo< RCharWriter>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ByteToCharWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharWriter_method__overFlow__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharWriter* This = dmi_cast<ByteToCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteToCharWriter::_overFlow();
    else
        This->_overFlow();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharWriter* This = dmi_cast<ByteToCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteToCharWriter::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharWriter* This = dmi_cast<ByteToCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteToCharWriter::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ByteToCharWriter_method_write_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ByteToCharWriter* This = dmi_cast<ByteToCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->ByteToCharWriter::write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteToCharWriter_fields__cout_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteToCharWriter* This = dmi_cast<ByteToCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cout, flags);
    else
      This->_cout = ::acdk::lang::dmi::castTo< RCharWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteToCharWriter_fields__decoder_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteToCharWriter* This = dmi_cast<ByteToCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_decoder, flags);
    else
      This->_decoder = ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ByteToCharWriter_fields__maxBytesPerChar_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ByteToCharWriter* This = dmi_cast<ByteToCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxBytesPerChar, flags);
    else
      This->_maxBytesPerChar = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ByteToCharWriter_fields__cout = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cout", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo(),
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_fields__cout_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ByteToCharWriter_fields__decoder = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_decoder", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo(),
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_fields__decoder_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ByteToCharWriter_fields__maxBytesPerChar = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxBytesPerChar", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_fields__maxBytesPerChar_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ByteToCharWriter_fields[] = 
{
  &ByteToCharWriter_fields__cout,
  &ByteToCharWriter_fields__decoder,
  &ByteToCharWriter_fields__maxBytesPerChar,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__arg_charWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "charWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__arg_dec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__args[] = 
{
  &ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__arg_charWriter,
  &ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__arg_dec,
  &ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteToCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteToCharWriter::clazzInfo(), // return type
  "_0_ByteToCharWriter", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__args, // the arguments
  0, //arguments count
  ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__exceptions, // the declared exceptions
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter__arg_charWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "charWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter__args[] = 
{
  &ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter__arg_charWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteToCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteToCharWriter::clazzInfo(), // return type
  "_1_ByteToCharWriter", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter__args, // the arguments
  0, //arguments count
  ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter__exceptions, // the declared exceptions
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__arg_charWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "charWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__arg_dec = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dec", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__args[] = 
{
  &ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__arg_charWriter,
  &ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__arg_dec,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ByteToCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ByteToCharWriter::clazzInfo(), // return type
  "_2_ByteToCharWriter", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__args, // the arguments
  0, //arguments count
  ByteToCharWriter_methods_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__exceptions, // the declared exceptions
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ByteToCharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharWriter_methods__overFlow__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter_methods__overFlow__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharWriter_method__overFlow__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_overFlow", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6__overFlow", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharWriter_methods__overFlow__V_args, // the arguments
  0, //arguments count
  ByteToCharWriter_methods__overFlow__V_exceptions, // the declared exceptions
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_method__overFlow__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_close", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharWriter_methods_close__V_args, // the arguments
  0, //arguments count
  ByteToCharWriter_methods_close__V_exceptions, // the declared exceptions
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_flush", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  ByteToCharWriter_methods_flush__V_exceptions, // the declared exceptions
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ByteToCharWriter_methods_write_B_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ByteToCharWriter_methods_write_B_V_args[] = 
{
  &ByteToCharWriter_methods_write_B_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* ByteToCharWriter_methods_write_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ByteToCharWriter_method_write_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_write", // alternative name of method
  -1, // altlabelHashCode
  ByteToCharWriter_methods_write_B_V_args, // the arguments
  0, //arguments count
  ByteToCharWriter_methods_write_B_V_exceptions, // the declared exceptions
  ByteToCharWriter_MetainfoWrapper::ByteToCharWriter_method_write_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ByteToCharWriter_methods[] = 
{
  &ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder_INLRObject__LRByteToCharWriter_,
  &ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter__LRByteToCharWriter_,
  &ByteToCharWriter_method_ByteToCharWriter_INLRCharWriter_INLacdk_locale_RDecoder__LRByteToCharWriter_,
  &ByteToCharWriter_method_GetClass__L_acdk_lang_RClass_,
  &ByteToCharWriter_method__overFlow__V,
  &ByteToCharWriter_method_close__V,
  &ByteToCharWriter_method_flush__V,
  &ByteToCharWriter_method_write_B_V,
  0
};


struct ByteToCharWriter_MetaInfoInitializer
{  ByteToCharWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ByteToCharWriter::clazzInfo();
    ci->fields =  _ByteToCharWriter_fields;
    ci->methods =  _ByteToCharWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ByteToCharWriter_MetaInfoInitializer ByteToCharWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
CharArrayReader_create_array(int length)
{
  return new ObjectArrayImpl<RCharArrayReader>(length);
}

//static
::acdk::lang::RObject
CharArrayReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CharArrayReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharArrayReader(::acdk::lang::dmi::castTo< RuccharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_CharArrayReader_INLRuccharArray__LRCharArrayReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharArrayReader(::acdk::lang::dmi::castTo< RuccharArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharArrayReader(::acdk::lang::dmi::castTo< RuccharArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CharArrayReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharArrayReader::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_getDecoder__Lacdk_locale_RDecoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharArrayReader::getDecoder();
    else
        ret = (::acdk::lang::RObject)This->getDecoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_readChar__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharArrayReader::readChar();
    else
      ret = This->readChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_readString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharArrayReader::readString();
    else
        ret = (::acdk::lang::RObject)This->readString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayReader_method_setDecoder_INLacdk_locale_RDecoder__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharArrayReader::setDecoder(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    else
        This->setDecoder(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharArrayReader_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RuccharArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharArrayReader_fields__count_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_count, flags);
    else
      This->_count = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharArrayReader_fields__decoder_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_decoder, flags);
    else
      This->_decoder = ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharArrayReader_fields__markedPos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_markedPos, flags);
    else
      This->_markedPos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharArrayReader_fields__pos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharArrayReader* This = dmi_cast<CharArrayReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pos, flags);
    else
      This->_pos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CharArrayReader_fields__buffer = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo(),
  CharArrayReader_MetainfoWrapper::CharArrayReader_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CharArrayReader_fields__count = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_count", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CharArrayReader_MetainfoWrapper::CharArrayReader_fields__count_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CharArrayReader_fields__decoder = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_decoder", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo(),
  CharArrayReader_MetainfoWrapper::CharArrayReader_fields__decoder_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CharArrayReader_fields__markedPos = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_markedPos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CharArrayReader_MetainfoWrapper::CharArrayReader_fields__markedPos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CharArrayReader_fields__pos = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CharArrayReader_MetainfoWrapper::CharArrayReader_fields__pos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CharArrayReader_fields[] = 
{
  &CharArrayReader_fields__buffer,
  &CharArrayReader_fields__count,
  &CharArrayReader_fields__decoder,
  &CharArrayReader_fields__markedPos,
  &CharArrayReader_fields__pos,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__arg_length = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "length", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__args[] = 
{
  &CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__arg_buf,
  &CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__arg_offset,
  &CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__arg_length,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_CharArrayReader_INLRuccharArray_II_LRCharArrayReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CharArrayReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharArrayReader::clazzInfo(), // return type
  "_0_CharArrayReader", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__args, // the arguments
  0, //arguments count
  CharArrayReader_methods_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_CharArrayReader_INLRuccharArray_II_LRCharArrayReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayReader_methods_CharArrayReader_INLRuccharArray__LRCharArrayReader__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_CharArrayReader_INLRuccharArray__LRCharArrayReader__args[] = 
{
  &CharArrayReader_methods_CharArrayReader_INLRuccharArray__LRCharArrayReader__arg_buf,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_CharArrayReader_INLRuccharArray__LRCharArrayReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_CharArrayReader_INLRuccharArray__LRCharArrayReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CharArrayReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharArrayReader::clazzInfo(), // return type
  "_1_CharArrayReader", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_CharArrayReader_INLRuccharArray__LRCharArrayReader__args, // the arguments
  0, //arguments count
  CharArrayReader_methods_CharArrayReader_INLRuccharArray__LRCharArrayReader__exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_CharArrayReader_INLRuccharArray__LRCharArrayReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayReader_methods_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__arg_buf = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buf", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayReader_methods_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__args[] = 
{
  &CharArrayReader_methods_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__arg_buf,
  &CharArrayReader_methods_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_CharArrayReader_INLRuccharArray_I_LRCharArrayReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CharArrayReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharArrayReader::clazzInfo(), // return type
  "_2_CharArrayReader", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__args, // the arguments
  0, //arguments count
  CharArrayReader_methods_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_CharArrayReader_INLRuccharArray_I_LRCharArrayReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CharArrayReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_close", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_close__V_args, // the arguments
  0, //arguments count
  CharArrayReader_methods_close__V_exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_getDecoder__Lacdk_locale_RDecoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_getDecoder__Lacdk_locale_RDecoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_getDecoder__Lacdk_locale_RDecoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo(), // return type
  "_3_getDecoder", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_getDecoder__Lacdk_locale_RDecoder__args, // the arguments
  0, //arguments count
  CharArrayReader_methods_getDecoder__Lacdk_locale_RDecoder__exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_getDecoder__Lacdk_locale_RDecoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_readChar__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_readChar__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_readChar__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_readChar", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_readChar__I_args, // the arguments
  0, //arguments count
  CharArrayReader_methods_readChar__I_exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_readChar__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_readString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_readString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_readString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_readString", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_readString__LRString__args, // the arguments
  0, //arguments count
  CharArrayReader_methods_readString__LRString__exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_readString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayReader_methods_setDecoder_INLacdk_locale_RDecoder__V_arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayReader_methods_setDecoder_INLacdk_locale_RDecoder__V_args[] = 
{
  &CharArrayReader_methods_setDecoder_INLacdk_locale_RDecoder__V_arg_decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayReader_methods_setDecoder_INLacdk_locale_RDecoder__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayReader_method_setDecoder_INLacdk_locale_RDecoder__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDecoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setDecoder", // alternative name of method
  -1, // altlabelHashCode
  CharArrayReader_methods_setDecoder_INLacdk_locale_RDecoder__V_args, // the arguments
  0, //arguments count
  CharArrayReader_methods_setDecoder_INLacdk_locale_RDecoder__V_exceptions, // the declared exceptions
  CharArrayReader_MetainfoWrapper::CharArrayReader_method_setDecoder_INLacdk_locale_RDecoder__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CharArrayReader_methods[] = 
{
  &CharArrayReader_method_CharArrayReader_INLRuccharArray_II_LRCharArrayReader_,
  &CharArrayReader_method_CharArrayReader_INLRuccharArray__LRCharArrayReader_,
  &CharArrayReader_method_CharArrayReader_INLRuccharArray_I_LRCharArrayReader_,
  &CharArrayReader_method_GetClass__L_acdk_lang_RClass_,
  &CharArrayReader_method_close__V,
  &CharArrayReader_method_getDecoder__Lacdk_locale_RDecoder_,
  &CharArrayReader_method_readChar__I,
  &CharArrayReader_method_readString__LRString_,
  &CharArrayReader_method_setDecoder_INLacdk_locale_RDecoder__V,
  0
};


struct CharArrayReader_MetaInfoInitializer
{  CharArrayReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CharArrayReader::clazzInfo();
    ci->fields =  _CharArrayReader_fields;
    ci->methods =  _CharArrayReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CharArrayReader_MetaInfoInitializer CharArrayReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
CharArrayWriter_create_array(int length)
{
  return new ObjectArrayImpl<RCharArrayWriter>(length);
}

//static
::acdk::lang::RObject
CharArrayWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CharArrayWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_CharArrayWriter_IINLRObject__LRCharArrayWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharArrayWriter(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_CharArrayWriter__LRCharArrayWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharArrayWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_CharArrayWriter_I_LRCharArrayWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharArrayWriter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CharArrayWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_capacity__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharArrayWriter::capacity();
    else
      ret = This->capacity();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_ensureCapacity_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharArrayWriter::ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ensureCapacity(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharArrayWriter::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_size__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharArrayWriter::size();
    else
      ret = This->size();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_tocharArray__LRuccharArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharArrayWriter::tocharArray();
    else
        ret = (::acdk::lang::RObject)This->tocharArray();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_writeChar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharArrayWriter::writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_writeChar_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharArrayWriter::writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharArrayWriter_method_writeString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharArrayWriter::writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharArrayWriter_fields__sb_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_sb, flags);
    else
      This->_sb = ::acdk::lang::dmi::castTo< RuccharArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharArrayWriter_fields__writePos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharArrayWriter* This = dmi_cast<CharArrayWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_writePos, flags);
    else
      This->_writePos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CharArrayWriter_fields__sb = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_sb", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo(),
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_fields__sb_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CharArrayWriter_fields__writePos = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_writePos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_fields__writePos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CharArrayWriter_fields[] = 
{
  &CharArrayWriter_fields__sb,
  &CharArrayWriter_fields__writePos,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayWriter_methods_CharArrayWriter_IINLRObject__LRCharArrayWriter__arg_initialSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayWriter_methods_CharArrayWriter_IINLRObject__LRCharArrayWriter__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_CharArrayWriter_IINLRObject__LRCharArrayWriter__args[] = 
{
  &CharArrayWriter_methods_CharArrayWriter_IINLRObject__LRCharArrayWriter__arg_initialSize,
  &CharArrayWriter_methods_CharArrayWriter_IINLRObject__LRCharArrayWriter__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_CharArrayWriter_IINLRObject__LRCharArrayWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_CharArrayWriter_IINLRObject__LRCharArrayWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CharArrayWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharArrayWriter::clazzInfo(), // return type
  "_0_CharArrayWriter", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_CharArrayWriter_IINLRObject__LRCharArrayWriter__args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_CharArrayWriter_IINLRObject__LRCharArrayWriter__exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_CharArrayWriter_IINLRObject__LRCharArrayWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_CharArrayWriter__LRCharArrayWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_CharArrayWriter__LRCharArrayWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_CharArrayWriter__LRCharArrayWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CharArrayWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharArrayWriter::clazzInfo(), // return type
  "_1_CharArrayWriter", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_CharArrayWriter__LRCharArrayWriter__args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_CharArrayWriter__LRCharArrayWriter__exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_CharArrayWriter__LRCharArrayWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayWriter_methods_CharArrayWriter_I_LRCharArrayWriter__arg_initialSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "initialSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_CharArrayWriter_I_LRCharArrayWriter__args[] = 
{
  &CharArrayWriter_methods_CharArrayWriter_I_LRCharArrayWriter__arg_initialSize,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_CharArrayWriter_I_LRCharArrayWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_CharArrayWriter_I_LRCharArrayWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CharArrayWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharArrayWriter::clazzInfo(), // return type
  "_2_CharArrayWriter", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_CharArrayWriter_I_LRCharArrayWriter__args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_CharArrayWriter_I_LRCharArrayWriter__exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_CharArrayWriter_I_LRCharArrayWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_capacity__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_capacity__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_capacity__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "capacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_capacity", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_capacity__I_args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_capacity__I_exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_capacity__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayWriter_methods_ensureCapacity_I_V_arg_newSize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newSize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_ensureCapacity_I_V_args[] = 
{
  &CharArrayWriter_methods_ensureCapacity_I_V_arg_newSize,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_ensureCapacity_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_ensureCapacity_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ensureCapacity", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_ensureCapacity", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_ensureCapacity_I_V_args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_ensureCapacity_I_V_exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_ensureCapacity_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_reset", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_reset__V_args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_reset__V_exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_size__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_size__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_size__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "size", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_size", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_size__I_args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_size__I_exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_size__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_tocharArray__LRuccharArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_tocharArray__LRuccharArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_tocharArray__LRuccharArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "tocharArray", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo(), // return type
  "_7_tocharArray", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_tocharArray__LRuccharArray__args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_tocharArray__LRuccharArray__exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_tocharArray__LRuccharArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayWriter_methods_writeChar_C_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_writeChar_C_V_args[] = 
{
  &CharArrayWriter_methods_writeChar_C_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_writeChar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_writeChar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_writeChar", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_writeChar_C_V_args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_writeChar_C_V_exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_writeChar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayWriter_methods_writeChar_UC_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_writeChar_UC_V_args[] = 
{
  &CharArrayWriter_methods_writeChar_UC_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_writeChar_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_writeChar_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_writeChar", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_writeChar_UC_V_args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_writeChar_UC_V_exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_writeChar_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharArrayWriter_methods_writeString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharArrayWriter_methods_writeString_INLRString__V_args[] = 
{
  &CharArrayWriter_methods_writeString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* CharArrayWriter_methods_writeString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharArrayWriter_method_writeString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_writeString", // alternative name of method
  -1, // altlabelHashCode
  CharArrayWriter_methods_writeString_INLRString__V_args, // the arguments
  0, //arguments count
  CharArrayWriter_methods_writeString_INLRString__V_exceptions, // the declared exceptions
  CharArrayWriter_MetainfoWrapper::CharArrayWriter_method_writeString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CharArrayWriter_methods[] = 
{
  &CharArrayWriter_method_CharArrayWriter_IINLRObject__LRCharArrayWriter_,
  &CharArrayWriter_method_CharArrayWriter__LRCharArrayWriter_,
  &CharArrayWriter_method_CharArrayWriter_I_LRCharArrayWriter_,
  &CharArrayWriter_method_GetClass__L_acdk_lang_RClass_,
  &CharArrayWriter_method_capacity__I,
  &CharArrayWriter_method_ensureCapacity_I_V,
  &CharArrayWriter_method_reset__V,
  &CharArrayWriter_method_size__I,
  &CharArrayWriter_method_tocharArray__LRuccharArray_,
  &CharArrayWriter_method_writeChar_C_V,
  &CharArrayWriter_method_writeChar_UC_V,
  &CharArrayWriter_method_writeString_INLRString__V,
  0
};


struct CharArrayWriter_MetaInfoInitializer
{  CharArrayWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CharArrayWriter::clazzInfo();
    ci->fields =  _CharArrayWriter_fields;
    ci->methods =  _CharArrayWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CharArrayWriter_MetaInfoInitializer CharArrayWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
CharReader_create_array(int length)
{
  return new ObjectArrayImpl<RCharReader>(length);
}

//static
::acdk::lang::RObject
CharReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CharReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CharReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharReader_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharReader* This = dmi_cast<CharReader>(This_);
    This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharReader_method_getReader_INLacdk_locale_REncoder__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharReader* This = dmi_cast<CharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharReader::getReader(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getReader(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharReader_method_getReader__LRReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharReader* This = dmi_cast<CharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharReader::getReader();
    else
        ret = (::acdk::lang::RObject)This->getReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharReader_method_readChar__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharReader* This = dmi_cast<CharReader>(This_);
  ret = This->readChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharReader_method_readString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharReader* This = dmi_cast<CharReader>(This_);
    ret = (::acdk::lang::RObject)This->readString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CharReader_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CharReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CharReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CharReader_MetainfoWrapper::CharReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharReader_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharReader_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharReader_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_close", // alternative name of method
  -1, // altlabelHashCode
  CharReader_methods_close__V_args, // the arguments
  0, //arguments count
  CharReader_methods_close__V_exceptions, // the declared exceptions
  CharReader_MetainfoWrapper::CharReader_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__args[] = 
{
  &CharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__arg_encoder,
  0
};

::acdk::lang::dmi::ClazzInfo* CharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharReader_method_getReader_INLacdk_locale_REncoder__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_3_getReader", // alternative name of method
  -1, // altlabelHashCode
  CharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__args, // the arguments
  0, //arguments count
  CharReader_methods_getReader_INLacdk_locale_REncoder__LRReader__exceptions, // the declared exceptions
  CharReader_MetainfoWrapper::CharReader_method_getReader_INLacdk_locale_REncoder__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharReader_methods_getReader__LRReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharReader_methods_getReader__LRReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharReader_method_getReader__LRReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo(), // return type
  "_4_getReader", // alternative name of method
  -1, // altlabelHashCode
  CharReader_methods_getReader__LRReader__args, // the arguments
  0, //arguments count
  CharReader_methods_getReader__LRReader__exceptions, // the declared exceptions
  CharReader_MetainfoWrapper::CharReader_method_getReader__LRReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharReader_methods_readChar__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharReader_methods_readChar__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharReader_method_readChar__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_readChar", // alternative name of method
  -1, // altlabelHashCode
  CharReader_methods_readChar__I_args, // the arguments
  0, //arguments count
  CharReader_methods_readChar__I_exceptions, // the declared exceptions
  CharReader_MetainfoWrapper::CharReader_method_readChar__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharReader_methods_readString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharReader_methods_readString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharReader_method_readString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_readString", // alternative name of method
  -1, // altlabelHashCode
  CharReader_methods_readString__LRString__args, // the arguments
  0, //arguments count
  CharReader_methods_readString__LRString__exceptions, // the declared exceptions
  CharReader_MetainfoWrapper::CharReader_method_readString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CharReader_methods[] = 
{
  &CharReader_method_GetClass__L_acdk_lang_RClass_,
  &CharReader_method_close__V,
  &CharReader_method_getReader_INLacdk_locale_REncoder__LRReader_,
  &CharReader_method_getReader__LRReader_,
  &CharReader_method_readChar__I,
  &CharReader_method_readString__LRString_,
  0
};


struct CharReader_MetaInfoInitializer
{  CharReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CharReader::clazzInfo();
    ci->fields =  _CharReader_fields;
    ci->methods =  _CharReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CharReader_MetaInfoInitializer CharReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
CharToByteReader_create_array(int length)
{
  return new ObjectArrayImpl<RCharToByteReader>(length);
}

//static
::acdk::lang::RObject
CharToByteReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CharToByteReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharToByteReader(::acdk::lang::dmi::castTo< RCharReader>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_CharToByteReader_INLRCharReader__LRCharToByteReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharToByteReader(::acdk::lang::dmi::castTo< RCharReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharToByteReader(::acdk::lang::dmi::castTo< RCharReader>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CharToByteReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_available__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharToByteReader::available();
    else
      ret = This->available();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharToByteReader::read();
    else
      ret = This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_read_INLRbyteArray_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharToByteReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_read_INLRbyteArray_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharToByteReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_read_INLRbyteArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharToByteReader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharToByteReader::reset();
    else
        This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteReader_method_skip_J_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->CharToByteReader::skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
      ret = This->skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharToByteReader_fields__cin_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cin, flags);
    else
      This->_cin = ::acdk::lang::dmi::castTo< RCharReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharToByteReader_fields__encoder_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_encoder, flags);
    else
      This->_encoder = ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharToByteReader_fields__maxChars_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharToByteReader* This = dmi_cast<CharToByteReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_maxChars, flags);
    else
      This->_maxChars = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CharToByteReader_fields__cin = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cin", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo(),
  CharToByteReader_MetainfoWrapper::CharToByteReader_fields__cin_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CharToByteReader_fields__encoder = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_encoder", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo(),
  CharToByteReader_MetainfoWrapper::CharToByteReader_fields__encoder_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CharToByteReader_fields__maxChars = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_maxChars", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  CharToByteReader_MetainfoWrapper::CharToByteReader_fields__maxChars_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CharToByteReader_fields[] = 
{
  &CharToByteReader_fields__cin,
  &CharToByteReader_fields__encoder,
  &CharToByteReader_fields__maxChars,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__arg_cin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__args[] = 
{
  &CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__arg_cin,
  &CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__arg_encoder,
  &CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CharToByteReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharToByteReader::clazzInfo(), // return type
  "_0_CharToByteReader", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__args, // the arguments
  0, //arguments count
  CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_CharToByteReader_INLRCharReader__LRCharToByteReader__arg_cin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_CharToByteReader_INLRCharReader__LRCharToByteReader__args[] = 
{
  &CharToByteReader_methods_CharToByteReader_INLRCharReader__LRCharToByteReader__arg_cin,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_CharToByteReader_INLRCharReader__LRCharToByteReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_CharToByteReader_INLRCharReader__LRCharToByteReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CharToByteReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharToByteReader::clazzInfo(), // return type
  "_1_CharToByteReader", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_CharToByteReader_INLRCharReader__LRCharToByteReader__args, // the arguments
  0, //arguments count
  CharToByteReader_methods_CharToByteReader_INLRCharReader__LRCharToByteReader__exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_CharToByteReader_INLRCharReader__LRCharToByteReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__arg_cin = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cin", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__args[] = 
{
  &CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__arg_cin,
  &CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__arg_encoder,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CharToByteReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharToByteReader::clazzInfo(), // return type
  "_2_CharToByteReader", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__args, // the arguments
  0, //arguments count
  CharToByteReader_methods_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CharToByteReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_available__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_available__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_available__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "available", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_available", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_available__I_args, // the arguments
  0, //arguments count
  CharToByteReader_methods_available__I_exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_available__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_read__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_read", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_read__I_args, // the arguments
  0, //arguments count
  CharToByteReader_methods_read__I_exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_read_INLRbyteArray_I_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_read_INLRbyteArray_I_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_read_INLRbyteArray_I_I_args[] = 
{
  &CharToByteReader_methods_read_INLRbyteArray_I_I_arg_buffer,
  &CharToByteReader_methods_read_INLRbyteArray_I_I_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_read_INLRbyteArray_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_read_INLRbyteArray_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_read", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_read_INLRbyteArray_I_I_args, // the arguments
  0, //arguments count
  CharToByteReader_methods_read_INLRbyteArray_I_I_exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_read_INLRbyteArray_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_read_INLRbyteArray_II_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_read_INLRbyteArray_II_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_read_INLRbyteArray_II_I_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_read_INLRbyteArray_II_I_args[] = 
{
  &CharToByteReader_methods_read_INLRbyteArray_II_I_arg_buffer,
  &CharToByteReader_methods_read_INLRbyteArray_II_I_arg_offset,
  &CharToByteReader_methods_read_INLRbyteArray_II_I_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_read_INLRbyteArray_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_read_INLRbyteArray_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_read", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_read_INLRbyteArray_II_I_args, // the arguments
  0, //arguments count
  CharToByteReader_methods_read_INLRbyteArray_II_I_exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_read_INLRbyteArray_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_read_INLRbyteArray__I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_read_INLRbyteArray__I_args[] = 
{
  &CharToByteReader_methods_read_INLRbyteArray__I_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_read_INLRbyteArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_read_INLRbyteArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_read", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_read_INLRbyteArray__I_args, // the arguments
  0, //arguments count
  CharToByteReader_methods_read_INLRbyteArray__I_exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_read_INLRbyteArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_reset", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_reset__V_args, // the arguments
  0, //arguments count
  CharToByteReader_methods_reset__V_exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteReader_methods_skip_J_J_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteReader_methods_skip_J_J_args[] = 
{
  &CharToByteReader_methods_skip_J_J_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteReader_methods_skip_J_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteReader_method_skip_J_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_6_skip", // alternative name of method
  -1, // altlabelHashCode
  CharToByteReader_methods_skip_J_J_args, // the arguments
  0, //arguments count
  CharToByteReader_methods_skip_J_J_exceptions, // the declared exceptions
  CharToByteReader_MetainfoWrapper::CharToByteReader_method_skip_J_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CharToByteReader_methods[] = 
{
  &CharToByteReader_method_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder_INLRObject__LRCharToByteReader_,
  &CharToByteReader_method_CharToByteReader_INLRCharReader__LRCharToByteReader_,
  &CharToByteReader_method_CharToByteReader_INLRCharReader_INLacdk_locale_REncoder__LRCharToByteReader_,
  &CharToByteReader_method_GetClass__L_acdk_lang_RClass_,
  &CharToByteReader_method_available__I,
  &CharToByteReader_method_read__I,
  &CharToByteReader_method_read_INLRbyteArray_I_I,
  &CharToByteReader_method_read_INLRbyteArray_II_I,
  &CharToByteReader_method_read_INLRbyteArray__I,
  &CharToByteReader_method_reset__V,
  &CharToByteReader_method_skip_J_J,
  0
};


struct CharToByteReader_MetaInfoInitializer
{  CharToByteReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CharToByteReader::clazzInfo();
    ci->fields =  _CharToByteReader_fields;
    ci->methods =  _CharToByteReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CharToByteReader_MetaInfoInitializer CharToByteReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
CharToByteWriter_create_array(int length)
{
  return new ObjectArrayImpl<RCharToByteWriter>(length);
}

//static
::acdk::lang::RObject
CharToByteWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CharToByteWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharToByteWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_CharToByteWriter_INLRWriter__LRCharToByteWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharToByteWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new CharToByteWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CharToByteWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharToByteWriter::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharToByteWriter::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_getEncoder__Lacdk_locale_REncoder__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharToByteWriter::getEncoder();
    else
        ret = (::acdk::lang::RObject)This->getEncoder();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharToByteWriter::getWriter(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getWriter(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_getWriter__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharToByteWriter::getWriter();
    else
        ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_setEncoder_INLacdk_locale_REncoder__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharToByteWriter::setEncoder(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    else
        This->setEncoder(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_writeChar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharToByteWriter::writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_writeChar_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharToByteWriter::writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharToByteWriter_method_writeString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->CharToByteWriter::writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharToByteWriter_fields__encoder_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_encoder, flags);
    else
      This->_encoder = ::acdk::lang::dmi::castTo< acdk::locale::REncoder>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  CharToByteWriter_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    CharToByteWriter* This = dmi_cast<CharToByteWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< RWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo CharToByteWriter_fields__encoder = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_encoder", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo(),
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_fields__encoder_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo CharToByteWriter_fields__out = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(),
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _CharToByteWriter_fields[] = 
{
  &CharToByteWriter_fields__encoder,
  &CharToByteWriter_fields__out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__args[] = 
{
  &CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__arg_out,
  &CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__arg_encoder,
  &CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "CharToByteWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharToByteWriter::clazzInfo(), // return type
  "_0_CharToByteWriter", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_CharToByteWriter_INLRWriter__LRCharToByteWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_CharToByteWriter_INLRWriter__LRCharToByteWriter__args[] = 
{
  &CharToByteWriter_methods_CharToByteWriter_INLRWriter__LRCharToByteWriter__arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_CharToByteWriter_INLRWriter__LRCharToByteWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_CharToByteWriter_INLRWriter__LRCharToByteWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CharToByteWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharToByteWriter::clazzInfo(), // return type
  "_1_CharToByteWriter", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_CharToByteWriter_INLRWriter__LRCharToByteWriter__args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_CharToByteWriter_INLRWriter__LRCharToByteWriter__exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_CharToByteWriter_INLRWriter__LRCharToByteWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__args[] = 
{
  &CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__arg_out,
  &CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__arg_encoder,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "CharToByteWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  CharToByteWriter::clazzInfo(), // return type
  "_2_CharToByteWriter", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_close", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_close__V_args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_close__V_exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_flush", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_flush__V_exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_getEncoder__Lacdk_locale_REncoder__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_getEncoder__Lacdk_locale_REncoder__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_getEncoder__Lacdk_locale_REncoder_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo(), // return type
  "_3_getEncoder", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_getEncoder__Lacdk_locale_REncoder__args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_getEncoder__Lacdk_locale_REncoder__exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_getEncoder__Lacdk_locale_REncoder__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__args[] = 
{
  &CharToByteWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__arg_decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_a_getWriter", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_getWriter__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_getWriter__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_getWriter__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_b_getWriter", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_getWriter__LRWriter__args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_getWriter__LRWriter__exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_getWriter__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_setEncoder_INLacdk_locale_REncoder__V_arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_setEncoder_INLacdk_locale_REncoder__V_args[] = 
{
  &CharToByteWriter_methods_setEncoder_INLacdk_locale_REncoder__V_arg_encoder,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_setEncoder_INLacdk_locale_REncoder__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_setEncoder_INLacdk_locale_REncoder__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setEncoder", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setEncoder", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_setEncoder_INLacdk_locale_REncoder__V_args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_setEncoder_INLacdk_locale_REncoder__V_exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_setEncoder_INLacdk_locale_REncoder__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_writeChar_C_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_writeChar_C_V_args[] = 
{
  &CharToByteWriter_methods_writeChar_C_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_writeChar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_writeChar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_writeChar", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_writeChar_C_V_args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_writeChar_C_V_exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_writeChar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_writeChar_UC_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_writeChar_UC_V_args[] = 
{
  &CharToByteWriter_methods_writeChar_UC_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_writeChar_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_writeChar_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_writeChar", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_writeChar_UC_V_args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_writeChar_UC_V_exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_writeChar_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharToByteWriter_methods_writeString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharToByteWriter_methods_writeString_INLRString__V_args[] = 
{
  &CharToByteWriter_methods_writeString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* CharToByteWriter_methods_writeString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharToByteWriter_method_writeString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_writeString", // alternative name of method
  -1, // altlabelHashCode
  CharToByteWriter_methods_writeString_INLRString__V_args, // the arguments
  0, //arguments count
  CharToByteWriter_methods_writeString_INLRString__V_exceptions, // the declared exceptions
  CharToByteWriter_MetainfoWrapper::CharToByteWriter_method_writeString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CharToByteWriter_methods[] = 
{
  &CharToByteWriter_method_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder_INLRObject__LRCharToByteWriter_,
  &CharToByteWriter_method_CharToByteWriter_INLRWriter__LRCharToByteWriter_,
  &CharToByteWriter_method_CharToByteWriter_INLRWriter_INLacdk_locale_REncoder__LRCharToByteWriter_,
  &CharToByteWriter_method_GetClass__L_acdk_lang_RClass_,
  &CharToByteWriter_method_close__V,
  &CharToByteWriter_method_flush__V,
  &CharToByteWriter_method_getEncoder__Lacdk_locale_REncoder_,
  &CharToByteWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter_,
  &CharToByteWriter_method_getWriter__LRWriter_,
  &CharToByteWriter_method_setEncoder_INLacdk_locale_REncoder__V,
  &CharToByteWriter_method_writeChar_C_V,
  &CharToByteWriter_method_writeChar_UC_V,
  &CharToByteWriter_method_writeString_INLRString__V,
  0
};


struct CharToByteWriter_MetaInfoInitializer
{  CharToByteWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CharToByteWriter::clazzInfo();
    ci->fields =  _CharToByteWriter_fields;
    ci->methods =  _CharToByteWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CharToByteWriter_MetaInfoInitializer CharToByteWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
CharWriter_create_array(int length)
{
  return new ObjectArrayImpl<RCharWriter>(length);
}

//static
::acdk::lang::RObject
CharWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class CharWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)CharWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharWriter* This = dmi_cast<CharWriter>(This_);
    This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharWriter* This = dmi_cast<CharWriter>(This_);
    This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharWriter* This = dmi_cast<CharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharWriter::getWriter(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getWriter(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharWriter_method_getWriter__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharWriter* This = dmi_cast<CharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->CharWriter::getWriter();
    else
        ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharWriter_method_writeChar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharWriter* This = dmi_cast<CharWriter>(This_);
    This->writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharWriter_method_writeChar_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharWriter* This = dmi_cast<CharWriter>(This_);
    This->writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  CharWriter_method_writeString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    CharWriter* This = dmi_cast<CharWriter>(This_);
    This->writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _CharWriter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  CharWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  CharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  CharWriter_MetainfoWrapper::CharWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_close", // alternative name of method
  -1, // altlabelHashCode
  CharWriter_methods_close__V_args, // the arguments
  0, //arguments count
  CharWriter_methods_close__V_exceptions, // the declared exceptions
  CharWriter_MetainfoWrapper::CharWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_flush", // alternative name of method
  -1, // altlabelHashCode
  CharWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  CharWriter_methods_flush__V_exceptions, // the declared exceptions
  CharWriter_MetainfoWrapper::CharWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__args[] = 
{
  &CharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__arg_decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_5_getWriter", // alternative name of method
  -1, // altlabelHashCode
  CharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__args, // the arguments
  0, //arguments count
  CharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__exceptions, // the declared exceptions
  CharWriter_MetainfoWrapper::CharWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharWriter_methods_getWriter__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter_methods_getWriter__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharWriter_method_getWriter__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_6_getWriter", // alternative name of method
  -1, // altlabelHashCode
  CharWriter_methods_getWriter__LRWriter__args, // the arguments
  0, //arguments count
  CharWriter_methods_getWriter__LRWriter__exceptions, // the declared exceptions
  CharWriter_MetainfoWrapper::CharWriter_method_getWriter__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharWriter_methods_writeChar_C_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharWriter_methods_writeChar_C_V_args[] = 
{
  &CharWriter_methods_writeChar_C_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter_methods_writeChar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharWriter_method_writeChar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_writeChar", // alternative name of method
  -1, // altlabelHashCode
  CharWriter_methods_writeChar_C_V_args, // the arguments
  0, //arguments count
  CharWriter_methods_writeChar_C_V_exceptions, // the declared exceptions
  CharWriter_MetainfoWrapper::CharWriter_method_writeChar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharWriter_methods_writeChar_UC_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharWriter_methods_writeChar_UC_V_args[] = 
{
  &CharWriter_methods_writeChar_UC_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter_methods_writeChar_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharWriter_method_writeChar_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_writeChar", // alternative name of method
  -1, // altlabelHashCode
  CharWriter_methods_writeChar_UC_V_args, // the arguments
  0, //arguments count
  CharWriter_methods_writeChar_UC_V_exceptions, // the declared exceptions
  CharWriter_MetainfoWrapper::CharWriter_method_writeChar_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo CharWriter_methods_writeString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* CharWriter_methods_writeString_INLRString__V_args[] = 
{
  &CharWriter_methods_writeString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* CharWriter_methods_writeString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo CharWriter_method_writeString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_writeString", // alternative name of method
  -1, // altlabelHashCode
  CharWriter_methods_writeString_INLRString__V_args, // the arguments
  0, //arguments count
  CharWriter_methods_writeString_INLRString__V_exceptions, // the declared exceptions
  CharWriter_MetainfoWrapper::CharWriter_method_writeString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _CharWriter_methods[] = 
{
  &CharWriter_method_GetClass__L_acdk_lang_RClass_,
  &CharWriter_method_close__V,
  &CharWriter_method_flush__V,
  &CharWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter_,
  &CharWriter_method_getWriter__LRWriter_,
  &CharWriter_method_writeChar_C_V,
  &CharWriter_method_writeChar_UC_V,
  &CharWriter_method_writeString_INLRString__V,
  0
};


struct CharWriter_MetaInfoInitializer
{  CharWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = CharWriter::clazzInfo();
    ci->fields =  _CharWriter_fields;
    ci->methods =  _CharWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
CharWriter_MetaInfoInitializer CharWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
ConsoleCharReader_create_array(int length)
{
  return new ObjectArrayImpl<RConsoleCharReader>(length);
}

//static
::acdk::lang::RObject
ConsoleCharReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class ConsoleCharReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleCharReader_method_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleCharReader(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleCharReader_method_ConsoleCharReader__LRConsoleCharReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleCharReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleCharReader_method_ConsoleCharReader_INLRObject__LRConsoleCharReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new ConsoleCharReader(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  ConsoleCharReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)ConsoleCharReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleCharReader_fields__decoder_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleCharReader* This = dmi_cast<ConsoleCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_decoder, flags);
    else
      This->_decoder = ::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  ConsoleCharReader_fields__in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    ConsoleCharReader* This = dmi_cast<ConsoleCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in, flags);
    else
      This->_in = ::acdk::lang::dmi::castTo< RCharReader>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleCharReader_fields__decoder = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_decoder", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo(),
  ConsoleCharReader_MetainfoWrapper::ConsoleCharReader_fields__decoder_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo ConsoleCharReader_fields__in = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo(),
  ConsoleCharReader_MetainfoWrapper::ConsoleCharReader_fields__in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _ConsoleCharReader_fields[] = 
{
  &ConsoleCharReader_fields__decoder,
  &ConsoleCharReader_fields__in,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharReader_methods_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharReader_methods_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleCharReader_methods_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__args[] = 
{
  &ConsoleCharReader_methods_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__arg_iolock,
  &ConsoleCharReader_methods_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__arg_decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharReader_methods_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleCharReader_method_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleCharReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleCharReader::clazzInfo(), // return type
  "_0_ConsoleCharReader", // alternative name of method
  -1, // altlabelHashCode
  ConsoleCharReader_methods_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__args, // the arguments
  0, //arguments count
  ConsoleCharReader_methods_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__exceptions, // the declared exceptions
  ConsoleCharReader_MetainfoWrapper::ConsoleCharReader_method_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleCharReader_methods_ConsoleCharReader__LRConsoleCharReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharReader_methods_ConsoleCharReader__LRConsoleCharReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleCharReader_method_ConsoleCharReader__LRConsoleCharReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleCharReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleCharReader::clazzInfo(), // return type
  "_1_ConsoleCharReader", // alternative name of method
  -1, // altlabelHashCode
  ConsoleCharReader_methods_ConsoleCharReader__LRConsoleCharReader__args, // the arguments
  0, //arguments count
  ConsoleCharReader_methods_ConsoleCharReader__LRConsoleCharReader__exceptions, // the declared exceptions
  ConsoleCharReader_MetainfoWrapper::ConsoleCharReader_method_ConsoleCharReader__LRConsoleCharReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo ConsoleCharReader_methods_ConsoleCharReader_INLRObject__LRConsoleCharReader__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleCharReader_methods_ConsoleCharReader_INLRObject__LRConsoleCharReader__args[] = 
{
  &ConsoleCharReader_methods_ConsoleCharReader_INLRObject__LRConsoleCharReader__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharReader_methods_ConsoleCharReader_INLRObject__LRConsoleCharReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleCharReader_method_ConsoleCharReader_INLRObject__LRConsoleCharReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "ConsoleCharReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ConsoleCharReader::clazzInfo(), // return type
  "_2_ConsoleCharReader", // alternative name of method
  -1, // altlabelHashCode
  ConsoleCharReader_methods_ConsoleCharReader_INLRObject__LRConsoleCharReader__args, // the arguments
  0, //arguments count
  ConsoleCharReader_methods_ConsoleCharReader_INLRObject__LRConsoleCharReader__exceptions, // the declared exceptions
  ConsoleCharReader_MetainfoWrapper::ConsoleCharReader_method_ConsoleCharReader_INLRObject__LRConsoleCharReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* ConsoleCharReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* ConsoleCharReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo ConsoleCharReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  ConsoleCharReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  ConsoleCharReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  ConsoleCharReader_MetainfoWrapper::ConsoleCharReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _ConsoleCharReader_methods[] = 
{
  &ConsoleCharReader_method_ConsoleCharReader_INLRObject_INLacdk_locale_RDecoder__LRConsoleCharReader_,
  &ConsoleCharReader_method_ConsoleCharReader__LRConsoleCharReader_,
  &ConsoleCharReader_method_ConsoleCharReader_INLRObject__LRConsoleCharReader_,
  &ConsoleCharReader_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct ConsoleCharReader_MetaInfoInitializer
{  ConsoleCharReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = ConsoleCharReader::clazzInfo();
    ci->fields =  _ConsoleCharReader_fields;
    ci->methods =  _ConsoleCharReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
ConsoleCharReader_MetaInfoInitializer ConsoleCharReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io

