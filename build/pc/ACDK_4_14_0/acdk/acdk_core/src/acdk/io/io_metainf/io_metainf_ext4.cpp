// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../io.h"
#include "../AbstractCharFilterReader.h"
#include "../AbstractCharFilterWriter.h"
#include "../AbstractCharReader.h"
#include "../AbstractCharWriter.h"
#include "../AbstractFilterReader.h"
#include "../AbstractFilterWriter.h"
#include "../AbstractObjectReader.h"
#include "../AbstractObjectWriter.h"
#include "../AbstractReader.h"
#include "../AbstractStorageReader.h"
#include "../AbstractStorageWriter.h"
#include "../AbstractWriter.h"
#include "../ASCIIDataReader.h"
#include "../ASCIIDataWriter.h"
#include "../BinaryDataReader.h"
#include "../BinaryDataWriter.h"
#include "../BinaryObjectReader.h"
#include "../BinaryObjectWriter.h"
#include "../BufferedReader.h"
#include "../BufferedWriter.h"
#include "../ByteBufferReader.h"
#include "../ByteBufferWriter.h"
#include "../BytePtrReader.h"
#include "../ByteToCharReader.h"
#include "../ByteToCharWriter.h"
#include "../CharArrayReader.h"
#include "../CharArrayWriter.h"
#include "../CharReader.h"
#include "../CharToByteReader.h"
#include "../CharToByteWriter.h"
#include "../CharWriter.h"
#include "../ConsoleCharReader.h"
#include "../ConsoleCharWriter.h"
#include "../ConsoleReader.h"
#include "../ConsoleWriter.h"
#include "../DataReader.h"
#include "../DataWriter.h"
#include "../EOFException.h"
#include "../File.h"
#include "../FileAbstractImpl.h"
#include "../FileDescriptor.h"
#include "../FileFilter.h"
#include "../FileImpl.h"
#include "../FileInfo.h"
#include "../FilenameFilter.h"
#include "../FileNotFoundException.h"
#include "../FileReader.h"
#include "../FileReaderWriterImpl.h"
#include "../FileStandardImpl.h"
#include "../FileStatus.h"
#include "../FileSystem.h"
#include "../FileSystemFactory.h"
#include "../FileWriter.h"
#include "../FilterReader.h"
#include "../FilterWriter.h"
#include "../GlobFilenameFilter.h"
#include "../InputReader.h"
#include "../io.h"
#include "../IOException.h"
#include "../io_all.h"
#include "../JoinedReader.h"
#include "../LineNumberCharReader.h"
#include "../LineNumberReader.h"
#include "../MemoryMappedFile.h"
#include "../MemReader.h"
#include "../MemWriter.h"
#include "../NullWriter.h"
#include "../ObjectReader.h"
#include "../ObjectStreamException.h"
#include "../ObjectWriter.h"
#include "../OutputDebugStringWriter.h"
#include "../PipedReader.h"
#include "../PipedWriter.h"
#include "../PrintWriter.h"
#include "../PushbackCharReader.h"
#include "../PushbackReader.h"
#include "../RandomAccessFile.h"
#include "../Reader.h"
#include "../RessourceFileImpl.h"
#include "../RessourceFileSystem.h"
#include "../Serializable.h"
#include "../SerializedObjectDescriptor.h"
#include "../StandardFileSystem.h"
#include "../Storage.h"
#include "../StreamTokenizer.h"
#include "../StringReader.h"
#include "../StringWriter.h"
#include "../SubReader.h"
#include "../TeeCharWriter.h"
#include "../TeeReader.h"
#include "../TeeWriter.h"
#include "../Writer.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>

namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
PushbackCharReader_create_array(int length)
{
  return new ObjectArrayImpl<RPushbackCharReader>(length);
}

//static
::acdk::lang::RObject
PushbackCharReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PushbackCharReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PushbackCharReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReader_method_resetPushbackBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PushbackCharReader* This = dmi_cast<PushbackCharReader>(This_);
    This->resetPushbackBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReader_method_unread_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PushbackCharReader* This = dmi_cast<PushbackCharReader>(This_);
    This->unread(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReader_method_unread_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PushbackCharReader* This = dmi_cast<PushbackCharReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PushbackCharReader::unread(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->unread(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _PushbackCharReader_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PushbackCharReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PushbackCharReader_MetainfoWrapper::PushbackCharReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReader_methods_resetPushbackBuffer__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReader_methods_resetPushbackBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReader_method_resetPushbackBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resetPushbackBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_resetPushbackBuffer", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReader_methods_resetPushbackBuffer__V_args, // the arguments
  0, //arguments count
  PushbackCharReader_methods_resetPushbackBuffer__V_exceptions, // the declared exceptions
  PushbackCharReader_MetainfoWrapper::PushbackCharReader_method_resetPushbackBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReader_methods_unread_UC_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReader_methods_unread_UC_V_args[] = 
{
  &PushbackCharReader_methods_unread_UC_V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReader_methods_unread_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReader_method_unread_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_unread", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReader_methods_unread_UC_V_args, // the arguments
  0, //arguments count
  PushbackCharReader_methods_unread_UC_V_exceptions, // the declared exceptions
  PushbackCharReader_MetainfoWrapper::PushbackCharReader_method_unread_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReader_methods_unread_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReader_methods_unread_INLRString__V_args[] = 
{
  &PushbackCharReader_methods_unread_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReader_methods_unread_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReader_method_unread_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_unread", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReader_methods_unread_INLRString__V_args, // the arguments
  0, //arguments count
  PushbackCharReader_methods_unread_INLRString__V_exceptions, // the declared exceptions
  PushbackCharReader_MetainfoWrapper::PushbackCharReader_method_unread_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PushbackCharReader_methods[] = 
{
  &PushbackCharReader_method_GetClass__L_acdk_lang_RClass_,
  &PushbackCharReader_method_resetPushbackBuffer__V,
  &PushbackCharReader_method_unread_UC_V,
  &PushbackCharReader_method_unread_INLRString__V,
  0
};


struct PushbackCharReader_MetaInfoInitializer
{  PushbackCharReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PushbackCharReader::clazzInfo();
    ci->fields =  _PushbackCharReader_fields;
    ci->methods =  _PushbackCharReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PushbackCharReader_MetaInfoInitializer PushbackCharReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
PushbackCharReaderImpl_create_array(int length)
{
  return new ObjectArrayImpl<RPushbackCharReaderImpl>(length);
}

//static
::acdk::lang::RObject
PushbackCharReaderImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PushbackCharReaderImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReaderImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PushbackCharReaderImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PushbackCharReaderImpl(::acdk::lang::dmi::castTo< RCharReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PushbackCharReaderImpl(::acdk::lang::dmi::castTo< RCharReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PushbackCharReaderImpl(::acdk::lang::dmi::castTo< RCharReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReaderImpl_method_resetPushbackBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PushbackCharReaderImpl* This = dmi_cast<PushbackCharReaderImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PushbackCharReaderImpl::resetPushbackBuffer();
    else
        This->resetPushbackBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReaderImpl_method_unread_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PushbackCharReaderImpl* This = dmi_cast<PushbackCharReaderImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PushbackCharReaderImpl::unread(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    else
        This->unread(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackCharReaderImpl_method_unread_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PushbackCharReaderImpl* This = dmi_cast<PushbackCharReaderImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PushbackCharReaderImpl::unread(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->unread(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PushbackCharReaderImpl_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PushbackCharReaderImpl* This = dmi_cast<PushbackCharReaderImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RuccharArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PushbackCharReaderImpl_fields__pos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PushbackCharReaderImpl* This = dmi_cast<PushbackCharReaderImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pos, flags);
    else
      This->_pos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PushbackCharReaderImpl_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RuccharArray::clazzInfo(),
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PushbackCharReaderImpl_fields__pos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_fields__pos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PushbackCharReaderImpl_fields[] = 
{
  &PushbackCharReaderImpl_fields__buffer,
  &PushbackCharReaderImpl_fields__pos,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReaderImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReaderImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReaderImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReaderImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PushbackCharReaderImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__arg_buffsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__args[] = 
{
  &PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__arg_in,
  &PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__arg_buffsize,
  &PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PushbackCharReaderImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PushbackCharReaderImpl::clazzInfo(), // return type
  "_0_PushbackCharReaderImpl", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__args, // the arguments
  0, //arguments count
  PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__exceptions, // the declared exceptions
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl__args[] = 
{
  &PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "PushbackCharReaderImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PushbackCharReaderImpl::clazzInfo(), // return type
  "_1_PushbackCharReaderImpl", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl__args, // the arguments
  0, //arguments count
  PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl__exceptions, // the declared exceptions
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__arg_buffsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__args[] = 
{
  &PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__arg_in,
  &PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__arg_buffsize,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "PushbackCharReaderImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PushbackCharReaderImpl::clazzInfo(), // return type
  "_2_PushbackCharReaderImpl", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__args, // the arguments
  0, //arguments count
  PushbackCharReaderImpl_methods_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__exceptions, // the declared exceptions
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReaderImpl_methods_resetPushbackBuffer__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReaderImpl_methods_resetPushbackBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReaderImpl_method_resetPushbackBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resetPushbackBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_resetPushbackBuffer", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReaderImpl_methods_resetPushbackBuffer__V_args, // the arguments
  0, //arguments count
  PushbackCharReaderImpl_methods_resetPushbackBuffer__V_exceptions, // the declared exceptions
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_method_resetPushbackBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReaderImpl_methods_unread_UC_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReaderImpl_methods_unread_UC_V_args[] = 
{
  &PushbackCharReaderImpl_methods_unread_UC_V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReaderImpl_methods_unread_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReaderImpl_method_unread_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_unread", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReaderImpl_methods_unread_UC_V_args, // the arguments
  0, //arguments count
  PushbackCharReaderImpl_methods_unread_UC_V_exceptions, // the declared exceptions
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_method_unread_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackCharReaderImpl_methods_unread_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackCharReaderImpl_methods_unread_INLRString__V_args[] = 
{
  &PushbackCharReaderImpl_methods_unread_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackCharReaderImpl_methods_unread_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackCharReaderImpl_method_unread_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_unread", // alternative name of method
  -1, // altlabelHashCode
  PushbackCharReaderImpl_methods_unread_INLRString__V_args, // the arguments
  0, //arguments count
  PushbackCharReaderImpl_methods_unread_INLRString__V_exceptions, // the declared exceptions
  PushbackCharReaderImpl_MetainfoWrapper::PushbackCharReaderImpl_method_unread_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PushbackCharReaderImpl_methods[] = 
{
  &PushbackCharReaderImpl_method_GetClass__L_acdk_lang_RClass_,
  &PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader_IINLRObject__LRPushbackCharReaderImpl_,
  &PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader__LRPushbackCharReaderImpl_,
  &PushbackCharReaderImpl_method_PushbackCharReaderImpl_INLRCharReader_I_LRPushbackCharReaderImpl_,
  &PushbackCharReaderImpl_method_resetPushbackBuffer__V,
  &PushbackCharReaderImpl_method_unread_UC_V,
  &PushbackCharReaderImpl_method_unread_INLRString__V,
  0
};


struct PushbackCharReaderImpl_MetaInfoInitializer
{  PushbackCharReaderImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PushbackCharReaderImpl::clazzInfo();
    ci->fields =  _PushbackCharReaderImpl_fields;
    ci->methods =  _PushbackCharReaderImpl_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PushbackCharReaderImpl_MetaInfoInitializer PushbackCharReaderImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
PushbackReader_create_array(int length)
{
  return new ObjectArrayImpl<RPushbackReader>(length);
}

//static
::acdk::lang::RObject
PushbackReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class PushbackReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)PushbackReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackReader_method_PushbackReader_INLRReader_I_LRPushbackReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PushbackReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackReader_method_PushbackReader_INLRReader__LRPushbackReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new PushbackReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackReader_method_unread_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PushbackReader* This = dmi_cast<PushbackReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PushbackReader::unread(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->unread(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  PushbackReader_method_unread_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    PushbackReader* This = dmi_cast<PushbackReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->PushbackReader::unread(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->unread(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PushbackReader_fields__buffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PushbackReader* This = dmi_cast<PushbackReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_buffer, flags);
    else
      This->_buffer = ::acdk::lang::dmi::castTo< RbyteArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  PushbackReader_fields__pos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    PushbackReader* This = dmi_cast<PushbackReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pos, flags);
    else
      This->_pos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo PushbackReader_fields__buffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_buffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  PushbackReader_MetainfoWrapper::PushbackReader_fields__buffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo PushbackReader_fields__pos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  PushbackReader_MetainfoWrapper::PushbackReader_fields__pos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _PushbackReader_fields[] = 
{
  &PushbackReader_fields__buffer,
  &PushbackReader_fields__pos,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  PushbackReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  PushbackReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  PushbackReader_MetainfoWrapper::PushbackReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackReader_methods_PushbackReader_INLRReader_I_LRPushbackReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackReader_methods_PushbackReader_INLRReader_I_LRPushbackReader__arg_buffsize = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "buffsize", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackReader_methods_PushbackReader_INLRReader_I_LRPushbackReader__args[] = 
{
  &PushbackReader_methods_PushbackReader_INLRReader_I_LRPushbackReader__arg_in,
  &PushbackReader_methods_PushbackReader_INLRReader_I_LRPushbackReader__arg_buffsize,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackReader_methods_PushbackReader_INLRReader_I_LRPushbackReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackReader_method_PushbackReader_INLRReader_I_LRPushbackReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "PushbackReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PushbackReader::clazzInfo(), // return type
  "_0_PushbackReader", // alternative name of method
  -1, // altlabelHashCode
  PushbackReader_methods_PushbackReader_INLRReader_I_LRPushbackReader__args, // the arguments
  0, //arguments count
  PushbackReader_methods_PushbackReader_INLRReader_I_LRPushbackReader__exceptions, // the declared exceptions
  PushbackReader_MetainfoWrapper::PushbackReader_method_PushbackReader_INLRReader_I_LRPushbackReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackReader_methods_PushbackReader_INLRReader__LRPushbackReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackReader_methods_PushbackReader_INLRReader__LRPushbackReader__args[] = 
{
  &PushbackReader_methods_PushbackReader_INLRReader__LRPushbackReader__arg_in,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackReader_methods_PushbackReader_INLRReader__LRPushbackReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackReader_method_PushbackReader_INLRReader__LRPushbackReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "PushbackReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  PushbackReader::clazzInfo(), // return type
  "_1_PushbackReader", // alternative name of method
  -1, // altlabelHashCode
  PushbackReader_methods_PushbackReader_INLRReader__LRPushbackReader__args, // the arguments
  0, //arguments count
  PushbackReader_methods_PushbackReader_INLRReader__LRPushbackReader__exceptions, // the declared exceptions
  PushbackReader_MetainfoWrapper::PushbackReader_method_PushbackReader_INLRReader__LRPushbackReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackReader_methods_unread_I_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackReader_methods_unread_I_V_args[] = 
{
  &PushbackReader_methods_unread_I_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackReader_methods_unread_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackReader_method_unread_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_unread", // alternative name of method
  -1, // altlabelHashCode
  PushbackReader_methods_unread_I_V_args, // the arguments
  0, //arguments count
  PushbackReader_methods_unread_I_V_exceptions, // the declared exceptions
  PushbackReader_MetainfoWrapper::PushbackReader_method_unread_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo PushbackReader_methods_unread_INLRbyteArray__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* PushbackReader_methods_unread_INLRbyteArray__V_args[] = 
{
  &PushbackReader_methods_unread_INLRbyteArray__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* PushbackReader_methods_unread_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo PushbackReader_method_unread_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_unread", // alternative name of method
  -1, // altlabelHashCode
  PushbackReader_methods_unread_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  PushbackReader_methods_unread_INLRbyteArray__V_exceptions, // the declared exceptions
  PushbackReader_MetainfoWrapper::PushbackReader_method_unread_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _PushbackReader_methods[] = 
{
  &PushbackReader_method_GetClass__L_acdk_lang_RClass_,
  &PushbackReader_method_PushbackReader_INLRReader_I_LRPushbackReader_,
  &PushbackReader_method_PushbackReader_INLRReader__LRPushbackReader_,
  &PushbackReader_method_unread_I_V,
  &PushbackReader_method_unread_INLRbyteArray__V,
  0
};


struct PushbackReader_MetaInfoInitializer
{  PushbackReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = PushbackReader::clazzInfo();
    ci->fields =  _PushbackReader_fields;
    ci->methods =  _PushbackReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
PushbackReader_MetaInfoInitializer PushbackReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
RandomAccessFile_create_array(int length)
{
  return new ObjectArrayImpl<RRandomAccessFile>(length);
}

//static
::acdk::lang::RObject
RandomAccessFile_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RandomAccessFile_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RandomAccessFile::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RandomAccessFile(::acdk::lang::dmi::castTo< RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RDataReader>(args[2], dc), ::acdk::lang::dmi::castTo< RDataWriter>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RandomAccessFile(::acdk::lang::dmi::castTo< RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RandomAccessFile(::acdk::lang::dmi::castTo< RFile>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RDataReader>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RandomAccessFile(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RDataReader>(args[2], dc), ::acdk::lang::dmi::castTo< RDataWriter>(args[3], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RandomAccessFile(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RandomAccessFile(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RDataReader>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_getFD__LRFileDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RandomAccessFile* This = dmi_cast<RandomAccessFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RandomAccessFile::getFD();
    else
        ret = (::acdk::lang::RObject)This->getFD();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_getFilePointer__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RandomAccessFile* This = dmi_cast<RandomAccessFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RandomAccessFile::getFilePointer();
    else
      ret = This->getFilePointer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_length__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RandomAccessFile* This = dmi_cast<RandomAccessFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RandomAccessFile::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_setLength_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RandomAccessFile* This = dmi_cast<RandomAccessFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->RandomAccessFile::setLength(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    else
        This->setLength(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RandomAccessFile_method_skipBytes_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RandomAccessFile* This = dmi_cast<RandomAccessFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RandomAccessFile::skipBytes(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->skipBytes(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RandomAccessFile_fields__dataReader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RandomAccessFile* This = dmi_cast<RandomAccessFile>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dataReader, flags);
    else
      This->_dataReader = ::acdk::lang::dmi::castTo< RDataReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RandomAccessFile_fields__dataWriter_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RandomAccessFile* This = dmi_cast<RandomAccessFile>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_dataWriter, flags);
    else
      This->_dataWriter = ::acdk::lang::dmi::castTo< RDataWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RandomAccessFile_fields__file_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RandomAccessFile* This = dmi_cast<RandomAccessFile>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_file, flags);
    else
      This->_file = ::acdk::lang::dmi::castTo< RFile>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RandomAccessFile_fields__dataReader = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dataReader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataReader::clazzInfo(),
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_fields__dataReader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RandomAccessFile_fields__dataWriter = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_dataWriter", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataWriter::clazzInfo(),
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_fields__dataWriter_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RandomAccessFile_fields__file = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_file", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo(),
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_fields__file_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RandomAccessFile_fields[] = 
{
  &RandomAccessFile_fields__dataReader,
  &RandomAccessFile_fields__dataWriter,
  &RandomAccessFile_fields__file,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_dataReader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dataReader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_dataWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dataWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__args[] = 
{
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_file,
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_mode,
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_dataReader,
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_dataWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RandomAccessFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RandomAccessFile::clazzInfo(), // return type
  "_0_RandomAccessFile", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__args[] = 
{
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__arg_file,
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RandomAccessFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RandomAccessFile::clazzInfo(), // return type
  "_1_RandomAccessFile", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__arg_dataReader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dataReader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__args[] = 
{
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__arg_file,
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__arg_mode,
  &RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__arg_dataReader,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RandomAccessFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RandomAccessFile::clazzInfo(), // return type
  "_2_RandomAccessFile", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_dataReader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dataReader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_dataWriter = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dataWriter", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__args[] = 
{
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_name,
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_mode,
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_dataReader,
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__arg_dataWriter,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RandomAccessFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RandomAccessFile::clazzInfo(), // return type
  "_3_RandomAccessFile", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__args[] = 
{
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__arg_name,
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__arg_mode,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RandomAccessFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RandomAccessFile::clazzInfo(), // return type
  "_4_RandomAccessFile", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__arg_name = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "name", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__arg_mode = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "mode", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__arg_dataReader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "dataReader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RDataReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__args[] = 
{
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__arg_name,
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__arg_mode,
  &RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__arg_dataReader,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RandomAccessFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RandomAccessFile::clazzInfo(), // return type
  "_5_RandomAccessFile", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_getFD__LRFileDescriptor__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_getFD__LRFileDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_getFD__LRFileDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFD", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileDescriptor::clazzInfo(), // return type
  "_6_getFD", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_getFD__LRFileDescriptor__args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_getFD__LRFileDescriptor__exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_getFD__LRFileDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_getFilePointer__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_getFilePointer__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_getFilePointer__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFilePointer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_7_getFilePointer", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_getFilePointer__J_args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_getFilePointer__J_exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_getFilePointer__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_length__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_length__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_length__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_8_length", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_length__J_args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_length__J_exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_length__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_setLength_J_V_arg_newLength = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "newLength", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_setLength_J_V_args[] = 
{
  &RandomAccessFile_methods_setLength_J_V_arg_newLength,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_setLength_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_setLength_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLength", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_setLength", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_setLength_J_V_args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_setLength_J_V_exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_setLength_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RandomAccessFile_methods_skipBytes_I_I_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RandomAccessFile_methods_skipBytes_I_I_args[] = 
{
  &RandomAccessFile_methods_skipBytes_I_I_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* RandomAccessFile_methods_skipBytes_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RandomAccessFile_method_skipBytes_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skipBytes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_a_skipBytes", // alternative name of method
  -1, // altlabelHashCode
  RandomAccessFile_methods_skipBytes_I_I_args, // the arguments
  0, //arguments count
  RandomAccessFile_methods_skipBytes_I_I_exceptions, // the declared exceptions
  RandomAccessFile_MetainfoWrapper::RandomAccessFile_method_skipBytes_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RandomAccessFile_methods[] = 
{
  &RandomAccessFile_method_GetClass__L_acdk_lang_RClass_,
  &RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile_,
  &RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString__LRRandomAccessFile_,
  &RandomAccessFile_method_RandomAccessFile_INLRFile_INLRString_INLRDataReader__LRRandomAccessFile_,
  &RandomAccessFile_method_RandomAccessFile_INLRString_INLRString_INLRDataReader_INLRDataWriter__LRRandomAccessFile_,
  &RandomAccessFile_method_RandomAccessFile_INLRString_INLRString__LRRandomAccessFile_,
  &RandomAccessFile_method_RandomAccessFile_INLRString_INLRString_INLRDataReader__LRRandomAccessFile_,
  &RandomAccessFile_method_getFD__LRFileDescriptor_,
  &RandomAccessFile_method_getFilePointer__J,
  &RandomAccessFile_method_length__J,
  &RandomAccessFile_method_setLength_J_V,
  &RandomAccessFile_method_skipBytes_I_I,
  0
};


struct RandomAccessFile_MetaInfoInitializer
{  RandomAccessFile_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RandomAccessFile::clazzInfo();
    ci->fields =  _RandomAccessFile_fields;
    ci->methods =  _RandomAccessFile_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RandomAccessFile_MetaInfoInitializer RandomAccessFile_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Reader_create_array(int length)
{
  return new ObjectArrayImpl<RReader>(length);
}

//static
::acdk::lang::RObject
Reader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Reader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Reader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_available__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Reader::available();
    else
      ret = This->available();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_closeReader__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Reader::closeReader();
    else
        This->closeReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_getCharReader_INLacdk_locale_RDecoder__LRCharReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Reader::getCharReader(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getCharReader(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_getCharReader__LRCharReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Reader::getCharReader();
    else
        ret = (::acdk::lang::RObject)This->getCharReader();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_getReaderStorage__LRStorage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Reader::getReaderStorage();
    else
        ret = (::acdk::lang::RObject)This->getReaderStorage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_mark_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Reader::mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->mark(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_markSupported__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Reader::markSupported();
    else
      ret = This->markSupported();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Reader::read();
    else
      ret = This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_read_INLRbyteArray_II_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Reader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_read_INLRbyteArray__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Reader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_read_INLRbyteArray_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Reader::read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->read(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_readAll__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Reader::readAll();
    else
        ret = (::acdk::lang::RObject)This->readAll();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_readAllAsString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Reader::readAllAsString();
    else
        ret = (::acdk::lang::RObject)This->readAllAsString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_ready__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Reader::ready();
    else
      ret = This->ready();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_reset__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    This->reset();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_seek_IJ_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
  ret = This->seek((SeekPos)::acdk::lang::dmi::castTo<int>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_skip_J_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
  ret = This->skip(::acdk::lang::dmi::castTo< jlong>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Reader_method_trans_INLRWriter__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Reader* This = dmi_cast<Reader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Reader::trans(::acdk::lang::dmi::castTo< RWriter>(args[0], dc));
    else
        This->trans(::acdk::lang::dmi::castTo< RWriter>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Reader_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_i_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Reader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_available__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_available__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_available__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "available", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_0_available", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_available__I_args, // the arguments
  0, //arguments count
  Reader_methods_available__I_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_available__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_closeReader__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_closeReader__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_closeReader__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "closeReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_closeReader", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_closeReader__V_args, // the arguments
  0, //arguments count
  Reader_methods_closeReader__V_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_closeReader__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_getCharReader_INLacdk_locale_RDecoder__LRCharReader__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_getCharReader_INLacdk_locale_RDecoder__LRCharReader__args[] = 
{
  &Reader_methods_getCharReader_INLacdk_locale_RDecoder__LRCharReader__arg_decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_getCharReader_INLacdk_locale_RDecoder__LRCharReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_getCharReader_INLacdk_locale_RDecoder__LRCharReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo(), // return type
  "_f_getCharReader", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_getCharReader_INLacdk_locale_RDecoder__LRCharReader__args, // the arguments
  0, //arguments count
  Reader_methods_getCharReader_INLacdk_locale_RDecoder__LRCharReader__exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_getCharReader_INLacdk_locale_RDecoder__LRCharReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_getCharReader__LRCharReader__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_getCharReader__LRCharReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_getCharReader__LRCharReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo(), // return type
  "_g_getCharReader", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_getCharReader__LRCharReader__args, // the arguments
  0, //arguments count
  Reader_methods_getCharReader__LRCharReader__exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_getCharReader__LRCharReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_getReaderStorage__LRStorage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_getReaderStorage__LRStorage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_getReaderStorage__LRStorage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReaderStorage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStorage::clazzInfo(), // return type
  "_e_getReaderStorage", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_getReaderStorage__LRStorage__args, // the arguments
  0, //arguments count
  Reader_methods_getReaderStorage__LRStorage__exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_getReaderStorage__LRStorage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_mark_I_V_arg_readAheadLimit = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "readAheadLimit", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_mark_I_V_args[] = 
{
  &Reader_methods_mark_I_V_arg_readAheadLimit,
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_mark_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_mark_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mark", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_mark", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_mark_I_V_args, // the arguments
  0, //arguments count
  Reader_methods_mark_I_V_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_mark_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_markSupported__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_markSupported__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_markSupported__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "markSupported", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_markSupported", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_markSupported__Z_args, // the arguments
  0, //arguments count
  Reader_methods_markSupported__Z_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_markSupported__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_read__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_read", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_read__I_args, // the arguments
  0, //arguments count
  Reader_methods_read__I_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_read_INLRbyteArray_II_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_read_INLRbyteArray_II_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_read_INLRbyteArray_II_I_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_read_INLRbyteArray_II_I_args[] = 
{
  &Reader_methods_read_INLRbyteArray_II_I_arg_buffer,
  &Reader_methods_read_INLRbyteArray_II_I_arg_offset,
  &Reader_methods_read_INLRbyteArray_II_I_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_read_INLRbyteArray_II_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_read_INLRbyteArray_II_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_read", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_read_INLRbyteArray_II_I_args, // the arguments
  0, //arguments count
  Reader_methods_read_INLRbyteArray_II_I_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_read_INLRbyteArray_II_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_read_INLRbyteArray__I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_read_INLRbyteArray__I_args[] = 
{
  &Reader_methods_read_INLRbyteArray__I_arg_buffer,
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_read_INLRbyteArray__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_read_INLRbyteArray__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_read", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_read_INLRbyteArray__I_args, // the arguments
  0, //arguments count
  Reader_methods_read_INLRbyteArray__I_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_read_INLRbyteArray__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_read_INLRbyteArray_I_I_arg_buffer = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "buffer", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_read_INLRbyteArray_I_I_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_read_INLRbyteArray_I_I_args[] = 
{
  &Reader_methods_read_INLRbyteArray_I_I_arg_buffer,
  &Reader_methods_read_INLRbyteArray_I_I_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_read_INLRbyteArray_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_read_INLRbyteArray_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_read", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_read_INLRbyteArray_I_I_args, // the arguments
  0, //arguments count
  Reader_methods_read_INLRbyteArray_I_I_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_read_INLRbyteArray_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_readAll__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_readAll__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_readAll__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readAll", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_c_readAll", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_readAll__LRbyteArray__args, // the arguments
  0, //arguments count
  Reader_methods_readAll__LRbyteArray__exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_readAll__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_readAllAsString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_readAllAsString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_readAllAsString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readAllAsString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_h_readAllAsString", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_readAllAsString__LRString__args, // the arguments
  0, //arguments count
  Reader_methods_readAllAsString__LRString__exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_readAllAsString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_ready__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_ready__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_ready__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ready", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_b_ready", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_ready__Z_args, // the arguments
  0, //arguments count
  Reader_methods_ready__Z_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_ready__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_reset__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_reset__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_reset__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "reset", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_reset", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_reset__V_args, // the arguments
  0, //arguments count
  Reader_methods_reset__V_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_reset__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_seek_IJ_J_arg_seekrel = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seekrel", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_seek_IJ_J_arg_seekpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "seekpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_seek_IJ_J_args[] = 
{
  &Reader_methods_seek_IJ_J_arg_seekrel,
  &Reader_methods_seek_IJ_J_arg_seekpos,
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_seek_IJ_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_seek_IJ_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "seek", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_2_seek", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_seek_IJ_J_args, // the arguments
  0, //arguments count
  Reader_methods_seek_IJ_J_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_seek_IJ_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_skip_J_J_arg_n = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "n", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_skip_J_J_args[] = 
{
  &Reader_methods_skip_J_J_arg_n,
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_skip_J_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_skip_J_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skip", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_3_skip", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_skip_J_J_args, // the arguments
  0, //arguments count
  Reader_methods_skip_J_J_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_skip_J_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Reader_methods_trans_INLRWriter__V_arg_out = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Reader_methods_trans_INLRWriter__V_args[] = 
{
  &Reader_methods_trans_INLRWriter__V_arg_out,
  0
};

::acdk::lang::dmi::ClazzInfo* Reader_methods_trans_INLRWriter__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Reader_method_trans_INLRWriter__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "trans", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_d_trans", // alternative name of method
  -1, // altlabelHashCode
  Reader_methods_trans_INLRWriter__V_args, // the arguments
  0, //arguments count
  Reader_methods_trans_INLRWriter__V_exceptions, // the declared exceptions
  Reader_MetainfoWrapper::Reader_method_trans_INLRWriter__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Reader_methods[] = 
{
  &Reader_method_GetClass__L_acdk_lang_RClass_,
  &Reader_method_available__I,
  &Reader_method_closeReader__V,
  &Reader_method_getCharReader_INLacdk_locale_RDecoder__LRCharReader_,
  &Reader_method_getCharReader__LRCharReader_,
  &Reader_method_getReaderStorage__LRStorage_,
  &Reader_method_mark_I_V,
  &Reader_method_markSupported__Z,
  &Reader_method_read__I,
  &Reader_method_read_INLRbyteArray_II_I,
  &Reader_method_read_INLRbyteArray__I,
  &Reader_method_read_INLRbyteArray_I_I,
  &Reader_method_readAll__LRbyteArray_,
  &Reader_method_readAllAsString__LRString_,
  &Reader_method_ready__Z,
  &Reader_method_reset__V,
  &Reader_method_seek_IJ_J,
  &Reader_method_skip_J_J,
  &Reader_method_trans_INLRWriter__V,
  0
};


struct Reader_MetaInfoInitializer
{  Reader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Reader::clazzInfo();
    ci->fields =  _Reader_fields;
    ci->methods =  _Reader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Reader_MetaInfoInitializer Reader_MetaInfoInitializer_staticinstance__;


struct Reader_clazzInfo_ClazzAttributesResInitializer16
{
  Reader_clazzInfo_ClazzAttributesResInitializer16()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)&Reader_methods_seek_IJ_J_arg_seekrel, "__enumArgInfo", ::acdk::lang::dmi::ClazzAttributeResValue::makeFunctionPtrRes((void*)SeekPosMetaInf::GetEnumInfo()));
  }
};

Reader_clazzInfo_ClazzAttributesResInitializer16 Reader_clazzInfo_ClazzAttributesResInitializer16_instance;



} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
RessourceFileImpl_create_array(int length)
{
  return new ObjectArrayImpl<RRessourceFileImpl>(length);
}

//static
::acdk::lang::RObject
RessourceFileImpl_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RessourceFileImpl_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileImpl_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RessourceFileImpl::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileImpl_method_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RessourceFileImpl(::acdk::lang::dmi::castTo< RRessourceFileSystem>(args[0], dc), ::acdk::lang::dmi::castTo< RRessourceFile>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RessourceFileImpl_fields__fh_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RessourceFileImpl* This = dmi_cast<RessourceFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fh, flags);
    else
      This->_fh = ::acdk::lang::dmi::castTo< RRessourceFile>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RessourceFileImpl_fields__fs_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RessourceFileImpl* This = dmi_cast<RessourceFileImpl>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fs, flags);
    else
      This->_fs = ::acdk::lang::dmi::castTo< RRessourceFileSystem>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RessourceFileImpl_fields__fh = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fh", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceFile::clazzInfo(),
  RessourceFileImpl_MetainfoWrapper::RessourceFileImpl_fields__fh_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RessourceFileImpl_fields__fs = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fs", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceFileSystem::clazzInfo(),
  RessourceFileImpl_MetainfoWrapper::RessourceFileImpl_fields__fs_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RessourceFileImpl_fields[] = 
{
  &RessourceFileImpl_fields__fh,
  &RessourceFileImpl_fields__fs,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileImpl_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileImpl_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileImpl_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileImpl_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RessourceFileImpl_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RessourceFileImpl_MetainfoWrapper::RessourceFileImpl_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFileImpl_methods_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__arg_fs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceFileSystem::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFileImpl_methods_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__arg_fh = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fh", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceFile::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileImpl_methods_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__args[] = 
{
  &RessourceFileImpl_methods_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__arg_fs,
  &RessourceFileImpl_methods_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__arg_fh,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileImpl_methods_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileImpl_method_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RessourceFileImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RessourceFileImpl::clazzInfo(), // return type
  "_0_RessourceFileImpl", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileImpl_methods_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__args, // the arguments
  0, //arguments count
  RessourceFileImpl_methods_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__exceptions, // the declared exceptions
  RessourceFileImpl_MetainfoWrapper::RessourceFileImpl_method_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RessourceFileImpl_methods[] = 
{
  &RessourceFileImpl_method_GetClass__L_acdk_lang_RClass_,
  &RessourceFileImpl_method_RessourceFileImpl_INLRRessourceFileSystem_INLRRessourceFile__LRRessourceFileImpl_,
  0
};


struct RessourceFileImpl_MetaInfoInitializer
{  RessourceFileImpl_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RessourceFileImpl::clazzInfo();
    ci->fields =  _RessourceFileImpl_fields;
    ci->methods =  _RessourceFileImpl_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RessourceFileImpl_MetaInfoInitializer RessourceFileImpl_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
RessourceFile_create_array(int length)
{
  return new ObjectArrayImpl<RRessourceFile>(length);
}

//static
::acdk::lang::RObject
RessourceFile_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RessourceFile_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFile_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RessourceFile::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFile_method_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RessourceFile(::acdk::lang::dmi::castTo< RRessourceDir>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc), ::acdk::lang::dmi::castTo< RbyteArray>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFile_method_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RessourceFile(::acdk::lang::dmi::castTo< RRessourceDir>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFile_method_content__LRbyteArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFile* This = dmi_cast<RessourceFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceFile::content();
    else
        ret = (::acdk::lang::RObject)This->content();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFile_method_getFqName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFile* This = dmi_cast<RessourceFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceFile::getFqName();
    else
        ret = (::acdk::lang::RObject)This->getFqName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFile_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFile* This = dmi_cast<RessourceFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceFile::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFile_method_getParent__LRRessourceDir__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFile* This = dmi_cast<RessourceFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceFile::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFile_method_length__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFile* This = dmi_cast<RessourceFile>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RessourceFile::length();
    else
      ret = This->length();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RessourceFile_fields__cont_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RessourceFile* This = dmi_cast<RessourceFile>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_cont, flags);
    else
      This->_cont = ::acdk::lang::dmi::castTo< RbyteArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RessourceFile_fields__fname_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RessourceFile* This = dmi_cast<RessourceFile>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_fname, flags);
    else
      This->_fname = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  RessourceFile_fields__pdir_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    RessourceFile* This = dmi_cast<RessourceFile>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_pdir, flags);
    else
      This->_pdir = ::acdk::lang::dmi::castTo< RRessourceDir>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo RessourceFile_fields__cont = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_cont", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(),
  RessourceFile_MetainfoWrapper::RessourceFile_fields__cont_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RessourceFile_fields__fname = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_fname", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  RessourceFile_MetainfoWrapper::RessourceFile_fields__fname_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo RessourceFile_fields__pdir = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_pdir", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceDir::clazzInfo(),
  RessourceFile_MetainfoWrapper::RessourceFile_fields__pdir_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _RessourceFile_fields[] = 
{
  &RessourceFile_fields__cont,
  &RessourceFile_fields__fname,
  &RessourceFile_fields__pdir,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFile_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFile_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RessourceFile_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RessourceFile_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RessourceFile_MetainfoWrapper::RessourceFile_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__arg_pdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceDir::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__arg_cont = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "cont", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__args[] = 
{
  &RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__arg_pdir,
  &RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__arg_fname,
  &RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__arg_cont,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFile_method_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RessourceFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RessourceFile::clazzInfo(), // return type
  "_0_RessourceFile", // alternative name of method
  -1, // altlabelHashCode
  RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__args, // the arguments
  0, //arguments count
  RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__exceptions, // the declared exceptions
  RessourceFile_MetainfoWrapper::RessourceFile_method_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__arg_pdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceDir::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__args[] = 
{
  &RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__arg_pdir,
  &RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFile_method_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "RessourceFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RessourceFile::clazzInfo(), // return type
  "_1_RessourceFile", // alternative name of method
  -1, // altlabelHashCode
  RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__args, // the arguments
  0, //arguments count
  RessourceFile_methods_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__exceptions, // the declared exceptions
  RessourceFile_MetainfoWrapper::RessourceFile_method_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFile_methods_content__LRbyteArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile_methods_content__LRbyteArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFile_method_content__LRbyteArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "content", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo(), // return type
  "_5_content", // alternative name of method
  -1, // altlabelHashCode
  RessourceFile_methods_content__LRbyteArray__args, // the arguments
  0, //arguments count
  RessourceFile_methods_content__LRbyteArray__exceptions, // the declared exceptions
  RessourceFile_MetainfoWrapper::RessourceFile_method_content__LRbyteArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFile_methods_getFqName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile_methods_getFqName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFile_method_getFqName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFqName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getFqName", // alternative name of method
  -1, // altlabelHashCode
  RessourceFile_methods_getFqName__LRString__args, // the arguments
  0, //arguments count
  RessourceFile_methods_getFqName__LRString__exceptions, // the declared exceptions
  RessourceFile_MetainfoWrapper::RessourceFile_method_getFqName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFile_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFile_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getName", // alternative name of method
  -1, // altlabelHashCode
  RessourceFile_methods_getName__LRString__args, // the arguments
  0, //arguments count
  RessourceFile_methods_getName__LRString__exceptions, // the declared exceptions
  RessourceFile_MetainfoWrapper::RessourceFile_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFile_methods_getParent__LRRessourceDir__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile_methods_getParent__LRRessourceDir__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFile_method_getParent__LRRessourceDir_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceDir::clazzInfo(), // return type
  "_4_getParent", // alternative name of method
  -1, // altlabelHashCode
  RessourceFile_methods_getParent__LRRessourceDir__args, // the arguments
  0, //arguments count
  RessourceFile_methods_getParent__LRRessourceDir__exceptions, // the declared exceptions
  RessourceFile_MetainfoWrapper::RessourceFile_method_getParent__LRRessourceDir__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFile_methods_length__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFile_methods_length__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFile_method_length__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "length", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_length", // alternative name of method
  -1, // altlabelHashCode
  RessourceFile_methods_length__I_args, // the arguments
  0, //arguments count
  RessourceFile_methods_length__I_exceptions, // the declared exceptions
  RessourceFile_MetainfoWrapper::RessourceFile_method_length__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RessourceFile_methods[] = 
{
  &RessourceFile_method_GetClass__L_acdk_lang_RClass_,
  &RessourceFile_method_RessourceFile_INLRRessourceDir_INLRString_INLRbyteArray__LRRessourceFile_,
  &RessourceFile_method_RessourceFile_INLRRessourceDir_INLRString__LRRessourceFile_,
  &RessourceFile_method_content__LRbyteArray_,
  &RessourceFile_method_getFqName__LRString_,
  &RessourceFile_method_getName__LRString_,
  &RessourceFile_method_getParent__LRRessourceDir_,
  &RessourceFile_method_length__I,
  0
};


struct RessourceFile_MetaInfoInitializer
{  RessourceFile_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RessourceFile::clazzInfo();
    ci->fields =  _RessourceFile_fields;
    ci->methods =  _RessourceFile_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RessourceFile_MetaInfoInitializer RessourceFile_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
RessourceDir_create_array(int length)
{
  return new ObjectArrayImpl<RRessourceDir>(length);
}

//static
::acdk::lang::RObject
RessourceDir_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RessourceDir_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceDir_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RessourceDir::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceDir_method_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RessourceDir(::acdk::lang::dmi::castTo< RRessourceDir>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceDir_method_createDir_INLRString__LRRessourceDir__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceDir* This = dmi_cast<RessourceDir>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceDir::createDir(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createDir(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceDir_method_createFile_INLRString_INLRbyteArray__LRRessourceFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceDir* This = dmi_cast<RessourceDir>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceDir::createFile(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RbyteArray>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->createFile(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RbyteArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceDir_method_createFile_INLRString__LRRessourceFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceDir* This = dmi_cast<RessourceDir>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceDir::createFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->createFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceDir_method_findDir_INLRString__LRRessourceDir__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceDir* This = dmi_cast<RessourceDir>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceDir::findDir(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findDir(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceDir_method_findFile_INLRString__LRRessourceFile__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceDir* This = dmi_cast<RessourceDir>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceDir::findFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->findFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _RessourceDir_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceDir_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceDir_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceDir_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_6_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RessourceDir_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RessourceDir_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RessourceDir_MetainfoWrapper::RessourceDir_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceDir_methods_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__arg_pdir = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "pdir", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceDir::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceDir_methods_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceDir_methods_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__args[] = 
{
  &RessourceDir_methods_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__arg_pdir,
  &RessourceDir_methods_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceDir_methods_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceDir_method_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RessourceDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RessourceDir::clazzInfo(), // return type
  "_0_RessourceDir", // alternative name of method
  -1, // altlabelHashCode
  RessourceDir_methods_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__args, // the arguments
  0, //arguments count
  RessourceDir_methods_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__exceptions, // the declared exceptions
  RessourceDir_MetainfoWrapper::RessourceDir_method_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceDir_methods_createDir_INLRString__LRRessourceDir__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceDir_methods_createDir_INLRString__LRRessourceDir__args[] = 
{
  &RessourceDir_methods_createDir_INLRString__LRRessourceDir__arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceDir_methods_createDir_INLRString__LRRessourceDir__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceDir_method_createDir_INLRString__LRRessourceDir_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceDir::clazzInfo(), // return type
  "_3_createDir", // alternative name of method
  -1, // altlabelHashCode
  RessourceDir_methods_createDir_INLRString__LRRessourceDir__args, // the arguments
  0, //arguments count
  RessourceDir_methods_createDir_INLRString__LRRessourceDir__exceptions, // the declared exceptions
  RessourceDir_MetainfoWrapper::RessourceDir_method_createDir_INLRString__LRRessourceDir__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceDir_methods_createFile_INLRString_INLRbyteArray__LRRessourceFile__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceDir_methods_createFile_INLRString_INLRbyteArray__LRRessourceFile__arg_ba = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "ba", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceDir_methods_createFile_INLRString_INLRbyteArray__LRRessourceFile__args[] = 
{
  &RessourceDir_methods_createFile_INLRString_INLRbyteArray__LRRessourceFile__arg_fname,
  &RessourceDir_methods_createFile_INLRString_INLRbyteArray__LRRessourceFile__arg_ba,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceDir_methods_createFile_INLRString_INLRbyteArray__LRRessourceFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceDir_method_createFile_INLRString_INLRbyteArray__LRRessourceFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "createFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceFile::clazzInfo(), // return type
  "_4_createFile", // alternative name of method
  -1, // altlabelHashCode
  RessourceDir_methods_createFile_INLRString_INLRbyteArray__LRRessourceFile__args, // the arguments
  0, //arguments count
  RessourceDir_methods_createFile_INLRString_INLRbyteArray__LRRessourceFile__exceptions, // the declared exceptions
  RessourceDir_MetainfoWrapper::RessourceDir_method_createFile_INLRString_INLRbyteArray__LRRessourceFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceDir_methods_createFile_INLRString__LRRessourceFile__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceDir_methods_createFile_INLRString__LRRessourceFile__args[] = 
{
  &RessourceDir_methods_createFile_INLRString__LRRessourceFile__arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceDir_methods_createFile_INLRString__LRRessourceFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceDir_method_createFile_INLRString__LRRessourceFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "createFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceFile::clazzInfo(), // return type
  "_5_createFile", // alternative name of method
  -1, // altlabelHashCode
  RessourceDir_methods_createFile_INLRString__LRRessourceFile__args, // the arguments
  0, //arguments count
  RessourceDir_methods_createFile_INLRString__LRRessourceFile__exceptions, // the declared exceptions
  RessourceDir_MetainfoWrapper::RessourceDir_method_createFile_INLRString__LRRessourceFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceDir_methods_findDir_INLRString__LRRessourceDir__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceDir_methods_findDir_INLRString__LRRessourceDir__args[] = 
{
  &RessourceDir_methods_findDir_INLRString__LRRessourceDir__arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceDir_methods_findDir_INLRString__LRRessourceDir__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceDir_method_findDir_INLRString__LRRessourceDir_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findDir", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceDir::clazzInfo(), // return type
  "_1_findDir", // alternative name of method
  -1, // altlabelHashCode
  RessourceDir_methods_findDir_INLRString__LRRessourceDir__args, // the arguments
  0, //arguments count
  RessourceDir_methods_findDir_INLRString__LRRessourceDir__exceptions, // the declared exceptions
  RessourceDir_MetainfoWrapper::RessourceDir_method_findDir_INLRString__LRRessourceDir__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceDir_methods_findFile_INLRString__LRRessourceFile__arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceDir_methods_findFile_INLRString__LRRessourceFile__args[] = 
{
  &RessourceDir_methods_findFile_INLRString__LRRessourceFile__arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceDir_methods_findFile_INLRString__LRRessourceFile__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceDir_method_findFile_INLRString__LRRessourceFile_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "findFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceFile::clazzInfo(), // return type
  "_2_findFile", // alternative name of method
  -1, // altlabelHashCode
  RessourceDir_methods_findFile_INLRString__LRRessourceFile__args, // the arguments
  0, //arguments count
  RessourceDir_methods_findFile_INLRString__LRRessourceFile__exceptions, // the declared exceptions
  RessourceDir_MetainfoWrapper::RessourceDir_method_findFile_INLRString__LRRessourceFile__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RessourceDir_methods[] = 
{
  &RessourceDir_method_GetClass__L_acdk_lang_RClass_,
  &RessourceDir_method_RessourceDir_INLRRessourceDir_INLRString__LRRessourceDir_,
  &RessourceDir_method_createDir_INLRString__LRRessourceDir_,
  &RessourceDir_method_createFile_INLRString_INLRbyteArray__LRRessourceFile_,
  &RessourceDir_method_createFile_INLRString__LRRessourceFile_,
  &RessourceDir_method_findDir_INLRString__LRRessourceDir_,
  &RessourceDir_method_findFile_INLRString__LRRessourceFile_,
  0
};


struct RessourceDir_MetaInfoInitializer
{  RessourceDir_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RessourceDir::clazzInfo();
    ci->fields =  _RessourceDir_fields;
    ci->methods =  _RessourceDir_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RessourceDir_MetaInfoInitializer RessourceDir_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
RessourceFileSystem_create_array(int length)
{
  return new ObjectArrayImpl<RRessourceFileSystem>(length);
}

//static
::acdk::lang::RObject
RessourceFileSystem_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RessourceFileSystem_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystem_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RessourceFileSystem::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystem_method_RessourceFileSystem__LRRessourceFileSystem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new RessourceFileSystem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystem_method_getFileImpl_INLRString__LRFileImpl__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFileSystem* This = dmi_cast<RessourceFileSystem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceFileSystem::getFileImpl(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getFileImpl(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystem_method_ownsFile_INLRString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFileSystem* This = dmi_cast<RessourceFileSystem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RessourceFileSystem::ownsFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->ownsFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystem_method_ressourceFileSystem__LRRessourceFileSystem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RessourceFileSystem::ressourceFileSystem();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystem_method_root__LRRessourceDir__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFileSystem* This = dmi_cast<RessourceFileSystem>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceFileSystem::root();
    else
        ret = (::acdk::lang::RObject)This->root();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _RessourceFileSystem_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystem_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystem_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystem_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystem_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RessourceFileSystem_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RessourceFileSystem_MetainfoWrapper::RessourceFileSystem_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystem_methods_RessourceFileSystem__LRRessourceFileSystem__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystem_methods_RessourceFileSystem__LRRessourceFileSystem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystem_method_RessourceFileSystem__LRRessourceFileSystem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "RessourceFileSystem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RessourceFileSystem::clazzInfo(), // return type
  "_0_RessourceFileSystem", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystem_methods_RessourceFileSystem__LRRessourceFileSystem__args, // the arguments
  0, //arguments count
  RessourceFileSystem_methods_RessourceFileSystem__LRRessourceFileSystem__exceptions, // the declared exceptions
  RessourceFileSystem_MetainfoWrapper::RessourceFileSystem_method_RessourceFileSystem__LRRessourceFileSystem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFileSystem_methods_getFileImpl_INLRString__LRFileImpl__arg_fqpath = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fqpath", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystem_methods_getFileImpl_INLRString__LRFileImpl__args[] = 
{
  &RessourceFileSystem_methods_getFileImpl_INLRString__LRFileImpl__arg_fqpath,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystem_methods_getFileImpl_INLRString__LRFileImpl__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystem_method_getFileImpl_INLRString__LRFileImpl_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFileImpl", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileImpl::clazzInfo(), // return type
  "_2_getFileImpl", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystem_methods_getFileImpl_INLRString__LRFileImpl__args, // the arguments
  0, //arguments count
  RessourceFileSystem_methods_getFileImpl_INLRString__LRFileImpl__exceptions, // the declared exceptions
  RessourceFileSystem_MetainfoWrapper::RessourceFileSystem_method_getFileImpl_INLRString__LRFileImpl__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFileSystem_methods_ownsFile_INLRString__Z_arg_fname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "fname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystem_methods_ownsFile_INLRString__Z_args[] = 
{
  &RessourceFileSystem_methods_ownsFile_INLRString__Z_arg_fname,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystem_methods_ownsFile_INLRString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystem_method_ownsFile_INLRString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ownsFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_ownsFile", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystem_methods_ownsFile_INLRString__Z_args, // the arguments
  0, //arguments count
  RessourceFileSystem_methods_ownsFile_INLRString__Z_exceptions, // the declared exceptions
  RessourceFileSystem_MetainfoWrapper::RessourceFileSystem_method_ownsFile_INLRString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystem_methods_ressourceFileSystem__LRRessourceFileSystem__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystem_methods_ressourceFileSystem__LRRessourceFileSystem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystem_method_ressourceFileSystem__LRRessourceFileSystem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ressourceFileSystem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceFileSystem::clazzInfo(), // return type
  "_3_ressourceFileSystem", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystem_methods_ressourceFileSystem__LRRessourceFileSystem__args, // the arguments
  0, //arguments count
  RessourceFileSystem_methods_ressourceFileSystem__LRRessourceFileSystem__exceptions, // the declared exceptions
  RessourceFileSystem_MetainfoWrapper::RessourceFileSystem_method_ressourceFileSystem__LRRessourceFileSystem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystem_methods_root__LRRessourceDir__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystem_methods_root__LRRessourceDir__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystem_method_root__LRRessourceDir_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "root", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RRessourceDir::clazzInfo(), // return type
  "_4_root", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystem_methods_root__LRRessourceDir__args, // the arguments
  0, //arguments count
  RessourceFileSystem_methods_root__LRRessourceDir__exceptions, // the declared exceptions
  RessourceFileSystem_MetainfoWrapper::RessourceFileSystem_method_root__LRRessourceDir__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RessourceFileSystem_methods[] = 
{
  &RessourceFileSystem_method_GetClass__L_acdk_lang_RClass_,
  &RessourceFileSystem_method_RessourceFileSystem__LRRessourceFileSystem_,
  &RessourceFileSystem_method_getFileImpl_INLRString__LRFileImpl_,
  &RessourceFileSystem_method_ownsFile_INLRString__Z,
  &RessourceFileSystem_method_ressourceFileSystem__LRRessourceFileSystem_,
  &RessourceFileSystem_method_root__LRRessourceDir_,
  0
};


struct RessourceFileSystem_MetaInfoInitializer
{  RessourceFileSystem_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RessourceFileSystem::clazzInfo();
    ci->fields =  _RessourceFileSystem_fields;
    ci->methods =  _RessourceFileSystem_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RessourceFileSystem_MetaInfoInitializer RessourceFileSystem_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
RessourceFileSystemFactory_create_array(int length)
{
  return new ObjectArrayImpl<RRessourceFileSystemFactory>(length);
}

//static
::acdk::lang::RObject
RessourceFileSystemFactory_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class RessourceFileSystemFactory_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystemFactory_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)RessourceFileSystemFactory::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystemFactory_method_create_INLRString__LRFileSystem__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFileSystemFactory* This = dmi_cast<RessourceFileSystemFactory>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->RessourceFileSystemFactory::create(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->create(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystemFactory_method_handleFile_INLRString__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFileSystemFactory* This = dmi_cast<RessourceFileSystemFactory>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RessourceFileSystemFactory::handleFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
      ret = This->handleFile(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  RessourceFileSystemFactory_method_isRootFileSystem__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    RessourceFileSystemFactory* This = dmi_cast<RessourceFileSystemFactory>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->RessourceFileSystemFactory::isRootFileSystem();
    else
      ret = This->isRootFileSystem();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _RessourceFileSystemFactory_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystemFactory_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystemFactory_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystemFactory_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystemFactory_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  RessourceFileSystemFactory_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  RessourceFileSystemFactory_MetainfoWrapper::RessourceFileSystemFactory_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFileSystemFactory_methods_create_INLRString__LRFileSystem__arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystemFactory_methods_create_INLRString__LRFileSystem__args[] = 
{
  &RessourceFileSystemFactory_methods_create_INLRString__LRFileSystem__arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystemFactory_methods_create_INLRString__LRFileSystem__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystemFactory_method_create_INLRString__LRFileSystem_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "create", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RFileSystem::clazzInfo(), // return type
  "_2_create", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystemFactory_methods_create_INLRString__LRFileSystem__args, // the arguments
  0, //arguments count
  RessourceFileSystemFactory_methods_create_INLRString__LRFileSystem__exceptions, // the declared exceptions
  RessourceFileSystemFactory_MetainfoWrapper::RessourceFileSystemFactory_method_create_INLRString__LRFileSystem__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo RessourceFileSystemFactory_methods_handleFile_INLRString__I_arg_file = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "file", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystemFactory_methods_handleFile_INLRString__I_args[] = 
{
  &RessourceFileSystemFactory_methods_handleFile_INLRString__I_arg_file,
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystemFactory_methods_handleFile_INLRString__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystemFactory_method_handleFile_INLRString__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "handleFile", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_handleFile", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystemFactory_methods_handleFile_INLRString__I_args, // the arguments
  0, //arguments count
  RessourceFileSystemFactory_methods_handleFile_INLRString__I_exceptions, // the declared exceptions
  RessourceFileSystemFactory_MetainfoWrapper::RessourceFileSystemFactory_method_handleFile_INLRString__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* RessourceFileSystemFactory_methods_isRootFileSystem__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* RessourceFileSystemFactory_methods_isRootFileSystem__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo RessourceFileSystemFactory_method_isRootFileSystem__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isRootFileSystem", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_0_isRootFileSystem", // alternative name of method
  -1, // altlabelHashCode
  RessourceFileSystemFactory_methods_isRootFileSystem__Z_args, // the arguments
  0, //arguments count
  RessourceFileSystemFactory_methods_isRootFileSystem__Z_exceptions, // the declared exceptions
  RessourceFileSystemFactory_MetainfoWrapper::RessourceFileSystemFactory_method_isRootFileSystem__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _RessourceFileSystemFactory_methods[] = 
{
  &RessourceFileSystemFactory_method_GetClass__L_acdk_lang_RClass_,
  &RessourceFileSystemFactory_method_create_INLRString__LRFileSystem_,
  &RessourceFileSystemFactory_method_handleFile_INLRString__I,
  &RessourceFileSystemFactory_method_isRootFileSystem__Z,
  0
};


struct RessourceFileSystemFactory_MetaInfoInitializer
{  RessourceFileSystemFactory_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = RessourceFileSystemFactory::clazzInfo();
    ci->fields =  _RessourceFileSystemFactory_fields;
    ci->methods =  _RessourceFileSystemFactory_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
RessourceFileSystemFactory_MetaInfoInitializer RessourceFileSystemFactory_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
Serializable_create_array(int length)
{
  return new ObjectArrayImpl<RSerializable>(length);
}

//static
::acdk::lang::RObject
Serializable_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Serializable_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Serializable_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Serializable::GetClass();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Serializable_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Serializable_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Serializable_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Serializable_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_0_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Serializable_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Serializable_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Serializable_MetainfoWrapper::Serializable_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Serializable_methods[] = 
{
  &Serializable_method_GetClass__L_acdk_lang_RClass_,
  0
};


struct Serializable_MetaInfoInitializer
{  Serializable_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Serializable::clazzInfo();
    ci->fields =  _Serializable_fields;
    ci->methods =  _Serializable_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Serializable_MetaInfoInitializer Serializable_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
SerializedFieldDescriptor_create_array(int length)
{
  return new ObjectArrayImpl<RSerializedFieldDescriptor>(length);
}

//static
::acdk::lang::RObject
SerializedFieldDescriptor_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SerializedFieldDescriptor_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SerializedFieldDescriptor::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SerializedFieldDescriptor(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc), ::acdk::lang::dmi::castTo< bool>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SerializedFieldDescriptor(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RClass>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_compareTo_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SerializedFieldDescriptor::compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_compareTo_INLRSerializedFieldDescriptor__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SerializedFieldDescriptor::compareTo(::acdk::lang::dmi::castTo< RSerializedFieldDescriptor>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RSerializedFieldDescriptor>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SerializedFieldDescriptor::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_getType__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SerializedFieldDescriptor::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_getTypeCode__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SerializedFieldDescriptor::getTypeCode();
    else
      ret = This->getTypeCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_getTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SerializedFieldDescriptor::getTypeString();
    else
        ret = (::acdk::lang::RObject)This->getTypeString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_isPrimitive__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SerializedFieldDescriptor::isPrimitive();
    else
      ret = This->isPrimitive();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_isUnshared__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SerializedFieldDescriptor::isUnshared();
    else
      ret = This->isUnshared();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedFieldDescriptor_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SerializedFieldDescriptor::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SerializedFieldDescriptor_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SerializedFieldDescriptor_fields_type_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->type, flags);
    else
      This->type = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SerializedFieldDescriptor_fields_typeClass_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->typeClass, flags);
    else
      This->typeClass = ::acdk::lang::dmi::castTo< RClass>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SerializedFieldDescriptor_fields_unshared_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SerializedFieldDescriptor* This = dmi_cast<SerializedFieldDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->unshared, flags);
    else
      This->unshared = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SerializedFieldDescriptor_fields_name = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SerializedFieldDescriptor_fields_type = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "type", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_fields_type_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SerializedFieldDescriptor_fields_typeClass = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "typeClass", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(),
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_fields_typeClass_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SerializedFieldDescriptor_fields_unshared = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "unshared", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_fields_unshared_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SerializedFieldDescriptor_fields[] = 
{
  &SerializedFieldDescriptor_fields_name,
  &SerializedFieldDescriptor_fields_type,
  &SerializedFieldDescriptor_fields_typeClass,
  &SerializedFieldDescriptor_fields_unshared,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_b_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__arg_nam = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nam", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__arg_unshar = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "unshar", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__args[] = 
{
  &SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__arg_nam,
  &SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__arg_cls,
  &SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__arg_unshar,
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SerializedFieldDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SerializedFieldDescriptor::clazzInfo(), // return type
  "_0_SerializedFieldDescriptor", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__arg_nam = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "nam", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__args[] = 
{
  &SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__arg_nam,
  &SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "SerializedFieldDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SerializedFieldDescriptor::clazzInfo(), // return type
  "_1_SerializedFieldDescriptor", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedFieldDescriptor_methods_compareTo_INLRObject__I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_compareTo_INLRObject__I_args[] = 
{
  &SerializedFieldDescriptor_methods_compareTo_INLRObject__I_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_compareTo_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_compareTo_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_compareTo", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_compareTo_INLRObject__I_args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_compareTo_INLRObject__I_exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_compareTo_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedFieldDescriptor_methods_compareTo_INLRSerializedFieldDescriptor__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSerializedFieldDescriptor::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_compareTo_INLRSerializedFieldDescriptor__I_args[] = 
{
  &SerializedFieldDescriptor_methods_compareTo_INLRSerializedFieldDescriptor__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_compareTo_INLRSerializedFieldDescriptor__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_compareTo_INLRSerializedFieldDescriptor__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_compareTo", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_compareTo_INLRSerializedFieldDescriptor__I_args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_compareTo_INLRSerializedFieldDescriptor__I_exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_compareTo_INLRSerializedFieldDescriptor__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_getName", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_getName__LRString__args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_getName__LRString__exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_getType__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_getType__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_getType__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_5_getType", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_getType__LRClass__args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_getType__LRClass__exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_getType__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_getTypeCode__C_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_getTypeCode__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_getTypeCode__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_6_getTypeCode", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_getTypeCode__C_args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_getTypeCode__C_exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_getTypeCode__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_getTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_getTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_getTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_7_getTypeString", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_getTypeString__LRString__args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_getTypeString__LRString__exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_getTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_isPrimitive__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_isPrimitive__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_isPrimitive__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isPrimitive", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_isPrimitive", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_isPrimitive__Z_args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_isPrimitive__Z_exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_isPrimitive__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_isUnshared__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_isUnshared__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_isUnshared__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isUnshared", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_9_isUnshared", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_isUnshared__Z_args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_isUnshared__Z_exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_isUnshared__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedFieldDescriptor_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedFieldDescriptor_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedFieldDescriptor_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_toString", // alternative name of method
  -1, // altlabelHashCode
  SerializedFieldDescriptor_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SerializedFieldDescriptor_methods_toString__LRString__exceptions, // the declared exceptions
  SerializedFieldDescriptor_MetainfoWrapper::SerializedFieldDescriptor_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SerializedFieldDescriptor_methods[] = 
{
  &SerializedFieldDescriptor_method_GetClass__L_acdk_lang_RClass_,
  &SerializedFieldDescriptor_method_SerializedFieldDescriptor_INLRString_INLRClass_Z_LRSerializedFieldDescriptor_,
  &SerializedFieldDescriptor_method_SerializedFieldDescriptor_INLRString_INLRClass__LRSerializedFieldDescriptor_,
  &SerializedFieldDescriptor_method_compareTo_INLRObject__I,
  &SerializedFieldDescriptor_method_compareTo_INLRSerializedFieldDescriptor__I,
  &SerializedFieldDescriptor_method_getName__LRString_,
  &SerializedFieldDescriptor_method_getType__LRClass_,
  &SerializedFieldDescriptor_method_getTypeCode__C,
  &SerializedFieldDescriptor_method_getTypeString__LRString_,
  &SerializedFieldDescriptor_method_isPrimitive__Z,
  &SerializedFieldDescriptor_method_isUnshared__Z,
  &SerializedFieldDescriptor_method_toString__LRString_,
  0
};


struct SerializedFieldDescriptor_MetaInfoInitializer
{  SerializedFieldDescriptor_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SerializedFieldDescriptor::clazzInfo();
    ci->fields =  _SerializedFieldDescriptor_fields;
    ci->methods =  _SerializedFieldDescriptor_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SerializedFieldDescriptor_MetaInfoInitializer SerializedFieldDescriptor_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
SerializedObjectDescriptor_create_array(int length)
{
  return new ObjectArrayImpl<RSerializedObjectDescriptor>(length);
}

//static
::acdk::lang::RObject
SerializedObjectDescriptor_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SerializedObjectDescriptor_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedObjectDescriptor_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SerializedObjectDescriptor::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedObjectDescriptor_method_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SerializedObjectDescriptor(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedObjectDescriptor_method_forClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SerializedObjectDescriptor::forClass();
    else
        ret = (::acdk::lang::RObject)This->forClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedObjectDescriptor_method_getFields__LRSerializedFieldDescriptorArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SerializedObjectDescriptor::getFields();
    else
        ret = (::acdk::lang::RObject)This->getFields();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedObjectDescriptor_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SerializedObjectDescriptor::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedObjectDescriptor_method_getSerialVersionUID__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->SerializedObjectDescriptor::getSerialVersionUID();
    else
      ret = This->getSerialVersionUID();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedObjectDescriptor_method_lookup_INLRClass__LRSerializedObjectDescriptor__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SerializedObjectDescriptor::lookup(::acdk::lang::dmi::castTo< RClass>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SerializedObjectDescriptor_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->SerializedObjectDescriptor::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SerializedObjectDescriptor_fields__class_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_class, flags);
    else
      This->_class = ::acdk::lang::dmi::castTo< RClass>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SerializedObjectDescriptor_fields__serializedVersion_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_serializedVersion, flags);
    else
      This->_serializedVersion = ::acdk::lang::dmi::castTo< jlong>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SerializedObjectDescriptor_fields_fields_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->fields, flags);
    else
      This->fields = ::acdk::lang::dmi::castTo< RSerializedFieldDescriptorArray>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SerializedObjectDescriptor_fields_name_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SerializedObjectDescriptor* This = dmi_cast<SerializedObjectDescriptor>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->name, flags);
    else
      This->name = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SerializedObjectDescriptor_fields__class = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo | 0x200000,
  0, //AttributesRes
  "_class", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(),
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_fields__class_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SerializedObjectDescriptor_fields__serializedVersion = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_serializedVersion", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(),
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_fields__serializedVersion_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SerializedObjectDescriptor_fields_fields = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "fields", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSerializedFieldDescriptorArray::clazzInfo(),
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_fields_fields_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SerializedObjectDescriptor_fields_name = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "name", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_fields_name_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SerializedObjectDescriptor_fields[] = 
{
  &SerializedObjectDescriptor_fields__class,
  &SerializedObjectDescriptor_fields__serializedVersion,
  &SerializedObjectDescriptor_fields_fields,
  &SerializedObjectDescriptor_fields_name,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedObjectDescriptor_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedObjectDescriptor_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SerializedObjectDescriptor_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SerializedObjectDescriptor_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedObjectDescriptor_methods_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor__arg_cls = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cls", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedObjectDescriptor_methods_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor__args[] = 
{
  &SerializedObjectDescriptor_methods_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor__arg_cls,
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor_methods_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedObjectDescriptor_method_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SerializedObjectDescriptor", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SerializedObjectDescriptor::clazzInfo(), // return type
  "_0_SerializedObjectDescriptor", // alternative name of method
  -1, // altlabelHashCode
  SerializedObjectDescriptor_methods_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor__args, // the arguments
  0, //arguments count
  SerializedObjectDescriptor_methods_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor__exceptions, // the declared exceptions
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_method_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedObjectDescriptor_methods_forClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor_methods_forClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedObjectDescriptor_method_forClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "forClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_3_forClass", // alternative name of method
  -1, // altlabelHashCode
  SerializedObjectDescriptor_methods_forClass__LRClass__args, // the arguments
  0, //arguments count
  SerializedObjectDescriptor_methods_forClass__LRClass__exceptions, // the declared exceptions
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_method_forClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedObjectDescriptor_methods_getFields__LRSerializedFieldDescriptorArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor_methods_getFields__LRSerializedFieldDescriptorArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedObjectDescriptor_method_getFields__LRSerializedFieldDescriptorArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFields", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSerializedFieldDescriptorArray::clazzInfo(), // return type
  "_4_getFields", // alternative name of method
  -1, // altlabelHashCode
  SerializedObjectDescriptor_methods_getFields__LRSerializedFieldDescriptorArray__args, // the arguments
  0, //arguments count
  SerializedObjectDescriptor_methods_getFields__LRSerializedFieldDescriptorArray__exceptions, // the declared exceptions
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_method_getFields__LRSerializedFieldDescriptorArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedObjectDescriptor_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedObjectDescriptor_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getName", // alternative name of method
  -1, // altlabelHashCode
  SerializedObjectDescriptor_methods_getName__LRString__args, // the arguments
  0, //arguments count
  SerializedObjectDescriptor_methods_getName__LRString__exceptions, // the declared exceptions
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedObjectDescriptor_methods_getSerialVersionUID__J_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor_methods_getSerialVersionUID__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedObjectDescriptor_method_getSerialVersionUID__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getSerialVersionUID", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_5_getSerialVersionUID", // alternative name of method
  -1, // altlabelHashCode
  SerializedObjectDescriptor_methods_getSerialVersionUID__J_args, // the arguments
  0, //arguments count
  SerializedObjectDescriptor_methods_getSerialVersionUID__J_exceptions, // the declared exceptions
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_method_getSerialVersionUID__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SerializedObjectDescriptor_methods_lookup_INLRClass__LRSerializedObjectDescriptor__arg_cl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "cl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedObjectDescriptor_methods_lookup_INLRClass__LRSerializedObjectDescriptor__args[] = 
{
  &SerializedObjectDescriptor_methods_lookup_INLRClass__LRSerializedObjectDescriptor__arg_cl,
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor_methods_lookup_INLRClass__LRSerializedObjectDescriptor__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedObjectDescriptor_method_lookup_INLRClass__LRSerializedObjectDescriptor_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lookup", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RSerializedObjectDescriptor::clazzInfo(), // return type
  "_1_lookup", // alternative name of method
  -1, // altlabelHashCode
  SerializedObjectDescriptor_methods_lookup_INLRClass__LRSerializedObjectDescriptor__args, // the arguments
  0, //arguments count
  SerializedObjectDescriptor_methods_lookup_INLRClass__LRSerializedObjectDescriptor__exceptions, // the declared exceptions
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_method_lookup_INLRClass__LRSerializedObjectDescriptor__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* SerializedObjectDescriptor_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SerializedObjectDescriptor_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SerializedObjectDescriptor_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_toString", // alternative name of method
  -1, // altlabelHashCode
  SerializedObjectDescriptor_methods_toString__LRString__args, // the arguments
  0, //arguments count
  SerializedObjectDescriptor_methods_toString__LRString__exceptions, // the declared exceptions
  SerializedObjectDescriptor_MetainfoWrapper::SerializedObjectDescriptor_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SerializedObjectDescriptor_methods[] = 
{
  &SerializedObjectDescriptor_method_GetClass__L_acdk_lang_RClass_,
  &SerializedObjectDescriptor_method_SerializedObjectDescriptor_INLRClass__LRSerializedObjectDescriptor_,
  &SerializedObjectDescriptor_method_forClass__LRClass_,
  &SerializedObjectDescriptor_method_getFields__LRSerializedFieldDescriptorArray_,
  &SerializedObjectDescriptor_method_getName__LRString_,
  &SerializedObjectDescriptor_method_getSerialVersionUID__J,
  &SerializedObjectDescriptor_method_lookup_INLRClass__LRSerializedObjectDescriptor_,
  &SerializedObjectDescriptor_method_toString__LRString_,
  0
};


struct SerializedObjectDescriptor_MetaInfoInitializer
{  SerializedObjectDescriptor_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SerializedObjectDescriptor::clazzInfo();
    ci->fields =  _SerializedObjectDescriptor_fields;
    ci->methods =  _SerializedObjectDescriptor_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SerializedObjectDescriptor_MetaInfoInitializer SerializedObjectDescriptor_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Storage_create_array(int length)
{
  return new ObjectArrayImpl<RStorage>(length);
}

//static
::acdk::lang::RObject
Storage_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Storage_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Storage_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Storage::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Storage_method_getDeviceName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Storage* This = dmi_cast<Storage>(This_);
    ret = (::acdk::lang::RObject)This->getDeviceName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Storage_method_isReadable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Storage* This = dmi_cast<Storage>(This_);
  ret = This->isReadable();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Storage_method_isWriteable__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Storage* This = dmi_cast<Storage>(This_);
  ret = This->isWriteable();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Storage_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Storage_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Storage_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Storage_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Storage_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Storage_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Storage_MetainfoWrapper::Storage_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Storage_methods_getDeviceName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Storage_methods_getDeviceName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Storage_method_getDeviceName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeviceName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getDeviceName", // alternative name of method
  -1, // altlabelHashCode
  Storage_methods_getDeviceName__LRString__args, // the arguments
  0, //arguments count
  Storage_methods_getDeviceName__LRString__exceptions, // the declared exceptions
  Storage_MetainfoWrapper::Storage_method_getDeviceName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Storage_methods_isReadable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Storage_methods_isReadable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Storage_method_isReadable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isReadable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isReadable", // alternative name of method
  -1, // altlabelHashCode
  Storage_methods_isReadable__Z_args, // the arguments
  0, //arguments count
  Storage_methods_isReadable__Z_exceptions, // the declared exceptions
  Storage_MetainfoWrapper::Storage_method_isReadable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Storage_methods_isWriteable__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Storage_methods_isWriteable__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Storage_method_isWriteable__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isWriteable", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_isWriteable", // alternative name of method
  -1, // altlabelHashCode
  Storage_methods_isWriteable__Z_args, // the arguments
  0, //arguments count
  Storage_methods_isWriteable__Z_exceptions, // the declared exceptions
  Storage_MetainfoWrapper::Storage_method_isWriteable__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Storage_methods[] = 
{
  &Storage_method_GetClass__L_acdk_lang_RClass_,
  &Storage_method_getDeviceName__LRString_,
  &Storage_method_isReadable__Z,
  &Storage_method_isWriteable__Z,
  0
};


struct Storage_MetaInfoInitializer
{  Storage_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Storage::clazzInfo();
    ci->fields =  _Storage_fields;
    ci->methods =  _Storage_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Storage_MetaInfoInitializer Storage_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
StreamTokenizer_create_array(int length)
{
  return new ObjectArrayImpl<RStreamTokenizer>(length);
}

//static
::acdk::lang::RObject
StreamTokenizer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StreamTokenizer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StreamTokenizer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_StreamTokenizer_INLRCharReader__LRStreamTokenizer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StreamTokenizer(::acdk::lang::dmi::castTo< RCharReader>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__isWhiteSpace_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::_isWhiteSpace(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
      ret = This->_isWhiteSpace(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__readCChar__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::_readCChar();
    else
      ret = This->_readCChar();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__readCComment__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::_readCComment();
    else
        ret = (::acdk::lang::RObject)This->_readCComment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__readCString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::_readCString();
    else
        ret = (::acdk::lang::RObject)This->_readCString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__readCxxComment__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::_readCxxComment();
    else
        ret = (::acdk::lang::RObject)This->_readCxxComment();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__readIdentifier__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::_readIdentifier();
    else
      ret = This->_readIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__readNumber__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::_readNumber();
    else
      ret = This->_readNumber();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__readUnescapedCString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::_readUnescapedCString();
    else
        ret = (::acdk::lang::RObject)This->_readUnescapedCString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method__readWhiteSpaces__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::_readWhiteSpaces();
    else
        ret = (::acdk::lang::RObject)This->_readWhiteSpaces();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_commentChar_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::commentChar(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->commentChar(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_eof__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::eof();
    else
      ret = This->eof();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_eolIsSignificant_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::eolIsSignificant(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->eolIsSignificant(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_getCharStreamPos_OUTIOUTIOUTI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::getCharStreamPos(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToIntRef(args[1], dc), ::acdk::lang::dmi::castToIntRef(args[2], dc));
    else
        This->getCharStreamPos(::acdk::lang::dmi::castToIntRef(args[0], dc), ::acdk::lang::dmi::castToIntRef(args[1], dc), ::acdk::lang::dmi::castToIntRef(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_getCurrentToken__Lacdk_lang_dmi_RDmiObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::getCurrentToken();
    else
        ret = (::acdk::lang::RObject)This->getCurrentToken();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_getDeviceName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::getDeviceName();
    else
        ret = (::acdk::lang::RObject)This->getDeviceName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_getStreamPos_Z_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::getStreamPos(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getStreamPos(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_getStreamPos__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::getStreamPos();
    else
        ret = (::acdk::lang::RObject)This->getStreamPos();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_lastReaded__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::lastReaded();
    else
        ret = (::acdk::lang::RObject)This->lastReaded();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_lineno__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::lineno();
    else
      ret = This->lineno();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_lowerCaseMode_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::lowerCaseMode(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->lowerCaseMode(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_mapCEscapedChar_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
  ret = StreamTokenizer::mapCEscapedChar(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_nextToken__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::nextToken();
    else
      ret = This->nextToken();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_ordinaryChar_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::ordinaryChar(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->ordinaryChar(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_ordinaryChars_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::ordinaryChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->ordinaryChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_parseCCComments_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::parseCCComments(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->parseCCComments(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_parseCCComments__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::parseCCComments();
    else
      ret = This->parseCCComments();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_parseNumbers__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::parseNumbers();
    else
        This->parseNumbers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_pushBack__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::pushBack();
    else
        This->pushBack();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_pushBack_IINLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::pushBack(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    else
        This->pushBack(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_quoteChar_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::quoteChar(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->quoteChar(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_read__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::read();
    else
      ret = This->read();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_readCxxIdentifier_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::readCxxIdentifier(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->readCxxIdentifier(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_readCxxIdentifier__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::readCxxIdentifier();
    else
      ret = This->readCxxIdentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_readNumberAsString__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::readNumberAsString();
    else
      ret = This->readNumberAsString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_readNumberAsString_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::readNumberAsString(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->readNumberAsString(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_readOperator_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::readOperator(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->readOperator(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_readOperator__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::readOperator();
    else
      ret = This->readOperator();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_resetSyntax__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::resetSyntax();
    else
        This->resetSyntax();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_skipLine__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::skipLine();
    else
        This->skipLine();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_toCode__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::toCode();
    else
        ret = (::acdk::lang::RObject)This->toCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StreamTokenizer::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_unread_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::unread(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        This->unread(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_unread_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::unread(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->unread(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_wantComments_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::wantComments(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
      ret = This->wantComments(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_wantNewline_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::wantNewline(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
      ret = This->wantNewline(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_wantWhiteSpace_Z_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StreamTokenizer::wantWhiteSpace(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
      ret = This->wantWhiteSpace(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_whitespaceChars_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::whitespaceChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->whitespaceChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StreamTokenizer_method_wordChars_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StreamTokenizer::wordChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->wordChars(::acdk::lang::dmi::castTo< int>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__eof_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_eof, flags);
    else
      This->_eof = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__in_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_in, flags);
    else
      This->_in = ::acdk::lang::dmi::castTo< RPushbackCharReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__lineReader_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_lineReader, flags);
    else
      This->_lineReader = ::acdk::lang::dmi::castTo< RLineNumberCharReader>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__parseCCComments_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parseCCComments, flags);
    else
      This->_parseCCComments = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__parseOperator_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_parseOperator, flags);
    else
      This->_parseOperator = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__readCxxIdentifier_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_readCxxIdentifier, flags);
    else
      This->_readCxxIdentifier = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__readNumberAsString_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_readNumberAsString, flags);
    else
      This->_readNumberAsString = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__wantComments_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_wantComments, flags);
    else
      This->_wantComments = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__wantNL_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_wantNL, flags);
    else
      This->_wantNL = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields__wantWS_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_wantWS, flags);
    else
      This->_wantWS = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields_cval_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->cval, flags);
    else
      This->cval = ::acdk::lang::dmi::castTo< uc2char>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields_nval_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->nval, flags);
    else
      This->nval = ::acdk::lang::dmi::castTo< RNumber>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields_sval_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->sval, flags);
    else
      This->sval = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StreamTokenizer_fields_ttype_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StreamTokenizer* This = dmi_cast<StreamTokenizer>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->ttype, flags);
    else
      This->ttype = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__eof = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_eof", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__eof_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__in = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_in", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RPushbackCharReader::clazzInfo(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__in_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__lineReader = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_lineReader", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RLineNumberCharReader::clazzInfo(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__lineReader_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__parseCCComments = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parseCCComments", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__parseCCComments_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__parseOperator = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_parseOperator", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__parseOperator_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__readCxxIdentifier = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_readCxxIdentifier", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__readCxxIdentifier_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__readNumberAsString = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_readNumberAsString", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__readNumberAsString_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__wantComments = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_wantComments", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__wantComments_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__wantNL = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_wantNL", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__wantNL_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields__wantWS = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_wantWS", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields__wantWS_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields_cval = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "cval", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields_cval_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields_nval = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "nval", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RNumber::clazzInfo(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields_nval_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields_sval = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "sval", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields_sval_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StreamTokenizer_fields_ttype = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "ttype", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_fields_ttype_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StreamTokenizer_fields[] = 
{
  &StreamTokenizer_fields__eof,
  &StreamTokenizer_fields__in,
  &StreamTokenizer_fields__lineReader,
  &StreamTokenizer_fields__parseCCComments,
  &StreamTokenizer_fields__parseOperator,
  &StreamTokenizer_fields__readCxxIdentifier,
  &StreamTokenizer_fields__readNumberAsString,
  &StreamTokenizer_fields__wantComments,
  &StreamTokenizer_fields__wantNL,
  &StreamTokenizer_fields__wantWS,
  &StreamTokenizer_fields_cval,
  &StreamTokenizer_fields_nval,
  &StreamTokenizer_fields_sval,
  &StreamTokenizer_fields_ttype,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_N_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_StreamTokenizer_INLRCharReader__LRStreamTokenizer__arg_reader = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "reader", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_StreamTokenizer_INLRCharReader__LRStreamTokenizer__args[] = 
{
  &StreamTokenizer_methods_StreamTokenizer_INLRCharReader__LRStreamTokenizer__arg_reader,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_StreamTokenizer_INLRCharReader__LRStreamTokenizer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_StreamTokenizer_INLRCharReader__LRStreamTokenizer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StreamTokenizer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StreamTokenizer::clazzInfo(), // return type
  "_0_StreamTokenizer", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_StreamTokenizer_INLRCharReader__LRStreamTokenizer__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_StreamTokenizer_INLRCharReader__LRStreamTokenizer__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_StreamTokenizer_INLRCharReader__LRStreamTokenizer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods__isWhiteSpace_I_Z_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__isWhiteSpace_I_Z_args[] = 
{
  &StreamTokenizer_methods__isWhiteSpace_I_Z_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__isWhiteSpace_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__isWhiteSpace_I_Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_isWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_K__isWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__isWhiteSpace_I_Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__isWhiteSpace_I_Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__isWhiteSpace_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__readCChar__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__readCChar__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__readCChar__Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readCChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_H__readCChar", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__readCChar__Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__readCChar__Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__readCChar__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__readCComment__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__readCComment__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__readCComment__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readCComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_F__readCComment", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__readCComment__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__readCComment__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__readCComment__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__readCString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__readCString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__readCString__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readCString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_G__readCString", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__readCString__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__readCString__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__readCString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__readCxxComment__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__readCxxComment__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__readCxxComment__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readCxxComment", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_E__readCxxComment", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__readCxxComment__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__readCxxComment__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__readCxxComment__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__readIdentifier__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__readIdentifier__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__readIdentifier__Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_M__readIdentifier", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__readIdentifier__Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__readIdentifier__Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__readIdentifier__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__readNumber__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__readNumber__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__readNumber__Z = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readNumber", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_L__readNumber", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__readNumber__Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__readNumber__Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__readNumber__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__readUnescapedCString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__readUnescapedCString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__readUnescapedCString__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readUnescapedCString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_I__readUnescapedCString", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__readUnescapedCString__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__readUnescapedCString__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__readUnescapedCString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods__readWhiteSpaces__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods__readWhiteSpaces__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method__readWhiteSpaces__LRString_ = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_readWhiteSpaces", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_J__readWhiteSpaces", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods__readWhiteSpaces__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods__readWhiteSpaces__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method__readWhiteSpaces__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_commentChar_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_commentChar_I_V_args[] = 
{
  &StreamTokenizer_methods_commentChar_I_V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_commentChar_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_commentChar_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "commentChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_commentChar", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_commentChar_I_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_commentChar_I_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_commentChar_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_eof__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_eof__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_eof__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eof", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_x_eof", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_eof__Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_eof__Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_eof__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_eolIsSignificant_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_eolIsSignificant_Z_V_args[] = 
{
  &StreamTokenizer_methods_eolIsSignificant_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_eolIsSignificant_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_eolIsSignificant_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "eolIsSignificant", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_eolIsSignificant", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_eolIsSignificant_Z_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_eolIsSignificant_Z_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_eolIsSignificant_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_arg_charPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "charPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_arg_linePos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "linePos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_arg_columnPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiOut, 
  0, //AttributesRes
  "columnPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_args[] = 
{
  &StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_arg_charPos,
  &StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_arg_linePos,
  &StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_arg_columnPos,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_getCharStreamPos_OUTIOUTIOUTI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharStreamPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_getCharStreamPos", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_getCharStreamPos_OUTIOUTIOUTI_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_getCharStreamPos_OUTIOUTIOUTI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_getCurrentToken__Lacdk_lang_dmi_RDmiObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_getCurrentToken__Lacdk_lang_dmi_RDmiObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_getCurrentToken__Lacdk_lang_dmi_RDmiObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCurrentToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::lang::dmi::RDmiObject::clazzInfo(), // return type
  "_C_getCurrentToken", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_getCurrentToken__Lacdk_lang_dmi_RDmiObject__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_getCurrentToken__Lacdk_lang_dmi_RDmiObject__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_getCurrentToken__Lacdk_lang_dmi_RDmiObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_getDeviceName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_getDeviceName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_getDeviceName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeviceName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_g_getDeviceName", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_getDeviceName__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_getDeviceName__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_getDeviceName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_getStreamPos_Z_LRString__arg_withXPos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "withXPos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_getStreamPos_Z_LRString__args[] = 
{
  &StreamTokenizer_methods_getStreamPos_Z_LRString__arg_withXPos,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_getStreamPos_Z_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_getStreamPos_Z_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStreamPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_y_getStreamPos", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_getStreamPos_Z_LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_getStreamPos_Z_LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_getStreamPos_Z_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_getStreamPos__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_getStreamPos__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_getStreamPos__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getStreamPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_z_getStreamPos", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_getStreamPos__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_getStreamPos__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_getStreamPos__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_lastReaded__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_lastReaded__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_lastReaded__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lastReaded", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_B_lastReaded", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_lastReaded__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_lastReaded__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_lastReaded__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_lineno__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_lineno__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_lineno__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lineno", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_lineno", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_lineno__I_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_lineno__I_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_lineno__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_lowerCaseMode_Z_V_arg_fl = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "fl", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_lowerCaseMode_Z_V_args[] = 
{
  &StreamTokenizer_methods_lowerCaseMode_Z_V_arg_fl,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_lowerCaseMode_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_lowerCaseMode_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "lowerCaseMode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_lowerCaseMode", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_lowerCaseMode_Z_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_lowerCaseMode_Z_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_lowerCaseMode_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_mapCEscapedChar_I_I_arg_nc = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "nc", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_mapCEscapedChar_I_I_args[] = 
{
  &StreamTokenizer_methods_mapCEscapedChar_I_I_arg_nc,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_mapCEscapedChar_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_mapCEscapedChar_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "mapCEscapedChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_D_mapCEscapedChar", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_mapCEscapedChar_I_I_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_mapCEscapedChar_I_I_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_mapCEscapedChar_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_nextToken__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_nextToken__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_nextToken__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "nextToken", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_5_nextToken", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_nextToken__I_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_nextToken__I_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_nextToken__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_ordinaryChar_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_ordinaryChar_I_V_args[] = 
{
  &StreamTokenizer_methods_ordinaryChar_I_V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_ordinaryChar_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_ordinaryChar_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ordinaryChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_6_ordinaryChar", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_ordinaryChar_I_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_ordinaryChar_I_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_ordinaryChar_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_ordinaryChars_II_V_arg_low = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "low", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_ordinaryChars_II_V_arg_hi = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hi", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_ordinaryChars_II_V_args[] = 
{
  &StreamTokenizer_methods_ordinaryChars_II_V_arg_low,
  &StreamTokenizer_methods_ordinaryChars_II_V_arg_hi,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_ordinaryChars_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_ordinaryChars_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "ordinaryChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_7_ordinaryChars", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_ordinaryChars_II_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_ordinaryChars_II_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_ordinaryChars_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_parseCCComments_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_parseCCComments_Z_V_args[] = 
{
  &StreamTokenizer_methods_parseCCComments_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_parseCCComments_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_parseCCComments_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseCCComments", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_l_parseCCComments", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_parseCCComments_Z_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_parseCCComments_Z_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_parseCCComments_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_parseCCComments__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_parseCCComments__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_parseCCComments__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseCCComments", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_m_parseCCComments", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_parseCCComments__Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_parseCCComments__Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_parseCCComments__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_parseNumbers__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_parseNumbers__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_parseNumbers__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "parseNumbers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_8_parseNumbers", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_parseNumbers__V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_parseNumbers__V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_parseNumbers__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_pushBack__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_pushBack__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_pushBack__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushBack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_9_pushBack", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_pushBack__V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_pushBack__V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_pushBack__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_pushBack_IINLRString__V_arg_typ = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "typ", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_pushBack_IINLRString__V_arg_stringval = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "stringval", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_pushBack_IINLRString__V_args[] = 
{
  &StreamTokenizer_methods_pushBack_IINLRString__V_arg_typ,
  &StreamTokenizer_methods_pushBack_IINLRString__V_arg_stringval,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_pushBack_IINLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_pushBack_IINLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "pushBack", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_pushBack", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_pushBack_IINLRString__V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_pushBack_IINLRString__V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_pushBack_IINLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_quoteChar_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_quoteChar_I_V_args[] = 
{
  &StreamTokenizer_methods_quoteChar_I_V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_quoteChar_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_quoteChar_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "quoteChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_a_quoteChar", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_quoteChar_I_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_quoteChar_I_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_quoteChar_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_read__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_read__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_read__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "read", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_t_read", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_read__I_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_read__I_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_read__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_readCxxIdentifier_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_readCxxIdentifier_Z_V_args[] = 
{
  &StreamTokenizer_methods_readCxxIdentifier_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_readCxxIdentifier_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_readCxxIdentifier_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readCxxIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_n_readCxxIdentifier", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_readCxxIdentifier_Z_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_readCxxIdentifier_Z_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_readCxxIdentifier_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_readCxxIdentifier__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_readCxxIdentifier__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_readCxxIdentifier__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readCxxIdentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_o_readCxxIdentifier", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_readCxxIdentifier__Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_readCxxIdentifier__Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_readCxxIdentifier__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_readNumberAsString__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_readNumberAsString__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_readNumberAsString__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readNumberAsString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_r_readNumberAsString", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_readNumberAsString__Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_readNumberAsString__Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_readNumberAsString__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_readNumberAsString_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_readNumberAsString_Z_V_args[] = 
{
  &StreamTokenizer_methods_readNumberAsString_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_readNumberAsString_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_readNumberAsString_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readNumberAsString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_readNumberAsString", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_readNumberAsString_Z_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_readNumberAsString_Z_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_readNumberAsString_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_readOperator_Z_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_readOperator_Z_V_args[] = 
{
  &StreamTokenizer_methods_readOperator_Z_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_readOperator_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_readOperator_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readOperator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_p_readOperator", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_readOperator_Z_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_readOperator_Z_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_readOperator_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_readOperator__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_readOperator__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_readOperator__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "readOperator", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_q_readOperator", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_readOperator__Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_readOperator__Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_readOperator__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_resetSyntax__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_resetSyntax__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_resetSyntax__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "resetSyntax", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_b_resetSyntax", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_resetSyntax__V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_resetSyntax__V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_resetSyntax__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_skipLine__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_skipLine__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_skipLine__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "skipLine", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_h_skipLine", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_skipLine__V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_skipLine__V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_skipLine__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_toCode__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_toCode__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_toCode__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_toCode", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_toCode__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_toCode__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_toCode__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_toString", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_toString__LRString__args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_toString__LRString__exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_unread_I_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_unread_I_V_args[] = 
{
  &StreamTokenizer_methods_unread_I_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_unread_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_unread_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_unread", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_unread_I_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_unread_I_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_unread_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_unread_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_unread_INLRString__V_args[] = 
{
  &StreamTokenizer_methods_unread_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_unread_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_unread_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "unread", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_unread", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_unread_INLRString__V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_unread_INLRString__V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_unread_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_wantComments_Z_Z_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_wantComments_Z_Z_args[] = 
{
  &StreamTokenizer_methods_wantComments_Z_Z_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_wantComments_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_wantComments_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wantComments", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_k_wantComments", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_wantComments_Z_Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_wantComments_Z_Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_wantComments_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_wantNewline_Z_Z_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_wantNewline_Z_Z_args[] = 
{
  &StreamTokenizer_methods_wantNewline_Z_Z_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_wantNewline_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_wantNewline_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wantNewline", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_j_wantNewline", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_wantNewline_Z_Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_wantNewline_Z_Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_wantNewline_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_wantWhiteSpace_Z_Z_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_wantWhiteSpace_Z_Z_args[] = 
{
  &StreamTokenizer_methods_wantWhiteSpace_Z_Z_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_wantWhiteSpace_Z_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_wantWhiteSpace_Z_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wantWhiteSpace", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_i_wantWhiteSpace", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_wantWhiteSpace_Z_Z_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_wantWhiteSpace_Z_Z_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_wantWhiteSpace_Z_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_whitespaceChars_II_V_arg_low = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "low", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_whitespaceChars_II_V_arg_hi = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hi", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_whitespaceChars_II_V_args[] = 
{
  &StreamTokenizer_methods_whitespaceChars_II_V_arg_low,
  &StreamTokenizer_methods_whitespaceChars_II_V_arg_hi,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_whitespaceChars_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_whitespaceChars_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "whitespaceChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_e_whitespaceChars", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_whitespaceChars_II_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_whitespaceChars_II_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_whitespaceChars_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_wordChars_II_V_arg_low = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "low", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StreamTokenizer_methods_wordChars_II_V_arg_hi = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "hi", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StreamTokenizer_methods_wordChars_II_V_args[] = 
{
  &StreamTokenizer_methods_wordChars_II_V_arg_low,
  &StreamTokenizer_methods_wordChars_II_V_arg_hi,
  0
};

::acdk::lang::dmi::ClazzInfo* StreamTokenizer_methods_wordChars_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StreamTokenizer_method_wordChars_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "wordChars", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_f_wordChars", // alternative name of method
  -1, // altlabelHashCode
  StreamTokenizer_methods_wordChars_II_V_args, // the arguments
  0, //arguments count
  StreamTokenizer_methods_wordChars_II_V_exceptions, // the declared exceptions
  StreamTokenizer_MetainfoWrapper::StreamTokenizer_method_wordChars_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StreamTokenizer_methods[] = 
{
  &StreamTokenizer_method_GetClass__L_acdk_lang_RClass_,
  &StreamTokenizer_method_StreamTokenizer_INLRCharReader__LRStreamTokenizer_,
  &StreamTokenizer_method__isWhiteSpace_I_Z,
  &StreamTokenizer_method__readCChar__Z,
  &StreamTokenizer_method__readCComment__LRString_,
  &StreamTokenizer_method__readCString__LRString_,
  &StreamTokenizer_method__readCxxComment__LRString_,
  &StreamTokenizer_method__readIdentifier__Z,
  &StreamTokenizer_method__readNumber__Z,
  &StreamTokenizer_method__readUnescapedCString__LRString_,
  &StreamTokenizer_method__readWhiteSpaces__LRString_,
  &StreamTokenizer_method_commentChar_I_V,
  &StreamTokenizer_method_eof__Z,
  &StreamTokenizer_method_eolIsSignificant_Z_V,
  &StreamTokenizer_method_getCharStreamPos_OUTIOUTIOUTI_V,
  &StreamTokenizer_method_getCurrentToken__Lacdk_lang_dmi_RDmiObject_,
  &StreamTokenizer_method_getDeviceName__LRString_,
  &StreamTokenizer_method_getStreamPos_Z_LRString_,
  &StreamTokenizer_method_getStreamPos__LRString_,
  &StreamTokenizer_method_lastReaded__LRString_,
  &StreamTokenizer_method_lineno__I,
  &StreamTokenizer_method_lowerCaseMode_Z_V,
  &StreamTokenizer_method_mapCEscapedChar_I_I,
  &StreamTokenizer_method_nextToken__I,
  &StreamTokenizer_method_ordinaryChar_I_V,
  &StreamTokenizer_method_ordinaryChars_II_V,
  &StreamTokenizer_method_parseCCComments_Z_V,
  &StreamTokenizer_method_parseCCComments__Z,
  &StreamTokenizer_method_parseNumbers__V,
  &StreamTokenizer_method_pushBack__V,
  &StreamTokenizer_method_pushBack_IINLRString__V,
  &StreamTokenizer_method_quoteChar_I_V,
  &StreamTokenizer_method_read__I,
  &StreamTokenizer_method_readCxxIdentifier_Z_V,
  &StreamTokenizer_method_readCxxIdentifier__Z,
  &StreamTokenizer_method_readNumberAsString__Z,
  &StreamTokenizer_method_readNumberAsString_Z_V,
  &StreamTokenizer_method_readOperator_Z_V,
  &StreamTokenizer_method_readOperator__Z,
  &StreamTokenizer_method_resetSyntax__V,
  &StreamTokenizer_method_skipLine__V,
  &StreamTokenizer_method_toCode__LRString_,
  &StreamTokenizer_method_toString__LRString_,
  &StreamTokenizer_method_unread_I_V,
  &StreamTokenizer_method_unread_INLRString__V,
  &StreamTokenizer_method_wantComments_Z_Z,
  &StreamTokenizer_method_wantNewline_Z_Z,
  &StreamTokenizer_method_wantWhiteSpace_Z_Z,
  &StreamTokenizer_method_whitespaceChars_II_V,
  &StreamTokenizer_method_wordChars_II_V,
  0
};


struct StreamTokenizer_MetaInfoInitializer
{  StreamTokenizer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StreamTokenizer::clazzInfo();
    ci->fields =  _StreamTokenizer_fields;
    ci->methods =  _StreamTokenizer_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StreamTokenizer_MetaInfoInitializer StreamTokenizer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
StringReader_create_array(int length)
{
  return new ObjectArrayImpl<RStringReader>(length);
}

//static
::acdk::lang::RObject
StringReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReader_method_StringReader_INLRString_IINLRObject__LRStringReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringReader(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReader_method_StringReader_INLRString__LRStringReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringReader(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReader_method_StringReader_INLRString_I_LRStringReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringReader(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringReader_method_getReadPos__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringReader* This = dmi_cast<StringReader>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->StringReader::getReadPos();
    else
      ret = This->getReadPos();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringReader_fields__eof_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringReader* This = dmi_cast<StringReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_eof, flags);
    else
      This->_eof = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringReader_fields__readPos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringReader* This = dmi_cast<StringReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_readPos, flags);
    else
      This->_readPos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringReader_fields__string_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringReader* This = dmi_cast<StringReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_string, flags);
    else
      This->_string = ::acdk::lang::dmi::castTo< RString>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StringReader_fields__eof = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_eof", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  StringReader_MetainfoWrapper::StringReader_fields__eof_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringReader_fields__readPos = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_readPos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  StringReader_MetainfoWrapper::StringReader_fields__readPos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo StringReader_fields__string = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_string", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(),
  StringReader_MetainfoWrapper::StringReader_fields__string_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StringReader_fields[] = 
{
  &StringReader_fields__eof,
  &StringReader_fields__readPos,
  &StringReader_fields__string,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringReader_MetainfoWrapper::StringReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__arg_readpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "readpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__arg_iolock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "iolock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__args[] = 
{
  &StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__arg_str,
  &StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__arg_readpos,
  &StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__arg_iolock,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReader_method_StringReader_INLRString_IINLRObject__LRStringReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringReader::clazzInfo(), // return type
  "_0_StringReader", // alternative name of method
  -1, // altlabelHashCode
  StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__args, // the arguments
  0, //arguments count
  StringReader_methods_StringReader_INLRString_IINLRObject__LRStringReader__exceptions, // the declared exceptions
  StringReader_MetainfoWrapper::StringReader_method_StringReader_INLRString_IINLRObject__LRStringReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReader_methods_StringReader_INLRString__LRStringReader__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReader_methods_StringReader_INLRString__LRStringReader__args[] = 
{
  &StringReader_methods_StringReader_INLRString__LRStringReader__arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReader_methods_StringReader_INLRString__LRStringReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReader_method_StringReader_INLRString__LRStringReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StringReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringReader::clazzInfo(), // return type
  "_1_StringReader", // alternative name of method
  -1, // altlabelHashCode
  StringReader_methods_StringReader_INLRString__LRStringReader__args, // the arguments
  0, //arguments count
  StringReader_methods_StringReader_INLRString__LRStringReader__exceptions, // the declared exceptions
  StringReader_MetainfoWrapper::StringReader_method_StringReader_INLRString__LRStringReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReader_methods_StringReader_INLRString_I_LRStringReader__arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo StringReader_methods_StringReader_INLRString_I_LRStringReader__arg_readpos = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "readpos", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReader_methods_StringReader_INLRString_I_LRStringReader__args[] = 
{
  &StringReader_methods_StringReader_INLRString_I_LRStringReader__arg_str,
  &StringReader_methods_StringReader_INLRString_I_LRStringReader__arg_readpos,
  0
};

::acdk::lang::dmi::ClazzInfo* StringReader_methods_StringReader_INLRString_I_LRStringReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReader_method_StringReader_INLRString_I_LRStringReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "StringReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringReader::clazzInfo(), // return type
  "_2_StringReader", // alternative name of method
  -1, // altlabelHashCode
  StringReader_methods_StringReader_INLRString_I_LRStringReader__args, // the arguments
  0, //arguments count
  StringReader_methods_StringReader_INLRString_I_LRStringReader__exceptions, // the declared exceptions
  StringReader_MetainfoWrapper::StringReader_method_StringReader_INLRString_I_LRStringReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringReader_methods_getReadPos__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringReader_methods_getReadPos__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringReader_method_getReadPos__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReadPos", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_3_getReadPos", // alternative name of method
  -1, // altlabelHashCode
  StringReader_methods_getReadPos__I_args, // the arguments
  0, //arguments count
  StringReader_methods_getReadPos__I_exceptions, // the declared exceptions
  StringReader_MetainfoWrapper::StringReader_method_getReadPos__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringReader_methods[] = 
{
  &StringReader_method_GetClass__L_acdk_lang_RClass_,
  &StringReader_method_StringReader_INLRString_IINLRObject__LRStringReader_,
  &StringReader_method_StringReader_INLRString__LRStringReader_,
  &StringReader_method_StringReader_INLRString_I_LRStringReader_,
  &StringReader_method_getReadPos__I,
  0
};


struct StringReader_MetaInfoInitializer
{  StringReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringReader::clazzInfo();
    ci->fields =  _StringReader_fields;
    ci->methods =  _StringReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringReader_MetaInfoInitializer StringReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
StringWriter_create_array(int length)
{
  return new ObjectArrayImpl<RStringWriter>(length);
}

//static
::acdk::lang::RObject
StringWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class StringWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)StringWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringWriter_method_StringWriter__LRStringWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new StringWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringWriter_method_getString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringWriter* This = dmi_cast<StringWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringWriter::getString();
    else
        ret = (::acdk::lang::RObject)This->getString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringWriter_method_getStringBuffer__LRStringBuffer__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringWriter* This = dmi_cast<StringWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->StringWriter::getStringBuffer();
    else
        ret = (::acdk::lang::RObject)This->getStringBuffer();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringWriter_method_setString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringWriter* This = dmi_cast<StringWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringWriter::setString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->setString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  StringWriter_method_setStringBuffer_INLRStringBuffer__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    StringWriter* This = dmi_cast<StringWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->StringWriter::setStringBuffer(::acdk::lang::dmi::castTo< RStringBuffer>(args[0], dc));
    else
        This->setStringBuffer(::acdk::lang::dmi::castTo< RStringBuffer>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  StringWriter_fields__stringBuffer_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    StringWriter* This = dmi_cast<StringWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_stringBuffer, flags);
    else
      This->_stringBuffer = ::acdk::lang::dmi::castTo< RStringBuffer>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo StringWriter_fields__stringBuffer = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_stringBuffer", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(),
  StringWriter_MetainfoWrapper::StringWriter_fields__stringBuffer_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _StringWriter_fields[] = 
{
  &StringWriter_fields__stringBuffer,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_5_GetClass", // alternative name of method
  -1, // altlabelHashCode
  StringWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  StringWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  StringWriter_MetainfoWrapper::StringWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringWriter_methods_StringWriter__LRStringWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringWriter_methods_StringWriter__LRStringWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringWriter_method_StringWriter__LRStringWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "StringWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  StringWriter::clazzInfo(), // return type
  "_0_StringWriter", // alternative name of method
  -1, // altlabelHashCode
  StringWriter_methods_StringWriter__LRStringWriter__args, // the arguments
  0, //arguments count
  StringWriter_methods_StringWriter__LRStringWriter__exceptions, // the declared exceptions
  StringWriter_MetainfoWrapper::StringWriter_method_StringWriter__LRStringWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringWriter_methods_getString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringWriter_methods_getString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringWriter_method_getString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getString", // alternative name of method
  -1, // altlabelHashCode
  StringWriter_methods_getString__LRString__args, // the arguments
  0, //arguments count
  StringWriter_methods_getString__LRString__exceptions, // the declared exceptions
  StringWriter_MetainfoWrapper::StringWriter_method_getString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringWriter_methods_getStringBuffer__LRStringBuffer__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* StringWriter_methods_getStringBuffer__LRStringBuffer__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringWriter_method_getStringBuffer__LRStringBuffer_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getStringBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo(), // return type
  "_1_getStringBuffer", // alternative name of method
  -1, // altlabelHashCode
  StringWriter_methods_getStringBuffer__LRStringBuffer__args, // the arguments
  0, //arguments count
  StringWriter_methods_getStringBuffer__LRStringBuffer__exceptions, // the declared exceptions
  StringWriter_MetainfoWrapper::StringWriter_method_getStringBuffer__LRStringBuffer__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringWriter_methods_setString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringWriter_methods_setString_INLRString__V_args[] = 
{
  &StringWriter_methods_setString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* StringWriter_methods_setString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringWriter_method_setString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_setString", // alternative name of method
  -1, // altlabelHashCode
  StringWriter_methods_setString_INLRString__V_args, // the arguments
  0, //arguments count
  StringWriter_methods_setString_INLRString__V_exceptions, // the declared exceptions
  StringWriter_MetainfoWrapper::StringWriter_method_setString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo StringWriter_methods_setStringBuffer_INLRStringBuffer__V_arg_sb = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "sb", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStringBuffer::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* StringWriter_methods_setStringBuffer_INLRStringBuffer__V_args[] = 
{
  &StringWriter_methods_setStringBuffer_INLRStringBuffer__V_arg_sb,
  0
};

::acdk::lang::dmi::ClazzInfo* StringWriter_methods_setStringBuffer_INLRStringBuffer__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo StringWriter_method_setStringBuffer_INLRStringBuffer__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setStringBuffer", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_setStringBuffer", // alternative name of method
  -1, // altlabelHashCode
  StringWriter_methods_setStringBuffer_INLRStringBuffer__V_args, // the arguments
  0, //arguments count
  StringWriter_methods_setStringBuffer_INLRStringBuffer__V_exceptions, // the declared exceptions
  StringWriter_MetainfoWrapper::StringWriter_method_setStringBuffer_INLRStringBuffer__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _StringWriter_methods[] = 
{
  &StringWriter_method_GetClass__L_acdk_lang_RClass_,
  &StringWriter_method_StringWriter__LRStringWriter_,
  &StringWriter_method_getString__LRString_,
  &StringWriter_method_getStringBuffer__LRStringBuffer_,
  &StringWriter_method_setString_INLRString__V,
  &StringWriter_method_setStringBuffer_INLRStringBuffer__V,
  0
};


struct StringWriter_MetaInfoInitializer
{  StringWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = StringWriter::clazzInfo();
    ci->fields =  _StringWriter_fields;
    ci->methods =  _StringWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
StringWriter_MetaInfoInitializer StringWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
SubReader_create_array(int length)
{
  return new ObjectArrayImpl<RSubReader>(length);
}

//static
::acdk::lang::RObject
SubReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class SubReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)SubReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  SubReader_method_SubReader_INLRReader_II_LRSubReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new SubReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubReader_fields__curpos_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubReader* This = dmi_cast<SubReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_curpos, flags);
    else
      This->_curpos = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubReader_fields__length_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubReader* This = dmi_cast<SubReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_length, flags);
    else
      This->_length = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  SubReader_fields__start_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    SubReader* This = dmi_cast<SubReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_start, flags);
    else
      This->_start = ::acdk::lang::dmi::castTo< int>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo SubReader_fields__curpos = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_curpos", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SubReader_MetainfoWrapper::SubReader_fields__curpos_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SubReader_fields__length = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_length", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SubReader_MetainfoWrapper::SubReader_fields__length_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo SubReader_fields__start = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_start", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(),
  SubReader_MetainfoWrapper::SubReader_fields__start_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _SubReader_fields[] = 
{
  &SubReader_fields__curpos,
  &SubReader_fields__length,
  &SubReader_fields__start,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* SubReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  SubReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  SubReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  SubReader_MetainfoWrapper::SubReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo SubReader_methods_SubReader_INLRReader_II_LRSubReader__arg_in = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "in", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubReader_methods_SubReader_INLRReader_II_LRSubReader__arg_startoffset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "startoffset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo SubReader_methods_SubReader_INLRReader_II_LRSubReader__arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* SubReader_methods_SubReader_INLRReader_II_LRSubReader__args[] = 
{
  &SubReader_methods_SubReader_INLRReader_II_LRSubReader__arg_in,
  &SubReader_methods_SubReader_INLRReader_II_LRSubReader__arg_startoffset,
  &SubReader_methods_SubReader_INLRReader_II_LRSubReader__arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* SubReader_methods_SubReader_INLRReader_II_LRSubReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo SubReader_method_SubReader_INLRReader_II_LRSubReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "SubReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  SubReader::clazzInfo(), // return type
  "_0_SubReader", // alternative name of method
  -1, // altlabelHashCode
  SubReader_methods_SubReader_INLRReader_II_LRSubReader__args, // the arguments
  0, //arguments count
  SubReader_methods_SubReader_INLRReader_II_LRSubReader__exceptions, // the declared exceptions
  SubReader_MetainfoWrapper::SubReader_method_SubReader_INLRReader_II_LRSubReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _SubReader_methods[] = 
{
  &SubReader_method_GetClass__L_acdk_lang_RClass_,
  &SubReader_method_SubReader_INLRReader_II_LRSubReader_,
  0
};


struct SubReader_MetaInfoInitializer
{  SubReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = SubReader::clazzInfo();
    ci->fields =  _SubReader_fields;
    ci->methods =  _SubReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
SubReader_MetaInfoInitializer SubReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
TeeCharWriter_create_array(int length)
{
  return new ObjectArrayImpl<RTeeCharWriter>(length);
}

//static
::acdk::lang::RObject
TeeCharWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TeeCharWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TeeCharWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TeeCharWriter(::acdk::lang::dmi::castTo< RCharWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RCharWriter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TeeCharWriter::close();
    else
        This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TeeCharWriter::flush();
    else
        This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TeeCharWriter::getWriter(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getWriter(::acdk::lang::dmi::castTo< acdk::locale::RDecoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_getWriter__LRWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->TeeCharWriter::getWriter();
    else
        ret = (::acdk::lang::RObject)This->getWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_writeChar_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TeeCharWriter::writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< char>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_writeChar_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TeeCharWriter::writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    else
        This->writeChar(::acdk::lang::dmi::castTo< ucchar>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeCharWriter_method_writeString_INLRString__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->TeeCharWriter::writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        This->writeString(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TeeCharWriter_fields__first_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_first, flags);
    else
      This->_first = ::acdk::lang::dmi::castTo< RCharWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TeeCharWriter_fields__second_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TeeCharWriter* This = dmi_cast<TeeCharWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_second, flags);
    else
      This->_second = ::acdk::lang::dmi::castTo< RCharWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TeeCharWriter_fields__first = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_first", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo(),
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_fields__first_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TeeCharWriter_fields__second = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_second", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo(),
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_fields__second_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TeeCharWriter_fields[] = 
{
  &TeeCharWriter_fields__first,
  &TeeCharWriter_fields__second,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_8_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeCharWriter_methods_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__arg_first = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "first", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeCharWriter_methods_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__arg_second = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "second", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__args[] = 
{
  &TeeCharWriter_methods_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__arg_first,
  &TeeCharWriter_methods_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__arg_second,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TeeCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TeeCharWriter::clazzInfo(), // return type
  "_0_TeeCharWriter", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_close", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_close__V_args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_close__V_exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_flush", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_flush__V_args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_flush__V_exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeCharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__arg_decoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "decoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::RDecoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__args[] = 
{
  &TeeCharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__arg_decoder,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_6_getWriter", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_getWriter_INLacdk_locale_RDecoder__LRWriter__exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_getWriter__LRWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_getWriter__LRWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_getWriter__LRWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(), // return type
  "_7_getWriter", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_getWriter__LRWriter__args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_getWriter__LRWriter__exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_getWriter__LRWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeCharWriter_methods_writeChar_C_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_writeChar_C_V_args[] = 
{
  &TeeCharWriter_methods_writeChar_C_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_writeChar_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_writeChar_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_writeChar", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_writeChar_C_V_args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_writeChar_C_V_exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_writeChar_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeCharWriter_methods_writeChar_UC_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_writeChar_UC_V_args[] = 
{
  &TeeCharWriter_methods_writeChar_UC_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_writeChar_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_writeChar_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_writeChar", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_writeChar_UC_V_args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_writeChar_UC_V_exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_writeChar_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeCharWriter_methods_writeString_INLRString__V_arg_str = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "str", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeCharWriter_methods_writeString_INLRString__V_args[] = 
{
  &TeeCharWriter_methods_writeString_INLRString__V_arg_str,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeCharWriter_methods_writeString_INLRString__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeCharWriter_method_writeString_INLRString__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "writeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_writeString", // alternative name of method
  -1, // altlabelHashCode
  TeeCharWriter_methods_writeString_INLRString__V_args, // the arguments
  0, //arguments count
  TeeCharWriter_methods_writeString_INLRString__V_exceptions, // the declared exceptions
  TeeCharWriter_MetainfoWrapper::TeeCharWriter_method_writeString_INLRString__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TeeCharWriter_methods[] = 
{
  &TeeCharWriter_method_GetClass__L_acdk_lang_RClass_,
  &TeeCharWriter_method_TeeCharWriter_INLRCharWriter_INLRCharWriter__LRTeeCharWriter_,
  &TeeCharWriter_method_close__V,
  &TeeCharWriter_method_flush__V,
  &TeeCharWriter_method_getWriter_INLacdk_locale_RDecoder__LRWriter_,
  &TeeCharWriter_method_getWriter__LRWriter_,
  &TeeCharWriter_method_writeChar_C_V,
  &TeeCharWriter_method_writeChar_UC_V,
  &TeeCharWriter_method_writeString_INLRString__V,
  0
};


struct TeeCharWriter_MetaInfoInitializer
{  TeeCharWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TeeCharWriter::clazzInfo();
    ci->fields =  _TeeCharWriter_fields;
    ci->methods =  _TeeCharWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TeeCharWriter_MetaInfoInitializer TeeCharWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TeeReader_create_array(int length)
{
  return new ObjectArrayImpl<RTeeReader>(length);
}

//static
::acdk::lang::RObject
TeeReader_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TeeReader_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeReader_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TeeReader::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeReader_method_TeeReader_INLRReader_INLRWriter__LRTeeReader__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TeeReader(::acdk::lang::dmi::castTo< RReader>(args[0], dc), ::acdk::lang::dmi::castTo< RWriter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TeeReader_fields__out_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TeeReader* This = dmi_cast<TeeReader>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out, flags);
    else
      This->_out = ::acdk::lang::dmi::castTo< RWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TeeReader_fields__out = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(),
  TeeReader_MetainfoWrapper::TeeReader_fields__out_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TeeReader_fields[] = 
{
  &TeeReader_fields__out,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeReader_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TeeReader_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeReader_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_1_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TeeReader_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TeeReader_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TeeReader_MetainfoWrapper::TeeReader_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeReader_methods_TeeReader_INLRReader_INLRWriter__LRTeeReader__arg_from = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "from", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RReader::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeReader_methods_TeeReader_INLRReader_INLRWriter__LRTeeReader__arg_to = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "to", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeReader_methods_TeeReader_INLRReader_INLRWriter__LRTeeReader__args[] = 
{
  &TeeReader_methods_TeeReader_INLRReader_INLRWriter__LRTeeReader__arg_from,
  &TeeReader_methods_TeeReader_INLRReader_INLRWriter__LRTeeReader__arg_to,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeReader_methods_TeeReader_INLRReader_INLRWriter__LRTeeReader__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeReader_method_TeeReader_INLRReader_INLRWriter__LRTeeReader_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TeeReader", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TeeReader::clazzInfo(), // return type
  "_0_TeeReader", // alternative name of method
  -1, // altlabelHashCode
  TeeReader_methods_TeeReader_INLRReader_INLRWriter__LRTeeReader__args, // the arguments
  0, //arguments count
  TeeReader_methods_TeeReader_INLRReader_INLRWriter__LRTeeReader__exceptions, // the declared exceptions
  TeeReader_MetainfoWrapper::TeeReader_method_TeeReader_INLRReader_INLRWriter__LRTeeReader__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TeeReader_methods[] = 
{
  &TeeReader_method_GetClass__L_acdk_lang_RClass_,
  &TeeReader_method_TeeReader_INLRReader_INLRWriter__LRTeeReader_,
  0
};


struct TeeReader_MetaInfoInitializer
{  TeeReader_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TeeReader::clazzInfo();
    ci->fields =  _TeeReader_fields;
    ci->methods =  _TeeReader_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TeeReader_MetaInfoInitializer TeeReader_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
TeeWriter_create_array(int length)
{
  return new ObjectArrayImpl<RTeeWriter>(length);
}

//static
::acdk::lang::RObject
TeeWriter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class TeeWriter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeWriter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)TeeWriter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeWriter_method_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TeeWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RWriter>(args[1], dc), ::acdk::lang::dmi::castTo< RObject>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  TeeWriter_method_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new TeeWriter(::acdk::lang::dmi::castTo< RWriter>(args[0], dc), ::acdk::lang::dmi::castTo< RWriter>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TeeWriter_fields__out1_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TeeWriter* This = dmi_cast<TeeWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out1, flags);
    else
      This->_out1 = ::acdk::lang::dmi::castTo< RWriter>(var, dc);
    return fieldinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  TeeWriter_fields__out2_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    TeeWriter* This = dmi_cast<TeeWriter>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_out2, flags);
    else
      This->_out2 = ::acdk::lang::dmi::castTo< RWriter>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo TeeWriter_fields__out1 = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out1", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(),
  TeeWriter_MetainfoWrapper::TeeWriter_fields__out1_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo TeeWriter_fields__out2 = 
{
  ::acdk::lang::dmi::MiProtected | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_out2", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo(),
  TeeWriter_MetainfoWrapper::TeeWriter_fields__out2_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _TeeWriter_fields[] = 
{
  &TeeWriter_fields__out1,
  &TeeWriter_fields__out2,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeWriter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* TeeWriter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeWriter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  TeeWriter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  TeeWriter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  TeeWriter_MetainfoWrapper::TeeWriter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__arg_out1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__arg_out2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__arg_lock = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "lock", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__args[] = 
{
  &TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__arg_out1,
  &TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__arg_out2,
  &TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__arg_lock,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeWriter_method_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "TeeWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TeeWriter::clazzInfo(), // return type
  "_0_TeeWriter", // alternative name of method
  -1, // altlabelHashCode
  TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__args, // the arguments
  0, //arguments count
  TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__exceptions, // the declared exceptions
  TeeWriter_MetainfoWrapper::TeeWriter_method_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__arg_out1 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out1", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__arg_out2 = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "out2", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RWriter::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__args[] = 
{
  &TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__arg_out1,
  &TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__arg_out2,
  0
};

::acdk::lang::dmi::ClazzInfo* TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo TeeWriter_method_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "TeeWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  TeeWriter::clazzInfo(), // return type
  "_1_TeeWriter", // alternative name of method
  -1, // altlabelHashCode
  TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__args, // the arguments
  0, //arguments count
  TeeWriter_methods_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__exceptions, // the declared exceptions
  TeeWriter_MetainfoWrapper::TeeWriter_method_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _TeeWriter_methods[] = 
{
  &TeeWriter_method_GetClass__L_acdk_lang_RClass_,
  &TeeWriter_method_TeeWriter_INLRWriter_INLRWriter_INLRObject__LRTeeWriter_,
  &TeeWriter_method_TeeWriter_INLRWriter_INLRWriter__LRTeeWriter_,
  0
};


struct TeeWriter_MetaInfoInitializer
{  TeeWriter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = TeeWriter::clazzInfo();
    ci->fields =  _TeeWriter_fields;
    ci->methods =  _TeeWriter_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
TeeWriter_MetaInfoInitializer TeeWriter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io


namespace acdk { 
namespace io { 


//static
::acdk::lang::RObject
Writer_create_array(int length)
{
  return new ObjectArrayImpl<RWriter>(length);
}

//static
::acdk::lang::RObject
Writer_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Writer_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Writer::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_close__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    This->close();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_flush__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    This->flush();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_getCharWriter_INLacdk_locale_REncoder__LRCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Writer::getCharWriter(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getCharWriter(::acdk::lang::dmi::castTo< acdk::locale::REncoder>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_getCharWriter__LRCharWriter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Writer::getCharWriter();
    else
        ret = (::acdk::lang::RObject)This->getCharWriter();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_getWriterStorage__LRStorage__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Writer::getWriterStorage();
    else
        ret = (::acdk::lang::RObject)This->getWriterStorage();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_write_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    This->write(::acdk::lang::dmi::castTo< byte>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_write_INLRbyteArray_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Writer::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_write_INLRbyteArray__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Writer::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Writer_method_write_INLRbyteArray_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Writer* This = dmi_cast<Writer>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Writer::write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->write(::acdk::lang::dmi::castTo< RbyteArray>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Writer_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_9_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Writer_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_close__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_close__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_close__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "close", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_1_close", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_close__V_args, // the arguments
  0, //arguments count
  Writer_methods_close__V_exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_close__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_flush__V_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_flush__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_flush__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "flush", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_0_flush", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_flush__V_args, // the arguments
  0, //arguments count
  Writer_methods_flush__V_exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_flush__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Writer_methods_getCharWriter_INLacdk_locale_REncoder__LRCharWriter__arg_encoder = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "encoder", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  acdk::locale::REncoder::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_getCharWriter_INLacdk_locale_REncoder__LRCharWriter__args[] = 
{
  &Writer_methods_getCharWriter_INLacdk_locale_REncoder__LRCharWriter__arg_encoder,
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_getCharWriter_INLacdk_locale_REncoder__LRCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_getCharWriter_INLacdk_locale_REncoder__LRCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo(), // return type
  "_7_getCharWriter", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_getCharWriter_INLacdk_locale_REncoder__LRCharWriter__args, // the arguments
  0, //arguments count
  Writer_methods_getCharWriter_INLacdk_locale_REncoder__LRCharWriter__exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_getCharWriter_INLacdk_locale_REncoder__LRCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_getCharWriter__LRCharWriter__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_getCharWriter__LRCharWriter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_getCharWriter__LRCharWriter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getCharWriter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RCharWriter::clazzInfo(), // return type
  "_8_getCharWriter", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_getCharWriter__LRCharWriter__args, // the arguments
  0, //arguments count
  Writer_methods_getCharWriter__LRCharWriter__exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_getCharWriter__LRCharWriter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_getWriterStorage__LRStorage__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_getWriterStorage__LRStorage__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_getWriterStorage__LRStorage_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getWriterStorage", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RStorage::clazzInfo(), // return type
  "_6_getWriterStorage", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_getWriterStorage__LRStorage__args, // the arguments
  0, //arguments count
  Writer_methods_getWriterStorage__LRStorage__exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_getWriterStorage__LRStorage__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Writer_methods_write_B_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_write_B_V_args[] = 
{
  &Writer_methods_write_B_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_write_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_write_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_2_write", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_write_B_V_args, // the arguments
  0, //arguments count
  Writer_methods_write_B_V_exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_write_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Writer_methods_write_INLRbyteArray_II_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Writer_methods_write_INLRbyteArray_II_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Writer_methods_write_INLRbyteArray_II_V_arg_len = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "len", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_write_INLRbyteArray_II_V_args[] = 
{
  &Writer_methods_write_INLRbyteArray_II_V_arg_ch,
  &Writer_methods_write_INLRbyteArray_II_V_arg_offset,
  &Writer_methods_write_INLRbyteArray_II_V_arg_len,
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_write_INLRbyteArray_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_write_INLRbyteArray_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_write", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_write_INLRbyteArray_II_V_args, // the arguments
  0, //arguments count
  Writer_methods_write_INLRbyteArray_II_V_exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_write_INLRbyteArray_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Writer_methods_write_INLRbyteArray__V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_write_INLRbyteArray__V_args[] = 
{
  &Writer_methods_write_INLRbyteArray__V_arg_ch,
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_write_INLRbyteArray__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_write_INLRbyteArray__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_4_write", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_write_INLRbyteArray__V_args, // the arguments
  0, //arguments count
  Writer_methods_write_INLRbyteArray__V_exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_write_INLRbyteArray__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Writer_methods_write_INLRbyteArray_I_V_arg_ch = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "ch", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RbyteArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Writer_methods_write_INLRbyteArray_I_V_arg_offset = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "offset", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Writer_methods_write_INLRbyteArray_I_V_args[] = 
{
  &Writer_methods_write_INLRbyteArray_I_V_arg_ch,
  &Writer_methods_write_INLRbyteArray_I_V_arg_offset,
  0
};

::acdk::lang::dmi::ClazzInfo* Writer_methods_write_INLRbyteArray_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Writer_method_write_INLRbyteArray_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "write", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_5_write", // alternative name of method
  -1, // altlabelHashCode
  Writer_methods_write_INLRbyteArray_I_V_args, // the arguments
  0, //arguments count
  Writer_methods_write_INLRbyteArray_I_V_exceptions, // the declared exceptions
  Writer_MetainfoWrapper::Writer_method_write_INLRbyteArray_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Writer_methods[] = 
{
  &Writer_method_GetClass__L_acdk_lang_RClass_,
  &Writer_method_close__V,
  &Writer_method_flush__V,
  &Writer_method_getCharWriter_INLacdk_locale_REncoder__LRCharWriter_,
  &Writer_method_getCharWriter__LRCharWriter_,
  &Writer_method_getWriterStorage__LRStorage_,
  &Writer_method_write_B_V,
  &Writer_method_write_INLRbyteArray_II_V,
  &Writer_method_write_INLRbyteArray__V,
  &Writer_method_write_INLRbyteArray_I_V,
  0
};


struct Writer_MetaInfoInitializer
{  Writer_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Writer::clazzInfo();
    ci->fields =  _Writer_fields;
    ci->methods =  _Writer_methods;
    ci->_scopeParent = acdk_io_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Writer_MetaInfoInitializer Writer_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace io

