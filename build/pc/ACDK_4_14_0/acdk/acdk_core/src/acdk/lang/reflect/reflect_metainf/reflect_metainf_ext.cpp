// Generated by ACDK Metacompiler, 
// Copyrighted by Roger Rene Kommer, artefaktur
// 
// Dont edit this file manually
// 
#include <acdk.h>


#include "../reflect.h"
#include "../AccessibleObject.h"
#include "../Constructor.h"
#include "../Enumeration.h"
#include "../Field.h"
#include "../InvocationTargetException.h"
#include "../Member.h"
#include "../Method.h"
#include "../Modifier.h"
#include "../Parameter.h"
#include "../reflect.h"
#include "../Unit.h"
#include <acdk/lang/dmi/ClazzInfoInternals.h>


struct acdk::lang::dmi::UnitInfo acdk_lang_reflect_unitInfo = {
  ::acdk::lang::dmi::MiUnitInfo, // flags
  0, //attributeRes
  "reflect", // name of unit
  -1, // hashCode
  "acdk/lang", // ns
  0, // _scopeParent
  0, // _nextScopeSibling
  0 // _firstChild first ClazzInfo of this unit
};

static ::acdk::lang::dmi::RegisterUnitInfo _register_acdk_lang_reflect_unitInfo(&acdk_lang_reflect_unitInfo);


namespace acdk { 
namespace lang { 
namespace reflect { 


//static
::acdk::lang::RObject
AccessibleObject_create_array(int length)
{
  return new ObjectArrayImpl<RAccessibleObject>(length);
}

//static
::acdk::lang::RObject
AccessibleObject_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class AccessibleObject_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AccessibleObject_method_AccessibleObject_Z_LRAccessibleObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AccessibleObject(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AccessibleObject_method_AccessibleObject__LRAccessibleObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new AccessibleObject();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AccessibleObject_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)AccessibleObject::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AccessibleObject_method_isAccessible__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AccessibleObject* This = dmi_cast<AccessibleObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->AccessibleObject::isAccessible();
    else
      ret = This->isAccessible();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  AccessibleObject_method_setAccessible_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    AccessibleObject* This = dmi_cast<AccessibleObject>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->AccessibleObject::setAccessible(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        This->setAccessible(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzFieldInfo*
  AccessibleObject_fields__accessible_accessor(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& var, ::acdk::lang::dmi::DmiClient& dc, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzFieldInfo* fieldinf)
  {
    AccessibleObject* This = dmi_cast<AccessibleObject>(This_);
    if (flags & ::acdk::lang::dmi::MiReadOnly)
     var = ::acdk::lang::getScriptVarOf(This->_accessible, flags);
    else
      This->_accessible = ::acdk::lang::dmi::castTo< bool>(var, dc);
    return fieldinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo AccessibleObject_fields__accessible = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiFieldInfo,
  0, //AttributesRes
  "_accessible", // name
   -1, // hashCode
   "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(),
  AccessibleObject_MetainfoWrapper::AccessibleObject_fields__accessible_accessor, // read/write access to this fields
  (void*)0 // address of field
};

::acdk::lang::dmi::ClazzFieldInfo* _AccessibleObject_fields[] = 
{
  &AccessibleObject_fields__accessible,
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo AccessibleObject_methods_AccessibleObject_Z_LRAccessibleObject__arg_accessable = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessable", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AccessibleObject_methods_AccessibleObject_Z_LRAccessibleObject__args[] = 
{
  &AccessibleObject_methods_AccessibleObject_Z_LRAccessibleObject__arg_accessable,
  0
};

::acdk::lang::dmi::ClazzInfo* AccessibleObject_methods_AccessibleObject_Z_LRAccessibleObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AccessibleObject_method_AccessibleObject_Z_LRAccessibleObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "AccessibleObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AccessibleObject::clazzInfo(), // return type
  "_0_AccessibleObject", // alternative name of method
  -1, // altlabelHashCode
  AccessibleObject_methods_AccessibleObject_Z_LRAccessibleObject__args, // the arguments
  0, //arguments count
  AccessibleObject_methods_AccessibleObject_Z_LRAccessibleObject__exceptions, // the declared exceptions
  AccessibleObject_MetainfoWrapper::AccessibleObject_method_AccessibleObject_Z_LRAccessibleObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AccessibleObject_methods_AccessibleObject__LRAccessibleObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AccessibleObject_methods_AccessibleObject__LRAccessibleObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AccessibleObject_method_AccessibleObject__LRAccessibleObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor,// class flags, like static, Constructor
  0, //AttributesRes
  "AccessibleObject", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  AccessibleObject::clazzInfo(), // return type
  "_1_AccessibleObject", // alternative name of method
  -1, // altlabelHashCode
  AccessibleObject_methods_AccessibleObject__LRAccessibleObject__args, // the arguments
  0, //arguments count
  AccessibleObject_methods_AccessibleObject__LRAccessibleObject__exceptions, // the declared exceptions
  AccessibleObject_MetainfoWrapper::AccessibleObject_method_AccessibleObject__LRAccessibleObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AccessibleObject_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AccessibleObject_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AccessibleObject_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_4_GetClass", // alternative name of method
  -1, // altlabelHashCode
  AccessibleObject_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  AccessibleObject_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  AccessibleObject_MetainfoWrapper::AccessibleObject_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* AccessibleObject_methods_isAccessible__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* AccessibleObject_methods_isAccessible__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AccessibleObject_method_isAccessible__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "isAccessible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_isAccessible", // alternative name of method
  -1, // altlabelHashCode
  AccessibleObject_methods_isAccessible__Z_args, // the arguments
  0, //arguments count
  AccessibleObject_methods_isAccessible__Z_exceptions, // the declared exceptions
  AccessibleObject_MetainfoWrapper::AccessibleObject_method_isAccessible__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo AccessibleObject_methods_setAccessible_Z_V_arg_flag = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "flag", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* AccessibleObject_methods_setAccessible_Z_V_args[] = 
{
  &AccessibleObject_methods_setAccessible_Z_V_arg_flag,
  0
};

::acdk::lang::dmi::ClazzInfo* AccessibleObject_methods_setAccessible_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo AccessibleObject_method_setAccessible_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setAccessible", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_3_setAccessible", // alternative name of method
  -1, // altlabelHashCode
  AccessibleObject_methods_setAccessible_Z_V_args, // the arguments
  0, //arguments count
  AccessibleObject_methods_setAccessible_Z_V_exceptions, // the declared exceptions
  AccessibleObject_MetainfoWrapper::AccessibleObject_method_setAccessible_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _AccessibleObject_methods[] = 
{
  &AccessibleObject_method_AccessibleObject_Z_LRAccessibleObject_,
  &AccessibleObject_method_AccessibleObject__LRAccessibleObject_,
  &AccessibleObject_method_GetClass__L_acdk_lang_RClass_,
  &AccessibleObject_method_isAccessible__Z,
  &AccessibleObject_method_setAccessible_Z_V,
  0
};


struct AccessibleObject_MetaInfoInitializer
{  AccessibleObject_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = AccessibleObject::clazzInfo();
    ci->fields =  _AccessibleObject_fields;
    ci->methods =  _AccessibleObject_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
AccessibleObject_MetaInfoInitializer AccessibleObject_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Constructor_create_array(int length)
{
  return new ObjectArrayImpl<RConstructor>(length);
}

//static
::acdk::lang::RObject
Constructor_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Constructor_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Constructor::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Constructor::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_getExceptionTypes__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::getExceptionTypes();
    else
        ret = (::acdk::lang::RObject)This->getExceptionTypes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_getParameter_I_LRParameter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::getParameter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getParameter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_getParameter_INLRString__LRParameter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::getParameter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getParameter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_getParameterCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Constructor::getParameterCount();
    else
      ret = This->getParameterCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_getParameterTypes__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::getParameterTypes();
    else
        ret = (::acdk::lang::RObject)This->getParameterTypes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_getParameters__LRParameterArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::getParameters();
    else
        ret = (::acdk::lang::RObject)This->getParameters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Constructor::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_newInstance_INLRObjectArray__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::newInstance(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->newInstance(::acdk::lang::dmi::castTo< RObjectArray>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_toTypeString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Constructor_method_toTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Constructor* This = dmi_cast<Constructor>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Constructor::toTypeString();
    else
        ret = (::acdk::lang::RObject)This->toTypeString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Constructor_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_c_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Constructor_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Constructor_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_equals_INLRObject__Z_args[] = 
{
  &Constructor_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_equals", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Constructor_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_getExceptionTypes__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_getExceptionTypes__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_getExceptionTypes__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExceptionTypes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_7_getExceptionTypes", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_getExceptionTypes__LRClassArray__args, // the arguments
  0, //arguments count
  Constructor_methods_getExceptionTypes__LRClassArray__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_getExceptionTypes__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Constructor_methods_getParameter_I_LRParameter__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_getParameter_I_LRParameter__args[] = 
{
  &Constructor_methods_getParameter_I_LRParameter__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_getParameter_I_LRParameter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_getParameter_I_LRParameter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameter::clazzInfo(), // return type
  "_4_getParameter", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_getParameter_I_LRParameter__args, // the arguments
  0, //arguments count
  Constructor_methods_getParameter_I_LRParameter__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_getParameter_I_LRParameter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Constructor_methods_getParameter_INLRString__LRParameter__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_getParameter_INLRString__LRParameter__args[] = 
{
  &Constructor_methods_getParameter_INLRString__LRParameter__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_getParameter_INLRString__LRParameter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_getParameter_INLRString__LRParameter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameter::clazzInfo(), // return type
  "_5_getParameter", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_getParameter_INLRString__LRParameter__args, // the arguments
  0, //arguments count
  Constructor_methods_getParameter_INLRString__LRParameter__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_getParameter_INLRString__LRParameter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_getParameterCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_getParameterCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_getParameterCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameterCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_getParameterCount", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_getParameterCount__I_args, // the arguments
  0, //arguments count
  Constructor_methods_getParameterCount__I_exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_getParameterCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_getParameterTypes__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_getParameterTypes__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_getParameterTypes__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameterTypes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_8_getParameterTypes", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_getParameterTypes__LRClassArray__args, // the arguments
  0, //arguments count
  Constructor_methods_getParameterTypes__LRClassArray__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_getParameterTypes__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_getParameters__LRParameterArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_getParameters__LRParameterArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_getParameters__LRParameterArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameterArray::clazzInfo(), // return type
  "_3_getParameters", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_getParameters__LRParameterArray__args, // the arguments
  0, //arguments count
  Constructor_methods_getParameters__LRParameterArray__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_getParameters__LRParameterArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Constructor_methods_hashCode__I_exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Constructor_methods_newInstance_INLRObjectArray__LRObject__arg_initargs = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "initargs", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_newInstance_INLRObjectArray__LRObject__args[] = 
{
  &Constructor_methods_newInstance_INLRObjectArray__LRObject__arg_initargs,
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_newInstance_INLRObjectArray__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_newInstance_INLRObjectArray__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "newInstance", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_a_newInstance", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_newInstance_INLRObjectArray__LRObject__args, // the arguments
  0, //arguments count
  Constructor_methods_newInstance_INLRObjectArray__LRObject__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_newInstance_INLRObjectArray__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_toString", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Constructor_methods_toString__LRString__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Constructor_methods_toTypeString_I_LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_toTypeString_I_LRString__args[] = 
{
  &Constructor_methods_toTypeString_I_LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_toTypeString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_toTypeString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_toTypeString_I_LRString__args, // the arguments
  0, //arguments count
  Constructor_methods_toTypeString_I_LRString__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_toTypeString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Constructor_methods_toTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Constructor_methods_toTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Constructor_method_toTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Constructor_methods_toTypeString__LRString__args, // the arguments
  0, //arguments count
  Constructor_methods_toTypeString__LRString__exceptions, // the declared exceptions
  Constructor_MetainfoWrapper::Constructor_method_toTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Constructor_methods[] = 
{
  &Constructor_method_GetClass__L_acdk_lang_RClass_,
  &Constructor_method_equals_INLRObject__Z,
  &Constructor_method_getExceptionTypes__LRClassArray_,
  &Constructor_method_getParameter_I_LRParameter_,
  &Constructor_method_getParameter_INLRString__LRParameter_,
  &Constructor_method_getParameterCount__I,
  &Constructor_method_getParameterTypes__LRClassArray_,
  &Constructor_method_getParameters__LRParameterArray_,
  &Constructor_method_hashCode__I,
  &Constructor_method_newInstance_INLRObjectArray__LRObject_,
  &Constructor_method_toString__LRString_,
  &Constructor_method_toTypeString_I_LRString_,
  &Constructor_method_toTypeString__LRString_,
  0
};


struct Constructor_MetaInfoInitializer
{  Constructor_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Constructor::clazzInfo();
    ci->fields =  _Constructor_fields;
    ci->methods =  _Constructor_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Constructor_MetaInfoInitializer Constructor_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 


//static
::acdk::lang::RObject
EnumerationValue_create_array(int length)
{
  return new ObjectArrayImpl<REnumerationValue>(length);
}

//static
::acdk::lang::RObject
EnumerationValue_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class EnumerationValue_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EnumerationValue_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)EnumerationValue::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EnumerationValue_method_getEnumeration__LREnumeration__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EnumerationValue* This = dmi_cast<EnumerationValue>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EnumerationValue::getEnumeration();
    else
        ret = (::acdk::lang::RObject)This->getEnumeration();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EnumerationValue_method_toTypeString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EnumerationValue* This = dmi_cast<EnumerationValue>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EnumerationValue::toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  EnumerationValue_method_toTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    EnumerationValue* This = dmi_cast<EnumerationValue>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->EnumerationValue::toTypeString();
    else
        ret = (::acdk::lang::RObject)This->toTypeString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _EnumerationValue_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* EnumerationValue_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EnumerationValue_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EnumerationValue_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  EnumerationValue_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  EnumerationValue_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  EnumerationValue_MetainfoWrapper::EnumerationValue_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EnumerationValue_methods_getEnumeration__LREnumeration__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EnumerationValue_methods_getEnumeration__LREnumeration__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EnumerationValue_method_getEnumeration__LREnumeration_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnumeration", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumeration::clazzInfo(), // return type
  "_2_getEnumeration", // alternative name of method
  -1, // altlabelHashCode
  EnumerationValue_methods_getEnumeration__LREnumeration__args, // the arguments
  0, //arguments count
  EnumerationValue_methods_getEnumeration__LREnumeration__exceptions, // the declared exceptions
  EnumerationValue_MetainfoWrapper::EnumerationValue_method_getEnumeration__LREnumeration__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo EnumerationValue_methods_toTypeString_I_LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* EnumerationValue_methods_toTypeString_I_LRString__args[] = 
{
  &EnumerationValue_methods_toTypeString_I_LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* EnumerationValue_methods_toTypeString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EnumerationValue_method_toTypeString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  EnumerationValue_methods_toTypeString_I_LRString__args, // the arguments
  0, //arguments count
  EnumerationValue_methods_toTypeString_I_LRString__exceptions, // the declared exceptions
  EnumerationValue_MetainfoWrapper::EnumerationValue_method_toTypeString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* EnumerationValue_methods_toTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* EnumerationValue_methods_toTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo EnumerationValue_method_toTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  EnumerationValue_methods_toTypeString__LRString__args, // the arguments
  0, //arguments count
  EnumerationValue_methods_toTypeString__LRString__exceptions, // the declared exceptions
  EnumerationValue_MetainfoWrapper::EnumerationValue_method_toTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _EnumerationValue_methods[] = 
{
  &EnumerationValue_method_GetClass__L_acdk_lang_RClass_,
  &EnumerationValue_method_getEnumeration__LREnumeration_,
  &EnumerationValue_method_toTypeString_I_LRString_,
  &EnumerationValue_method_toTypeString__LRString_,
  0
};


struct EnumerationValue_MetaInfoInitializer
{  EnumerationValue_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = EnumerationValue::clazzInfo();
    ci->fields =  _EnumerationValue_fields;
    ci->methods =  _EnumerationValue_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
EnumerationValue_MetaInfoInitializer EnumerationValue_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 


//static
::acdk::lang::RObject
Enumeration_create_array(int length)
{
  return new ObjectArrayImpl<REnumeration>(length);
}

//static
::acdk::lang::RObject
Enumeration_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Enumeration_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Enumeration::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_compareTo_INLREnumeration__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Enumeration::compareTo(::acdk::lang::dmi::castTo< REnumeration>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< REnumeration>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Enumeration::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_getEnumNameForValue_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Enumeration::getEnumNameForValue(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getEnumNameForValue(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_getEnumNameForValue_INLRString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Enumeration::getEnumNameForValue(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_getEnumeration_INLRString_INLRString__LREnumeration__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Enumeration::getEnumeration(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_getEnumerationValue_INLRString_INLRString__LREnumerationValue__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Enumeration::getEnumerationValue(::acdk::lang::dmi::castTo< RString>(args[0], dc), ::acdk::lang::dmi::castTo< RString>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_getEnumerations__LREnumerationArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Enumeration::getEnumerations();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_getValues__LREnumerationValueArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Enumeration::getValues();
    else
        ret = (::acdk::lang::RObject)This->getValues();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Enumeration::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_toIndentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Enumeration::toIndentifier();
    else
        ret = (::acdk::lang::RObject)This->toIndentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Enumeration::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_toTypeString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Enumeration::toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Enumeration_method_toTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Enumeration* This = dmi_cast<Enumeration>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Enumeration::toTypeString();
    else
        ret = (::acdk::lang::RObject)This->toTypeString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Enumeration_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_d_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Enumeration_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_compareTo_INLREnumeration__I_arg_other = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "other", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumeration::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_compareTo_INLREnumeration__I_args[] = 
{
  &Enumeration_methods_compareTo_INLREnumeration__I_arg_other,
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_compareTo_INLREnumeration__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_compareTo_INLREnumeration__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_6_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_compareTo_INLREnumeration__I_args, // the arguments
  0, //arguments count
  Enumeration_methods_compareTo_INLREnumeration__I_exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_compareTo_INLREnumeration__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_equals_INLRObject__Z_args[] = 
{
  &Enumeration_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_equals", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Enumeration_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_getEnumNameForValue_I_LRString__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_getEnumNameForValue_I_LRString__args[] = 
{
  &Enumeration_methods_getEnumNameForValue_I_LRString__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_getEnumNameForValue_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_getEnumNameForValue_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnumNameForValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getEnumNameForValue", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_getEnumNameForValue_I_LRString__args, // the arguments
  0, //arguments count
  Enumeration_methods_getEnumNameForValue_I_LRString__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_getEnumNameForValue_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_getEnumNameForValue_INLRString_I_LRString__arg_enumName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enumName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_getEnumNameForValue_INLRString_I_LRString__arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_getEnumNameForValue_INLRString_I_LRString__args[] = 
{
  &Enumeration_methods_getEnumNameForValue_INLRString_I_LRString__arg_enumName,
  &Enumeration_methods_getEnumNameForValue_INLRString_I_LRString__arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_getEnumNameForValue_INLRString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_getEnumNameForValue_INLRString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnumNameForValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_getEnumNameForValue", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_getEnumNameForValue_INLRString_I_LRString__args, // the arguments
  0, //arguments count
  Enumeration_methods_getEnumNameForValue_INLRString_I_LRString__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_getEnumNameForValue_INLRString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_getEnumeration_INLRString_INLRString__LREnumeration__arg_enumName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enumName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_getEnumeration_INLRString_INLRString__LREnumeration__arg_namesp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namesp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_getEnumeration_INLRString_INLRString__LREnumeration__args[] = 
{
  &Enumeration_methods_getEnumeration_INLRString_INLRString__LREnumeration__arg_enumName,
  &Enumeration_methods_getEnumeration_INLRString_INLRString__LREnumeration__arg_namesp,
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_getEnumeration_INLRString_INLRString__LREnumeration__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_getEnumeration_INLRString_INLRString__LREnumeration_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnumeration", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumeration::clazzInfo(), // return type
  "_0_getEnumeration", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_getEnumeration_INLRString_INLRString__LREnumeration__args, // the arguments
  0, //arguments count
  Enumeration_methods_getEnumeration_INLRString_INLRString__LREnumeration__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_getEnumeration_INLRString_INLRString__LREnumeration__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_getEnumerationValue_INLRString_INLRString__LREnumerationValue__arg_enumName = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "enumName", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_getEnumerationValue_INLRString_INLRString__LREnumerationValue__arg_namesp = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "namesp", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_getEnumerationValue_INLRString_INLRString__LREnumerationValue__args[] = 
{
  &Enumeration_methods_getEnumerationValue_INLRString_INLRString__LREnumerationValue__arg_enumName,
  &Enumeration_methods_getEnumerationValue_INLRString_INLRString__LREnumerationValue__arg_namesp,
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_getEnumerationValue_INLRString_INLRString__LREnumerationValue__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_getEnumerationValue_INLRString_INLRString__LREnumerationValue_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnumerationValue", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumerationValue::clazzInfo(), // return type
  "_1_getEnumerationValue", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_getEnumerationValue_INLRString_INLRString__LREnumerationValue__args, // the arguments
  0, //arguments count
  Enumeration_methods_getEnumerationValue_INLRString_INLRString__LREnumerationValue__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_getEnumerationValue_INLRString_INLRString__LREnumerationValue__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_getEnumerations__LREnumerationArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_getEnumerations__LREnumerationArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_getEnumerations__LREnumerationArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnumerations", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumerationArray::clazzInfo(), // return type
  "_4_getEnumerations", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_getEnumerations__LREnumerationArray__args, // the arguments
  0, //arguments count
  Enumeration_methods_getEnumerations__LREnumerationArray__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_getEnumerations__LREnumerationArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_getValues__LREnumerationValueArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_getValues__LREnumerationValueArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_getValues__LREnumerationValueArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getValues", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumerationValueArray::clazzInfo(), // return type
  "_c_getValues", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_getValues__LREnumerationValueArray__args, // the arguments
  0, //arguments count
  Enumeration_methods_getValues__LREnumerationValueArray__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_getValues__LREnumerationValueArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_7_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Enumeration_methods_hashCode__I_exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_toIndentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_toIndentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_toIndentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toIndentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_9_toIndentifier", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_toIndentifier__LRString__args, // the arguments
  0, //arguments count
  Enumeration_methods_toIndentifier__LRString__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_toIndentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_8_toString", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Enumeration_methods_toString__LRString__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Enumeration_methods_toTypeString_I_LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_toTypeString_I_LRString__args[] = 
{
  &Enumeration_methods_toTypeString_I_LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_toTypeString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_toTypeString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_toTypeString_I_LRString__args, // the arguments
  0, //arguments count
  Enumeration_methods_toTypeString_I_LRString__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_toTypeString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Enumeration_methods_toTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Enumeration_methods_toTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Enumeration_method_toTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Enumeration_methods_toTypeString__LRString__args, // the arguments
  0, //arguments count
  Enumeration_methods_toTypeString__LRString__exceptions, // the declared exceptions
  Enumeration_MetainfoWrapper::Enumeration_method_toTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Enumeration_methods[] = 
{
  &Enumeration_method_GetClass__L_acdk_lang_RClass_,
  &Enumeration_method_compareTo_INLREnumeration__I,
  &Enumeration_method_equals_INLRObject__Z,
  &Enumeration_method_getEnumNameForValue_I_LRString_,
  &Enumeration_method_getEnumNameForValue_INLRString_I_LRString_,
  &Enumeration_method_getEnumeration_INLRString_INLRString__LREnumeration_,
  &Enumeration_method_getEnumerationValue_INLRString_INLRString__LREnumerationValue_,
  &Enumeration_method_getEnumerations__LREnumerationArray_,
  &Enumeration_method_getValues__LREnumerationValueArray_,
  &Enumeration_method_hashCode__I,
  &Enumeration_method_toIndentifier__LRString_,
  &Enumeration_method_toString__LRString_,
  &Enumeration_method_toTypeString_I_LRString_,
  &Enumeration_method_toTypeString__LRString_,
  0
};


struct Enumeration_MetaInfoInitializer
{  Enumeration_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Enumeration::clazzInfo();
    ci->fields =  _Enumeration_fields;
    ci->methods =  _Enumeration_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Enumeration_MetaInfoInitializer Enumeration_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 


//static
::acdk::lang::RObject
Field_create_array(int length)
{
  return new ObjectArrayImpl<RField>(length);
}

//static
::acdk::lang::RObject
Field_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Field_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Field::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method__isStatic__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::_isStatic();
    else
      ret = This->_isStatic();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_get_INLRObject_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::get(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_get_INLRObject__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_get_I_LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->get(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_get__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::get();
    else
        ret = (::acdk::lang::RObject)This->get();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getBoolean_INLRObject_I_Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getBoolean(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getBoolean(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getBoolean_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getBoolean(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getBoolean(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getByte_INLRObject_I_B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getByte(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getByte(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getByte_INLRObject__B_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getByte(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getByte(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getChar_INLRObject_I_C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getChar_INLRObject__C_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getDeclaringClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::getDeclaringClass();
    else
        ret = (::acdk::lang::RObject)This->getDeclaringClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getDouble_INLRObject_I_D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getDouble(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getDouble(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getDouble_INLRObject__D_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getDouble(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getDouble(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getFloat_INLRObject_I_F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getFloat(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getFloat(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getFloat_INLRObject__F_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getFloat(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getFloat(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getInt_INLRObject_I_I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getInt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getInt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getInt_INLRObject__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getInt(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getInt(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getLong_INLRObject_I_J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getLong(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getLong(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getLong_INLRObject__J_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getLong(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getLong(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getModifiers__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getModifiers();
    else
      ret = This->getModifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::getName();
    else
        ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getShort_INLRObject_I_S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getShort(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getShort(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getShort_INLRObject__S_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getShort(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getShort(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getType__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getUcChar_INLRObject_I_UC_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getUcChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
      ret = This->getUcChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_getUcChar_INLRObject__UC_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::getUcChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->getUcChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Field::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_set_INLRObject_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::set(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->set(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_set_INLRObject_INLRObject__V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::set(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    else
        This->set(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObject>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setBoolean_INLRObject_ZI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setBoolean(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setBoolean(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setBoolean_INLRObject_Z_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setBoolean(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    else
        This->setBoolean(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< bool>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setByte_INLRObject_BI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setByte(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setByte(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setByte_INLRObject_B_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setByte(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    else
        This->setByte(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< byte>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setChar_INLRObject_CI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setChar_INLRObject_C_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    else
        This->setChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< char>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setDouble_INLRObject_DI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setDouble(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setDouble(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setDouble_INLRObject_D_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setDouble(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc));
    else
        This->setDouble(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< double>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setFloat_INLRObject_FI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setFloat(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setFloat(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setFloat_INLRObject_F_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setFloat(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    else
        This->setFloat(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< float>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setInt_INLRObject_II_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setInt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setInt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setInt_INLRObject_I_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setInt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    else
        This->setInt(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< int>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setLong_INLRObject_JI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setLong(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setLong(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setLong_INLRObject_J_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setLong(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    else
        This->setLong(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< jlong>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setShort_INLRObject_SI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setShort(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setShort(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setShort_INLRObject_S_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setShort(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    else
        This->setShort(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< short>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setUcChar_INLRObject_UCI_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setUcChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< ucchar>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    else
        This->setUcChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< ucchar>(args[1], dc), ::acdk::lang::dmi::castTo< int>(args[2], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_setUcChar_INLRObject_UC_V_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        This->Field::setUcChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< ucchar>(args[1], dc));
    else
        This->setUcChar(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< ucchar>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_toTypeString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Field_method_toTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Field* This = dmi_cast<Field>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Field::toTypeString();
    else
        ret = (::acdk::lang::RObject)This->toTypeString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Field_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_P_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Field_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods__isStatic__Z_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods__isStatic__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method__isStatic__Z = 
{
  ::acdk::lang::dmi::MiPrivate | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "_isStatic", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_O__isStatic", // alternative name of method
  -1, // altlabelHashCode
  Field_methods__isStatic__Z_args, // the arguments
  0, //arguments count
  Field_methods__isStatic__Z_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method__isStatic__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_equals_INLRObject__Z_args[] = 
{
  &Field_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_2_equals", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Field_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_get_INLRObject_I_LRObject__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_get_INLRObject_I_LRObject__arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_get_INLRObject_I_LRObject__args[] = 
{
  &Field_methods_get_INLRObject_I_LRObject__arg_obj,
  &Field_methods_get_INLRObject_I_LRObject__arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_get_INLRObject_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_get_INLRObject_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_3_get", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_get_INLRObject_I_LRObject__args, // the arguments
  0, //arguments count
  Field_methods_get_INLRObject_I_LRObject__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_get_INLRObject_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_get_INLRObject__LRObject__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_get_INLRObject__LRObject__args[] = 
{
  &Field_methods_get_INLRObject__LRObject__arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_get_INLRObject__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_get_INLRObject__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_4_get", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_get_INLRObject__LRObject__args, // the arguments
  0, //arguments count
  Field_methods_get_INLRObject__LRObject__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_get_INLRObject__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_get_I_LRObject__arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_get_I_LRObject__args[] = 
{
  &Field_methods_get_I_LRObject__arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_get_I_LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_get_I_LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_M_get", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_get_I_LRObject__args, // the arguments
  0, //arguments count
  Field_methods_get_I_LRObject__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_get_I_LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_get__LRObject__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_get__LRObject__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_get__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "get", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_N_get", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_get__LRObject__args, // the arguments
  0, //arguments count
  Field_methods_get__LRObject__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_get__LRObject__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getBoolean_INLRObject_I_Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getBoolean_INLRObject_I_Z_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getBoolean_INLRObject_I_Z_args[] = 
{
  &Field_methods_getBoolean_INLRObject_I_Z_arg_obj,
  &Field_methods_getBoolean_INLRObject_I_Z_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getBoolean_INLRObject_I_Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getBoolean_INLRObject_I_Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_5_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getBoolean_INLRObject_I_Z_args, // the arguments
  0, //arguments count
  Field_methods_getBoolean_INLRObject_I_Z_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getBoolean_INLRObject_I_Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getBoolean_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getBoolean_INLRObject__Z_args[] = 
{
  &Field_methods_getBoolean_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getBoolean_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getBoolean_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_6_getBoolean", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getBoolean_INLRObject__Z_args, // the arguments
  0, //arguments count
  Field_methods_getBoolean_INLRObject__Z_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getBoolean_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getByte_INLRObject_I_B_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getByte_INLRObject_I_B_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getByte_INLRObject_I_B_args[] = 
{
  &Field_methods_getByte_INLRObject_I_B_arg_obj,
  &Field_methods_getByte_INLRObject_I_B_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getByte_INLRObject_I_B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getByte_INLRObject_I_B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_7_getByte", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getByte_INLRObject_I_B_args, // the arguments
  0, //arguments count
  Field_methods_getByte_INLRObject_I_B_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getByte_INLRObject_I_B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getByte_INLRObject__B_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getByte_INLRObject__B_args[] = 
{
  &Field_methods_getByte_INLRObject__B_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getByte_INLRObject__B_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getByte_INLRObject__B = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz(), // return type
  "_8_getByte", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getByte_INLRObject__B_args, // the arguments
  0, //arguments count
  Field_methods_getByte_INLRObject__B_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getByte_INLRObject__B_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getChar_INLRObject_I_C_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getChar_INLRObject_I_C_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getChar_INLRObject_I_C_args[] = 
{
  &Field_methods_getChar_INLRObject_I_C_arg_obj,
  &Field_methods_getChar_INLRObject_I_C_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getChar_INLRObject_I_C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getChar_INLRObject_I_C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_9_getChar", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getChar_INLRObject_I_C_args, // the arguments
  0, //arguments count
  Field_methods_getChar_INLRObject_I_C_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getChar_INLRObject_I_C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getChar_INLRObject__C_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getChar_INLRObject__C_args[] = 
{
  &Field_methods_getChar_INLRObject__C_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getChar_INLRObject__C_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getChar_INLRObject__C = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz(), // return type
  "_a_getChar", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getChar_INLRObject__C_args, // the arguments
  0, //arguments count
  Field_methods_getChar_INLRObject__C_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getChar_INLRObject__C_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getDeclaringClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getDeclaringClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getDeclaringClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaringClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_d_getDeclaringClass", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getDeclaringClass__LRClass__args, // the arguments
  0, //arguments count
  Field_methods_getDeclaringClass__LRClass__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getDeclaringClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getDouble_INLRObject_I_D_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getDouble_INLRObject_I_D_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getDouble_INLRObject_I_D_args[] = 
{
  &Field_methods_getDouble_INLRObject_I_D_arg_obj,
  &Field_methods_getDouble_INLRObject_I_D_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getDouble_INLRObject_I_D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getDouble_INLRObject_I_D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_e_getDouble", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getDouble_INLRObject_I_D_args, // the arguments
  0, //arguments count
  Field_methods_getDouble_INLRObject_I_D_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getDouble_INLRObject_I_D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getDouble_INLRObject__D_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getDouble_INLRObject__D_args[] = 
{
  &Field_methods_getDouble_INLRObject__D_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getDouble_INLRObject__D_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getDouble_INLRObject__D = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz(), // return type
  "_f_getDouble", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getDouble_INLRObject__D_args, // the arguments
  0, //arguments count
  Field_methods_getDouble_INLRObject__D_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getDouble_INLRObject__D_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getFloat_INLRObject_I_F_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getFloat_INLRObject_I_F_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getFloat_INLRObject_I_F_args[] = 
{
  &Field_methods_getFloat_INLRObject_I_F_arg_obj,
  &Field_methods_getFloat_INLRObject_I_F_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getFloat_INLRObject_I_F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getFloat_INLRObject_I_F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_g_getFloat", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getFloat_INLRObject_I_F_args, // the arguments
  0, //arguments count
  Field_methods_getFloat_INLRObject_I_F_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getFloat_INLRObject_I_F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getFloat_INLRObject__F_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getFloat_INLRObject__F_args[] = 
{
  &Field_methods_getFloat_INLRObject__F_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getFloat_INLRObject__F_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getFloat_INLRObject__F = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz(), // return type
  "_h_getFloat", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getFloat_INLRObject__F_args, // the arguments
  0, //arguments count
  Field_methods_getFloat_INLRObject__F_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getFloat_INLRObject__F_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getInt_INLRObject_I_I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getInt_INLRObject_I_I_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getInt_INLRObject_I_I_args[] = 
{
  &Field_methods_getInt_INLRObject_I_I_arg_obj,
  &Field_methods_getInt_INLRObject_I_I_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getInt_INLRObject_I_I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getInt_INLRObject_I_I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_i_getInt", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getInt_INLRObject_I_I_args, // the arguments
  0, //arguments count
  Field_methods_getInt_INLRObject_I_I_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getInt_INLRObject_I_I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getInt_INLRObject__I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getInt_INLRObject__I_args[] = 
{
  &Field_methods_getInt_INLRObject__I_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getInt_INLRObject__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getInt_INLRObject__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_j_getInt", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getInt_INLRObject__I_args, // the arguments
  0, //arguments count
  Field_methods_getInt_INLRObject__I_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getInt_INLRObject__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getLong_INLRObject_I_J_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getLong_INLRObject_I_J_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getLong_INLRObject_I_J_args[] = 
{
  &Field_methods_getLong_INLRObject_I_J_arg_obj,
  &Field_methods_getLong_INLRObject_I_J_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getLong_INLRObject_I_J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getLong_INLRObject_I_J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_k_getLong", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getLong_INLRObject_I_J_args, // the arguments
  0, //arguments count
  Field_methods_getLong_INLRObject_I_J_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getLong_INLRObject_I_J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getLong_INLRObject__J_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getLong_INLRObject__J_args[] = 
{
  &Field_methods_getLong_INLRObject__J_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getLong_INLRObject__J_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getLong_INLRObject__J = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz(), // return type
  "_l_getLong", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getLong_INLRObject__J_args, // the arguments
  0, //arguments count
  Field_methods_getLong_INLRObject__J_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getLong_INLRObject__J_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getModifiers__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getModifiers__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getModifiers__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_m_getModifiers", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getModifiers__I_args, // the arguments
  0, //arguments count
  Field_methods_getModifiers__I_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getModifiers__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_n_getName", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Field_methods_getName__LRString__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getShort_INLRObject_I_S_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getShort_INLRObject_I_S_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getShort_INLRObject_I_S_args[] = 
{
  &Field_methods_getShort_INLRObject_I_S_arg_obj,
  &Field_methods_getShort_INLRObject_I_S_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getShort_INLRObject_I_S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getShort_INLRObject_I_S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_o_getShort", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getShort_INLRObject_I_S_args, // the arguments
  0, //arguments count
  Field_methods_getShort_INLRObject_I_S_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getShort_INLRObject_I_S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getShort_INLRObject__S_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getShort_INLRObject__S_args[] = 
{
  &Field_methods_getShort_INLRObject__S_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getShort_INLRObject__S_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getShort_INLRObject__S = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz(), // return type
  "_p_getShort", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getShort_INLRObject__S_args, // the arguments
  0, //arguments count
  Field_methods_getShort_INLRObject__S_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getShort_INLRObject__S_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getType__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getType__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getType__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_q_getType", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getType__LRClass__args, // the arguments
  0, //arguments count
  Field_methods_getType__LRClass__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getType__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getUcChar_INLRObject_I_UC_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getUcChar_INLRObject_I_UC_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getUcChar_INLRObject_I_UC_args[] = 
{
  &Field_methods_getUcChar_INLRObject_I_UC_arg_obj,
  &Field_methods_getUcChar_INLRObject_I_UC_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getUcChar_INLRObject_I_UC_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getUcChar_INLRObject_I_UC = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUcChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_b_getUcChar", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getUcChar_INLRObject_I_UC_args, // the arguments
  0, //arguments count
  Field_methods_getUcChar_INLRObject_I_UC_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getUcChar_INLRObject_I_UC_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_getUcChar_INLRObject__UC_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_getUcChar_INLRObject__UC_args[] = 
{
  &Field_methods_getUcChar_INLRObject__UC_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_getUcChar_INLRObject__UC_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_getUcChar_INLRObject__UC = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "getUcChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz(), // return type
  "_c_getUcChar", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_getUcChar_INLRObject__UC_args, // the arguments
  0, //arguments count
  Field_methods_getUcChar_INLRObject__UC_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_getUcChar_INLRObject__UC_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_r_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Field_methods_hashCode__I_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_set_INLRObject_INLRObject_I_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_set_INLRObject_INLRObject_I_V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_set_INLRObject_INLRObject_I_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_set_INLRObject_INLRObject_I_V_args[] = 
{
  &Field_methods_set_INLRObject_INLRObject_I_V_arg_obj,
  &Field_methods_set_INLRObject_INLRObject_I_V_arg_value,
  &Field_methods_set_INLRObject_INLRObject_I_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_set_INLRObject_INLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_set_INLRObject_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_s_set", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_set_INLRObject_INLRObject_I_V_args, // the arguments
  0, //arguments count
  Field_methods_set_INLRObject_INLRObject_I_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_set_INLRObject_INLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_set_INLRObject_INLRObject__V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_set_INLRObject_INLRObject__V_arg_value = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "value", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_set_INLRObject_INLRObject__V_args[] = 
{
  &Field_methods_set_INLRObject_INLRObject__V_arg_obj,
  &Field_methods_set_INLRObject_INLRObject__V_arg_value,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_set_INLRObject_INLRObject__V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_set_INLRObject_INLRObject__V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "set", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_t_set", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_set_INLRObject_INLRObject__V_args, // the arguments
  0, //arguments count
  Field_methods_set_INLRObject_INLRObject__V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_set_INLRObject_INLRObject__V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setBoolean_INLRObject_ZI_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setBoolean_INLRObject_ZI_V_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setBoolean_INLRObject_ZI_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setBoolean_INLRObject_ZI_V_args[] = 
{
  &Field_methods_setBoolean_INLRObject_ZI_V_arg_obj,
  &Field_methods_setBoolean_INLRObject_ZI_V_arg_v,
  &Field_methods_setBoolean_INLRObject_ZI_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setBoolean_INLRObject_ZI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setBoolean_INLRObject_ZI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_u_setBoolean", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setBoolean_INLRObject_ZI_V_args, // the arguments
  0, //arguments count
  Field_methods_setBoolean_INLRObject_ZI_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setBoolean_INLRObject_ZI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setBoolean_INLRObject_Z_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setBoolean_INLRObject_Z_V_arg_v = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "v", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setBoolean_INLRObject_Z_V_args[] = 
{
  &Field_methods_setBoolean_INLRObject_Z_V_arg_obj,
  &Field_methods_setBoolean_INLRObject_Z_V_arg_v,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setBoolean_INLRObject_Z_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setBoolean_INLRObject_Z_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setBoolean", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_v_setBoolean", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setBoolean_INLRObject_Z_V_args, // the arguments
  0, //arguments count
  Field_methods_setBoolean_INLRObject_Z_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setBoolean_INLRObject_Z_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setByte_INLRObject_BI_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setByte_INLRObject_BI_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setByte_INLRObject_BI_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setByte_INLRObject_BI_V_args[] = 
{
  &Field_methods_setByte_INLRObject_BI_V_arg_obj,
  &Field_methods_setByte_INLRObject_BI_V_arg_b,
  &Field_methods_setByte_INLRObject_BI_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setByte_INLRObject_BI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setByte_INLRObject_BI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_w_setByte", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setByte_INLRObject_BI_V_args, // the arguments
  0, //arguments count
  Field_methods_setByte_INLRObject_BI_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setByte_INLRObject_BI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setByte_INLRObject_B_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setByte_INLRObject_B_V_arg_b = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "b", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getByteClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setByte_INLRObject_B_V_args[] = 
{
  &Field_methods_setByte_INLRObject_B_V_arg_obj,
  &Field_methods_setByte_INLRObject_B_V_arg_b,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setByte_INLRObject_B_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setByte_INLRObject_B_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setByte", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_x_setByte", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setByte_INLRObject_B_V_args, // the arguments
  0, //arguments count
  Field_methods_setByte_INLRObject_B_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setByte_INLRObject_B_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setChar_INLRObject_CI_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setChar_INLRObject_CI_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setChar_INLRObject_CI_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setChar_INLRObject_CI_V_args[] = 
{
  &Field_methods_setChar_INLRObject_CI_V_arg_obj,
  &Field_methods_setChar_INLRObject_CI_V_arg_c,
  &Field_methods_setChar_INLRObject_CI_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setChar_INLRObject_CI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setChar_INLRObject_CI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_y_setChar", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setChar_INLRObject_CI_V_args, // the arguments
  0, //arguments count
  Field_methods_setChar_INLRObject_CI_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setChar_INLRObject_CI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setChar_INLRObject_C_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setChar_INLRObject_C_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setChar_INLRObject_C_V_args[] = 
{
  &Field_methods_setChar_INLRObject_C_V_arg_obj,
  &Field_methods_setChar_INLRObject_C_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setChar_INLRObject_C_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setChar_INLRObject_C_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_z_setChar", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setChar_INLRObject_C_V_args, // the arguments
  0, //arguments count
  Field_methods_setChar_INLRObject_C_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setChar_INLRObject_C_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setDouble_INLRObject_DI_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setDouble_INLRObject_DI_V_arg_d = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "d", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setDouble_INLRObject_DI_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setDouble_INLRObject_DI_V_args[] = 
{
  &Field_methods_setDouble_INLRObject_DI_V_arg_obj,
  &Field_methods_setDouble_INLRObject_DI_V_arg_d,
  &Field_methods_setDouble_INLRObject_DI_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setDouble_INLRObject_DI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setDouble_INLRObject_DI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_C_setDouble", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setDouble_INLRObject_DI_V_args, // the arguments
  0, //arguments count
  Field_methods_setDouble_INLRObject_DI_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setDouble_INLRObject_DI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setDouble_INLRObject_D_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setDouble_INLRObject_D_V_arg_d = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "d", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getDoubleClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setDouble_INLRObject_D_V_args[] = 
{
  &Field_methods_setDouble_INLRObject_D_V_arg_obj,
  &Field_methods_setDouble_INLRObject_D_V_arg_d,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setDouble_INLRObject_D_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setDouble_INLRObject_D_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setDouble", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_D_setDouble", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setDouble_INLRObject_D_V_args, // the arguments
  0, //arguments count
  Field_methods_setDouble_INLRObject_D_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setDouble_INLRObject_D_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setFloat_INLRObject_FI_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setFloat_INLRObject_FI_V_arg_f = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setFloat_INLRObject_FI_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setFloat_INLRObject_FI_V_args[] = 
{
  &Field_methods_setFloat_INLRObject_FI_V_arg_obj,
  &Field_methods_setFloat_INLRObject_FI_V_arg_f,
  &Field_methods_setFloat_INLRObject_FI_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setFloat_INLRObject_FI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setFloat_INLRObject_FI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_E_setFloat", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setFloat_INLRObject_FI_V_args, // the arguments
  0, //arguments count
  Field_methods_setFloat_INLRObject_FI_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setFloat_INLRObject_FI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setFloat_INLRObject_F_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setFloat_INLRObject_F_V_arg_f = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "f", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getFloatClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setFloat_INLRObject_F_V_args[] = 
{
  &Field_methods_setFloat_INLRObject_F_V_arg_obj,
  &Field_methods_setFloat_INLRObject_F_V_arg_f,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setFloat_INLRObject_F_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setFloat_INLRObject_F_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setFloat", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_F_setFloat", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setFloat_INLRObject_F_V_args, // the arguments
  0, //arguments count
  Field_methods_setFloat_INLRObject_F_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setFloat_INLRObject_F_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setInt_INLRObject_II_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setInt_INLRObject_II_V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setInt_INLRObject_II_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setInt_INLRObject_II_V_args[] = 
{
  &Field_methods_setInt_INLRObject_II_V_arg_obj,
  &Field_methods_setInt_INLRObject_II_V_arg_i,
  &Field_methods_setInt_INLRObject_II_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setInt_INLRObject_II_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setInt_INLRObject_II_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_G_setInt", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setInt_INLRObject_II_V_args, // the arguments
  0, //arguments count
  Field_methods_setInt_INLRObject_II_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setInt_INLRObject_II_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setInt_INLRObject_I_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setInt_INLRObject_I_V_arg_i = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "i", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setInt_INLRObject_I_V_args[] = 
{
  &Field_methods_setInt_INLRObject_I_V_arg_obj,
  &Field_methods_setInt_INLRObject_I_V_arg_i,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setInt_INLRObject_I_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setInt_INLRObject_I_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setInt", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_H_setInt", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setInt_INLRObject_I_V_args, // the arguments
  0, //arguments count
  Field_methods_setInt_INLRObject_I_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setInt_INLRObject_I_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setLong_INLRObject_JI_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setLong_INLRObject_JI_V_arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setLong_INLRObject_JI_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setLong_INLRObject_JI_V_args[] = 
{
  &Field_methods_setLong_INLRObject_JI_V_arg_obj,
  &Field_methods_setLong_INLRObject_JI_V_arg_l,
  &Field_methods_setLong_INLRObject_JI_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setLong_INLRObject_JI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setLong_INLRObject_JI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_I_setLong", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setLong_INLRObject_JI_V_args, // the arguments
  0, //arguments count
  Field_methods_setLong_INLRObject_JI_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setLong_INLRObject_JI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setLong_INLRObject_J_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setLong_INLRObject_J_V_arg_l = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "l", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getLongClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setLong_INLRObject_J_V_args[] = 
{
  &Field_methods_setLong_INLRObject_J_V_arg_obj,
  &Field_methods_setLong_INLRObject_J_V_arg_l,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setLong_INLRObject_J_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setLong_INLRObject_J_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setLong", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_J_setLong", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setLong_INLRObject_J_V_args, // the arguments
  0, //arguments count
  Field_methods_setLong_INLRObject_J_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setLong_INLRObject_J_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setShort_INLRObject_SI_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setShort_INLRObject_SI_V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setShort_INLRObject_SI_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setShort_INLRObject_SI_V_args[] = 
{
  &Field_methods_setShort_INLRObject_SI_V_arg_obj,
  &Field_methods_setShort_INLRObject_SI_V_arg_s,
  &Field_methods_setShort_INLRObject_SI_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setShort_INLRObject_SI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setShort_INLRObject_SI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_K_setShort", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setShort_INLRObject_SI_V_args, // the arguments
  0, //arguments count
  Field_methods_setShort_INLRObject_SI_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setShort_INLRObject_SI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setShort_INLRObject_S_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setShort_INLRObject_S_V_arg_s = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "s", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getShortClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setShort_INLRObject_S_V_args[] = 
{
  &Field_methods_setShort_INLRObject_S_V_arg_obj,
  &Field_methods_setShort_INLRObject_S_V_arg_s,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setShort_INLRObject_S_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setShort_INLRObject_S_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setShort", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_L_setShort", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setShort_INLRObject_S_V_args, // the arguments
  0, //arguments count
  Field_methods_setShort_INLRObject_S_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setShort_INLRObject_S_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setUcChar_INLRObject_UCI_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setUcChar_INLRObject_UCI_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setUcChar_INLRObject_UCI_V_arg_accessFlags = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "accessFlags", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setUcChar_INLRObject_UCI_V_args[] = 
{
  &Field_methods_setUcChar_INLRObject_UCI_V_arg_obj,
  &Field_methods_setUcChar_INLRObject_UCI_V_arg_c,
  &Field_methods_setUcChar_INLRObject_UCI_V_arg_accessFlags,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setUcChar_INLRObject_UCI_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setUcChar_INLRObject_UCI_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "setUcChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_A_setUcChar", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setUcChar_INLRObject_UCI_V_args, // the arguments
  0, //arguments count
  Field_methods_setUcChar_INLRObject_UCI_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setUcChar_INLRObject_UCI_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setUcChar_INLRObject_UC_V_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_setUcChar_INLRObject_UC_V_arg_c = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "c", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getUcCharClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_setUcChar_INLRObject_UC_V_args[] = 
{
  &Field_methods_setUcChar_INLRObject_UC_V_arg_obj,
  &Field_methods_setUcChar_INLRObject_UC_V_arg_c,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_setUcChar_INLRObject_UC_V_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_setUcChar_INLRObject_UC_V = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "setUcChar", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getVoidClazz(), // return type
  "_B_setUcChar", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_setUcChar_INLRObject_UC_V_args, // the arguments
  0, //arguments count
  Field_methods_setUcChar_INLRObject_UC_V_exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_setUcChar_INLRObject_UC_V_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Field_methods_toTypeString_I_LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_toTypeString_I_LRString__args[] = 
{
  &Field_methods_toTypeString_I_LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_toTypeString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_toTypeString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_toTypeString_I_LRString__args, // the arguments
  0, //arguments count
  Field_methods_toTypeString_I_LRString__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_toTypeString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Field_methods_toTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Field_methods_toTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Field_method_toTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_1_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Field_methods_toTypeString__LRString__args, // the arguments
  0, //arguments count
  Field_methods_toTypeString__LRString__exceptions, // the declared exceptions
  Field_MetainfoWrapper::Field_method_toTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Field_methods[] = 
{
  &Field_method_GetClass__L_acdk_lang_RClass_,
  &Field_method__isStatic__Z,
  &Field_method_equals_INLRObject__Z,
  &Field_method_get_INLRObject_I_LRObject_,
  &Field_method_get_INLRObject__LRObject_,
  &Field_method_get_I_LRObject_,
  &Field_method_get__LRObject_,
  &Field_method_getBoolean_INLRObject_I_Z,
  &Field_method_getBoolean_INLRObject__Z,
  &Field_method_getByte_INLRObject_I_B,
  &Field_method_getByte_INLRObject__B,
  &Field_method_getChar_INLRObject_I_C,
  &Field_method_getChar_INLRObject__C,
  &Field_method_getDeclaringClass__LRClass_,
  &Field_method_getDouble_INLRObject_I_D,
  &Field_method_getDouble_INLRObject__D,
  &Field_method_getFloat_INLRObject_I_F,
  &Field_method_getFloat_INLRObject__F,
  &Field_method_getInt_INLRObject_I_I,
  &Field_method_getInt_INLRObject__I,
  &Field_method_getLong_INLRObject_I_J,
  &Field_method_getLong_INLRObject__J,
  &Field_method_getModifiers__I,
  &Field_method_getName__LRString_,
  &Field_method_getShort_INLRObject_I_S,
  &Field_method_getShort_INLRObject__S,
  &Field_method_getType__LRClass_,
  &Field_method_getUcChar_INLRObject_I_UC,
  &Field_method_getUcChar_INLRObject__UC,
  &Field_method_hashCode__I,
  &Field_method_set_INLRObject_INLRObject_I_V,
  &Field_method_set_INLRObject_INLRObject__V,
  &Field_method_setBoolean_INLRObject_ZI_V,
  &Field_method_setBoolean_INLRObject_Z_V,
  &Field_method_setByte_INLRObject_BI_V,
  &Field_method_setByte_INLRObject_B_V,
  &Field_method_setChar_INLRObject_CI_V,
  &Field_method_setChar_INLRObject_C_V,
  &Field_method_setDouble_INLRObject_DI_V,
  &Field_method_setDouble_INLRObject_D_V,
  &Field_method_setFloat_INLRObject_FI_V,
  &Field_method_setFloat_INLRObject_F_V,
  &Field_method_setInt_INLRObject_II_V,
  &Field_method_setInt_INLRObject_I_V,
  &Field_method_setLong_INLRObject_JI_V,
  &Field_method_setLong_INLRObject_J_V,
  &Field_method_setShort_INLRObject_SI_V,
  &Field_method_setShort_INLRObject_S_V,
  &Field_method_setUcChar_INLRObject_UCI_V,
  &Field_method_setUcChar_INLRObject_UC_V,
  &Field_method_toTypeString_I_LRString_,
  &Field_method_toTypeString__LRString_,
  0
};


struct Field_MetaInfoInitializer
{  Field_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Field::clazzInfo();
    ci->fields =  _Field_fields;
    ci->methods =  _Field_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Field_MetaInfoInitializer Field_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
InvocationTargetException_create_array(int length)
{
  return new ObjectArrayImpl<RInvocationTargetException>(length);
}

//static
::acdk::lang::RObject
InvocationTargetException_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class InvocationTargetException_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvocationTargetException_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)InvocationTargetException::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvocationTargetException_method_InvocationTargetException__LRInvocationTargetException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InvocationTargetException();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  InvocationTargetException_method_InvocationTargetException_INLRString__LRInvocationTargetException__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)new InvocationTargetException(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
};


void ThrowException_InvocationTargetException(IN(::acdk::lang::RThrowable) ex)
{
  throw RInvocationTargetException(ex);
}

::acdk::lang::dmi::ClazzFieldInfo* _InvocationTargetException_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvocationTargetException_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvocationTargetException_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvocationTargetException_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_2_GetClass", // alternative name of method
  -1, // altlabelHashCode
  InvocationTargetException_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  InvocationTargetException_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  InvocationTargetException_MetainfoWrapper::InvocationTargetException_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvocationTargetException_methods_InvocationTargetException__LRInvocationTargetException__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* InvocationTargetException_methods_InvocationTargetException__LRInvocationTargetException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvocationTargetException_method_InvocationTargetException__LRInvocationTargetException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InvocationTargetException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvocationTargetException::clazzInfo(), // return type
  "_0_InvocationTargetException", // alternative name of method
  -1, // altlabelHashCode
  InvocationTargetException_methods_InvocationTargetException__LRInvocationTargetException__args, // the arguments
  0, //arguments count
  InvocationTargetException_methods_InvocationTargetException__LRInvocationTargetException__exceptions, // the declared exceptions
  InvocationTargetException_MetainfoWrapper::InvocationTargetException_method_InvocationTargetException__LRInvocationTargetException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo InvocationTargetException_methods_InvocationTargetException_INLRString__LRInvocationTargetException__arg_what = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "what", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* InvocationTargetException_methods_InvocationTargetException_INLRString__LRInvocationTargetException__args[] = 
{
  &InvocationTargetException_methods_InvocationTargetException_INLRString__LRInvocationTargetException__arg_what,
  0
};

::acdk::lang::dmi::ClazzInfo* InvocationTargetException_methods_InvocationTargetException_INLRString__LRInvocationTargetException__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo InvocationTargetException_method_InvocationTargetException_INLRString__LRInvocationTargetException_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiConstructor | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "InvocationTargetException", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  InvocationTargetException::clazzInfo(), // return type
  "_1_InvocationTargetException", // alternative name of method
  -1, // altlabelHashCode
  InvocationTargetException_methods_InvocationTargetException_INLRString__LRInvocationTargetException__args, // the arguments
  0, //arguments count
  InvocationTargetException_methods_InvocationTargetException_INLRString__LRInvocationTargetException__exceptions, // the declared exceptions
  InvocationTargetException_MetainfoWrapper::InvocationTargetException_method_InvocationTargetException_INLRString__LRInvocationTargetException__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _InvocationTargetException_methods[] = 
{
  &InvocationTargetException_method_GetClass__L_acdk_lang_RClass_,
  &InvocationTargetException_method_InvocationTargetException__LRInvocationTargetException_,
  &InvocationTargetException_method_InvocationTargetException_INLRString__LRInvocationTargetException_,
  0
};


struct InvocationTargetException_MetaInfoInitializer
{  InvocationTargetException_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = InvocationTargetException::clazzInfo();
    ci->fields =  _InvocationTargetException_fields;
    ci->methods =  _InvocationTargetException_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
InvocationTargetException_MetaInfoInitializer InvocationTargetException_MetaInfoInitializer_staticinstance__;


struct InvocationTargetException_clazzInfo_ClazzAttributesResInitializer1
{
  InvocationTargetException_clazzInfo_ClazzAttributesResInitializer1()
  {
    ::acdk::lang::dmi::ClazzAttributesRes::attachAttribute((::acdk::lang::dmi::MetaInfo*)InvocationTargetException::clazzInfo(), "__throwExceptionFunc", ::acdk::lang::dmi::ClazzAttributeResValue(0xFFFF, (void*)&ThrowException_InvocationTargetException));
  }
};

InvocationTargetException_clazzInfo_ClazzAttributesResInitializer1 InvocationTargetException_clazzInfo_ClazzAttributesResInitializer1_instance;



} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Member_create_array(int length)
{
  return new ObjectArrayImpl<RMember>(length);
}

//static
::acdk::lang::RObject
Member_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Member_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Member_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Member::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Member_method_getDeclaringClass__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Member* This = dmi_cast<Member>(This_);
    ret = (::acdk::lang::RObject)This->getDeclaringClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Member_method_getModifiers__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Member* This = dmi_cast<Member>(This_);
  ret = This->getModifiers();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Member_method_getName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Member* This = dmi_cast<Member>(This_);
    ret = (::acdk::lang::RObject)This->getName();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Member_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Member_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Member_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Member_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_3_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Member_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Member_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Member_MetainfoWrapper::Member_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Member_methods_getDeclaringClass__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Member_methods_getDeclaringClass__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Member_method_getDeclaringClass__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getDeclaringClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_0_getDeclaringClass", // alternative name of method
  -1, // altlabelHashCode
  Member_methods_getDeclaringClass__LRClass__args, // the arguments
  0, //arguments count
  Member_methods_getDeclaringClass__LRClass__exceptions, // the declared exceptions
  Member_MetainfoWrapper::Member_method_getDeclaringClass__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Member_methods_getModifiers__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Member_methods_getModifiers__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Member_method_getModifiers__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getModifiers", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_1_getModifiers", // alternative name of method
  -1, // altlabelHashCode
  Member_methods_getModifiers__I_args, // the arguments
  0, //arguments count
  Member_methods_getModifiers__I_exceptions, // the declared exceptions
  Member_MetainfoWrapper::Member_method_getModifiers__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Member_methods_getName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Member_methods_getName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Member_method_getName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiAbstract | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_2_getName", // alternative name of method
  -1, // altlabelHashCode
  Member_methods_getName__LRString__args, // the arguments
  0, //arguments count
  Member_methods_getName__LRString__exceptions, // the declared exceptions
  Member_MetainfoWrapper::Member_method_getName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Member_methods[] = 
{
  &Member_method_GetClass__L_acdk_lang_RClass_,
  &Member_method_getDeclaringClass__LRClass_,
  &Member_method_getModifiers__I,
  &Member_method_getName__LRString_,
  0
};


struct Member_MetaInfoInitializer
{  Member_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Member::clazzInfo();
    ci->fields =  _Member_fields;
    ci->methods =  _Member_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Member_MetaInfoInitializer Member_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Method_create_array(int length)
{
  return new ObjectArrayImpl<RMethod>(length);
}

//static
::acdk::lang::RObject
Method_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Method_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Method::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_encodeOperatorToFuncName_INLRString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Method::encodeOperatorToFuncName(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Method::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_getAlternativeName__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::getAlternativeName();
    else
        ret = (::acdk::lang::RObject)This->getAlternativeName();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_getExceptionTypes__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::getExceptionTypes();
    else
        ret = (::acdk::lang::RObject)This->getExceptionTypes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_getParameter_I_LRParameter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::getParameter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getParameter(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_getParameter_INLRString__LRParameter__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::getParameter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getParameter(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_getParameterCount__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Method::getParameterCount();
    else
      ret = This->getParameterCount();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_getParameterTypes__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::getParameterTypes();
    else
        ret = (::acdk::lang::RObject)This->getParameterTypes();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_getParameters__LRParameterArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::getParameters();
    else
        ret = (::acdk::lang::RObject)This->getParameters();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_getReturnType__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::getReturnType();
    else
        ret = (::acdk::lang::RObject)This->getReturnType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Method::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_invoke_INLRObject_INLRObjectArray__LRObject__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::invoke(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObjectArray>(args[1], dc));
    else
        ret = (::acdk::lang::RObject)This->invoke(::acdk::lang::dmi::castTo< RObject>(args[0], dc), ::acdk::lang::dmi::castTo< RObjectArray>(args[1], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_toIndentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::toIndentifier();
    else
        ret = (::acdk::lang::RObject)This->toIndentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_toTypeString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Method_method_toTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Method* This = dmi_cast<Method>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Method::toTypeString();
    else
        ret = (::acdk::lang::RObject)This->toTypeString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Method_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_g_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Method_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Method_methods_encodeOperatorToFuncName_INLRString__LRString__arg_opchars = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "opchars", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_encodeOperatorToFuncName_INLRString__LRString__args[] = 
{
  &Method_methods_encodeOperatorToFuncName_INLRString__LRString__arg_opchars,
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_encodeOperatorToFuncName_INLRString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_encodeOperatorToFuncName_INLRString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "encodeOperatorToFuncName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_f_encodeOperatorToFuncName", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_encodeOperatorToFuncName_INLRString__LRString__args, // the arguments
  0, //arguments count
  Method_methods_encodeOperatorToFuncName_INLRString__LRString__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_encodeOperatorToFuncName_INLRString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Method_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_equals_INLRObject__Z_args[] = 
{
  &Method_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_8_equals", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Method_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_getAlternativeName__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_getAlternativeName__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_getAlternativeName__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getAlternativeName", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_0_getAlternativeName", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_getAlternativeName__LRString__args, // the arguments
  0, //arguments count
  Method_methods_getAlternativeName__LRString__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_getAlternativeName__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_getExceptionTypes__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_getExceptionTypes__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_getExceptionTypes__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getExceptionTypes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_3_getExceptionTypes", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_getExceptionTypes__LRClassArray__args, // the arguments
  0, //arguments count
  Method_methods_getExceptionTypes__LRClassArray__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_getExceptionTypes__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Method_methods_getParameter_I_LRParameter__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_getParameter_I_LRParameter__args[] = 
{
  &Method_methods_getParameter_I_LRParameter__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_getParameter_I_LRParameter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_getParameter_I_LRParameter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameter::clazzInfo(), // return type
  "_6_getParameter", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_getParameter_I_LRParameter__args, // the arguments
  0, //arguments count
  Method_methods_getParameter_I_LRParameter__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_getParameter_I_LRParameter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Method_methods_getParameter_INLRString__LRParameter__arg_idx = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "idx", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_getParameter_INLRString__LRParameter__args[] = 
{
  &Method_methods_getParameter_INLRString__LRParameter__arg_idx,
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_getParameter_INLRString__LRParameter__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_getParameter_INLRString__LRParameter_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameter", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameter::clazzInfo(), // return type
  "_7_getParameter", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_getParameter_INLRString__LRParameter__args, // the arguments
  0, //arguments count
  Method_methods_getParameter_INLRString__LRParameter__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_getParameter_INLRString__LRParameter__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_getParameterCount__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_getParameterCount__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_getParameterCount__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameterCount", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_4_getParameterCount", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_getParameterCount__I_args, // the arguments
  0, //arguments count
  Method_methods_getParameterCount__I_exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_getParameterCount__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_getParameterTypes__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_getParameterTypes__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_getParameterTypes__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameterTypes", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_2_getParameterTypes", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_getParameterTypes__LRClassArray__args, // the arguments
  0, //arguments count
  Method_methods_getParameterTypes__LRClassArray__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_getParameterTypes__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_getParameters__LRParameterArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_getParameters__LRParameterArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_getParameters__LRParameterArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParameters", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RParameterArray::clazzInfo(), // return type
  "_5_getParameters", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_getParameters__LRParameterArray__args, // the arguments
  0, //arguments count
  Method_methods_getParameters__LRParameterArray__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_getParameters__LRParameterArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_getReturnType__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_getReturnType__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_getReturnType__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getReturnType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_1_getReturnType", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_getReturnType__LRClass__args, // the arguments
  0, //arguments count
  Method_methods_getReturnType__LRClass__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_getReturnType__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Method_methods_hashCode__I_exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Method_methods_invoke_INLRObject_INLRObjectArray__LRObject__arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo Method_methods_invoke_INLRObject_INLRObjectArray__LRObject__arg_args = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "args", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObjectArray::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_invoke_INLRObject_INLRObjectArray__LRObject__args[] = 
{
  &Method_methods_invoke_INLRObject_INLRObjectArray__LRObject__arg_obj,
  &Method_methods_invoke_INLRObject_INLRObjectArray__LRObject__arg_args,
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_invoke_INLRObject_INLRObjectArray__LRObject__exceptions[] =
{
  ::acdk::lang::RIllegalAccessException::clazzInfo(), 
  ::acdk::lang::RIllegalArgumentException::clazzInfo(), 
  ::acdk::lang::reflect::RInvocationTargetException::clazzInfo(), 
  0
};

void Method_invoke_INLRObject_INLRObjectArray__LRObject__throwDispatch(IN(::acdk::lang::RThrowable) ex)
{
 if (instanceof(ex, ::acdk::lang::IllegalAccessException) == true)
    THROW_INSTANCE( ::acdk::lang::RIllegalAccessException(ex));
 if (instanceof(ex, ::acdk::lang::IllegalArgumentException) == true)
    THROW_INSTANCE( ::acdk::lang::RIllegalArgumentException(ex));
 if (instanceof(ex, ::acdk::lang::reflect::InvocationTargetException) == true)
    THROW_INSTANCE( ::acdk::lang::reflect::RInvocationTargetException(ex));
}

::acdk::lang::dmi::ClazzMethodInfo Method_method_invoke_INLRObject_INLRObjectArray__LRObject_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "invoke", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo(), // return type
  "_e_invoke", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_invoke_INLRObject_INLRObjectArray__LRObject__args, // the arguments
  0, //arguments count
  Method_methods_invoke_INLRObject_INLRObjectArray__LRObject__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_invoke_INLRObject_INLRObjectArray__LRObject__dispatch, // invoke this method
  Method_invoke_INLRObject_INLRObjectArray__LRObject__throwDispatch, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_toIndentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_toIndentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_toIndentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toIndentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_toIndentifier", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_toIndentifier__LRString__args, // the arguments
  0, //arguments count
  Method_methods_toIndentifier__LRString__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_toIndentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_toString", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Method_methods_toString__LRString__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Method_methods_toTypeString_I_LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_toTypeString_I_LRString__args[] = 
{
  &Method_methods_toTypeString_I_LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_toTypeString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_toTypeString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_toTypeString_I_LRString__args, // the arguments
  0, //arguments count
  Method_methods_toTypeString_I_LRString__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_toTypeString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Method_methods_toTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Method_methods_toTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Method_method_toTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Method_methods_toTypeString__LRString__args, // the arguments
  0, //arguments count
  Method_methods_toTypeString__LRString__exceptions, // the declared exceptions
  Method_MetainfoWrapper::Method_method_toTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Method_methods[] = 
{
  &Method_method_GetClass__L_acdk_lang_RClass_,
  &Method_method_encodeOperatorToFuncName_INLRString__LRString_,
  &Method_method_equals_INLRObject__Z,
  &Method_method_getAlternativeName__LRString_,
  &Method_method_getExceptionTypes__LRClassArray_,
  &Method_method_getParameter_I_LRParameter_,
  &Method_method_getParameter_INLRString__LRParameter_,
  &Method_method_getParameterCount__I,
  &Method_method_getParameterTypes__LRClassArray_,
  &Method_method_getParameters__LRParameterArray_,
  &Method_method_getReturnType__LRClass_,
  &Method_method_hashCode__I,
  &Method_method_invoke_INLRObject_INLRObjectArray__LRObject_,
  &Method_method_toIndentifier__LRString_,
  &Method_method_toString__LRString_,
  &Method_method_toTypeString_I_LRString_,
  &Method_method_toTypeString__LRString_,
  0
};


struct Method_MetaInfoInitializer
{  Method_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Method::clazzInfo();
    ci->fields =  _Method_fields;
    ci->methods =  _Method_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Method_MetaInfoInitializer Method_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 

using namespace acdk::lang;

//static
::acdk::lang::RObject
Parameter_create_array(int length)
{
  return new ObjectArrayImpl<RParameter>(length);
}

//static
::acdk::lang::RObject
Parameter_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Parameter_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parameter_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Parameter::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parameter_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parameter* This = dmi_cast<Parameter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Parameter::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parameter_method_getType__LRClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parameter* This = dmi_cast<Parameter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Parameter::getType();
    else
        ret = (::acdk::lang::RObject)This->getType();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parameter_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parameter* This = dmi_cast<Parameter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Parameter::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parameter_method_toIndentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parameter* This = dmi_cast<Parameter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Parameter::toIndentifier();
    else
        ret = (::acdk::lang::RObject)This->toIndentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parameter_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parameter* This = dmi_cast<Parameter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Parameter::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parameter_method_toTypeString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parameter* This = dmi_cast<Parameter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Parameter::toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Parameter_method_toTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Parameter* This = dmi_cast<Parameter>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Parameter::toTypeString();
    else
        ret = (::acdk::lang::RObject)This->toTypeString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Parameter_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parameter_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parameter_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_7_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Parameter_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Parameter_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Parameter_MetainfoWrapper::Parameter_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parameter_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parameter_methods_equals_INLRObject__Z_args[] = 
{
  &Parameter_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parameter_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_1_equals", // alternative name of method
  -1, // altlabelHashCode
  Parameter_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Parameter_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Parameter_MetainfoWrapper::Parameter_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parameter_methods_getType__LRClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter_methods_getType__LRClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parameter_method_getType__LRClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getType", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClass::clazzInfo(), // return type
  "_0_getType", // alternative name of method
  -1, // altlabelHashCode
  Parameter_methods_getType__LRClass__args, // the arguments
  0, //arguments count
  Parameter_methods_getType__LRClass__exceptions, // the declared exceptions
  Parameter_MetainfoWrapper::Parameter_method_getType__LRClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parameter_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parameter_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_2_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Parameter_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Parameter_methods_hashCode__I_exceptions, // the declared exceptions
  Parameter_MetainfoWrapper::Parameter_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parameter_methods_toIndentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter_methods_toIndentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parameter_method_toIndentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toIndentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_4_toIndentifier", // alternative name of method
  -1, // altlabelHashCode
  Parameter_methods_toIndentifier__LRString__args, // the arguments
  0, //arguments count
  Parameter_methods_toIndentifier__LRString__exceptions, // the declared exceptions
  Parameter_MetainfoWrapper::Parameter_method_toIndentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parameter_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parameter_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_3_toString", // alternative name of method
  -1, // altlabelHashCode
  Parameter_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Parameter_methods_toString__LRString__exceptions, // the declared exceptions
  Parameter_MetainfoWrapper::Parameter_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Parameter_methods_toTypeString_I_LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parameter_methods_toTypeString_I_LRString__args[] = 
{
  &Parameter_methods_toTypeString_I_LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter_methods_toTypeString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parameter_method_toTypeString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_5_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Parameter_methods_toTypeString_I_LRString__args, // the arguments
  0, //arguments count
  Parameter_methods_toTypeString_I_LRString__exceptions, // the declared exceptions
  Parameter_MetainfoWrapper::Parameter_method_toTypeString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Parameter_methods_toTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Parameter_methods_toTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Parameter_method_toTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_6_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Parameter_methods_toTypeString__LRString__args, // the arguments
  0, //arguments count
  Parameter_methods_toTypeString__LRString__exceptions, // the declared exceptions
  Parameter_MetainfoWrapper::Parameter_method_toTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Parameter_methods[] = 
{
  &Parameter_method_GetClass__L_acdk_lang_RClass_,
  &Parameter_method_equals_INLRObject__Z,
  &Parameter_method_getType__LRClass_,
  &Parameter_method_hashCode__I,
  &Parameter_method_toIndentifier__LRString_,
  &Parameter_method_toString__LRString_,
  &Parameter_method_toTypeString_I_LRString_,
  &Parameter_method_toTypeString__LRString_,
  0
};


struct Parameter_MetaInfoInitializer
{  Parameter_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Parameter::clazzInfo();
    ci->fields =  _Parameter_fields;
    ci->methods =  _Parameter_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Parameter_MetaInfoInitializer Parameter_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


namespace acdk { 
namespace lang { 
namespace reflect { 


//static
::acdk::lang::RObject
Unit_create_array(int length)
{
  return new ObjectArrayImpl<RUnit>(length);
}

//static
::acdk::lang::RObject
Unit_create_array_array(int firstLength, int secondLength)
{
  return Nil;//not implemented yet
}
class Unit_MetainfoWrapper 
{

public:
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_GetClass__L_acdk_lang_RClass__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Unit::GetClass();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_compareTo_INLRUnit__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Unit::compareTo(::acdk::lang::dmi::castTo< RUnit>(args[0], dc));
    else
      ret = This->compareTo(::acdk::lang::dmi::castTo< RUnit>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_equals_INLRObject__Z_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Unit::equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    else
      ret = This->equals(::acdk::lang::dmi::castTo< RObject>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_getChilds_Z_LRUnitArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::getChilds(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->getChilds(::acdk::lang::dmi::castTo< bool>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_getChilds__LRUnitArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::getChilds();
    else
        ret = (::acdk::lang::RObject)This->getChilds();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_getClasses__LRClassArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::getClasses();
    else
        ret = (::acdk::lang::RObject)This->getClasses();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_getEnumerations__LREnumerationArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::getEnumerations();
    else
        ret = (::acdk::lang::RObject)This->getEnumerations();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_getParent__LRUnit__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::getParent();
    else
        ret = (::acdk::lang::RObject)This->getParent();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_getUnit_INLRString__LRUnit__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Unit::getUnit(::acdk::lang::dmi::castTo< RString>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_getUnits__LRUnitArray__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    ret = (::acdk::lang::RObject)Unit::getUnits();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_hashCode__I_dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
      ret = This->Unit::hashCode();
    else
      ret = This->hashCode();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_toIndentifier__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::toIndentifier();
    else
        ret = (::acdk::lang::RObject)This->toIndentifier();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_toString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::toString();
    else
        ret = (::acdk::lang::RObject)This->toString();
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_toTypeString_I_LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    else
        ret = (::acdk::lang::RObject)This->toTypeString(::acdk::lang::dmi::castTo< int>(args[0], dc));
    return methinf;
  }
  static const ::acdk::lang::dmi::ClazzMethodInfo* 
  Unit_method_toTypeString__LRString__dispatch(::acdk::lang::Object* This_, IN(::acdk::lang::RString) fname, ::acdk::lang::dmi::ScriptVar& ret, ::acdk::lang::dmi::ScriptVarArray& args, ::acdk::lang::dmi::DmiClient& dc, IN(::acdk::lang::RStringArray) namedArgs, int flags, const ::acdk::lang::dmi::ClazzInfo* clazzinfo, const ::acdk::lang::dmi::ClazzMethodInfo* methinf)
  {
    Unit* This = dmi_cast<Unit>(This_);
    if (flags & ::acdk::lang::dmi::MiIvNoWeakBind)
        ret = (::acdk::lang::RObject)This->Unit::toTypeString();
    else
        ret = (::acdk::lang::RObject)This->toTypeString();
    return methinf;
  }
};

::acdk::lang::dmi::ClazzFieldInfo* _Unit_fields[] = 
{
  0
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_GetClass__L_acdk_lang_RClass__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_GetClass__L_acdk_lang_RClass__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_GetClass__L_acdk_lang_RClass_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "GetClass", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::RClass::clazzInfo(), // return type
  "_e_GetClass", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_GetClass__L_acdk_lang_RClass__args, // the arguments
  0, //arguments count
  Unit_methods_GetClass__L_acdk_lang_RClass__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_GetClass__L_acdk_lang_RClass__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Unit_methods_compareTo_INLRUnit__I_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RUnit::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_compareTo_INLRUnit__I_args[] = 
{
  &Unit_methods_compareTo_INLRUnit__I_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_compareTo_INLRUnit__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_compareTo_INLRUnit__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "compareTo", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_8_compareTo", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_compareTo_INLRUnit__I_args, // the arguments
  0, //arguments count
  Unit_methods_compareTo_INLRUnit__I_exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_compareTo_INLRUnit__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Unit_methods_equals_INLRObject__Z_arg_obj = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "obj", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RObject::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_equals_INLRObject__Z_args[] = 
{
  &Unit_methods_equals_INLRObject__Z_arg_obj,
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_equals_INLRObject__Z_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_equals_INLRObject__Z = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "equals", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz(), // return type
  "_7_equals", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_equals_INLRObject__Z_args, // the arguments
  0, //arguments count
  Unit_methods_equals_INLRObject__Z_exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_equals_INLRObject__Z_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Unit_methods_getChilds_Z_LRUnitArray__arg_recursive = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "recursive", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getBoolClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_getChilds_Z_LRUnitArray__args[] = 
{
  &Unit_methods_getChilds_Z_LRUnitArray__arg_recursive,
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_getChilds_Z_LRUnitArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_getChilds_Z_LRUnitArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getChilds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RUnitArray::clazzInfo(), // return type
  "_4_getChilds", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_getChilds_Z_LRUnitArray__args, // the arguments
  0, //arguments count
  Unit_methods_getChilds_Z_LRUnitArray__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_getChilds_Z_LRUnitArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_getChilds__LRUnitArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_getChilds__LRUnitArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_getChilds__LRUnitArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo,// class flags, like static, Constructor
  0, //AttributesRes
  "getChilds", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RUnitArray::clazzInfo(), // return type
  "_5_getChilds", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_getChilds__LRUnitArray__args, // the arguments
  0, //arguments count
  Unit_methods_getChilds__LRUnitArray__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_getChilds__LRUnitArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_getClasses__LRClassArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_getClasses__LRClassArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_getClasses__LRClassArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getClasses", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RClassArray::clazzInfo(), // return type
  "_2_getClasses", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_getClasses__LRClassArray__args, // the arguments
  0, //arguments count
  Unit_methods_getClasses__LRClassArray__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_getClasses__LRClassArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_getEnumerations__LREnumerationArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_getEnumerations__LREnumerationArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_getEnumerations__LREnumerationArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getEnumerations", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  REnumerationArray::clazzInfo(), // return type
  "_6_getEnumerations", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_getEnumerations__LREnumerationArray__args, // the arguments
  0, //arguments count
  Unit_methods_getEnumerations__LREnumerationArray__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_getEnumerations__LREnumerationArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_getParent__LRUnit__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_getParent__LRUnit__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_getParent__LRUnit_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getParent", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RUnit::clazzInfo(), // return type
  "_3_getParent", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_getParent__LRUnit__args, // the arguments
  0, //arguments count
  Unit_methods_getParent__LRUnit__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_getParent__LRUnit__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Unit_methods_getUnit_INLRString__LRUnit__arg_unitname = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiIn, 
  0, //AttributesRes
  "unitname", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_getUnit_INLRString__LRUnit__args[] = 
{
  &Unit_methods_getUnit_INLRString__LRUnit__arg_unitname,
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_getUnit_INLRString__LRUnit__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_getUnit_INLRString__LRUnit_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnit", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RUnit::clazzInfo(), // return type
  "_0_getUnit", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_getUnit_INLRString__LRUnit__args, // the arguments
  0, //arguments count
  Unit_methods_getUnit_INLRString__LRUnit__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_getUnit_INLRString__LRUnit__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_getUnits__LRUnitArray__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_getUnits__LRUnitArray__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_getUnits__LRUnitArray_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiStatic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "getUnits", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RUnitArray::clazzInfo(), // return type
  "_1_getUnits", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_getUnits__LRUnitArray__args, // the arguments
  0, //arguments count
  Unit_methods_getUnits__LRUnitArray__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_getUnits__LRUnitArray__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_hashCode__I_args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_hashCode__I_exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_hashCode__I = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "hashCode", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz(), // return type
  "_9_hashCode", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_hashCode__I_args, // the arguments
  0, //arguments count
  Unit_methods_hashCode__I_exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_hashCode__I_dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_toIndentifier__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_toIndentifier__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_toIndentifier__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toIndentifier", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_b_toIndentifier", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_toIndentifier__LRString__args, // the arguments
  0, //arguments count
  Unit_methods_toIndentifier__LRString__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_toIndentifier__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_toString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_toString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_toString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_a_toString", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_toString__LRString__args, // the arguments
  0, //arguments count
  Unit_methods_toString__LRString__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_toString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo Unit_methods_toTypeString_I_LRString__arg_format = 
{
  ::acdk::lang::dmi::MiMethodArgInfo | ::acdk::lang::dmi::MiAiHasDefaultInit, 
  0, //AttributesRes
  "format", // name of arg
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  ::acdk::lang::dmi::ClazzInfo::getIntClazz() // type or arg
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_toTypeString_I_LRString__args[] = 
{
  &Unit_methods_toTypeString_I_LRString__arg_format,
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_toTypeString_I_LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_toTypeString_I_LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual | ::acdk::lang::dmi::MiMiOrgPoly,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_c_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_toTypeString_I_LRString__args, // the arguments
  0, //arguments count
  Unit_methods_toTypeString_I_LRString__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_toTypeString_I_LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodArgInfo* Unit_methods_toTypeString__LRString__args[] = 
{
  0
};

::acdk::lang::dmi::ClazzInfo* Unit_methods_toTypeString__LRString__exceptions[] =
{
  0
};

::acdk::lang::dmi::ClazzMethodInfo Unit_method_toTypeString__LRString_ = 
{
  ::acdk::lang::dmi::MiPublic | ::acdk::lang::dmi::MiMethodInfo | ::acdk::lang::dmi::MiMiVirtual,// class flags, like static, Constructor
  0, //AttributesRes
  "toTypeString", // name of method
  -1, // hashCode
  "", // ns
  0, // _scopeParent
  0, // _nextSibling
  RString::clazzInfo(), // return type
  "_d_toTypeString", // alternative name of method
  -1, // altlabelHashCode
  Unit_methods_toTypeString__LRString__args, // the arguments
  0, //arguments count
  Unit_methods_toTypeString__LRString__exceptions, // the declared exceptions
  Unit_MetainfoWrapper::Unit_method_toTypeString__LRString__dispatch, // invoke this method
  ::acdk::lang::dmi::ClazzMethodInfo::DefaultDispatchThrowableFunc, // dispatch throwing exceptions
  0 // cached method signature hash
};

::acdk::lang::dmi::ClazzMethodInfo* _Unit_methods[] = 
{
  &Unit_method_GetClass__L_acdk_lang_RClass_,
  &Unit_method_compareTo_INLRUnit__I,
  &Unit_method_equals_INLRObject__Z,
  &Unit_method_getChilds_Z_LRUnitArray_,
  &Unit_method_getChilds__LRUnitArray_,
  &Unit_method_getClasses__LRClassArray_,
  &Unit_method_getEnumerations__LREnumerationArray_,
  &Unit_method_getParent__LRUnit_,
  &Unit_method_getUnit_INLRString__LRUnit_,
  &Unit_method_getUnits__LRUnitArray_,
  &Unit_method_hashCode__I,
  &Unit_method_toIndentifier__LRString_,
  &Unit_method_toString__LRString_,
  &Unit_method_toTypeString_I_LRString_,
  &Unit_method_toTypeString__LRString_,
  0
};


struct Unit_MetaInfoInitializer
{  Unit_MetaInfoInitializer()
  {
    ::acdk::lang::dmi::ClazzInfo* ci = Unit::clazzInfo();
    ci->fields =  _Unit_fields;
    ci->methods =  _Unit_methods;
    ci->_scopeParent = acdk_lang_reflect_unitInfo.getMetaInfo();
    ci->registerClazzInfo(); // make sure clazzinfo is registered
    ci->_resolveMemberParents();
    ci->flags |= ::acdk::lang::dmi::MiResolved;
  }
};
Unit_MetaInfoInitializer Unit_MetaInfoInitializer_staticinstance__;


} // namespace acdk
} // namespace lang
} // namespace reflect


#if defined(ACDK_OS_WIN32)
// force to create an import lib on windows platforms
void __declspec(dllexport) reflect_dummyExportFunc() {}
#endif

